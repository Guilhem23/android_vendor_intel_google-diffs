From 40c1042f222b626a885630951ad673bf5ec4e7d8 Mon Sep 17 00:00:00 2001
From: Marie-Cecile Afantenos <marie.cecile.afantenos@intel.com>
Date: Mon, 24 Jun 2013 19:38:06 +0200
Subject: [PATCH 3/3] [PDK MR2 AOSP] Adaptation of patch to improve recovery log and behavior.

BZ: 113890

Replace conflicting patches:
0005-recovery.cpp-correction-from-3-patches.patch
0007-Fix-KW-issue-in-recovery.patch
0008-Improve-logs-for-ota-update-when-the-board-reboots-i.patch

Change-Id: Ie00efb6727b9ca96395bb5bdef5c6d9d5294d90d
Signed-off-by: Florent Auger <florent.auger@intel.com>
Signed-off-by: Marie-Cecile Afantenos <marie.cecile.afantenos@intel.com>
---
 install.cpp  |    9 ++++++---
 recovery.cpp |   37 +++++++++++++++++++++++++++++++++++--
 ui.cpp       |   15 +++++++++++----
 ui.h         |    8 ++++++++
 verifier.cpp |   27 ++++++++++++++++-----------
 5 files changed, 76 insertions(+), 20 deletions(-)

diff --git a/install.cpp b/install.cpp
index 0f3298f..7562e1b 100644
--- a/install.cpp
+++ b/install.cpp
@@ -63,6 +63,8 @@ try_update_binary(const char *path, ZipArchive *zip, int* wipe_cache) {
         LOGE("Can't make %s\n", binary);
         return INSTALL_ERROR;
     }
+
+    LOGI("Extract and run update-binary\n");
     bool ok = mzExtractZipEntryToFile(zip, binary_entry, fd);
     close(fd);
     mzCloseZipArchive(zip);
@@ -122,7 +124,7 @@ try_update_binary(const char *path, ZipArchive *zip, int* wipe_cache) {
     if (pid == 0) {
         close(pipefd[0]);
         execv(binary, (char* const*)args);
-        fprintf(stdout, "E:Can't run %s (%s)\n", binary, strerror(errno));
+        LOGE("Can't run %s (%s)\n", binary, strerror(errno));
         _exit(-1);
     }
     close(pipefd[1]);
@@ -180,7 +182,7 @@ really_install_package(const char *path, int* wipe_cache)
     ui->SetBackground(RecoveryUI::INSTALLING_UPDATE);
     ui->Print("Finding update package...\n");
     ui->SetProgressType(RecoveryUI::INDETERMINATE);
-    LOGI("Update location: %s\n", path);
+    LOGI("Update package location: %s\n", path);
 
     if (ensure_path_mounted(path) != 0) {
         LOGE("Can't mount %s\n", path);
@@ -223,6 +225,7 @@ really_install_package(const char *path, int* wipe_cache)
     /* Verify and install the contents of the package.
      */
     ui->Print("Installing update...\n");
+    LOGI("Installing update %s...\n", path);
     return try_update_binary(path, &zip, wipe_cache);
 }
 
@@ -234,7 +237,7 @@ install_package(const char* path, int* wipe_cache, const char* install_file)
         fputs(path, install_log);
         fputc('\n', install_log);
     } else {
-        LOGE("failed to open last_install: %s\n", strerror(errno));
+        LOGE("failed to open last_install log (%s)\n", strerror(errno));
     }
     int result = really_install_package(path, wipe_cache);
     if (install_log) {
diff --git a/recovery.cpp b/recovery.cpp
index 2e4d893..5536bee 100644
--- a/recovery.cpp
+++ b/recovery.cpp
@@ -64,6 +64,7 @@ static const struct option OPTIONS[] = {
 static const char *COMMAND_FILE = "/cache/recovery/command";
 static const char *INTENT_FILE = "/cache/recovery/intent";
 static const char *LOG_FILE = "/cache/recovery/log";
+static const char *REC_FAIL_FILE = "/cache/recovery/recoveryfail";
 static const char *LAST_INSTALL_FILE = "/cache/recovery/last_install";
 static const char *LOCALE_FILE = "/cache/recovery/last_locale";
 static const char *CACHE_ROOT = "/cache";
@@ -157,7 +158,8 @@ fopen_path(const char *path, const char *mode) {
 static void
 check_and_fclose(FILE *fp, const char *name) {
     fflush(fp);
-    if (ferror(fp)) LOGE("Error in %s\n(%s)\n", name, strerror(errno));
+    if (ferror(fp))
+        LOGE("Error in %s\n(%s)\n", name, strerror(errno));
     fclose(fp);
 }
 
@@ -277,6 +279,18 @@ rotate_last_logs(int max) {
     }
 }
 
+
+static void create_recoveryfail_file(void)
+{
+    FILE *recfail = fopen_path(REC_FAIL_FILE, "w");
+    if (recfail == NULL) {
+        LOGE("Can't create fail file %s\n", REC_FAIL_FILE);
+    } else {
+        LOGI("Recovery fail file %s created\n", REC_FAIL_FILE);
+        fclose(recfail);
+    }
+
+}
 // clear the recovery command and prepare to boot a (hopefully working) system,
 // copy our log file to cache as well (for the system to read), and
 // record any intent we were asked to communicate back to the system.
@@ -934,7 +948,7 @@ main(int argc, char **argv) {
             char* modified_path = (char*)malloc(len);
             strlcpy(modified_path, "/cache/", len);
             strlcat(modified_path, update_package+6, len);
-            printf("(replacing path \"%s\" with \"%s\")\n",
+            LOGI("Replacing path \"%s\" with \"%s\"\n",
                    update_package, modified_path);
             update_package = modified_path;
         }
@@ -947,13 +961,17 @@ main(int argc, char **argv) {
     int status = INSTALL_SUCCESS;
 
     if (update_package != NULL) {
+        LOGI("Install package %s\n", update_package);
         status = install_package(update_package, &wipe_cache, TEMPORARY_INSTALL_FILE);
         if (status == INSTALL_SUCCESS && wipe_cache) {
+            LOGI("Package %s installed. Erase cache volume\n", update_package);
             if (erase_volume("/cache")) {
                 LOGE("Cache wipe (requested by package) failed.");
             }
         }
         if (status != INSTALL_SUCCESS) {
+            LOGE("Install of %s failed with status %d\n", update_package, status);
+            create_recoveryfail_file();
             ui->Print("Installation aborted.\n");
 
             // If this is an eng or userdebug build, then automatically
@@ -965,6 +983,10 @@ main(int argc, char **argv) {
                 ui->ShowText(true);
             }
         }
+
+        if (unlink(update_package) < 0 && errno != ENOENT) {
+            LOGE("Delete %s failed (%s)\n", update_package, strerror(errno));
+        }
     } else if (wipe_data) {
         if (device->WipeData()) status = INSTALL_ERROR;
         if (erase_volume("/data")) status = INSTALL_ERROR;
@@ -979,15 +1001,26 @@ main(int argc, char **argv) {
     }
 
     if (status == INSTALL_ERROR || status == INSTALL_CORRUPT) {
+        LOGE("Installation failed with status %d\n", status);
         ui->SetBackground(RecoveryUI::ERROR);
     }
     if (status != INSTALL_SUCCESS || ui->IsTextVisible()) {
+        if (status == INSTALL_NONE) {
+            // Set to default timeout
+            LOGI("Set timeout to %d s.\n", UI_WAIT_KEY_TIMEOUT_SEC);
+            ui->SetTimeout(UI_WAIT_KEY_TIMEOUT_SEC);
+        } else {
+            LOGI("Set timeout to %d s.\n", UI_WAIT_ERROR_TIMEOUT_SEC);
+            ui->SetTimeout(UI_WAIT_ERROR_TIMEOUT_SEC);
+        }
         prompt_and_wait(device, status);
     }
 
     // Otherwise, get ready to boot the main system...
     finish_recovery(send_intent);
     ui->Print("Rebooting...\n");
+
+    LOGI("Rebooting flag=0\n");
     android_reboot(ANDROID_RB_RESTART, 0, 0);
     return EXIT_SUCCESS;
 }
diff --git a/ui.cpp b/ui.cpp
index 65f4028..dcf6f4f 100644
--- a/ui.cpp
+++ b/ui.cpp
@@ -36,7 +36,6 @@
 #include "screen_ui.h"
 #include "ui.h"
 
-#define UI_WAIT_KEY_TIMEOUT_SEC    120
 
 // There's only (at most) one of these objects, and global callbacks
 // (for pthread_create, and the input event system) need to find it,
@@ -49,6 +48,10 @@ RecoveryUI::RecoveryUI() :
     key_down_time(0) {
     pthread_mutex_init(&key_queue_mutex, NULL);
     pthread_cond_init(&key_queue_cond, NULL);
+
+    // UI timeout is set to UI_WAIT_KEY_TIMEOUT_SEC by default
+    ui_timeout = UI_WAIT_KEY_TIMEOUT_SEC;
+
     self = this;
 }
 
@@ -177,15 +180,15 @@ int RecoveryUI::WaitKey()
 {
     pthread_mutex_lock(&key_queue_mutex);
 
-    // Time out after UI_WAIT_KEY_TIMEOUT_SEC, unless a USB cable is
-    // plugged in.
+    // Time out after UI_WAIT_KEY_TIMEOUT_SEC or UI_WAIT_ERROR_TIMEOUT_SEC,
+    // unless a USB cable is plugged in.
     do {
         struct timeval now;
         struct timespec timeout;
         gettimeofday(&now, NULL);
         timeout.tv_sec = now.tv_sec;
         timeout.tv_nsec = now.tv_usec * 1000;
-        timeout.tv_sec += UI_WAIT_KEY_TIMEOUT_SEC;
+        timeout.tv_sec += ui_timeout;
 
         int rc = 0;
         while (key_queue_len == 0 && rc != ETIMEDOUT) {
@@ -240,5 +243,9 @@ RecoveryUI::KeyAction RecoveryUI::CheckKey(int key) {
     return RecoveryUI::ENQUEUE;
 }
 
+void RecoveryUI::SetTimeout(int timeout) {
+    ui_timeout = timeout;
+}
+
 void RecoveryUI::NextCheckKeyIsLong(bool is_long_press) {
 }
diff --git a/ui.h b/ui.h
index aca7b7b..e549873 100644
--- a/ui.h
+++ b/ui.h
@@ -21,6 +21,10 @@
 #include <pthread.h>
 #include <time.h>
 
+// Define timeout to 10 seconds
+#define UI_WAIT_ERROR_TIMEOUT_SEC   10
+#define UI_WAIT_KEY_TIMEOUT_SEC	120
+
 // Abstract class for controlling the user interface during recovery.
 class RecoveryUI {
   public:
@@ -38,6 +42,9 @@ class RecoveryUI {
     enum Icon { NONE, INSTALLING_UPDATE, ERASING, NO_COMMAND, ERROR };
     virtual void SetBackground(Icon icon) = 0;
 
+    // Set timeout before reboot.
+    virtual void SetTimeout(int timeout);
+
     // --- progress indicator ---
     enum ProgressType { EMPTY, INDETERMINATE, DETERMINATE };
     virtual void SetProgressType(ProgressType determinate) = 0;
@@ -110,6 +117,7 @@ private:
     int key_last_down;                 // under key_queue_mutex
     clock_t key_down_time;             // under key_queue_mutex
     int rel_sum;
+    int ui_timeout;
 
     pthread_t input_t;
 
diff --git a/verifier.cpp b/verifier.cpp
index 5f4c981..3f44ee2 100644
--- a/verifier.cpp
+++ b/verifier.cpp
@@ -33,6 +33,9 @@ extern RecoveryUI* ui;
 //
 // Return VERIFY_SUCCESS, VERIFY_FAILURE (if any error is encountered
 // or no key matches the signature).
+#define FOOTER_SIZE 6
+#define EOCD_HEADER_SIZE 22
+#define BUFFER_SIZE 4096
 
 int verify_file(const char* path, const RSAPublicKey *pKeys, unsigned int numKeys) {
     ui->SetProgress(0.0);
@@ -52,8 +55,6 @@ int verify_file(const char* path, const RSAPublicKey *pKeys, unsigned int numKey
     // us how far back from the end we have to start reading to find
     // the whole comment.
 
-#define FOOTER_SIZE 6
-
     if (fseek(f, -FOOTER_SIZE, SEEK_END) != 0) {
         LOGE("failed to seek in %s (%s)\n", path, strerror(errno));
         fclose(f);
@@ -68,6 +69,7 @@ int verify_file(const char* path, const RSAPublicKey *pKeys, unsigned int numKey
     }
 
     if (footer[2] != 0xff || footer[3] != 0xff) {
+        LOGE("end of footer from %s not 0xFFFF (%s)\n", path, strerror(errno));
         fclose(f);
         return VERIFY_FAILURE;
     }
@@ -79,13 +81,11 @@ int verify_file(const char* path, const RSAPublicKey *pKeys, unsigned int numKey
 
     if (signature_start - FOOTER_SIZE < RSANUMBYTES) {
         // "signature" block isn't big enough to contain an RSA block.
-        LOGE("signature is too short\n");
+        LOGE("signature from %s is too short\n", path);
         fclose(f);
         return VERIFY_FAILURE;
     }
 
-#define EOCD_HEADER_SIZE 22
-
     // The end-of-central-directory record is 22 bytes plus any
     // comment length.
     size_t eocd_size = comment_size + EOCD_HEADER_SIZE;
@@ -118,7 +118,7 @@ int verify_file(const char* path, const RSAPublicKey *pKeys, unsigned int numKey
     // magic number $50 $4b $05 $06.
     if (eocd[0] != 0x50 || eocd[1] != 0x4b ||
         eocd[2] != 0x05 || eocd[3] != 0x06) {
-        LOGE("signature length doesn't match EOCD marker\n");
+        LOGE("signature length from %s doesn't match EOCD marker\n", path);
         fclose(f);
         return VERIFY_FAILURE;
     }
@@ -137,8 +137,6 @@ int verify_file(const char* path, const RSAPublicKey *pKeys, unsigned int numKey
         }
     }
 
-#define BUFFER_SIZE 4096
-
     SHA_CTX ctx;
     SHA_init(&ctx);
     unsigned char* buffer = (unsigned char*)malloc(BUFFER_SIZE);
@@ -150,7 +148,13 @@ int verify_file(const char* path, const RSAPublicKey *pKeys, unsigned int numKey
 
     double frac = -1.0;
     size_t so_far = 0;
-    fseek(f, 0, SEEK_SET);
+
+    if (fseek(f, 0, SEEK_SET) != 0) {
+        LOGE("failed to seek beginning of %s (%s)\n", path, strerror(errno));
+        fclose(f);
+        return VERIFY_FAILURE;
+    }
+
     while (so_far < signed_len) {
         size_t size = BUFFER_SIZE;
         if (signed_len - so_far < size) size = signed_len - so_far;
@@ -176,15 +180,16 @@ int verify_file(const char* path, const RSAPublicKey *pKeys, unsigned int numKey
         // the signing tool appends after the signature itself.
         if (RSA_verify(pKeys+i, eocd + eocd_size - 6 - RSANUMBYTES,
                        RSANUMBYTES, sha1)) {
-            LOGI("whole-file signature verified against key %d\n", i);
+            LOGI("whole-file signature verified against key %d for %s\n", i, path);
             free(eocd);
             return VERIFY_SUCCESS;
         } else {
             LOGI("failed to verify against key %d\n", i);
         }
     }
+
     free(eocd);
-    LOGE("failed to verify whole-file signature\n");
+    LOGE("failed to verify whole-file signature from %s\n", path);
     return VERIFY_FAILURE;
 }
 
-- 
1.7.4.1

