From 681f69663a6cd8d80fbb3f30cd5c670d8efa723c Mon Sep 17 00:00:00 2001
From: Omair Mohammed Abdullah <omair.m.abdullah@linux.intel.com>
Date: Thu, 31 Jan 2013 16:35:39 +0530
Subject: [PORT FROM MAIN] tinyalsa: add separate call for pcm prepare

BZ: 73509

Tinyalsa combines PREPARE and START calls to the driver in the pcm_start()
function. But in case of Aware, we do not want to call START. So have a separate
call for PREPARE.

For Probe stream, the MMX_PROBE needs to be sent after alloc, hence calling the
prepare call before MMX_PROBE call.

Change-Id: Ic83fad784936bbebab28e8e425debd449182db88
Orig-Change-Id: Ie31bee90dbfdca5bbd5d1a9c65239e83e365970d
Signed-off-by: Omair Mohammed Abdullah <omair.m.abdullah@linux.intel.com>
Reviewed-on: http://android.intel.com:8080/89943
Reviewed-by: cactus <cactus@intel.com>
Reviewed-by: Nilofer, Samreen <samreen.nilofer@intel.com>
Reviewed-by: Prusty, Subhransu S <subhransu.s.prusty@intel.com>
Reviewed-by: Abdullah, Omair M <omair.m.abdullah@intel.com>
Reviewed-by: Vinnakota, Lakshmi N <lakshmi.n.vinnakota@intel.com>
Tested-by: Gupta, ArvindX K <arvindx.k.gupta@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
---
 include/tinyalsa/asoundlib.h |    1 +
 pcm.c                        |    7 +++++++
 2 files changed, 8 insertions(+), 0 deletions(-)

diff --git a/include/tinyalsa/asoundlib.h b/include/tinyalsa/asoundlib.h
index bb4005a..3f31342 100644
--- a/include/tinyalsa/asoundlib.h
+++ b/include/tinyalsa/asoundlib.h
@@ -188,6 +188,7 @@ int pcm_mmap_begin(struct pcm *pcm, void **areas, unsigned int *offset,
                    unsigned int *frames);
 int pcm_mmap_commit(struct pcm *pcm, unsigned int offset, unsigned int frames);
 
+int pcm_prepare(struct pcm *pcm);
 /* Start and stop a PCM channel that doesn't transfer data */
 int pcm_start(struct pcm *pcm);
 int pcm_stop(struct pcm *pcm);
diff --git a/pcm.c b/pcm.c
index 4b31c4d..d80b20d 100644
--- a/pcm.c
+++ b/pcm.c
@@ -752,6 +752,13 @@ int pcm_is_ready(struct pcm *pcm)
     return pcm->fd >= 0;
 }
 
+int pcm_prepare(struct pcm *pcm)
+{
+    if (ioctl(pcm->fd, SNDRV_PCM_IOCTL_PREPARE) < 0)
+        return oops(pcm, errno, "cannot prepare channel");
+    return 0;
+}
+
 int pcm_start(struct pcm *pcm)
 {
     if (ioctl(pcm->fd, SNDRV_PCM_IOCTL_PREPARE) < 0)
-- 
1.7.4.1

