From 88918efbfc540d7a0d614635a5b7197b92e7ac0c Mon Sep 17 00:00:00 2001
From: Quentin Casasnovas <quentinx.casasnovas@intel.com>
Date: Tue, 28 May 2013 18:13:21 +0200
Subject: [PORT FROM MAIN] wifi/libwpa_client: prevent invalid pointer dereference

BZ: 104716

During MTBF testing (constantly rebooting dalvikvm), a segfault rarely occured
in wpa_ctrl_request+574, where the only thing that gets dereferenced is the
`ctrl` variable (`&rfds` also gets dereferenced by the macro FD_ISSET, but this
variable is allocated on the stack so it should be pretty safe). This variable
can get freed in wpa_ctrl_close(), and there is no locking strategy to protect
it from being free'ed if someone still has a reference on it, which could well
happen when libwpa_client.so is linked with libhardware_legacy, itself used as
JNI for dalvikvm (i.e. there could be multiple concurrent access from different
Java thread in the context of dalvik).

To workaround this problem and add a bit more robustness, we now copy the value
for the file descriptor contained in `ctrl` so we can use it later on without
dereferencing `ctrl`. Following calls using this file descriptor will most
likely fail at this stage as the file descriptor is closed, but that is not a
crash and is handled more cleanly (no segfault). The proper way to fix this
would be to rewrite completely either libhardware_legacy or libwpa_client to
add support for multi-threading and proper locking.

Feature   : Wlan
Category  : Improvement
Purpose   : AOSP+
Origin    : Internal
Upstream-candidate: No

Change-Id: I963ad1d3f1c28eb8381b00b307f64a28cf612bc5
Orig-Change-Id: If9c34ba10f8c7e3cc19ac15d876b3f00a0fda5c7
Signed-off-by: Quentin Casasnovas <quentinx.casasnovas@intel.com>
Signed-off-by: Jean-Michel Bachot <jean-michel.bachot@intel.com>
---
 src/common/wpa_ctrl.c |   10 ++++++----
 1 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/common/wpa_ctrl.c b/src/common/wpa_ctrl.c
index 58cbe6a..9dec54b 100644
--- a/src/common/wpa_ctrl.c
+++ b/src/common/wpa_ctrl.c
@@ -429,15 +429,17 @@ retry_send:
 	os_free(cmd_buf);
 
 	for (;;) {
+		int sk_fd = ctrl->s;
+
 		tv.tv_sec = 10;
 		tv.tv_usec = 0;
 		FD_ZERO(&rfds);
-		FD_SET(ctrl->s, &rfds);
-		res = select(ctrl->s + 1, &rfds, NULL, NULL, &tv);
+		FD_SET(sk_fd, &rfds);
+		res = select(sk_fd + 1, &rfds, NULL, NULL, &tv);
 		if (res < 0)
 			return res;
-		if (FD_ISSET(ctrl->s, &rfds)) {
-			res = recv(ctrl->s, reply, *reply_len, 0);
+		if (FD_ISSET(sk_fd, &rfds)) {
+			res = recv(sk_fd, reply, *reply_len, 0);
 			if (res < 0)
 				return res;
 			if (res > 0 && reply[0] == '<') {
-- 
1.7.4.1

