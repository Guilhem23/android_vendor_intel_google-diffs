From 0c36347fdde10c5ff9dcafebce2b7c18bdfa0fd2 Mon Sep 17 00:00:00 2001
From: Loic Poulain <loicx.poulain@intel.com>
Date: Thu, 30 May 2013 16:35:35 +0200
Subject: [PORT FROM MAIN] wifi: Restore scan_req value if a sta scan is rescheduled in the scan results event

BZ: 110639

On scan results event if a concurrent p2p scan was triggered
previously, scan results processing is canceled, p2p_find
executed and a new sta scan is triggered (pending scan).

However this new sta scan does not restore the scan_req value
of the previous scan (whose scan result has been canceled).

If we are currently ap connected, the new triggered scan will
cause an assoc whereas we are already connected:
(ap_scan==2 & scan_req!=2) => wpa_supplicant_assoc_try()
causing an assoc error and a disconnection.

This patch fixes this issue by restoring the previous scan_req.

Feature   : Wlan
Category  : Improvement
Purpose   : AOSP+
Origin    : Internal
Upstream-candidate: Yes

Change-Id: I83eb9917adea18cdf51fe76398cccd8bc2c54036
Orig-Change-Id: Iab4591fc020e7baa5c9fd2d46e606ef7523a7a75
Signed-off-by: Loic Poulain <loicx.poulain@intel.com>
Signed-off-by: Jean-Michel Bachot <jean-michel.bachot@intel.com>
---
 wpa_supplicant/events.c           |    1 +
 wpa_supplicant/scan.c             |    8 ++++----
 wpa_supplicant/wpa_supplicant_i.h |    1 +
 3 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/wpa_supplicant/events.c b/wpa_supplicant/events.c
index b775a58..a822a7b 100644
--- a/wpa_supplicant/events.c
+++ b/wpa_supplicant/events.c
@@ -1134,6 +1134,7 @@ static int _wpa_supplicant_event_scan_results(struct wpa_supplicant *wpa_s,
 		if (p2p_other_scan_completed(wpa_s->global->p2p) == 1) {
 			wpa_dbg(wpa_s, MSG_DEBUG, "P2P: Pending P2P operation "
 				"stopped scan processing");
+			wpa_s->scan_req = wpa_s->last_scan_req;
 			wpa_s->sta_scan_pending = 1;
 			wpa_supplicant_req_scan(wpa_s, 5, 0);
 			return -1;
diff --git a/wpa_supplicant/scan.c b/wpa_supplicant/scan.c
index db73a18..9fb1a82 100644
--- a/wpa_supplicant/scan.c
+++ b/wpa_supplicant/scan.c
@@ -600,7 +600,7 @@ static void wpa_supplicant_scan(void *eloop_ctx, void *timeout_ctx)
 			max_ssids = WPAS_MAX_SCAN_SSIDS;
 	}
 
-	scan_req = wpa_s->scan_req;
+	wpa_s->last_scan_req = wpa_s->scan_req;
 	wpa_s->scan_req = NORMAL_SCAN_REQ;
 
 	os_memset(&params, 0, sizeof(params));
@@ -618,7 +618,7 @@ static void wpa_supplicant_scan(void *eloop_ctx, void *timeout_ctx)
 		goto scan;
 	}
 
-	if (scan_req != MANUAL_SCAN_REQ && wpa_s->connect_without_scan) {
+	if (wpa_s->last_scan_req != MANUAL_SCAN_REQ && wpa_s->connect_without_scan) {
 		for (ssid = wpa_s->conf->ssid; ssid; ssid = ssid->next) {
 			if (ssid == wpa_s->connect_without_scan)
 				break;
@@ -656,7 +656,7 @@ static void wpa_supplicant_scan(void *eloop_ctx, void *timeout_ctx)
 		}
 	}
 
-	if (scan_req != MANUAL_SCAN_REQ && wpa_s->conf->ap_scan == 2) {
+	if (wpa_s->last_scan_req != MANUAL_SCAN_REQ && wpa_s->conf->ap_scan == 2) {
 		wpa_s->connect_without_scan = NULL;
 		wpa_s->prev_scan_wildcard = 0;
 		wpa_supplicant_assoc_try(wpa_s, ssid);
@@ -823,7 +823,7 @@ scan:
 		if (prev_state != wpa_s->wpa_state)
 			wpa_supplicant_set_state(wpa_s, prev_state);
 		/* Restore scan_req since we will try to scan again */
-		wpa_s->scan_req = scan_req;
+		wpa_s->scan_req = wpa_s->last_scan_req;
 		wpa_supplicant_req_scan(wpa_s, 1, 0);
 	} else {
 		wpa_s->scan_for_connection = 0;
diff --git a/wpa_supplicant/wpa_supplicant_i.h b/wpa_supplicant/wpa_supplicant_i.h
index 1b4ae01..b83f3f6 100644
--- a/wpa_supplicant/wpa_supplicant_i.h
+++ b/wpa_supplicant/wpa_supplicant_i.h
@@ -459,6 +459,7 @@ struct wpa_supplicant {
 		MANUAL_SCAN_REQ
 	} scan_req;
 	struct os_time scan_trigger_time;
+	int last_scan_req;
 	int scan_runs; /* number of scan runs since WPS was started */
 	int *next_scan_freqs;
 	int scan_interval; /* time in sec between scans to find suitable AP */
-- 
1.7.4.1

