From 8981b3428cf31985be190a9c00677fbec5001ba7 Mon Sep 17 00:00:00 2001
From: Clement Calmels <clement.calmels@intel.com>
Date: Thu, 2 May 2013 17:30:22 +0300
Subject: [PORT FROM MAIN] Telephony: Do not rebind when phone is disconnected from IWapPushManager service

BZ: 91000

Currently com.android.phone will bind to IWapPushManager every time it
is disconnected from this service. As a result, the activity manager
will add a new ServiceConnection item in the ServiceRecord connection
list.

In a memory pressure environment com.android.smspush (providing
IWapPushManager service) can be killed several times (generating
disconnections). That can be seen in bz 86294 crashlogs. This will
increase the size of the ServiceRecord connections list. This list is
used under a lock in publishService method of
ActivityManagerService.java to generate binder asynchronous calls.

A too big list during the publishService call will generate JavaBinder
errors, TransactionTooLarge exceptions and big lock hold time (more
than 4s can be seen):
http://crashtool.tl.intel.com/crashtoolStrutsWEB/event.do?action=display&eventId=c4c17f119691e54d94ff
That can lead to ANR.

If the application that provides IWapPushManager must not be killed,
it should be made persistent:
http://developer.android.com/guide/topics/manifest/application-element.html#persistent

Change-Id: Ic4fb09110864f80059e5779e9c92bf02208f8ac1
Orig-Change-Id: If8542a10015197d6a4db9dcde0d832db6470e70a
Signed-off-by: Clement Calmels <clement.calmels@intel.com>
Signed-off-by: Arun Ravindran <arun.ravindran@intel.com>
---
 .../android/internal/telephony/WapPushOverSms.java |   28 --------------------
 1 files changed, 0 insertions(+), 28 deletions(-)

diff --git a/src/java/com/android/internal/telephony/WapPushOverSms.java b/src/java/com/android/internal/telephony/WapPushOverSms.java
index ddd1002..74cce25 100755
--- a/src/java/com/android/internal/telephony/WapPushOverSms.java
+++ b/src/java/com/android/internal/telephony/WapPushOverSms.java
@@ -70,10 +70,6 @@ public class WapPushOverSms {
         public void onServiceDisconnected(ComponentName name) {
             mWapPushMan = null;
             if (DBG) Rlog.v(LOG_TAG, "wappush manager disconnected.");
-            // Detach the previous binder
-            mOwner.unbindService(mWapConn);
-            // WapPushManager must be always attached.
-            rebindWapPushManager();
         }
 
         /**
@@ -89,30 +85,6 @@ public class WapPushOverSms {
         }
 
         /**
-         * rebind WapPushManager
-         * This method is called when WapPushManager is disconnected unexpectedly.
-         */
-        private void rebindWapPushManager() {
-            if (mWapPushMan != null) return;
-
-            final ServiceConnection wapPushConnection = this;
-            new Thread() {
-                @Override
-                public void run() {
-                    while (mWapPushMan == null) {
-                        mOwner.bindService(new Intent(IWapPushManager.class.getName()),
-                                wapPushConnection, Context.BIND_AUTO_CREATE);
-                        try {
-                            Thread.sleep(BIND_RETRY_INTERVAL);
-                        } catch (InterruptedException e) {
-                            if (DBG) Rlog.v(LOG_TAG, "sleep interrupted.");
-                        }
-                    }
-                }
-            }.start();
-        }
-
-        /**
          * Returns interface to WapPushManager
          */
         public IWapPushManager getWapPushManager() {
-- 
1.7.4.1

