From c6ec6edeaa2c0f874c51b87d87aa59fe505f20b2 Mon Sep 17 00:00:00 2001
From: jpadmana <jayashree.r.padmanaban@intel.com>
Date: Mon, 17 Sep 2012 14:17:38 +0530
Subject: [PORT FROM MAIN]Issues found in offload Pre int build testing - aac ltp crash, obtain buffer time outs in frameworks/av

BZ: 57562

Issues fixed - aac ltp crash - disabled offload for ltp files
               Fixed obtain buffer timeout issues during offload
               22k file not playing- was due to wring handling in AP sinkcallback
Signed-off-by: jpadmana <jayashree.r.padmanaban@intel.com>

Change-Id: Id62af56416f3a59fcc813f1862ca364773722dc8
Orig-Change-Id: I9366af6055bfabd36a14678431c255f225afe5bc
origChange-Id: Ia27b24173d97ba9ce17c12886bfe3f6372a822f7
Signed-off-by: Arulselvan M <arulselvan.m@intel.com>
---
 media/libmedia/AudioTrack.cpp          |    5 +++++
 media/libstagefright/AudioPlayer.cpp   |    8 +++-----
 media/libstagefright/AwesomePlayer.cpp |    6 +++++-
 3 files changed, 13 insertions(+), 6 deletions(-)

diff --git a/media/libmedia/AudioTrack.cpp b/media/libmedia/AudioTrack.cpp
index d255239..427286d 100644
--- a/media/libmedia/AudioTrack.cpp
+++ b/media/libmedia/AudioTrack.cpp
@@ -1136,7 +1136,12 @@ status_t AudioTrack::obtainBuffer(Buffer* audioBuffer, int32_t waitCount)
             }
             if (CC_UNLIKELY(result != NO_ERROR)) {
                 cblk->waitTimeMs += waitTimeMs;
+#ifdef INTEL_MUSIC_OFFLOAD_FEATURE
+                if (!(mFlags & AUDIO_OUTPUT_FLAG_COMPRESS_OFFLOAD) &&
+                      cblk->waitTimeMs >= cblk->bufferTimeoutMs) {
+#else
                 if (cblk->waitTimeMs >= cblk->bufferTimeoutMs) {
+#endif
                     // timing out when a loop has been set and we have already written upto loop end
                     // is a normal condition: no need to wake AudioFlinger up.
                     if (cblk->user < cblk->loopEnd) {
diff --git a/media/libstagefright/AudioPlayer.cpp b/media/libstagefright/AudioPlayer.cpp
index d5f9dfe..ed9bac5 100644
--- a/media/libstagefright/AudioPlayer.cpp
+++ b/media/libstagefright/AudioPlayer.cpp
@@ -442,11 +442,9 @@ size_t AudioPlayer::AudioSinkCallback(
     AudioTrack::Buffer *buff = (AudioTrack::Buffer *)buffer;
 
     // Check for control events in this callback function
-    if((size == 4) && me->mObserver) {
-        if (buff->flags == AudioTrack::EVENT_TEAR_DOWN) {
-            ALOGV("AudioSinkCallback: Tear down event received");
-            me->mObserver->postAudioOffloadTearDown();
-        }
+    if((size == 4) && me->mObserver && (buff->flags == AudioTrack::EVENT_TEAR_DOWN)) {
+        ALOGV("AudioSinkCallback: Tear down event received");
+        me->mObserver->postAudioOffloadTearDown();
         return 0;
     }
 #endif
diff --git a/media/libstagefright/AwesomePlayer.cpp b/media/libstagefright/AwesomePlayer.cpp
index ded0e5b..f31417c 100644
--- a/media/libstagefright/AwesomePlayer.cpp
+++ b/media/libstagefright/AwesomePlayer.cpp
@@ -1654,7 +1654,7 @@ status_t AwesomePlayer::initAudioDecoder() {
         ALOGV("initAudioDecoder: MEDIA_MIMETYPE_AUDIO_AAC");
         uint32_t bitRate = -1;
         if (setAACParameters(meta, &mAudioFormat, &bitRate) != OK) {
-                ALOGV("Failed to set AAC parameters/ADTS format, use non-offload");
+                ALOGV("Failed to set AAC parameters/Unsupported AAC format, use non-offload");
                 mAudioFormat = AUDIO_FORMAT_PCM_16_BIT;
         } else {
                 avgBitRate = (int)bitRate;
@@ -3368,6 +3368,10 @@ status_t AwesomePlayer::setAACParameters(sp<MetaData> meta, audio_format_t *aFor
         ALOGE("error in setting offload AAC parameters");
         return status;
     }
+    if ((AOT != AOT_SBR) && (AOT != AOT_PS) && (AOT != AOT_AAC_LC)) {
+        ALOGV("Unsupported AAC format");
+        return BAD_VALUE;
+    }
 
     *aFormat = AUDIO_FORMAT_AAC;
     return OK;
-- 
1.7.4.1

