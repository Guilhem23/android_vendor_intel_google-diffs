From 3e1bbd856aaa3b243a56103f9aa79240456bf108 Mon Sep 17 00:00:00 2001
From: ywan171 <yi.a.wang@intel.com>
Date: Sun, 29 Jul 2012 07:48:23 +0800
Subject: [PORT FROM MAIN]libmediaplayerservice:delay codec EOS or error message during NuPlayer flushing decoder.

BZ: 48710

During NuPlayer flush decoder, codec reached EOS or error, and message it to NuPlayer.
If NuPlayerRender has already flushed its video and audio queue, and NuPlayer
still push EOS entry to NuPlayerRender queue, then crash happend because
queue is not empty when finish flush checking queue.

orig-patch: 55910

Change-Id: Idea5db34a26ed8f33995cad203559442a7cbe0fe
Orig-Change-Id: I68b3aec7740c2192b405ebc58c7fe507923f93e6
Signed-off-by: ywan171 <yi.a.wang@intel.com>
---
 media/libmediaplayerservice/nuplayer/NuPlayer.cpp |   35 +++++++++++++++++++-
 media/libmediaplayerservice/nuplayer/NuPlayer.h   |    5 +++
 2 files changed, 38 insertions(+), 2 deletions(-)

diff --git a/media/libmediaplayerservice/nuplayer/NuPlayer.cpp b/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
index 46d0a5a..39c9bc1 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
+++ b/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
@@ -116,6 +116,8 @@ NuPlayer::NuPlayer()
       mVideoIsAVC(false),
       mAudioEOS(false),
       mVideoEOS(false),
+      mAudioEosPending(false),
+      mVideoEosPending(false),
       mScanSourcesPending(false),
       mScanSourcesGeneration(0),
       mPollDurationGeneration(0),
@@ -488,7 +490,16 @@ void NuPlayer::onMessageReceived(const sp<AMessage> &msg) {
                          err);
                 }
 
-                mRenderer->queueEOS(audio, err);
+                // we should delay EOS message during flushing
+                if (!IsFlushingState(audio ? mFlushingAudio : mFlushingVideo)) {
+                    mRenderer->queueEOS(audio, err);
+                } else if (audio) {
+                    mAudioEosPending = true;
+                    mAudioEosErr = err;
+                } else {
+                    mVideoEosPending = true;
+                    mVideoEosErr = err;
+                }
             } else if (what == ACodec::kWhatFlushCompleted) {
                 bool needShutdown;
 
@@ -627,7 +638,16 @@ void NuPlayer::onMessageReceived(const sp<AMessage> &msg) {
                 ALOGE("Received error from %s decoder, aborting playback.",
                      audio ? "audio" : "video");
 
-                mRenderer->queueEOS(audio, UNKNOWN_ERROR);
+                // we should delay EOS message during flushing
+                if (!IsFlushingState(audio ? mFlushingAudio : mFlushingVideo)) {
+                    mRenderer->queueEOS(audio, UNKNOWN_ERROR);
+                } else if (audio) {
+                    mAudioEosPending = true;
+                    mAudioEosErr = UNKNOWN_ERROR;
+                } else {
+                    mVideoEosPending = true;
+                    mVideoEosErr = UNKNOWN_ERROR;
+                }
             } else if (what == ACodec::kWhatDrainThisBuffer) {
                 renderBuffer(audio, codecRequest);
             } else if (what != ACodec::kWhatComponentAllocated
@@ -781,6 +801,17 @@ void NuPlayer::finishFlushIfPossible() {
         mTimeDiscontinuityPending = false;
     }
 
+    if (mAudioEosPending && mRenderer != NULL) {
+        mRenderer->queueEOS(true,  mAudioEosErr);
+    }
+
+    if (mVideoEosPending && mRenderer != NULL) {
+        mRenderer->queueEOS(false, mVideoEosErr);
+    }
+
+    mAudioEosPending = false;
+    mVideoEosPending = false;
+
     if (mAudioDecoder != NULL) {
         mAudioDecoder->signalResume();
     }
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayer.h b/media/libmediaplayerservice/nuplayer/NuPlayer.h
index 50d0462..3e1afcd 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayer.h
+++ b/media/libmediaplayerservice/nuplayer/NuPlayer.h
@@ -118,6 +118,11 @@ private:
     bool mAudioEOS;
     bool mVideoEOS;
 
+    bool mAudioEosPending;
+    bool mVideoEosPending;
+    int32_t mAudioEosErr;
+    int32_t mVideoEosErr;
+
     bool mScanSourcesPending;
     int32_t mScanSourcesGeneration;
 
-- 
1.7.4.1

