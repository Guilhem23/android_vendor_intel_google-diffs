From bd140ead8d0ec13e35f55ca23e878e6b718dc142 Mon Sep 17 00:00:00 2001
From: ywan171 <yi.a.wang@intel.com>
Date: Mon, 30 Jul 2012 18:53:32 +0800
Subject: [PORT FROM MAIN]libstagefright: release the socket in ARTPConnection

BZ: 49305

RTP packet polling and Myhandle is in different thread, after close the
socket in myhandle, there may occur assertion failure in ARTPConnection
if onRemove function is not called, release the socket after remove RTP
Connection

orig-patch:
43057 (BZ: 22477) unregister the socket before socket close for RTP
30070 (BZ:18533, part) patch porting from R2 to R3 for RTSP

Change-Id: I85ea7926d5dfbb8a9a56fb051a0ab0d8a1d75866
Orig-Change-Id: Iff30d52ca29026e304cfd0db689b21736d40c095
Signed-off-by: ywan171 <yi.a.wang@intel.com>
---
 media/libstagefright/rtsp/ARTPConnection.cpp |   15 ++++++++++-
 media/libstagefright/rtsp/ARTPConnection.h   |    3 +-
 media/libstagefright/rtsp/MyHandler.h        |   37 ++++++++++---------------
 3 files changed, 31 insertions(+), 24 deletions(-)

diff --git a/media/libstagefright/rtsp/ARTPConnection.cpp b/media/libstagefright/rtsp/ARTPConnection.cpp
index 501a970..722695b 100644
--- a/media/libstagefright/rtsp/ARTPConnection.cpp
+++ b/media/libstagefright/rtsp/ARTPConnection.cpp
@@ -32,6 +32,7 @@
 
 #include <arpa/inet.h>
 #include <sys/socket.h>
+#include "HTTPBase.h"
 
 namespace android {
 
@@ -69,6 +70,7 @@ struct ARTPConnection::StreamInfo {
 
 ARTPConnection::ARTPConnection(uint32_t flags)
     : mFlags(flags),
+      mUIDValid(false),
       mPollEventPending(false),
       mLastReceiverReportTimeUs(-1) {
 }
@@ -92,7 +94,8 @@ void ARTPConnection::addStream(
     msg->post();
 }
 
-void ARTPConnection::removeStream(int rtpSocket, int rtcpSocket) {
+void ARTPConnection::removeStream(int rtpSocket, int rtcpSocket, bool uidvalid) {
+    mUIDValid = uidvalid;
     sp<AMessage> msg = new AMessage(kWhatRemoveStream, id());
     msg->setInt32("rtp-socket", rtpSocket);
     msg->setInt32("rtcp-socket", rtcpSocket);
@@ -224,6 +227,16 @@ void ARTPConnection::onRemoveStream(const sp<AMessage> &msg) {
         return;
     }
 
+    if (mUIDValid) {
+        HTTPBase::UnRegisterSocketUserTag(it->mRTPSocket);
+        HTTPBase::UnRegisterSocketUserTag(it->mRTCPSocket);
+    }
+    // close the socket here
+    close(it->mRTPSocket);
+    close(it->mRTCPSocket);
+    it->mRTPSocket = -1;
+    it->mRTCPSocket = -1;
+
     mStreams.erase(it);
 }
 
diff --git a/media/libstagefright/rtsp/ARTPConnection.h b/media/libstagefright/rtsp/ARTPConnection.h
index edbcc35..231a2f8 100644
--- a/media/libstagefright/rtsp/ARTPConnection.h
+++ b/media/libstagefright/rtsp/ARTPConnection.h
@@ -40,7 +40,7 @@ struct ARTPConnection : public AHandler {
             const sp<AMessage> &notify,
             bool injected);
 
-    void removeStream(int rtpSocket, int rtcpSocket);
+    void removeStream(int rtpSocket, int rtcpSocket, bool uidvalid = false);
 
     void injectPacket(int index, const sp<ABuffer> &buffer);
 
@@ -65,6 +65,7 @@ private:
     static const int64_t kSelectTimeoutUs;
 
     uint32_t mFlags;
+    bool mUIDValid;
 
     struct StreamInfo;
     List<StreamInfo> mStreams;
diff --git a/media/libstagefright/rtsp/MyHandler.h b/media/libstagefright/rtsp/MyHandler.h
index ed8ad53..cf82688 100644
--- a/media/libstagefright/rtsp/MyHandler.h
+++ b/media/libstagefright/rtsp/MyHandler.h
@@ -706,24 +706,26 @@ struct MyHandler : public AHandler {
                 }
 
                 if (result != OK) {
-                    if (track) {
-                        if (!track->mUsingInterleavedTCP) {
-                            // Clear the tag
-                            if (mUIDValid) {
-                                HTTPBase::UnRegisterSocketUserTag(track->mRTPSocket);
-                                HTTPBase::UnRegisterSocketUserTag(track->mRTCPSocket);
+                    for (size_t i = 0; i < mTracks.size(); ++i) {
+                        TrackInfo *info = &mTracks.editItemAt(i);
+                        if (info) {
+                            if (!info->mUsingInterleavedTCP) {
+                                // Clear the tag
+                                if (mUIDValid) {
+                                    HTTPBase::UnRegisterSocketUserTag(info->mRTPSocket);
+                                    HTTPBase::UnRegisterSocketUserTag(info->mRTCPSocket);
+                                }
+                                close(info->mRTPSocket);
+                                close(info->mRTCPSocket);
                             }
-
-                            close(track->mRTPSocket);
-                            close(track->mRTCPSocket);
+                            mTracks.removeItemsAt(i);
                         }
-
-                        mTracks.removeItemsAt(trackIndex);
                     }
+                    mSetupTracksSuccessful = false;
                 }
 
                 ++index;
-                if (index < mSessionDesc->countTracks()) {
+                if (index < mSessionDesc->countTracks() && mSetupTracksSuccessful) {
                     setupTrack(index);
                 } else if (mSetupTracksSuccessful) {
                     ++mKeepAliveGeneration;
@@ -837,16 +839,7 @@ struct MyHandler : public AHandler {
                     }
 
                     if (!info->mUsingInterleavedTCP) {
-                        mRTPConn->removeStream(info->mRTPSocket, info->mRTCPSocket);
-
-                        // Clear the tag
-                        if (mUIDValid) {
-                            HTTPBase::UnRegisterSocketUserTag(info->mRTPSocket);
-                            HTTPBase::UnRegisterSocketUserTag(info->mRTCPSocket);
-                        }
-
-                        close(info->mRTPSocket);
-                        close(info->mRTCPSocket);
+                        mRTPConn->removeStream(info->mRTPSocket, info->mRTCPSocket, mUIDValid);
                     }
                 }
                 mTracks.clear();
-- 
1.7.4.1

