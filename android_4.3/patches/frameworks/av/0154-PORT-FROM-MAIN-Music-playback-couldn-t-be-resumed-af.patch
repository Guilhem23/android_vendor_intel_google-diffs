From d4fb0e8ed98129fb54987176a1a631d89d36846d Mon Sep 17 00:00:00 2001
From: samaga Prasanna Krishna <samaga.krishna@intel.com>
Date: Thu, 24 Jan 2013 14:27:32 +0530
Subject: [PORT FROM MAIN]Music playback couldn't be resumed after pause with some specific test steps

BZ: 72145

There is a timer - mPausedTimerId in AwesomePlayer used for handling
long pause scenarios in offload cases. Since timer is unique within
a process and there could be more than one awesomeplayer instances
in a single process , certain check conditions are added for the
timer in this patch to avoid wrong handling by different threads.

Change-Id: Id7c0c5290b9e332a8536cebdfb3acac922bf2b3d
Orig-Change-Id: I57adf80fe554f96f16ac423edda39b47c45a4237
Signed-off-by: samaga Prasanna Krishna <samaga.krishna@intel.com>
Signed-off-by: Arulselvan M <arulselvan.m@intel.com>
---
 media/libstagefright/AwesomePlayer.cpp |   36 ++++++++++++++++++++++++-------
 1 files changed, 28 insertions(+), 8 deletions(-)

diff --git a/media/libstagefright/AwesomePlayer.cpp b/media/libstagefright/AwesomePlayer.cpp
index 5b2c7bc..13e4847 100644
--- a/media/libstagefright/AwesomePlayer.cpp
+++ b/media/libstagefright/AwesomePlayer.cpp
@@ -614,7 +614,10 @@ void AwesomePlayer::reset_l() {
     mDurationUs = -1;
 #ifdef INTEL_MUSIC_OFFLOAD_FEATURE
     if (mOffload) {
-        timer_delete(mPausedTimerId);
+        if (mPausedTimerId) {
+            timer_delete(mPausedTimerId);
+            mPausedTimerId = (time_t)0;
+        }
         /* If the reset is called in long pause case, don't change the mOffload and
         * mFlags. Which will be used when resume, i.e Play is called
         */
@@ -952,7 +955,10 @@ status_t AwesomePlayer::play() {
     if ((mOffload == true) && ((mFlags & PLAYING) == 0)) {
         ALOGV("Not playing");
         /* Offload and the state is not playing stop the pause timer */
-        timer_delete(mPausedTimerId);
+        if (mPausedTimerId) {
+            timer_delete(mPausedTimerId);
+            mPausedTimerId = (time_t)0;
+        }
         /* If the system is in supended mode because of long pause and
          * then resume to continue playing
          */
@@ -1318,7 +1324,10 @@ status_t AwesomePlayer::pause() {
     modifyFlags(CACHE_UNDERRUN, CLEAR);
 #ifdef INTEL_MUSIC_OFFLOAD_FEATURE
     if (mOffload) {
-        timer_delete(mPausedTimerId);
+        if (mPausedTimerId) {
+            timer_delete(mPausedTimerId);
+            mPausedTimerId = (time_t)0;
+        }
         offloadPauseStartTimer(OFFLOAD_PAUSED_TIMEOUT_DURATION, true);
     }
 #endif
@@ -1343,7 +1352,10 @@ status_t AwesomePlayer::pause_l(bool at_eos) {
             // During offload, enter standby after 3 seconds
             // if no playback activity.
             if (mOffload) {
-                timer_delete(mPausedTimerId);
+                if (mPausedTimerId) {
+                    timer_delete(mPausedTimerId);
+                    mPausedTimerId = (time_t)0;
+                }
                 offloadPauseStartTimer(OFFLOAD_STANDBY_TIMEOUT_DURATION, true);
             }
 #endif
@@ -1569,7 +1581,10 @@ status_t AwesomePlayer::seekTo_l(int64_t timeUs) {
 #ifdef INTEL_MUSIC_OFFLOAD_FEATURE
     if (mOffload) {
         ALOGV("AwesomePlayer::seekToi_l deleting offload time if any");
-        timer_delete(mPausedTimerId);
+        if (mPausedTimerId) {
+            timer_delete(mPausedTimerId);
+            mPausedTimerId = (time_t)0;
+        }
         mOffloadCalAudioEOS = false;
         if (mOffloadTearDownForPause) {
             mOffloadPauseUs = timeUs;
@@ -3094,7 +3109,10 @@ status_t AwesomePlayer::offloadSuspend() {
     if (mOffload && ((mFlags & PLAYING) == 0)) {
          ALOGV("offloadSuspend(): Deleting timer");
          mOffloadTearDownForPause = true;
-         timer_delete(mPausedTimerId);
+         if (mPausedTimerId) {
+             timer_delete(mPausedTimerId);
+             mPausedTimerId = (time_t)0;
+         }
     }
 
     reset_l();
@@ -3414,8 +3432,10 @@ status_t AwesomePlayer::setAACParameters(sp<MetaData> meta, audio_format_t *aFor
 void AwesomePlayer::offloadPauseStartTimer(int64_t time, bool at_pause) {
 #ifdef INTEL_MUSIC_OFFLOAD_FEATURE
     ALOGV("offloadPauseStartTimer with time = %lld ", time);
-
-    timer_delete(mPausedTimerId);
+    if (mPausedTimerId) {
+        timer_delete(mPausedTimerId);
+        mPausedTimerId = (time_t)0;
+    }
 
     if (time == 0) {
         ALOGV("offloadPauseStartTimer: Posting EOS immediately");
-- 
1.7.4.1

