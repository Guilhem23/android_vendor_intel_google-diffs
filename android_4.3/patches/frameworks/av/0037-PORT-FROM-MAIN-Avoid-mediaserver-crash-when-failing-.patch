From 742e432fcc18dbab84e04523e6a8e5db34230319 Mon Sep 17 00:00:00 2001
From: Dan Liang <dan.liang@intel.com>
Date: Thu, 2 May 2013 15:57:01 +0800
Subject: [PORT FROM MAIN] Avoid mediaserver crash when failing to set input port size

BZ: 68835

The mediaserver will crash when passing an invalid input port size
to the OMX codec plugins. For example, if the sample size in stsz
table is negtive, this will make kKeyMaxInputSize value very large.
The value will be passed to OMX plugins to set the input port size.
OMX plugins will detect this invalid value and report errors. But
the return error is not properly handled in setMinBufferSize and
the CHECK() will crash the mediaserver directly.

This patch will handle this situation and allows OMXCodec to exit
elegantly.

Change-Id: I5454279cb83fb05ad83a3373f7b12ec6e934bd32
Orig-Change-Id: Ifccf8d8b9de1aaf188291730edb1a0e614060be5
Signed-off-by: wfeng6 <wei.feng@intel.com>
Signed-off-by: Dan Liang <dan.liang@intel.com>
---
 include/media/stagefright/OMXCodec.h |    2 +-
 media/libstagefright/OMXCodec.cpp    |   21 ++++++++++++++++-----
 2 files changed, 17 insertions(+), 6 deletions(-)

diff --git a/include/media/stagefright/OMXCodec.h b/include/media/stagefright/OMXCodec.h
index fbb5a95..9317742 100644
--- a/include/media/stagefright/OMXCodec.h
+++ b/include/media/stagefright/OMXCodec.h
@@ -287,7 +287,7 @@ private:
     void setJPEGInputFormat(
             OMX_U32 width, OMX_U32 height, OMX_U32 compressedSize);
 
-    void setMinBufferSize(OMX_U32 portIndex, OMX_U32 size);
+    status_t setMinBufferSize(OMX_U32 portIndex, OMX_U32 size);
 
     void setRawAudioFormat(
             OMX_U32 portIndex, int32_t sampleRate, int32_t numChannels);
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index ae037bf..24900ea 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -608,7 +608,11 @@ status_t OMXCodec::configureCodec(const sp<MetaData> &meta) {
 
     int32_t maxInputSize;
     if (meta->findInt32(kKeyMaxInputSize, &maxInputSize)) {
-        setMinBufferSize(kPortIndexInput, (OMX_U32)maxInputSize);
+        status_t err = setMinBufferSize(kPortIndexInput, (OMX_U32)maxInputSize);
+        if (err != OK) {
+            CODEC_LOGE("setMinBufferSize() failed (err = 0x%08x)", err);
+            return err;
+        }
     }
 
     initOutputFormat(meta);
@@ -655,14 +659,16 @@ status_t OMXCodec::configureCodec(const sp<MetaData> &meta) {
     return OK;
 }
 
-void OMXCodec::setMinBufferSize(OMX_U32 portIndex, OMX_U32 size) {
+status_t OMXCodec::setMinBufferSize(OMX_U32 portIndex, OMX_U32 size) {
     OMX_PARAM_PORTDEFINITIONTYPE def;
     InitOMXParams(&def);
     def.nPortIndex = portIndex;
 
     status_t err = mOMX->getParameter(
             mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
-    CHECK_EQ(err, (status_t)OK);
+    if (err != OK) {
+        return err;
+    }
 
     if ((portIndex == kPortIndexInput && (mQuirks & kInputBufferSizesAreBogus))
         || (def.nBufferSize < size)) {
@@ -671,11 +677,15 @@ void OMXCodec::setMinBufferSize(OMX_U32 portIndex, OMX_U32 size) {
 
     err = mOMX->setParameter(
             mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
-    CHECK_EQ(err, (status_t)OK);
+    if (err != OK) {
+        return err;
+    }
 
     err = mOMX->getParameter(
             mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
-    CHECK_EQ(err, (status_t)OK);
+    if (err != OK) {
+        return err;
+    }
 
     // Make sure the setting actually stuck.
     if (portIndex == kPortIndexInput
@@ -684,6 +694,7 @@ void OMXCodec::setMinBufferSize(OMX_U32 portIndex, OMX_U32 size) {
     } else {
         CHECK(def.nBufferSize >= size);
     }
+    return OK;
 }
 
 status_t OMXCodec::setVideoPortFormatType(
-- 
1.7.4.1

