From cd9a98a066e20c6e8f288faffc0cbf97192e7a6c Mon Sep 17 00:00:00 2001
From: pdiopX <piotrx.diop@intel.com>
Date: Mon, 26 Nov 2012 16:21:08 +0100
Subject: [PORT FROM MAIN] Release A2DP wakelock when the A2DP stream is suspended

BZ: 63380

When in call, the phone couldn't enter S3 because the AudioOut tagged wakelock
corresponding to A2DP output was never released. This is due to an incoherency
between two variables:

1.mActiveTracks size which states that there's one active (but suspended)
track (for A2DP)

2.the mixer status which states that there's no currently active track
(since the A2DP stream is stopped during a call or a ringtone).

In that configuration, the threadloop recalculates endlessly a sleeptime for
the A2DP thread with a suspended stream until a new A2DP track is played after
hangup.

This patch fixes the detection and removal for suspended tracks from active
list in case of underrun, allowing the A2DP wakelock to be released.
Signed-off-by: pdiopX <piotrx.diop@intel.com>

Change-Id: I8d214684423f7b5509c8b575d95555cb86c0069d
Orig-Change-Id: Id276a0279d4d54099670eac766e6df9f0d23256a
Signed-off-by: Arulselvan M <arulselvan.m@intel.com>
Reviewed-on: http://android.intel.com:8080/82121
Reviewed-by: Diop, PiotrX <piotrx.diop@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 services/audioflinger/Threads.cpp |    9 +++++++--
 1 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/services/audioflinger/Threads.cpp b/services/audioflinger/Threads.cpp
index 5590928..0d8b137 100644
--- a/services/audioflinger/Threads.cpp
+++ b/services/audioflinger/Threads.cpp
@@ -2776,8 +2776,13 @@ AudioFlinger::PlaybackThread::mixer_state AudioFlinger::MixerThread::prepareTrac
 
             ALOGVV("track %d u=%08x, s=%08x [NOT READY] on thread %p", name, cblk->user,
                     cblk->server, this);
-            if ((track->sharedBuffer() != 0) || track->isTerminated() ||
-                    track->isStopped() || track->isPaused()) {
+
+            //Do not check if a suspended track has it's frames written to audio HAL.
+            //Proceed to underrun counting because we want to avoid having an audioOut thread enter
+            //an infinite sleep loop without releasing its wakelock as long as the track hasn't been
+            //restored.
+            if (((track->sharedBuffer() != 0) || track->isTerminated() ||
+                    track->isStopped() || track->isPaused()) && !mSuspended) {
                 // We have consumed all the buffers of this track.
                 // Remove it from the list of active tracks.
                 // TODO: use actual buffer filling status instead of latency when available from
-- 
1.7.4.1

