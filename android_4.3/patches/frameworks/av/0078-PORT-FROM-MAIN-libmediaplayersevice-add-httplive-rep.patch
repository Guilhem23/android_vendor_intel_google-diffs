From a901b0616ea3213ae7c37551381f1f3e036b74e4 Mon Sep 17 00:00:00 2001
From: ywan171 <yi.a.wang@intel.com>
Date: Sat, 11 May 2013 22:50:25 +0800
Subject: [PORT FROM MAIN] libmediaplayersevice: add httplive replay function for html5 to improve user experience.

BZ: 48710

It does not support httplive replay function per google code, in html5 player, the player
can not exist automatically, if the user press the play button, nothing will happen per google's code.
but if the streaming is http. not httplive ,it can replay. Add the replay func to httplive also.

original patch:
41631: pause the nuplayer when play complete
43826:flush decoder only when seek returns success
46004:drop invalid seek when it is in EOS state
39930:add the func to support httplive to restart if meet eos.

Orig-Change-Id: Iaa63e8038332e7adaf66ecc26fd020f3300ff41e

Signed-off-by: ywan171 <yi.a.wang@intel.com>
Change-Id: Ic529f06f7e1aba57a682449d8d821bf1c2bd6ddd
---
 .../nuplayer/HTTPLiveSource.cpp                    |   14 ++++++++++++++
 media/libmediaplayerservice/nuplayer/NuPlayer.cpp  |    2 ++
 .../nuplayer/NuPlayerDriver.cpp                    |   17 +++++++++++++++++
 .../libstagefright/mpeg2ts/AnotherPacketSource.cpp |    5 +++++
 media/libstagefright/mpeg2ts/AnotherPacketSource.h |    2 ++
 5 files changed, 40 insertions(+), 0 deletions(-)

diff --git a/media/libmediaplayerservice/nuplayer/HTTPLiveSource.cpp b/media/libmediaplayerservice/nuplayer/HTTPLiveSource.cpp
index 655ee55..c4e4d2f 100644
--- a/media/libmediaplayerservice/nuplayer/HTTPLiveSource.cpp
+++ b/media/libmediaplayerservice/nuplayer/HTTPLiveSource.cpp
@@ -197,6 +197,20 @@ status_t NuPlayer::HTTPLiveSource::seekTo(int64_t seekTimeUs) {
 
     mLiveSession->seekTo(seekTimeUs);
 
+    if (mFinalResult != OK) {
+        mFinalResult = OK;
+        sp<AnotherPacketSource> audiosource =
+            static_cast<AnotherPacketSource*>(mTSParser->getSource(ATSParser::AUDIO).get());
+        if (audiosource != NULL) {
+            audiosource->resetEOS();
+        }
+        sp<AnotherPacketSource> videosource =
+            static_cast<AnotherPacketSource*>(mTSParser->getSource(ATSParser::VIDEO).get());
+        if (videosource != NULL) {
+            videosource->resetEOS();
+        }
+    }
+
     return OK;
 }
 
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayer.cpp b/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
index c2ec6fd..8293c7e 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
+++ b/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
@@ -1222,10 +1222,12 @@ void NuPlayer::performDecoderFlush() {
 
     if (mAudioDecoder != NULL) {
         flushDecoder(true /* audio */, false /* needShutdown */);
+        mAudioEOS = false;
     }
 
     if (mVideoDecoder != NULL) {
         flushDecoder(false /* audio */, false /* needShutdown */);
+        mVideoEOS = false;
     }
 }
 
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayerDriver.cpp b/media/libmediaplayerservice/nuplayer/NuPlayerDriver.cpp
index bdafb29..7547796 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayerDriver.cpp
+++ b/media/libmediaplayerservice/nuplayer/NuPlayerDriver.cpp
@@ -229,6 +229,10 @@ status_t NuPlayerDriver::start() {
 
         case STATE_PAUSED:
         {
+            if (mAtEOS == true) {
+                mPlayer->seekToAsync(0);
+                mAtEOS = false;
+            }
             mPlayer->resume();
             break;
         }
@@ -286,6 +290,12 @@ status_t NuPlayerDriver::seekTo(int msec) {
         case STATE_RUNNING:
         case STATE_PAUSED:
         {
+            if (mAtEOS && mDurationUs > 0 && seekTimeUs >= mDurationUs) {
+                // when seek in EOS, if seekTime >= duration, drop invalid seek since it is
+                // already EOS.
+                notifyListener(MEDIA_SEEK_COMPLETE);
+                return OK;
+            }
             mAtEOS = false;
             mPlayer->seekToAsync(seekTimeUs);
             break;
@@ -485,6 +495,13 @@ status_t NuPlayerDriver::dump(int fd, const Vector<String16> &args) const {
 void NuPlayerDriver::notifyListener(int msg, int ext1, int ext2) {
     if (msg == MEDIA_PLAYBACK_COMPLETE || msg == MEDIA_ERROR) {
         mAtEOS = true;
+        // Pause the player,change the state to pause
+        // As play in html5, browser can not quit when play complete or meet MEDIA_ERROR,
+        // when seek after playing complete,it will stay at pause state.
+        if (mState == STATE_RUNNING) {
+            mPlayer->pause();
+            mState = STATE_PAUSED;
+        }
     }
 
     sendEvent(msg, ext1, ext2);
diff --git a/media/libstagefright/mpeg2ts/AnotherPacketSource.cpp b/media/libstagefright/mpeg2ts/AnotherPacketSource.cpp
index 3de3a61..f35a309 100644
--- a/media/libstagefright/mpeg2ts/AnotherPacketSource.cpp
+++ b/media/libstagefright/mpeg2ts/AnotherPacketSource.cpp
@@ -191,6 +191,11 @@ void AnotherPacketSource::signalEOS(status_t result) {
     mCondition.signal();
 }
 
+void AnotherPacketSource::resetEOS() {
+    Mutex::Autolock autoLock(mLock);
+    mEOSResult = OK;
+}
+
 bool AnotherPacketSource::hasBufferAvailable(status_t *finalResult) {
     Mutex::Autolock autoLock(mLock);
     if (!mBuffers.empty()) {
diff --git a/media/libstagefright/mpeg2ts/AnotherPacketSource.h b/media/libstagefright/mpeg2ts/AnotherPacketSource.h
index 1db4068..37ea59c 100644
--- a/media/libstagefright/mpeg2ts/AnotherPacketSource.h
+++ b/media/libstagefright/mpeg2ts/AnotherPacketSource.h
@@ -56,6 +56,8 @@ struct AnotherPacketSource : public MediaSource {
 
     void signalEOS(status_t result);
 
+    void resetEOS();
+
     status_t dequeueAccessUnit(sp<ABuffer> *buffer);
 
     bool isFinished(int64_t duration) const;
-- 
1.7.4.1

