From 2425f399c245b7b39504a3ad66fae014ecec9994 Mon Sep 17 00:00:00 2001
From: fxiao4X <fengx.xiao@intel.com>
Date: Fri, 27 Jul 2012 11:16:00 +0800
Subject: [PORT FROM MAIN]libstagefright: Optimize h263/mpeg4 assambler to reduce frame dropping in the assambler layer.

BZ: 49120

If current rtp packet lost, when submitting the last access unit to construct a
video frame it will set the last access unit to be damaged and will drop it. It
is the google orignal design. But if the last access unit is a whole frame it will
cause an additional frame dropping. So use "M" marker to detect the frame boundary,
if the last accecc unit "M" is set, we don't drop it, this can improve streaming
video quality when rtp packet dropping too much.

Original patches:

36942(R2): RTSP:When rtp packet is lost, avoid unnescessay frame damaged
37422(R3): libstagefright: patch porting from R2 to R3 for RTSP

Change-Id: Iee3de06572644d3789f0cee118d0d701ca6d01e6
Orig-Change-Id: If5d440051f0227ef801159cf647e7b7367ee0b91
Signed-off-by: fxiao4X <fengx.xiao@intel.com>
Signed-off-by: ywan171 <yi.a.wang@intel.com>
---
 media/libstagefright/rtsp/AH263Assembler.cpp       |   37 +++++++++++++++++++-
 media/libstagefright/rtsp/AH263Assembler.h         |    1 +
 .../rtsp/AMPEG4ElementaryAssembler.cpp             |   37 +++++++++++++++++++-
 .../rtsp/AMPEG4ElementaryAssembler.h               |    1 +
 4 files changed, 74 insertions(+), 2 deletions(-)

diff --git a/media/libstagefright/rtsp/AH263Assembler.cpp b/media/libstagefright/rtsp/AH263Assembler.cpp
index 75cd911..c2dedf1 100644
--- a/media/libstagefright/rtsp/AH263Assembler.cpp
+++ b/media/libstagefright/rtsp/AH263Assembler.cpp
@@ -186,7 +186,7 @@ void AH263Assembler::submitAccessUnit() {
     fflush(stdout);
 #endif
 
-    if (mAccessUnitDamaged) {
+    if (accessUnitDamaged()) {
         accessUnit->meta()->setInt32("damaged", true);
     }
 
@@ -211,5 +211,40 @@ void AH263Assembler::onByeReceived() {
     msg->post();
 }
 
+bool AH263Assembler::accessUnitDamaged() {
+    if (!mAccessUnitDamaged) {
+        return false;
+    } else if (mPackets.empty()) {
+        return true;
+    }
+    int32_t marker = 0;
+    int32_t lastSeq = -1;
+    List<sp<ABuffer> >::iterator it = mPackets.begin();
+    while (it != mPackets.end()) {
+        const sp<ABuffer> &unit = *it;
+        if (unit->meta()->findInt32("M", &marker)) {
+            ALOGV("Find marker is %d", marker);
+        } else {
+            ALOGV("Not find the marker");
+        }
+        if (lastSeq == -1) {
+            lastSeq = (int32_t)(*it)->int32Data();
+        } else {
+            int32_t seq = (int32_t)(*it)->int32Data();
+            if (seq - lastSeq != 1) {
+                // not continuous
+               return true;
+            }
+            lastSeq = seq;
+        }
+        ++it;
+
+    }
+    if (marker != 1) {
+        return true;
+    }
+    return false;
+}
+
 }  // namespace android
 
diff --git a/media/libstagefright/rtsp/AH263Assembler.h b/media/libstagefright/rtsp/AH263Assembler.h
index 2b6c625..70ae869 100644
--- a/media/libstagefright/rtsp/AH263Assembler.h
+++ b/media/libstagefright/rtsp/AH263Assembler.h
@@ -48,6 +48,7 @@ private:
 
     AssemblyStatus addPacket(const sp<ARTPSource> &source);
     void submitAccessUnit();
+    bool accessUnitDamaged();
 
     DISALLOW_EVIL_CONSTRUCTORS(AH263Assembler);
 };
diff --git a/media/libstagefright/rtsp/AMPEG4ElementaryAssembler.cpp b/media/libstagefright/rtsp/AMPEG4ElementaryAssembler.cpp
index eefceba..b9176a1 100644
--- a/media/libstagefright/rtsp/AMPEG4ElementaryAssembler.cpp
+++ b/media/libstagefright/rtsp/AMPEG4ElementaryAssembler.cpp
@@ -384,7 +384,7 @@ void AMPEG4ElementaryAssembler::submitAccessUnit() {
     fflush(stdout);
 #endif
 
-    if (mAccessUnitDamaged) {
+    if (accessUnitDamaged()) {
         accessUnit->meta()->setInt32("damaged", true);
     }
 
@@ -419,5 +419,40 @@ void AMPEG4ElementaryAssembler::onByeReceived() {
     msg->setInt32("eos", true);
     msg->post();
 }
+bool AMPEG4ElementaryAssembler::accessUnitDamaged() {
+    if (!mAccessUnitDamaged) {
+        return false;
+    } else if (mPackets.empty()) {
+        return true;
+    }
+    int32_t marker = 0;
+    int32_t lastSeq = -1;
+    List<sp<ABuffer> >::iterator it = mPackets.begin();
+    while (it != mPackets.end()) {
+        const sp<ABuffer> &unit = *it;
+        if (unit->meta()->findInt32("M", &marker)) {
+            ALOGV("Find marker is %d", marker);
+        } else {
+            ALOGV("Not find the marker");
+        }
+        if (lastSeq == -1) {
+            lastSeq = (int32_t)(*it)->int32Data();
+        } else {
+            int32_t seq = (int32_t)(*it)->int32Data();
+            if (seq - lastSeq != 1) {
+                // not continuous
+               return true;
+            }
+            lastSeq = seq;
+        }
+        ++it;
+
+    }
+    if (marker != 1) {
+        return true;
+    }
+    return false;
+
+}
 
 }  // namespace android
diff --git a/media/libstagefright/rtsp/AMPEG4ElementaryAssembler.h b/media/libstagefright/rtsp/AMPEG4ElementaryAssembler.h
index 693fca5..2dfc381 100644
--- a/media/libstagefright/rtsp/AMPEG4ElementaryAssembler.h
+++ b/media/libstagefright/rtsp/AMPEG4ElementaryAssembler.h
@@ -70,6 +70,7 @@ private:
 
     AssemblyStatus addPacket(const sp<ARTPSource> &source);
     void submitAccessUnit();
+    bool accessUnitDamaged();
 
     DISALLOW_EVIL_CONSTRUCTORS(AMPEG4ElementaryAssembler);
 };
-- 
1.7.4.1

