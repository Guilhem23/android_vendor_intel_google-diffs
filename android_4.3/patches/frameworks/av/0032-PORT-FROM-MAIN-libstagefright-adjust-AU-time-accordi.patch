From 13332d2f2c0d201d65342c333b64092e6284c60b Mon Sep 17 00:00:00 2001
From: ywan171 <yi.a.wang@intel.com>
Date: Fri, 3 May 2013 15:43:17 +0800
Subject: [PORT FROM MAIN] libstagefright: adjust AU time according to the first AU timestamp

BZ: 50139 50152

fix google bug in rtsp streaming to improve user's experience.
google calculates each AU timestamp according to the first SR
and drops AUs before the first SR. The steaming server usually sends
SR in 3-5s,so it will drop the first 3-5 AU leading the playing
short, meanwhile if the GOP is large, it will cause black screen
for first I is dropped. adjust the timpstamp according to the first
AU timestamp

Orig-Change-Id: Ie1658da9dae797f18f89a570883e7d0a0b2c8100

Change-Id: Ib3005e253e842ba7bd409abacfdfd0f7260efdc3
Signed-off-by: ywan171 <yi.a.wang@intel.com>
---
 media/libstagefright/rtsp/MyHandler.h |   25 +++++++++++++++++++------
 1 files changed, 19 insertions(+), 6 deletions(-)

diff --git a/media/libstagefright/rtsp/MyHandler.h b/media/libstagefright/rtsp/MyHandler.h
index 39b180c..9cee48a 100644
--- a/media/libstagefright/rtsp/MyHandler.h
+++ b/media/libstagefright/rtsp/MyHandler.h
@@ -123,6 +123,8 @@ struct MyHandler : public AHandler {
           mTryFakeRTCP(false),
           mReceivedFirstRTCPPacket(false),
           mReceivedFirstRTPPacket(false),
+          mFirstAccessUnitMediaTimeValid(true),
+          mFirstAccessUnitMediaTime(0),
           mSeekable(true),
           mKeepAliveTimeoutUs(kDefaultKeepAliveTimeoutUs),
           mKeepAliveGeneration(0),
@@ -855,7 +857,7 @@ struct MyHandler : public AHandler {
                 mReceivedFirstRTPPacket = false;
                 mPausing = false;
                 mSeekable = true;
-
+                mFirstAccessUnitMediaTimeValid = true;
                 sp<AMessage> reply = new AMessage('tear', id());
 
                 int32_t reconnect;
@@ -1525,6 +1527,8 @@ private:
     int32_t mKeepAliveGeneration;
     bool mPausing;
     int32_t mPauseGeneration;
+    bool mFirstAccessUnitMediaTimeValid;
+    int64_t mFirstAccessUnitMediaTime;
 
     Vector<TrackInfo> mTracks;
 
@@ -1827,13 +1831,22 @@ private:
 
         int64_t mediaTimeUs = mMediaAnchorUs + ntpTimeUs - mNTPAnchorUs;
 
-        if (mediaTimeUs > mLastMediaTimeUs) {
-            mLastMediaTimeUs = mediaTimeUs;
+        // record the first AccessUnit MediaTime to adjust the mediaTime of
+        // access unit arrive then.
+        if (mFirstAccessUnitMediaTimeValid ) {
+	    mFirstAccessUnitMediaTime = mediaTimeUs;
+            mFirstAccessUnitMediaTimeValid = false;
+	}
+
+        if (mediaTimeUs < mFirstAccessUnitMediaTime) {
+            mFirstAccessUnitMediaTime = mediaTimeUs;
         }
 
-        if (mediaTimeUs < 0) {
-            ALOGV("dropping early accessUnit.");
-            return false;
+        // adjust the mediaTimeUs according to the mFirstAccessUnitMediaTime
+	// to avoid the drop of the first few accessunit before first SR
+        mediaTimeUs = mediaTimeUs - mFirstAccessUnitMediaTime;
+        if (mediaTimeUs > mLastMediaTimeUs) {
+            mLastMediaTimeUs = mediaTimeUs;
         }
 
         ALOGV("track %d rtpTime=%d mediaTimeUs = %lld us (%.2f secs)",
-- 
1.7.4.1

