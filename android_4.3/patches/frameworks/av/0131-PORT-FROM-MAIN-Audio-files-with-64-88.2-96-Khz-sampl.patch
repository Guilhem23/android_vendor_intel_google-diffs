From 69b9548aaae215f284796210cf36011e82a0313c Mon Sep 17 00:00:00 2001
From: Arulselvan M <arulselvan.m@intel.com>
Date: Fri, 31 May 2013 00:04:22 +0530
Subject: [PORT FROM MAIN]Audio files with 64/88.2/96 Khz sample rate can not play.

BZ: 56363

The issue is due to the initial check verifying whether the
sampling rate is supported by Intel SRC and then playing
only the Intel SRC supported sampling rates. Putting this
check only for larger sampling rates > 2*(maximum supported
sampling rate) will allow the files having sampling rates
(64/88.2 Khz) <= 2*(maximum supported sampling rate),
that are not supported by Intel SRC to be played. Putting a
check for Intel SRC supported sampling rates in AudioTrack
will allow files having sampling rate of 96 Khz to be
played. This patch also enables logs for AudioResampler and
AudioResamplerIA.

Change-Id: Ief741aabe7274de729727852a349d27cfa10d740
Orig-Change-Id: Id5753127e06500273a3f859664e758fdb7cd19c6
Signed-off-by: Charitardha <satya.charitardha.jayanti@intel.com>
Signed-off-by: Arulselvan M <arulselvan.m@intel.com>
---
 media/libmedia/Android.mk                  |    6 ++++++
 media/libmedia/AudioTrack.cpp              |   14 +++++++++++---
 services/audioflinger/AudioResampler.cpp   |    2 +-
 services/audioflinger/AudioResamplerIA.cpp |    2 +-
 services/audioflinger/Threads.cpp          |    8 ++++----
 5 files changed, 23 insertions(+), 9 deletions(-)

diff --git a/media/libmedia/Android.mk b/media/libmedia/Android.mk
index f27e9ce..9936d47 100644
--- a/media/libmedia/Android.mk
+++ b/media/libmedia/Android.mk
@@ -100,4 +100,10 @@ LOCAL_C_INCLUDES := \
     $(call include-path-for, audio-effects) \
     $(call include-path-for, audio-utils)
 
+ifeq ($(USE_INTEL_SRC), true)
+  LOCAL_CFLAGS += -DUSE_INTEL_SRC
+  LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/libaudioresample
+  LOCAL_SHARED_LIBRARIES += libaudioresample
+endif
+
 include $(BUILD_SHARED_LIBRARY)
diff --git a/media/libmedia/AudioTrack.cpp b/media/libmedia/AudioTrack.cpp
index ec8c12f..ef1c0f0 100644
--- a/media/libmedia/AudioTrack.cpp
+++ b/media/libmedia/AudioTrack.cpp
@@ -45,6 +45,12 @@
 
 #include <audio_utils/primitives.h>
 
+#ifdef USE_INTEL_SRC
+#include "iasrc_resampler.h"
+#endif
+
+#define OFFLOAD_MULTIPLIER 100
+#define DEFAULT_MULTIPLIER 1
 namespace android {
 // ---------------------------------------------------------------------------
 
@@ -527,9 +533,11 @@ status_t AudioTrack::setSampleRate(uint32_t rate)
         return NO_INIT;
     }
     // Resampler implementation limits input sampling rate to 2 x output sampling rate.
-    if (rate == 0 || rate > afSamplingRate*2 ) {
-        return BAD_VALUE;
-    }
+    if ((rate <= 0 || rate > afSamplingRate*2)
+#ifdef USE_INTEL_SRC
+    && !iaresamplib_supported_conversion(rate, afSamplingRate)
+#endif
+    ) return BAD_VALUE;
 
     AutoMutex lock(mLock);
     mSampleRate = rate;
diff --git a/services/audioflinger/AudioResampler.cpp b/services/audioflinger/AudioResampler.cpp
index c8fb3b9..5712a56 100644
--- a/services/audioflinger/AudioResampler.cpp
+++ b/services/audioflinger/AudioResampler.cpp
@@ -209,7 +209,7 @@ AudioResampler* AudioResampler::create(int bitDepth, int inChannelCount,
     case INTEL_MED_QUALITY:
     case INTEL_HIGH_QUALITY:
     case INTEL_VERY_HIGH_QUALITY:
-        LOGV("Create intel  Resampler");
+        ALOGV("Create intel  Resampler");
         resampler = new AudioResamplerIA(bitDepth, inChannelCount, sampleRate);
         break;
 #endif
diff --git a/services/audioflinger/AudioResamplerIA.cpp b/services/audioflinger/AudioResamplerIA.cpp
index cc19fc8..6726977 100644
--- a/services/audioflinger/AudioResamplerIA.cpp
+++ b/services/audioflinger/AudioResamplerIA.cpp
@@ -70,7 +70,7 @@ void AudioResamplerIA::setSampleRate(int32_t inSampleRate)
         delete [] mFloatOut;
         mFloatOut = new float[(mMaxInputBufferSize+64)*mSampleRate/mInSampleRate];
         mReinitNeeded = 0;
-        LOGD("Create AudioResamplerIA Resampler: Input rate %i, output rate %i",
+        ALOGD("Create AudioResamplerIA Resampler: Input rate %i, output rate %i",
              mInSampleRate, mSampleRate);
     }
 }
diff --git a/services/audioflinger/Threads.cpp b/services/audioflinger/Threads.cpp
index 6b6a4ce..6365b3b 100644
--- a/services/audioflinger/Threads.cpp
+++ b/services/audioflinger/Threads.cpp
@@ -1184,13 +1184,13 @@ sp<AudioFlinger::PlaybackThread::Track> AudioFlinger::PlaybackThread::createTrac
             }
         }
     } else {
+         // Resampler implementation limits input sampling rate to 2 x output sampling rate.
+        if ((sampleRate > mSampleRate*2)
 #ifdef USE_INTEL_SRC
         //check if Intel SRC support this conversion
-        if (!AudioResamplerIA::sampleRateSupported(sampleRate, mSampleRate)) {
-#else
-        // Resampler implementation limits input sampling rate to 2 x output sampling rate.
-        if (sampleRate > mSampleRate*2) {
+        && (!AudioResamplerIA::sampleRateSupported(sampleRate, mSampleRate))
 #endif
+        ) {
             ALOGE("Sample rate out of range: %u mSampleRate %u", sampleRate, mSampleRate);
             lStatus = BAD_VALUE;
             goto Exit;
-- 
1.7.4.1

