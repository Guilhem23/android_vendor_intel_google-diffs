From e5226c565bf5976dc030652ab23d1aeb4473a661 Mon Sep 17 00:00:00 2001
From: samaga Prasanna Krishna <samaga.krishna@intel.com>
Date: Thu, 29 Nov 2012 15:26:06 +0530
Subject: [PORT FROM MAIN]Audio-Offload: isInCall check in AwesomePlayer

BZ: 68961

A check of isInCall is made in Awesome player to check if the
device is in phone call or communication mode. The AudioFlinger
mode is used for this.
If the phone is in call, music offload is not supported. The
playback will happen using IA decoding

Orig-Change-Id: Ia8ea7e8aed7d8ec30c286ea6e06888bdd62eaa7a
orig-Change-Id: I2ab21529bd72623a51f95e99377f96565dc843ac
Signed-off-by: samaga Prasanna Krishna <samaga.krishna@intel.com>

Change-Id: I988e3721c3b1a61bad2d01475b3a5aa1d9a9fb69
Signed-off-by: Arulselvan M <arulselvan.m@intel.com>
---
 include/media/IAudioFlinger.h                |    2 ++
 media/libmedia/IAudioFlinger.cpp             |   16 +++++++++++++++-
 media/libstagefright/AwesomePlayer.cpp       |   20 +++++++++++++++++++-
 media/libstagefright/include/AwesomePlayer.h |    1 +
 services/audioflinger/AudioFlinger.h         |    7 +++----
 5 files changed, 40 insertions(+), 6 deletions(-)

diff --git a/include/media/IAudioFlinger.h b/include/media/IAudioFlinger.h
index 1810d0b..2b578f4 100644
--- a/include/media/IAudioFlinger.h
+++ b/include/media/IAudioFlinger.h
@@ -115,6 +115,8 @@ public:
 
     // set audio mode
     virtual     status_t    setMode(audio_mode_t mode) = 0;
+    // get audio mode
+    virtual audio_mode_t   getMode() const  = 0;
 
     // mic mute/state
     virtual     status_t    setMicMute(bool state) = 0;
diff --git a/media/libmedia/IAudioFlinger.cpp b/media/libmedia/IAudioFlinger.cpp
index 6ba95bd..76321b4 100644
--- a/media/libmedia/IAudioFlinger.cpp
+++ b/media/libmedia/IAudioFlinger.cpp
@@ -74,7 +74,8 @@ enum {
     GET_PRIMARY_OUTPUT_SAMPLING_RATE,
     GET_PRIMARY_OUTPUT_FRAME_COUNT,
     GET_OFFLOAD_BUFFER_SIZE,
-    IS_EFFECTS_ENABLED
+    IS_EFFECTS_ENABLED,
+    GET_MODE
 };
 
 class BpAudioFlinger : public BpInterface<IAudioFlinger>
@@ -300,6 +301,14 @@ public:
         return reply.readInt32();
     }
 
+    virtual audio_mode_t getMode() const
+    {
+        Parcel data, reply;
+        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
+        status_t status = remote()->transact(GET_MODE, data, &reply);
+        return (( audio_mode_t)reply.readInt32());
+    }
+
     virtual status_t setMicMute(bool state)
     {
         Parcel data, reply;
@@ -852,6 +861,11 @@ status_t BnAudioFlinger::onTransact(
             reply->writeInt32( setMode(mode) );
             return NO_ERROR;
         } break;
+        case GET_MODE: {
+            CHECK_INTERFACE(IAudioFlinger, data, reply);
+            reply->writeInt32( getMode() );
+            return NO_ERROR;
+        } break;
         case SET_MIC_MUTE: {
             CHECK_INTERFACE(IAudioFlinger, data, reply);
             int state = data.readInt32();
diff --git a/media/libstagefright/AwesomePlayer.cpp b/media/libstagefright/AwesomePlayer.cpp
index 44ad267..384f0e4 100644
--- a/media/libstagefright/AwesomePlayer.cpp
+++ b/media/libstagefright/AwesomePlayer.cpp
@@ -967,7 +967,7 @@ status_t AwesomePlayer::play() {
 
     //  Before play, we should query audio flinger to see if any effect is enabled.
     //  if (effect is enabled) we should do another prepare w/ IA SW decoding
-    if (mOffload && (isAudioEffectEnabled() ||
+    if (mOffload && ( isInCall() || isAudioEffectEnabled() ||
         (AudioSystem::getDeviceConnectionState(AUDIO_DEVICE_OUT_AUX_DIGITAL, "")
          == AUDIO_POLICY_DEVICE_STATE_AVAILABLE) ||
         (AudioSystem::getDeviceConnectionState(AUDIO_DEVICE_OUT_BLUETOOTH_A2DP, "")
@@ -1698,6 +1698,7 @@ status_t AwesomePlayer::initAudioDecoder() {
         mAudioSource = mAudioTrack;
     } else if (!strcasecmp(mime, MEDIA_MIMETYPE_AUDIO_RAW)) {
         mAudioSource = mAudioTrack;
+        mOffload = false;
     } else {
         // For non PCM the out put format will be PCM 16 bit.
         // Set it for player creation
@@ -1707,6 +1708,7 @@ status_t AwesomePlayer::initAudioDecoder() {
                     false, // createEncoder
                     mAudioTrack);
         mAudioFormat = AUDIO_FORMAT_PCM_16_BIT;
+        mOffload = false;
     }
 #else
     if (!strcasecmp(mime, MEDIA_MIMETYPE_AUDIO_RAW)) {
@@ -3517,6 +3519,22 @@ void AwesomePlayer::onAudioOffloadTearDownEvent() {
 #endif
 }
 
+bool AwesomePlayer::isInCall() {
+#ifdef INTEL_MUSIC_OFFLOAD_FEATURE
+    ALOGV("isInCall");
+    audio_mode_t mode;
+    const sp<IAudioFlinger>& audioFlinger = AudioSystem::get_audio_flinger();
+
+    if (audioFlinger != 0) {
+        mode = audioFlinger->getMode();
+        ALOGV("isInCall: Mode read from AF = %d", mode);
+    }
+    return ((mode == AUDIO_MODE_IN_CALL) ||
+            (mode == AUDIO_MODE_IN_COMMUNICATION));
+#endif
+    return false;
+}
+
 bool AwesomePlayer::isAudioEffectEnabled() {
 #ifdef INTEL_MUSIC_OFFLOAD_FEATURE
     ALOGV("isAudioEffectEnabled");
diff --git a/media/libstagefright/include/AwesomePlayer.h b/media/libstagefright/include/AwesomePlayer.h
index f0b7c78..bd31396 100644
--- a/media/libstagefright/include/AwesomePlayer.h
+++ b/media/libstagefright/include/AwesomePlayer.h
@@ -368,6 +368,7 @@ private:
     void postAudioOffloadTearDownEvent_l();
     void onAudioOffloadTearDownEvent();
     bool isAudioEffectEnabled();
+    bool isInCall();
     status_t createAudioPlayer(audio_format_t audioFormat,
                                int sampleRate,
                                int channelsCount,
diff --git a/services/audioflinger/AudioFlinger.h b/services/audioflinger/AudioFlinger.h
index 17a02eb..6fca2f4 100644
--- a/services/audioflinger/AudioFlinger.h
+++ b/services/audioflinger/AudioFlinger.h
@@ -229,6 +229,7 @@ public:
             int output);
 
     virtual bool isAudioEffectEnabled(int sessionId) const;
+    virtual audio_mode_t getMode() const { return mMode; }
     // end of IAudioFlinger interface
 
     sp<NBLog::Writer>   newWriter_l(size_t size, const char *name);
@@ -278,11 +279,9 @@ public:
                                         sync_event_callback_t callBack,
                                         void *cookie);
 
-private:
-    class AudioHwDevice;    // fwd declaration for findSuitableHwDev_l
-
-               audio_mode_t getMode() const { return mMode; }
 
+private:
+   class AudioHwDevice;    // fwd declaration for findSuitableHwDev_l
                 bool        btNrecIsOff() const { return mBtNrecIsOff; }
 
                             AudioFlinger();
-- 
1.7.4.1

