From 6d2bb649127ab9828f3048a063b7138bec4429b9 Mon Sep 17 00:00:00 2001
From: samaga Prasanna Krishna <samaga.krishna@intel.com>
Date: Wed, 26 Sep 2012 11:10:20 +0530
Subject: [PORT FROM MAIN]System has to go to standby when no playback activity

BZ: 59210

This patch will enable the system to go to standby mode when no
playback activity is reported after standby time i.e. 3 seconds.

Change-Id: I46966745296a59f35525fc24bc3e1b898b81c788
Orig-Change-Id: I9082de3f227887636be30dacb176d4e8c15f4396
OrigChange-Id: I2ee20e103874bc84984fe992b06b62594d352732
Signed-off-by: samaga Prasanna Krishna <samaga.krishna@intel.com>
Signed-off-by: Arulselvan M <arulselvan.m@intel.com>
---
 media/libstagefright/AwesomePlayer.cpp       |   15 ++++++++++++---
 media/libstagefright/include/AwesomePlayer.h |    4 ++--
 2 files changed, 14 insertions(+), 5 deletions(-)

diff --git a/media/libstagefright/AwesomePlayer.cpp b/media/libstagefright/AwesomePlayer.cpp
index f31417c..d3c254f 100644
--- a/media/libstagefright/AwesomePlayer.cpp
+++ b/media/libstagefright/AwesomePlayer.cpp
@@ -1316,7 +1316,7 @@ status_t AwesomePlayer::pause() {
 #ifdef INTEL_MUSIC_OFFLOAD_FEATURE
     if (mOffload) {
         timer_delete(mPausedTimerId);
-        offloadPauseStartTimer(OFFLOAD_PAUSED_TIMEOUT_DURATION);
+        offloadPauseStartTimer(OFFLOAD_PAUSED_TIMEOUT_DURATION, true);
     }
 #endif
 
@@ -1336,6 +1336,14 @@ status_t AwesomePlayer::pause_l(bool at_eos) {
             // want to make sure that all samples remaining in the audio
             // track's queue are played out.
             mAudioPlayer->pause(true /* playPendingSamples */);
+#ifdef INTEL_MUSIC_OFFLOAD_FEATURE
+            // During offload, enter standby after 3 seconds
+            // if no playback activity.
+            if (mOffload) {
+                timer_delete(mPausedTimerId);
+                offloadPauseStartTimer(OFFLOAD_STANDBY_TIMEOUT_DURATION, true);
+            }
+#endif
         } else {
             mAudioPlayer->pause();
         }
@@ -1518,6 +1526,7 @@ status_t AwesomePlayer::getPosition(int64_t *positionUs) {
     // We know that we have closed it to save power.
     if (mOffload && mOffloadTearDownForPause) {
         *positionUs = mOffloadPauseUs;
+         return OK;
     }
 #endif
     // set current position to duration when EOS.
@@ -3382,7 +3391,7 @@ status_t AwesomePlayer::setAACParameters(sp<MetaData> meta, audio_format_t *aFor
  * in the configured duration. On timer expiry the callback function will
  * be invoked
  */
-void AwesomePlayer::offloadPauseStartTimer(int64_t time) {
+void AwesomePlayer::offloadPauseStartTimer(int64_t time, bool at_pause) {
 #ifdef INTEL_MUSIC_OFFLOAD_FEATURE
     struct sigevent  pausedEvent;
     struct itimerspec its;
@@ -3390,7 +3399,7 @@ void AwesomePlayer::offloadPauseStartTimer(int64_t time) {
     timer_delete(mPausedTimerId);
     memset(&pausedEvent,0, sizeof(sigevent));
     pausedEvent.sigev_notify = SIGEV_THREAD;
-    if( time == OFFLOAD_PAUSED_TIMEOUT_DURATION) {
+    if (at_pause) {
         pausedEvent.sigev_notify_function = &timerCallback;
     } else {
 
diff --git a/media/libstagefright/include/AwesomePlayer.h b/media/libstagefright/include/AwesomePlayer.h
index 30ef64a..f0b7c78 100644
--- a/media/libstagefright/include/AwesomePlayer.h
+++ b/media/libstagefright/include/AwesomePlayer.h
@@ -38,6 +38,7 @@ extern "C" void timerCallbackEOS(union sigval);
 
 namespace android {
 #define OFFLOAD_PAUSED_TIMEOUT_DURATION  10000000  //in micro seconds
+#define OFFLOAD_STANDBY_TIMEOUT_DURATION  3000000  //in micro seconds
 struct AudioPlayer;
 struct DataSource;
 struct MediaBuffer;
@@ -110,8 +111,7 @@ struct AwesomePlayer {
     void postAudioSeekComplete();
 
     status_t dump(int fd, const Vector<String16> &args) const;
-    
-    void offloadPauseStartTimer(int64_t time);
+    void offloadPauseStartTimer(int64_t time, bool at_pause = false);
     status_t offloadSuspend();
     status_t offloadResume();
     bool mOffloadCalAudioEOS;
-- 
1.7.4.1

