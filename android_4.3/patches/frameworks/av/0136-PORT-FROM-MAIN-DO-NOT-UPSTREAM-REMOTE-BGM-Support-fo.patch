From 2d542720aa22472218633238f599c871274ee1b8 Mon Sep 17 00:00:00 2001
From: jerome <jerome.anand@intel.com>
Date: Mon, 18 Mar 2013 16:19:24 +0530
Subject: [PORT FROM MAIN][DO NOT UPSTREAM][REMOTE BGM] Support for any play order

BZ: 93761

This patch make sure that the sink/track gets recreated if
it was already started by another player. This recreation will
make sure the track/ sink is cleaned up for use by BGM and the
other application will be assigned other audio outputs other
than the one used by BG player

Change-Id: I4ec8acc7b1571b5b609e5b4147701a03ec0ce43c
Orig-Change-Id: Ie747a8c32fe821ee39e99ece06778604f1175972
Signed-off-by: jerome <jerome.anand@intel.com>
Signed-off-by: jerome <jerome.anand@intel.com>
---
 media/libstagefright/AwesomePlayer.cpp       |   80 +++++++++++++++++++++++++-
 media/libstagefright/include/AwesomePlayer.h |    8 +++
 2 files changed, 87 insertions(+), 1 deletions(-)

diff --git a/media/libstagefright/AwesomePlayer.cpp b/media/libstagefright/AwesomePlayer.cpp
index 36981db..3d7f83c 100644
--- a/media/libstagefright/AwesomePlayer.cpp
+++ b/media/libstagefright/AwesomePlayer.cpp
@@ -201,7 +201,13 @@ AwesomePlayer::AwesomePlayer()
       mVideoBuffer(NULL),
       mDecryptHandle(NULL),
       mLastVideoTimeUs(-1),
-      mTextDriver(NULL) {
+      mTextDriver(NULL)
+#ifdef BGM_ENABLED
+      ,
+      mRemoteBGMsuspend(false),
+      mBGMEnabled(false)
+#endif
+      {
     CHECK_EQ(mClient.connect(), (status_t)OK);
 
     DataSource::RegisterDefaultSniffers();
@@ -874,6 +880,19 @@ void AwesomePlayer::onStreamDone() {
 
 status_t AwesomePlayer::play() {
     ATRACE_CALL();
+#ifdef BGM_ENABLED
+    status_t err = UNKNOWN_ERROR;
+    // If BGM is enabled, then the output associated with the
+    // active track needs to be de-associated, so that it gets
+    // multitasked to other available audio outputs
+    err = remoteBGMSuspend();
+    if((mRemoteBGMsuspend) && (err == OK)) {
+       err = remoteBGMResume();
+       if(err != OK)
+         ALOGW("[BGMUSIC] .. oops!! behaviour undefined");
+       mRemoteBGMsuspend = false;
+    }
+#endif //BGM_ENABLED
 
     Mutex::Autolock autoLock(mLock);
 
@@ -2784,4 +2803,63 @@ void AwesomePlayer::modifyFlags(unsigned value, FlagMode mode) {
     }
 }
 
+#ifdef BGM_ENABLED
+status_t AwesomePlayer::remoteBGMSuspend() {
+
+    // If BGM is enabled or enabled previouslt and exited then the
+    // track/ sink needs to be closed and recreated again so that
+    // music is heard on active output and not on multitasked output
+    if(mFlags & AUDIOPLAYER_STARTED) {
+       ALOGD("[BGMUSIC] %s :: reset the audio player",__func__);
+       // Store the current status and use it while starting for IA decoding
+       // Terminate the active stream by calling reset_l()
+       Stats stats;
+       uint32_t extractorFlags;
+       stats.mURI = mUri;
+       stats.mUriHeaders = mUriHeaders;
+       stats.mFileSource = mFileSource;
+       stats.mFlags = mFlags & (PLAYING | AUTO_LOOPING | LOOPING | AT_EOS);
+       getPosition(&stats.mPositionUs);
+       mOffloadPauseUs = stats.mPositionUs;
+       extractorFlags = mExtractorFlags;
+       mExtractorFlags = extractorFlags;
+       mStats = stats;
+       reset_l();
+       mRemoteBGMsuspend = true;
+    }
+
+    return OK;
+}
+status_t AwesomePlayer::remoteBGMResume() {
+
+    Mutex::Autolock autoLock(mLock);
+
+    Stats stats = mStats;
+
+    status_t err;
+    if (stats.mFileSource != NULL) {
+        err = setDataSource_l(stats.mFileSource);
+
+        if (err == OK) {
+            mFileSource = stats.mFileSource;
+        }
+    } else {
+        err = setDataSource_l(stats.mURI, &stats.mUriHeaders);
+    }
+
+    if (err != OK) {
+        return err;
+    }
+
+    seekTo_l(stats.mPositionUs);
+    mFlags = stats.mFlags & (AUTO_LOOPING | LOOPING | AT_EOS);
+
+    // Update the flag
+    mStats.mFlags = mFlags;
+
+    ALOGD("[BGMUSIC] audio track/sink recreated successfully");
+    return OK;
+}
+#endif //BGM_ENABLED
+
 }  // namespace android
diff --git a/media/libstagefright/include/AwesomePlayer.h b/media/libstagefright/include/AwesomePlayer.h
index db5d8f0..750f99a 100644
--- a/media/libstagefright/include/AwesomePlayer.h
+++ b/media/libstagefright/include/AwesomePlayer.h
@@ -107,6 +107,10 @@ struct AwesomePlayer {
 
     status_t dump(int fd, const Vector<String16> &args) const;
 
+#ifdef BGM_ENABLED
+    status_t remoteBGMSuspend();
+    status_t remoteBGMResume();
+#endif
 private:
     friend struct AwesomeEvent;
     friend struct PreviewPlayer;
@@ -345,6 +349,10 @@ private:
 
     AwesomePlayer(const AwesomePlayer &);
     AwesomePlayer &operator=(const AwesomePlayer &);
+#ifdef BGM_ENABLED
+    bool mRemoteBGMsuspend;
+    bool mBGMEnabled;
+#endif
 
 #ifdef LVSE
     sp<LVAudioSource> mLVAudioSource;
-- 
1.7.4.1

