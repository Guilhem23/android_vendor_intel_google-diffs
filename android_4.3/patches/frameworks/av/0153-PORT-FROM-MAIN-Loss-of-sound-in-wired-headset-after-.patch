From fd4ed83a3084c7019ed3849afff0357195c9c60b Mon Sep 17 00:00:00 2001
From: Arulselvan M <arulselvan.m@intel.com>
Date: Sat, 22 Jun 2013 00:27:29 +0530
Subject: [PORT FROM MAIN]Loss of sound in wired headset after taking screenshot

BZ: 79814

This patch fixes loss of sound in wired headset after taking
screenshot, while playing a video.

One of the offload flag, mOffloadEOSReached, was not protected with
INTEL_MUSIC_OFFLOAD_FEATURE flag in AudioTrack::processAudioBuffer()
and due to this stop call was not propagated to AudioFlinger.

Along with mOffloadEOSReached, few more lines of code is proteced
with INTEL_MUSIC_OFFLOAD_FEATURE flag.

Change-Id: Ib6f69c55275717959e898a4767d0d29761612261
Orig-Change-Id: Id160fdd7f702b180ec3d60e517f633be1b4355f2
Signed-off-by: samaga Prasanna Krishna <samaga.krishna@intel.com>
Signed-off-by: Arulselvan M <arulselvan.m@intel.com>
---
 media/libmedia/AudioTrack.cpp    |   11 ++++++++++-
 services/audioflinger/Tracks.cpp |   13 ++++++++++++-
 2 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/media/libmedia/AudioTrack.cpp b/media/libmedia/AudioTrack.cpp
index cb39645..e526f3a 100644
--- a/media/libmedia/AudioTrack.cpp
+++ b/media/libmedia/AudioTrack.cpp
@@ -107,6 +107,7 @@ AudioTrack::AudioTrack()
 #ifdef INTEL_MUSIC_OFFLOAD_FEATURE
     mOutput = 0;
     mBitRate = 0;
+    mOffloadEOSReached = 0;
 #endif
 }
 
@@ -570,7 +571,9 @@ void AudioTrack::flush_l()
         // Release AudioTrack callback thread in case it was waiting for new buffers
         // in AudioTrack::obtainBuffer()
 
+#ifdef INTEL_MUSIC_OFFLOAD_FEATURE
         mOffloadEOSReached = false;
+#endif
         mCblk->cv.signal();
     }
 }
@@ -1122,6 +1125,7 @@ status_t AudioTrack::obtainBuffer(Buffer* audioBuffer, int32_t waitCount)
 
     cblk->lock.lock();
     if (cblk->flags & CBLK_INVALID) {
+#ifdef INTEL_MUSIC_OFFLOAD_FEATURE
 //To be checked
 //    if (cblk->flags & CBLK_INVALID_MSK) {
         // no need to clear the invalid flag as this cblk will not be used anymore
@@ -1130,6 +1134,7 @@ status_t AudioTrack::obtainBuffer(Buffer* audioBuffer, int32_t waitCount)
             cblk->lock.unlock();
             return TEAR_DOWN;
         }
+#endif
         goto create_new_track;
     }
     cblk->lock.unlock();
@@ -1445,8 +1450,12 @@ bool AudioTrack::processAudioBuffer(const sp<AudioTrackThread>& thread)
 #endif
 
     // Manage underrun callback
+#ifdef INTEL_MUSIC_OFFLOAD_FEATURE
     if (!mOffloadEOSReached &&
         active && (cblk->framesAvailable() == cblk->frameCount)) {
+#else
+    if (active && (cblk->framesAvailable() == cblk->frameCount)) {
+#endif
         ALOGV("Underrun user: %x, server: %x, flags %04x", cblk->user, cblk->server, cblk->flags);
         if (!(android_atomic_or(CBLK_UNDERRUN, &cblk->flags) & CBLK_UNDERRUN)) {
             mCbf(EVENT_UNDERRUN, mUserData, 0);
@@ -1545,7 +1554,7 @@ bool AudioTrack::processAudioBuffer(const sp<AudioTrackThread>& thread)
             // still try to get more data in intervals of WAIT_PERIOD_MS
             // but don't just loop and block the CPU, so wait
 #ifdef INTEL_MUSIC_OFFLOAD_FEATURE
-            if (mFlags & AUDIO_OUTPUT_FLAG_COMPRESS_OFFLOAD & mOffloadEOSReached) {
+            if ((mFlags & AUDIO_OUTPUT_FLAG_COMPRESS_OFFLOAD && mOffloadEOSReached)) {
                 ALOGV("processAudioBuffer: EOS reached, sleeping for 100 ms");
                 usleep(OFFLOAD_WAIT_PERIOD_MS*1000);
             } else {
diff --git a/services/audioflinger/Tracks.cpp b/services/audioflinger/Tracks.cpp
index 0542b85..fd27b3d 100644
--- a/services/audioflinger/Tracks.cpp
+++ b/services/audioflinger/Tracks.cpp
@@ -102,6 +102,7 @@ AudioFlinger::ThreadBase::TrackBase::TrackBase(
 
     // ALOGD("Creating track with %d buffers @ %d bytes", bufferCount, bufferSize);
     size_t size = sizeof(audio_track_cblk_t);
+#ifdef INTEL_MUSIC_OFFLOAD_FEATURE
     size_t bufferSize;
     if ( audio_is_linear_pcm(format) ) {
         // fixed 16-bit samples
@@ -113,7 +114,9 @@ AudioFlinger::ThreadBase::TrackBase::TrackBase(
         bufferSize = frameCount;
         ALOGV( "compressed: bufferSize = %d", bufferSize );
     }
-
+#else
+    size_t bufferSize = frameCount*channelCount*sizeof(int16_t);
+#endif
     if (sharedBuffer == 0) {
         size += bufferSize;
     }
@@ -723,8 +726,12 @@ void AudioFlinger::PlaybackThread::Track::stop()
     if (thread != 0) {
         Mutex::Autolock _l(thread->mLock);
         track_state state = mState;
+#ifdef INTEL_MUSIC_OFFLOAD_FEATURE
         if (state == RESUMING || state == ACTIVE || state == PAUSING || 
             state == PAUSED || state == STOPPING_1 || state == STOPPING_2) {
+#else
+        if (state == RESUMING || state == ACTIVE || state == PAUSING || state == PAUSED) {
+#endif
             // If the track is not active (PAUSED and buffers full), flush buffers
             PlaybackThread *playbackThread = (PlaybackThread *)thread.get();
             if (playbackThread->mActiveTracks.indexOf(this) < 0) {
@@ -740,8 +747,12 @@ void AudioFlinger::PlaybackThread::Track::stop()
             ALOGV("not stopping/stopped => stopping/stopped (%d) on thread %p", mName,
                     playbackThread);
         }
+#ifdef INTEL_MUSIC_OFFLOAD_FEATURE
         if (!isOutputTrack() && (state == ACTIVE || state == RESUMING ||
             state == STOPPING_1 || state == STOPPING_2)) {
+#else
+        if (!isOutputTrack() && (state == ACTIVE || state == RESUMING)) {
+#endif
             thread->mLock.unlock();
             AudioSystem::stopOutput(thread->id(), mStreamType, mSessionId);
             thread->mLock.lock();
-- 
1.7.4.1

