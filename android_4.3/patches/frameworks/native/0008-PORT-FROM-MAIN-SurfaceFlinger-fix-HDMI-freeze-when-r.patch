From aefbd98feb865472a9ed90d0f3f77416389d64dd Mon Sep 17 00:00:00 2001
From: Zhang,Lei <lei.zhang@intel.com>
Date: Fri, 28 Dec 2012 12:58:53 +0800
Subject: [PORT FROM MAIN] SurfaceFlinger: fix HDMI freeze when rotate by disabling transition

BZ: 77498

By disabling transition, when rotate, HDMI will be freezed. It is because
HDMI compostion is bypassed when rotation and not recovered when rotation
completes. This patch fixes the issue by adding orientationEnd flag to check
and recover HDMI composition according to transition setting.

DO NOT UPSTREAM

Change-Id: I6bb95cfcbef180256a20f7963317ebdc90f2e69a
Orig-Change-Id: I442f173efea418ac1d5c50b2e02f3a7f75f3282e
Signed-off-by: Zhang,Lei <lei.zhang@intel.com>
Reviewed-on: http://android.intel.com:8080/84254
Reviewed-by: Hu, Jason <jason.hu@intel.com>
Reviewed-by: Ding, Haitao <haitao.ding@intel.com>
Tested-by: Ding, Haitao <haitao.ding@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 include/gui/ISurfaceComposer.h             |    2 +
 include/gui/SurfaceComposerClient.h        |    6 ++++
 libs/gui/SurfaceComposerClient.cpp         |   41 ++++++++++++++++++++++++++-
 services/surfaceflinger/SurfaceFlinger.cpp |   30 +++++++++++++++-----
 services/surfaceflinger/SurfaceFlinger.h   |    2 +
 5 files changed, 72 insertions(+), 9 deletions(-)

diff --git a/include/gui/ISurfaceComposer.h b/include/gui/ISurfaceComposer.h
index fac2c23..d0c7abf 100644
--- a/include/gui/ISurfaceComposer.h
+++ b/include/gui/ISurfaceComposer.h
@@ -51,6 +51,8 @@ public:
     enum {
         eSynchronous = 0x01,
         eAnimation   = 0x02,
+        eTransition  = 0x04,
+        eOrientationEnd  = 0x08
     };
 
     enum {
diff --git a/include/gui/SurfaceComposerClient.h b/include/gui/SurfaceComposerClient.h
index 7bcb1b9..f14afa4 100644
--- a/include/gui/SurfaceComposerClient.h
+++ b/include/gui/SurfaceComposerClient.h
@@ -110,6 +110,12 @@ public:
     //! Flag the currently open transaction as an animation transaction.
     static void setAnimationTransaction();
 
+    //! Flag the currently open transaction as a transition transaction.
+    static void setTransitionTransaction(bool on);
+
+    //! Flag the currently open transaction as an OrientationEnd transaction.
+    static void setOrientationEndTransaction(bool end);
+
     status_t    hide(const sp<IBinder>& id);
     status_t    show(const sp<IBinder>& id);
     status_t    setFlags(const sp<IBinder>& id, uint32_t flags, uint32_t mask);
diff --git a/libs/gui/SurfaceComposerClient.cpp b/libs/gui/SurfaceComposerClient.cpp
index 3968bce..baec699 100644
--- a/libs/gui/SurfaceComposerClient.cpp
+++ b/libs/gui/SurfaceComposerClient.cpp
@@ -118,15 +118,21 @@ class Composer : public Singleton<Composer>
     uint32_t                    mForceSynchronous;
     uint32_t                    mTransactionNestCount;
     bool                        mAnimation;
+    bool                        mTransition;
+    bool                        mOrientationEnd;
 
     Composer() : Singleton<Composer>(),
         mForceSynchronous(0), mTransactionNestCount(0),
-        mAnimation(false)
+        mAnimation(false),
+        mTransition(false),
+        mOrientationEnd(true)
     { }
 
     void openGlobalTransactionImpl();
     void closeGlobalTransactionImpl(bool synchronous);
     void setAnimationTransactionImpl();
+    void setTransitionTransactionImpl(bool on);
+    void setOrientationEndTransactionImpl(bool end);
 
     layer_state_t* getLayerStateLocked(
             const sp<SurfaceComposerClient>& client, const sp<IBinder>& id);
@@ -178,6 +184,14 @@ public:
         Composer::getInstance().openGlobalTransactionImpl();
     }
 
+    static void setTransitionTransaction(bool on) {
+        Composer::getInstance().setTransitionTransactionImpl(on);
+    }
+
+    static void setOrientationEndTransaction(bool end) {
+        Composer::getInstance().setOrientationEndTransactionImpl(end);
+    }
+
     static void closeGlobalTransaction(bool synchronous) {
         Composer::getInstance().closeGlobalTransactionImpl(synchronous);
     }
@@ -232,7 +246,12 @@ void Composer::closeGlobalTransactionImpl(bool synchronous) {
         if (mAnimation) {
             flags |= ISurfaceComposer::eAnimation;
         }
-
+        if (mTransition) {
+            flags |= ISurfaceComposer::eTransition;
+        }
+        if (mOrientationEnd) {
+            flags |= ISurfaceComposer::eOrientationEnd;
+        }
         mForceSynchronous = false;
         mAnimation = false;
     }
@@ -245,6 +264,16 @@ void Composer::setAnimationTransactionImpl() {
     mAnimation = true;
 }
 
+void Composer::setTransitionTransactionImpl(bool on) {
+    Mutex::Autolock _l(mLock);
+    mTransition = on;
+}
+
+void Composer::setOrientationEndTransactionImpl(bool end) {
+    Mutex::Autolock _l(mLock);
+    mOrientationEnd = end;
+}
+
 layer_state_t* Composer::getLayerStateLocked(
         const sp<SurfaceComposerClient>& client, const sp<IBinder>& id) {
 
@@ -536,6 +565,14 @@ void SurfaceComposerClient::setAnimationTransaction() {
     Composer::setAnimationTransaction();
 }
 
+void SurfaceComposerClient::setTransitionTransaction(bool on) {
+    Composer::setTransitionTransaction(on);
+}
+
+void SurfaceComposerClient::setOrientationEndTransaction(bool end) {
+    Composer::setOrientationEndTransaction(end);
+}
+
 // ----------------------------------------------------------------------------
 
 status_t SurfaceComposerClient::setCrop(const sp<IBinder>& id, const Rect& crop) {
diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index e1e303f..eb3cd42 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -88,6 +88,8 @@ SurfaceFlinger::SurfaceFlinger()
         mTransactionFlags(0),
         mTransactionPending(false),
         mAnimTransactionPending(false),
+        mTransitionOn(true),
+        mOrientationEnd(true),
         mDisplayScaleState(0),
         mLayersRemoved(false),
         mRepaintEverything(0),
@@ -947,12 +949,13 @@ void SurfaceFlinger::setUpHWComposer() {
                             // when rotation really happens on layers, set
                             // mBypassCompostion back to be false.
                             if (i==0 && dpy==0 && mBypassComposition) {
-                                const LayerBase::State& s(layer->drawingState());
-                                const uint32_t finalTransform =
-                                                    s.transform.getOrientation();
-                                if (finalTransform & Transform::ROT_INVALID) {
-                                    mBypassComposition = false;
-                                }
+                            }
+                            // when transition scale is disabled, and orientation
+                            // complete, set mBypassCompostion to be false too.
+                            if (!mTransitionOn &&
+                                mOrientationEnd &&
+                                mBypassComposition) {
+                                mBypassComposition = false;
                             }
                         }
                     }
@@ -1178,7 +1181,8 @@ void SurfaceFlinger::handleTransactionLocked(uint32_t transactionFlags)
                             Rect viewport = state.viewport;
                             handleDisplayScaling(state, viewport, frame);
                             // set mBypassComposition once orientation change
-                            if (i==0 && (state.orientation != draw[i].orientation)) {
+                            if (i==0 &&
+                                (state.orientation != draw[i].orientation)) {
                                 mBypassComposition = true;
                             }
                             disp->setProjection(state.orientation,
@@ -1866,6 +1870,18 @@ void SurfaceFlinger::setTransactionState(
         }
     }
 
+    if (flags & eTransition) {
+        mTransitionOn = true;
+    } else {
+        mTransitionOn = false;
+    }
+
+    if (flags & eOrientationEnd) {
+        mOrientationEnd = true;
+    } else {
+        mOrientationEnd = false;
+    }
+
     size_t count = displays.size();
     for (size_t i=0 ; i<count ; i++) {
         const DisplayState& s(displays[i]);
diff --git a/services/surfaceflinger/SurfaceFlinger.h b/services/surfaceflinger/SurfaceFlinger.h
index 5546aed..caa2e3f 100644
--- a/services/surfaceflinger/SurfaceFlinger.h
+++ b/services/surfaceflinger/SurfaceFlinger.h
@@ -421,6 +421,8 @@ private:
     Condition mTransactionCV;
     bool mTransactionPending;
     bool mAnimTransactionPending;
+    bool mTransitionOn;
+    bool mOrientationEnd;
     Vector< sp<Layer> > mLayersPendingRemoval;
     SortedVector< wp<IBinder> > mGraphicBufferProducerList;
     // Last DisplayScaling status
-- 
1.7.4.1

