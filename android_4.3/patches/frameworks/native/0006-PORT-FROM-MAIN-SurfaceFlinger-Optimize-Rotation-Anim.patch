From 1092c1f7845e4b656fa63ef0a7c00013cec0199b Mon Sep 17 00:00:00 2001
From: Lei Zhang <lei.zhang@intel.com>
Date: Wed, 5 Dec 2012 19:04:23 +0800
Subject: [PORT FROM MAIN] SurfaceFlinger: Optimize Rotation Animation on External Display

BZ: 72116

This is the patch to optimize rotation animation on external display.
Due to time difference on orientatin setting and layer transform,
external display shows instant inverted image on screen. Fix it by
bypassing external display composition until the rotation animation
works on the layers.

Change-Id: I68e5211673061d84fde2e3236a87577a6c51b108
Orig-Change-Id: I8d82b13548b7021d73c3a9982e7b8002011f2967
Signed-off-by: Lei Zhang <lei.zhang@intel.com>
Signed-off-by: Tong, Bo <box.tong@intel.com>
Reviewed-on: http://android.intel.com:8080/79161
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 services/surfaceflinger/SurfaceFlinger.cpp |   24 +++++++++++++++++++++++-
 services/surfaceflinger/SurfaceFlinger.h   |    1 +
 2 files changed, 24 insertions(+), 1 deletions(-)

diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index 8a2cb9a..e1e303f 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -106,7 +106,8 @@ SurfaceFlinger::SurfaceFlinger()
         mBootFinished(false),
         mAnimFlag(true),
         mMutexLocked(false),
-        mSurfaceFlingerThreadId(0)
+        mSurfaceFlingerThreadId(0),
+        mBypassComposition(false)
 {
     ALOGI("SurfaceFlinger is starting");
 
@@ -943,6 +944,16 @@ void SurfaceFlinger::setUpHWComposer() {
                             if (mDebugDisableHWC || mDebugRegion) {
                                 cur->setSkip(true);
                             }
+                            // when rotation really happens on layers, set
+                            // mBypassCompostion back to be false.
+                            if (i==0 && dpy==0 && mBypassComposition) {
+                                const LayerBase::State& s(layer->drawingState());
+                                const uint32_t finalTransform =
+                                                    s.transform.getOrientation();
+                                if (finalTransform & Transform::ROT_INVALID) {
+                                    mBypassComposition = false;
+                                }
+                            }
                         }
                     }
                 }
@@ -980,6 +991,13 @@ void SurfaceFlinger::doComposition() {
     const bool repaintEverything = android_atomic_and(0, &mRepaintEverything);
     for (size_t dpy=0 ; dpy<mDisplays.size() ; dpy++) {
         const sp<DisplayDevice>& hw(mDisplays[dpy]);
+        // Bypass composition on external display when
+        // orientation changed but rotation has not happen
+        // on layers. It is used to optimize user experience
+        // of external display rotation animation.
+        if (dpy == 1 && mBypassComposition)
+            continue;
+
         if (hw->canDraw()) {
             // transform the dirty region into this screen's coordinate space
             const Region dirtyRegion(hw->getDirtyRegion(repaintEverything));
@@ -1159,6 +1177,10 @@ void SurfaceFlinger::handleTransactionLocked(uint32_t transactionFlags)
                             Rect frame = state.frame;
                             Rect viewport = state.viewport;
                             handleDisplayScaling(state, viewport, frame);
+                            // set mBypassComposition once orientation change
+                            if (i==0 && (state.orientation != draw[i].orientation)) {
+                                mBypassComposition = true;
+                            }
                             disp->setProjection(state.orientation,
                                     viewport, frame);
                         }
diff --git a/services/surfaceflinger/SurfaceFlinger.h b/services/surfaceflinger/SurfaceFlinger.h
index 9b5c463..5546aed 100644
--- a/services/surfaceflinger/SurfaceFlinger.h
+++ b/services/surfaceflinger/SurfaceFlinger.h
@@ -467,6 +467,7 @@ private:
     volatile nsecs_t mDebugInTransaction;
     nsecs_t mLastTransactionTime;
     bool mBootFinished;
+    bool mBypassComposition;
     bool mAnimFlag;
 
     // these are thread safe
-- 
1.7.4.1

