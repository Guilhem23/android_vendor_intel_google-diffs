From fe79557131e3ead8fcd2cb9859aa8ebad33d593b Mon Sep 17 00:00:00 2001
From: jli127 <jian.d.li@intel.com>
Date: Wed, 11 Jul 2012 13:32:26 +0800
Subject: [PORT FROM MAIN] SensorService: Add one orientation sensor without fusion support

BZ: 68951

This patch provide an virtual orientation sensor
which is not based on sensor fusion.

Android sensor service provides virtual orientation
sensor based on sensor fusion if the device has
physical accel, magnetic and gyro sensors.
On LEX platform gyro sensor is not available so
virtual orientation sensor is not supported by
sensor service, this cause CTS test failed.
This patch provide an orientation sensor based
on accel and magnetic sensor only to solve this
issue.

Change-Id: Id77f441026f1609ae412d244599218d7e186ad50
Orig-Change-Id: I4d6ee8da7816ef7fc5f44020063e61c7dae9ba81
Signed-off-by: jli127 <jian.d.li@intel.com>
Reviewed-on: http://android.intel.com:8080/74791
Reviewed-by: lab_cactus <lab_cactus@intel.com>
Reviewed-by: Chen, Jason CJ <jason.cj.chen@intel.com>
Reviewed-by: Wang, Zhifeng <zhifeng.wang@intel.com>
Tested-by: Wang, Zhifeng <zhifeng.wang@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Reviewed-on: http://android.intel.com:8080/76506
Reviewed-by: Yan, Leo <leo.yan@intel.com>
Reviewed-by: Yao, Yong <yong.yao@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 services/sensorservice/Android.mk                  |    2 +
 .../sensorservice/SecondOrderLowPassFilter.cpp     |   89 ++++++++
 services/sensorservice/SecondOrderLowPassFilter.h  |   73 ++++++
 services/sensorservice/SensorService.cpp           |   17 ++
 .../sensorservice/VirtualOrientationSensor.cpp     |  239 ++++++++++++++++++++
 services/sensorservice/VirtualOrientationSensor.h  |   59 +++++
 6 files changed, 479 insertions(+), 0 deletions(-)
 create mode 100644 services/sensorservice/SecondOrderLowPassFilter.cpp
 create mode 100644 services/sensorservice/SecondOrderLowPassFilter.h
 create mode 100644 services/sensorservice/VirtualOrientationSensor.cpp
 create mode 100644 services/sensorservice/VirtualOrientationSensor.h

diff --git a/services/sensorservice/Android.mk b/services/sensorservice/Android.mk
index dd698c5..88f18bc 100644
--- a/services/sensorservice/Android.mk
+++ b/services/sensorservice/Android.mk
@@ -13,6 +13,8 @@ LOCAL_SRC_FILES:= \
     SensorFusion.cpp \
     SensorInterface.cpp \
     SensorService.cpp \
+    VirtualOrientationSensor.cpp \
+    SecondOrderLowPassFilter.cpp \
 
 
 LOCAL_CFLAGS:= -DLOG_TAG=\"SensorService\"
diff --git a/services/sensorservice/SecondOrderLowPassFilter.cpp b/services/sensorservice/SecondOrderLowPassFilter.cpp
new file mode 100644
index 0000000..eeb6d1e
--- /dev/null
+++ b/services/sensorservice/SecondOrderLowPassFilter.cpp
@@ -0,0 +1,89 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stdint.h>
+#include <sys/types.h>
+#include <math.h>
+
+#include <cutils/log.h>
+
+#include "SecondOrderLowPassFilter.h"
+
+// ---------------------------------------------------------------------------
+
+namespace android {
+// ---------------------------------------------------------------------------
+
+SecondOrderLowPassFilter::SecondOrderLowPassFilter(float Q, float fc)
+    : iQ(1.0f / Q), fc(fc)
+{
+}
+
+void SecondOrderLowPassFilter::setSamplingPeriod(float dT)
+{
+    K = tanf(float(M_PI) * fc * dT);
+    iD = 1.0f / (K*K + K*iQ + 1);
+    a0 = K*K*iD;
+    a1 = 2.0f * a0;
+    b1 = 2.0f*(K*K - 1)*iD;
+    b2 = (K*K - K*iQ + 1)*iD;
+}
+
+// ---------------------------------------------------------------------------
+
+BiquadFilter::BiquadFilter(const SecondOrderLowPassFilter& s)
+    : s(s)
+{
+}
+
+float BiquadFilter::init(float x)
+{
+    x1 = x2 = x;
+    y1 = y2 = x;
+    return x;
+}
+
+float BiquadFilter::operator()(float x)
+{
+    float y = (x + x2)*s.a0 + x1*s.a1 - y1*s.b1 - y2*s.b2;
+    x2 = x1;
+    y2 = y1;
+    x1 = x;
+    y1 = y;
+    return y;
+}
+
+// ---------------------------------------------------------------------------
+
+CascadedBiquadFilter::CascadedBiquadFilter(const SecondOrderLowPassFilter& s)
+    : mA(s), mB(s)
+{
+}
+
+float CascadedBiquadFilter::init(float x)
+{
+    mA.init(x);
+    mB.init(x);
+    return x;
+}
+
+float CascadedBiquadFilter::operator()(float x)
+{
+    return mB(mA(x));
+}
+
+// ---------------------------------------------------------------------------
+}; // namespace android
diff --git a/services/sensorservice/SecondOrderLowPassFilter.h b/services/sensorservice/SecondOrderLowPassFilter.h
new file mode 100644
index 0000000..85698ca
--- /dev/null
+++ b/services/sensorservice/SecondOrderLowPassFilter.h
@@ -0,0 +1,73 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ANDROID_SECOND_ORDER_LOW_PASS_FILTER_H
+#define ANDROID_SECOND_ORDER_LOW_PASS_FILTER_H
+
+#include <stdint.h>
+#include <sys/types.h>
+
+// ---------------------------------------------------------------------------
+
+namespace android {
+// ---------------------------------------------------------------------------
+
+class BiquadFilter;
+
+/*
+ * State of a 2nd order low-pass IIR filter
+ */
+class SecondOrderLowPassFilter {
+    friend class BiquadFilter;
+    float iQ, fc;
+    float K, iD;
+    float a0, a1;
+    float b1, b2;
+public:
+    SecondOrderLowPassFilter(float Q, float fc);
+    void setSamplingPeriod(float dT);
+};
+
+/*
+ * Implements a Biquad IIR filter
+ */
+class BiquadFilter {
+    float x1, x2;
+    float y1, y2;
+    const SecondOrderLowPassFilter& s;
+public:
+    BiquadFilter(const SecondOrderLowPassFilter& s);
+    float init(float in);
+    float operator()(float in);
+};
+
+/*
+ * Two cascaded biquad IIR filters
+ * (4-poles IIR)
+ */
+class CascadedBiquadFilter {
+    BiquadFilter mA;
+    BiquadFilter mB;
+public:
+    CascadedBiquadFilter(const SecondOrderLowPassFilter& s);
+    float init(float in);
+    float operator()(float in);
+};
+
+// ---------------------------------------------------------------------------
+}; // namespace android
+
+#endif // ANDROID_SECOND_ORDER_LOW_PASS_FILTER_H
diff --git a/services/sensorservice/SensorService.cpp b/services/sensorservice/SensorService.cpp
index ebf5cf0..8090428 100644
--- a/services/sensorservice/SensorService.cpp
+++ b/services/sensorservice/SensorService.cpp
@@ -45,6 +45,7 @@
 #include "GravitySensor.h"
 #include "LinearAccelerationSensor.h"
 #include "OrientationSensor.h"
+#include "VirtualOrientationSensor.h"
 #include "RotationVectorSensor.h"
 #include "SensorFusion.h"
 #include "SensorService.h"
@@ -80,6 +81,8 @@ void SensorService::onFirstRef()
         if (count > 0) {
             ssize_t orientationIndex = -1;
             bool hasGyro = false;
+            bool hasMag = false;
+            bool hasAccel = false;
             uint32_t virtualSensorsNeeds =
                     (1<<SENSOR_TYPE_GRAVITY) |
                     (1<<SENSOR_TYPE_LINEAR_ACCELERATION) |
@@ -95,6 +98,12 @@ void SensorService::onFirstRef()
                     case SENSOR_TYPE_GYROSCOPE:
                         hasGyro = true;
                         break;
+                    case SENSOR_TYPE_ACCELEROMETER:
+                        hasAccel = true;
+                        break;
+                    case SENSOR_TYPE_MAGNETIC_FIELD:
+                        hasMag = true;
+                        break;
                     case SENSOR_TYPE_GRAVITY:
                     case SENSOR_TYPE_LINEAR_ACCELERATION:
                     case SENSOR_TYPE_ROTATION_VECTOR:
@@ -103,6 +112,14 @@ void SensorService::onFirstRef()
                 }
             }
 
+            if (hasAccel && hasMag && !hasGyro) {
+                // CTS test defines device has to support orientation sensor
+                // if accelerometer sensor and magnetic sensor are available.
+                // However framework does not provide orientation sensor if
+                // no gyro available.
+                // This provide a orientation sensor without fusion support.
+                registerVirtualSensor( new VirtualOrientationSensor(list, count) );
+            }
             // it's safe to instantiate the SensorFusion object here
             // (it wants to be instantiated after h/w sensors have been
             // registered)
diff --git a/services/sensorservice/VirtualOrientationSensor.cpp b/services/sensorservice/VirtualOrientationSensor.cpp
new file mode 100644
index 0000000..eccf3ff
--- /dev/null
+++ b/services/sensorservice/VirtualOrientationSensor.cpp
@@ -0,0 +1,239 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stdint.h>
+#include <math.h>
+#include <sys/types.h>
+
+#include <utils/Errors.h>
+
+#include <hardware/sensors.h>
+
+#include "VirtualOrientationSensor.h"
+#include "SensorDevice.h"
+
+namespace android {
+// ---------------------------------------------------------------------------
+#define DegToRad                0.0174533
+#define RadToDeg                57.29578
+
+#define PI                      3.1415926535897932f
+#ifndef GRAVITY_EARTH
+#define GRAVITY_EARTH           9.80665f
+#endif
+#define TwoPI                   2 * M_PI
+#define GRAVITY_SENSITIVITY     0.017f
+#define GRAVITY_PARAM           0.166713f /*(GRAVITY_EARTH*GRAVITY_SENSITIVITY)*/
+#define COMPASS_THRESHOLD               12.0f
+
+static float iheading = -1;
+static float ipitch = 0;
+static float iroll = 0;
+
+template <typename T>
+static inline T clamp(T v)
+{
+    return v < 0 ? 0 : v;
+}
+
+VirtualOrientationSensor::VirtualOrientationSensor(sensor_t const* list, size_t count)
+    : mSensorDevice(SensorDevice::getInstance()),
+      mALowPass(M_SQRT1_2, 1.5f),
+      mAX(mALowPass), mAY(mALowPass), mAZ(mALowPass),
+      mMLowPass(M_SQRT1_2, 1.5f),
+      mMX(mMLowPass), mMY(mMLowPass), mMZ(mMLowPass)
+{
+    for (size_t i=0 ; i<count ; i++) {
+        if (list[i].type == SENSOR_TYPE_ACCELEROMETER) {
+            mAcc = Sensor(list + i);
+        }
+        if (list[i].type == SENSOR_TYPE_MAGNETIC_FIELD) {
+            mMag = Sensor(list + i);
+        }
+    }
+    memset(mMagData, 0, sizeof(mMagData));
+}
+
+static int AccelRangeCheck(double value)
+{
+    if (abs(value) <= 1)
+        return 1;
+    return 0;
+}
+
+static double ASIN(double X)
+{
+    double demon = sqrt(-X * X +1);
+    return atan2(X,demon);
+}
+
+static double ATAN2(double Y,double X)
+{
+    return atan2(Y,X);
+}
+
+bool VirtualOrientationSensor::process(sensors_event_t* outEvent,
+        const sensors_event_t& event)
+{
+    const static double NS2S = 1.0 / 1000000000.0;
+
+    if (event.type == SENSOR_TYPE_MAGNETIC_FIELD) {
+        const double now = event.timestamp * NS2S;
+        if (mMagTime == 0) {
+            mMagData[0] = mMX.init(event.magnetic.x);
+            mMagData[1] = mMY.init(event.magnetic.y);
+            mMagData[2] = mMZ.init(event.magnetic.z);
+        } else {
+            double dT = now - mMagTime;
+            mMLowPass.setSamplingPeriod(dT);
+            mMagData[0] = mMX(event.magnetic.x);
+            mMagData[1] = mMY(event.magnetic.y);
+            mMagData[2] = mMZ(event.magnetic.z);
+        }
+        mMagTime = now;
+
+        // CalculateHeading
+        double Head = -1;
+        double Head2 = 0;
+
+        int magForward = mMagData[0];
+        int magLeft = mMagData[1];
+        int magUp = mMagData[2];
+
+        double angle_F = -iroll * PI / 180;
+        double angle_L = -ipitch * PI / 180;
+
+        // Generate Sine and Cosine components
+        double C_a_F = cos(angle_F);
+        double S_a_F = sin(angle_F);
+
+        double C_a_L = cos(angle_L);
+        double S_a_L = sin(angle_L);
+
+        // Generate the tilt compensated magnetic horizontal components
+        //HC1 = C_a_F * magForward + S_a_F * S_a_L * magLeft - S_a_F * C_a_L * magUp;
+        double HC1 = C_a_F * magForward + S_a_F * S_a_L * magLeft + S_a_F * C_a_L * magUp;
+        double HC2 = C_a_L * magLeft - S_a_L * magUp;
+
+        // Calculate the Heading in units of radians.
+        Head = -ATAN2(HC1, HC2);
+        Head2 = ATAN2(-magLeft, -magForward)*RadToDeg;
+
+        Head2 = Head2<0 ? (Head2 +360) : Head2;
+        //Range scale it to 0 to 360 degrees
+        if (Head < 0)
+            Head += TwoPI;
+
+        Head *= RadToDeg;
+        iheading = (float)Head;
+    } else if (event.type == SENSOR_TYPE_ACCELEROMETER) {
+        const double now = event.timestamp * NS2S;
+        float Ax, Ay, Az;
+        if (mAccTime == 0) {
+            Ax = mAX.init(event.acceleration.x);
+            Ay = mAY.init(event.acceleration.y);
+            Az = mAZ.init(event.acceleration.z);
+        } else {
+            double dT = now - mAccTime;
+            mALowPass.setSamplingPeriod(dT);
+            Ax = mAX(event.acceleration.x);
+            Ay = mAY(event.acceleration.y);
+            Az = mAZ(event.acceleration.z);
+        }
+        mAccTime = now;
+
+        // CalculateAngle
+        float tmp = 0;
+        float x = Ax, y = Ay, z = Az;
+
+        // pitch
+        ipitch = (y == 0) ? ((z>0)?90:-90) : atan((z/y)*(x*x+y*y+z*z)/(y*y+z*z))*180/PI;
+        if (z <= 0) {
+            if (y >= 0)
+                ipitch = ipitch - 90;
+            else
+                ipitch = ipitch + 90;
+        } else {
+            if (y >= 0)
+                ipitch = ipitch - 90;
+            else
+                ipitch = ipitch + 90;
+        }
+        ipitch = ((int)(ipitch*10 + 0.5))/10.0;
+
+        //roll
+        iroll = (x == 0) ? ((z>0)?90:-90) : atan((z/x)*(x*x+y*y+z*z)/(x*x+z*z))*180/PI;
+        if (z <= 0) {
+            if (x > 0)
+                iroll = - iroll - 90;
+            else
+                iroll = 90 - iroll;
+        } else {
+            if (x <= 0)
+                iroll = 90 + iroll;
+            else
+                iroll = iroll - 90;
+        }
+        iroll = -((int)(iroll*10 + 0.5))/10.0;
+
+        *outEvent = event;
+        outEvent->data[0] = (float)iheading;
+        outEvent->data[1] = (float)ipitch;
+        outEvent->data[2] = (float)iroll;
+        outEvent->sensor = '_ori';
+        outEvent->type = SENSOR_TYPE_ORIENTATION;
+        outEvent->orientation.status = event.magnetic.status;
+
+        if (mMagTime != 0)
+            return true;
+    }
+    return false;
+}
+
+status_t VirtualOrientationSensor::activate(void* ident, bool enabled) {
+    mSensorDevice.activate(this, mAcc.getHandle(), enabled);
+    mSensorDevice.activate(this, mMag.getHandle(), enabled);
+    if (enabled) {
+        mMagTime = 0;
+        mAccTime = 0;
+    }
+    return NO_ERROR;
+}
+
+status_t VirtualOrientationSensor::setDelay(void* ident, int handle, int64_t ns) {
+    mSensorDevice.setDelay(this, mAcc.getHandle(), ns);
+    mSensorDevice.setDelay(this, mMag.getHandle(), ns);
+    return NO_ERROR;
+}
+
+Sensor VirtualOrientationSensor::getSensor() const {
+    sensor_t hwSensor;
+    hwSensor.name       = "Virtual Orientation Sensor";
+    hwSensor.vendor     = "Honeywell Inc.";
+    hwSensor.version    = 1;
+    hwSensor.handle     = '_ori';
+    hwSensor.type       = SENSOR_TYPE_ORIENTATION;
+    hwSensor.maxRange   = 360.0f;
+    hwSensor.resolution = 1.0f;
+    hwSensor.power      = mAcc.getPowerUsage() + mMag.getPowerUsage();
+    hwSensor.minDelay   = mAcc.getMinDelay();
+    Sensor sensor(&hwSensor);
+    return sensor;
+}
+
+// ---------------------------------------------------------------------------
+}; // namespace android
+
diff --git a/services/sensorservice/VirtualOrientationSensor.h b/services/sensorservice/VirtualOrientationSensor.h
new file mode 100644
index 0000000..8eec99d
--- /dev/null
+++ b/services/sensorservice/VirtualOrientationSensor.h
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ANDROID_VIRTUALORIENTATION_SENSOR_H
+#define ANDROID_VIRTUALORIENTATION_SENSOR_H
+
+#include <stdint.h>
+#include <sys/types.h>
+
+#include <gui/Sensor.h>
+
+#include "SensorInterface.h"
+#include "SecondOrderLowPassFilter.h"
+
+// ---------------------------------------------------------------------------
+namespace android {
+// ---------------------------------------------------------------------------
+
+class SensorDevice;
+
+class VirtualOrientationSensor : public SensorInterface {
+    SensorDevice& mSensorDevice;
+    Sensor mAcc;
+    Sensor mMag;
+    float mMagData[3];
+    double mAccTime;
+    double mMagTime;
+    SecondOrderLowPassFilter mALowPass;
+    CascadedBiquadFilter mAX, mAY, mAZ;
+    SecondOrderLowPassFilter mMLowPass;
+    CascadedBiquadFilter mMX, mMY, mMZ;
+
+public:
+    VirtualOrientationSensor(sensor_t const* list, size_t count);
+    virtual bool process(sensors_event_t* outEvent,
+            const sensors_event_t& event);
+    virtual status_t activate(void* ident, bool enabled);
+    virtual status_t setDelay(void* ident, int handle, int64_t ns);
+    virtual Sensor getSensor() const;
+    virtual bool isVirtual() const { return true; }
+};
+
+// ---------------------------------------------------------------------------
+}; // namespace android
+
+#endif // ANDROID_VIRTUALORIENTATION_SENSOR_H
-- 
1.7.4.1

