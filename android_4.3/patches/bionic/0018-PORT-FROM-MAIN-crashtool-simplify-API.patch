From 182e7c515799ba69b3211962376403215598f755 Mon Sep 17 00:00:00 2001
From: Axel Haslam <axelx.haslam@intel.com>
Date: Thu, 7 Mar 2013 15:16:36 +0100
Subject: [PORT FROM MAIN] crashtool: simplify API

BZ: 98151

The new API, simplifies the steps requiered by
the user, by using macros to allocate the event
structure, and data arguments.

The log options are:
lct_log(type, <submitter_name>, <EV_name>, <flags>, data0);
lct_log(type, <submitter_name>, <EV_name>, <flags>, data0, data1);
lct_log(type, <submitter_name>, <EV_name>, <flags>, data0, data1, data2);
lct_log(type, <submitter_name>, <EV_name>, <flags>, data0, data1, data2, data3);

Change-Id: Ie7883851701f2aee1730b737a3627d681fad325f
Orig-Change-Id: I8f26eacedb0e1f177c801d40c923d4af40558a89
Signed-off-by: Axel Haslam <axelx.haslam@intel.com>
Signed-off-by: Frode Isaksen <fisaksex@intel.com>
Signed-off-by: Mathieu Bivert <mathieu.bivert@intel.com>
Reviewed-on: http://android.intel.com:8080/95551
Reviewed-by: cactus <cactus@intel.com>
Reviewed-by: Yao, Yong <yong.yao@intel.com>
Tested-by: Zurmely, PierreX <pierrex.zurmely@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
---
 libc/include/ctm.h             |   22 +--
 libc/include/lct.h             |  392 ++++++++++------------------------------
 libc/kernel/common/linux/kct.h |    1 +
 3 files changed, 102 insertions(+), 313 deletions(-)

diff --git a/libc/include/ctm.h b/libc/include/ctm.h
index 4e85651..d01cee7 100644
--- a/libc/include/ctm.h
+++ b/libc/include/ctm.h
@@ -29,9 +29,9 @@ struct ct_monitor_ctx {
 	int thread_should_stop;
 	int sock_nl_fd;
 	int sock_fd;
-	const char *path_stat_dir;
-	const char *path_crash_dir;
-	const char *path_info_dir;
+	char *path_stat_dir;
+	char *path_crash_dir;
+	char *path_info_dir;
 };
 
 enum ctm_ev_pending {
@@ -47,18 +47,14 @@ typedef int (*ev_handler_t)(struct ct_event *ev);
 extern int ctm_nl_init(void);
 extern int ctm_nl_exit(int fd);
 extern int ctm_nl_sendto_kct(int fd, int type, const void *data, unsigned int size);
-extern int ctm_nl_get_packet(int fd, struct kct_packet **pkt, int flags);
+extern struct kct_packet *ctm_nl_get_packet(int fd, int flags);
 extern int ctm_nl_dclr_pid(int fd);
 
 /* ctm_comm.c */
-extern enum ctm_ev_pending	ctm_comm_wait_event(struct ct_monitor_ctx*, long timeout);
-extern int			ctm_comm_init(struct ct_monitor_ctx*);
-extern int			ctm_comm_exit(struct ct_monitor_ctx*);
-extern int			ctm_comm_handle_socket_msg(struct ct_monitor_ctx *ctx);
-extern int			ctm_comm_handle_netlink_msg(struct ct_monitor_ctx *ctx);
-
-/* ctm_signal.c */
-extern int ctm_sig_init(void);
+extern enum ctm_ev_pending	ctm_comm_wait_event(long timeout);
+extern int				lct_server_init(void);
+extern void			ctm_comm_handle_socket_msg(void);
+extern void			ctm_comm_handle_netlink_msg(void);
 
 /* ctm_print.c */
 extern void print_ct_attchmt(struct ct_attchmt *at);
@@ -68,8 +64,6 @@ extern void print_ct_event(struct ct_event *ev);
 /* ctm_handlers.c */
 extern int ct_stat_handler(struct ct_event *ev);
 extern int ct_crash_handler(struct ct_event *ev);
-/* extern int ct_error_handler(struct ct_event *ev); */
-/* extern int ct_info_handler(struct ct_event *ev); */
 
 extern struct ct_monitor_ctx ctm_ctx;
 
diff --git a/libc/include/lct.h b/libc/include/lct.h
index 3d39c61..0cbf65c 100644
--- a/libc/include/lct.h
+++ b/libc/include/lct.h
@@ -3,331 +3,125 @@
 
 #include <sys/socket.h>
 #include <sys/un.h>
-
-#include <strings.h>
-#include <string.h>
-#include <unistd.h>
-#include <errno.h>
-#include <stdlib.h>
-#include <assert.h>
-#include <stdio.h>
-
 #include <linux/kct.h>
 
+#define	EV_FLAGS_PRIORITY_LOW	(1<<0)
+/* prefix of properties used to filter events */
+#define	PROP_PREFIX "dev.log."
+
 #define PKT_SIZE(Ev) (((struct ct_event*)(Ev))->attchmt_size + sizeof(struct ct_event))
 #define SK_NAME "\0crashtool_socket"
 
-#  ifndef min
-#    define min(X, Y)  ((X) > (Y) ? (Y) : (X))
-#  endif
-#  ifndef max
-#    define max(X, Y)  ((X) < (Y) ? (Y) : (X))
-#  endif
-
-
-extern inline void lct_free_event(struct ct_event *ev)
-{
-	free(ev);
-}
+#define MKFN(fn,...) MKFN_N(fn,##__VA_ARGS__,8,7,6,5,4,3,2,1,0)(__VA_ARGS__)
+#define MKFN_N(fn,n0,n1,n2,n3,n4,n5,n6,n7,n,...) fn##n
+#define lct_log(...) MKFN(__lct_log_,##__VA_ARGS__)
+
+#define __lct_log_4(Type, Submitter_name, Ev_name, flags) \
+	do { \
+		struct ct_event *__ev =	\
+			lct_alloc_event(Submitter_name, Ev_name, Type, flags); \
+		if (__ev) { \
+			lct_log_event(__ev); \
+		} \
+	} while (0)
+
+#define __lct_log_5(Type, Submitter_name, Ev_name, flags, Data0) \
+	do { \
+		struct ct_event *__ev =	\
+			lct_alloc_event(Submitter_name, Ev_name, Type, flags); \
+		if (__ev) { \
+			lct_add_attchmt(&__ev, CT_ATTCHMT_DATA0, \
+					strlen(Data0) + 1, Data0); \
+			lct_log_event(__ev); \
+		} \
+	} while (0)
+
+#define __lct_log_6(Type, Submitter_name, Ev_name, flags, Data0, Data1) \
+	do { \
+		struct ct_event *__ev =	\
+			lct_alloc_event(Submitter_name, Ev_name, Type, flags); \
+		if (__ev) { \
+			lct_add_attchmt(&__ev, CT_ATTCHMT_DATA0, \
+					strlen(Data0) + 1, Data0); \
+			lct_add_attchmt(&__ev, CT_ATTCHMT_DATA1, \
+					strlen(Data1) + 1, Data1); \
+			lct_log_event(__ev); \
+		} \
+	} while (0)
+
+#define __lct_log_7(Type, Submitter_name, Ev_name, flags, Data0, Data1, Data2) \
+	do { \
+		struct ct_event *__ev =	\
+			lct_alloc_event(Submitter_name, Ev_name, Type, flags); \
+		if (__ev) { \
+			lct_add_attchmt(&__ev, CT_ATTCHMT_DATA0, \
+					strlen(Data0) + 1, Data0); \
+			lct_add_attchmt(&__ev, CT_ATTCHMT_DATA1, \
+					strlen(Data1) + 1, Data1); \
+			lct_add_attchmt(&__ev, CT_ATTCHMT_DATA2, \
+					strlen(Data2) + 1, Data2); \
+			lct_log_event(__ev); \
+		} \
+	} while (0)
 
 extern inline struct ct_event *lct_alloc_event(const char *submitter_name,
 					       const char *ev_name,
-					       enum ct_ev_type ev_type)
+					       enum ct_ev_type ev_type,
+					       unsigned int flags)
 {
-	struct ct_event *ev = NULL;
-
-	ev = malloc(sizeof(*ev));
-	if (!ev)
-		goto error_alloc;
-
-	bzero(ev, sizeof(*ev));
-
-	if (submitter_name)
-		strncpy(ev->submitter_name, submitter_name,
-			sizeof(ev->submitter_name));
-
-	if (ev_name)
-		strncpy(ev->ev_name, ev_name,
-			sizeof(ev->ev_name));
-
-	ev->timestamp = 0x42;
-
-	ev->type = ev_type;
-
+	struct ct_event *ev = calloc(1, sizeof(*ev));
+	if (ev) {
+		if (submitter_name)
+			strncpy(ev->submitter_name, submitter_name,
+				sizeof(ev->submitter_name));
+		if (ev_name)
+			strncpy(ev->ev_name, ev_name,
+				sizeof(ev->ev_name));
+		ev->timestamp = 0x42;
+		ev->flags = flags;
+		ev->type = ev_type;
+	}
 	return ev;
-
- error_alloc:
-	return NULL;
 }
 
 extern inline int lct_add_attchmt(struct ct_event **ev,
 				  enum ct_attchmt_type at_type,
 				  unsigned int size, const char *data)
 {
-	struct ct_attchmt *new_attchmt = NULL;
-	struct ct_event *new_ev = NULL;
-	__u32 new_size = sizeof(*new_ev) + (*ev)->attchmt_size +
-		ALIGN(size + sizeof(*new_attchmt), ATTCHMT_ALIGNMENT);
-
-	new_ev = realloc(*ev, new_size);
-	if (!new_ev) {
-		return -ENOMEM;
-	}
-
-	new_attchmt = (struct ct_attchmt *)
-		(((char *) new_ev->attachments) + new_ev->attchmt_size);
-
-	new_attchmt->size = size;
-	new_attchmt->type = at_type;
-	memcpy(new_attchmt->data, data, size);
-
-	new_ev->attchmt_size = new_size - sizeof(*new_ev);
-
-	*ev = new_ev;
-
-	return 0;
-}
-
-extern inline int lct_snd_event(int sock_fd, struct ct_event* ev)
-{
-	struct sockaddr_un addr;
-	ssize_t nb_sent = 0;
-
-	assert(ev != NULL);
-
-	bzero(&addr, sizeof(addr));
-	addr.sun_family = AF_UNIX;
-	memcpy(addr.sun_path, SK_NAME,
-	       min(sizeof(addr.sun_path), sizeof(SK_NAME)));
- retry:
-	nb_sent = sendto(sock_fd, ev, PKT_SIZE(ev),
-			 0x0, (const struct sockaddr*) &addr,
-			 sizeof(addr));
-	if (nb_sent < (ssize_t) PKT_SIZE(ev)) {
-		if (errno != EINTR)
-			return -errno;
-		else
-			goto retry;
-	}
-
-	return 0;
-}
-
-extern inline int lct_rcv_event(int sock_fd, struct ct_event** ev)
-{
-	ssize_t nb_read = 0;
-	size_t len = 0;
-	char* buf[sizeof(**ev)];
-
-	assert(ev != NULL);
-
- retry_first_recv:
-	nb_read = recvfrom(sock_fd, buf, sizeof(buf),
-			   MSG_PEEK, NULL, NULL);
-	if (nb_read < 0 ) {
-		if (errno != EINTR)
-			goto err;
-		else
-			goto retry_first_recv;
-	}
-
-	len = ((struct ct_event*)buf)->attchmt_size + sizeof(**ev);
-
-	if (!(*ev = malloc(len)))
-		return -errno;
-
- retry_second_recv:
-	nb_read = recvfrom(sock_fd, *ev, len, 0, NULL, NULL);
-	if (nb_read < 0 ) {
-		if (errno != EINTR)
-			goto err_free;
-		else
-			goto retry_second_recv;
-	}
-
-	return 0;
-
- err_free:
-	free(*ev);
-	*ev = NULL;
- err:
-	return -errno;
-}
-
-extern inline int lct_server_init(void)
-{
-	struct sockaddr_un addr;
-	int sock_fd = -1;
-	int ret = 0;
-
-	sock_fd = socket(AF_UNIX, SOCK_DGRAM, 0);
-	if (sock_fd < 0)
-		return -errno;
-
-	bzero(&addr, sizeof(addr));
-
-	addr.sun_family = AF_UNIX;
-	memcpy(addr.sun_path, SK_NAME,
-	       min(sizeof(addr.sun_path), sizeof(SK_NAME)));
-
-	if (bind(sock_fd, (struct sockaddr* const) &addr, sizeof(addr))) {
-		ret = -errno;
-		goto error;
-	}
-
-	return sock_fd;
-
- error:
-	close(sock_fd);
-	return ret;
-}
-
-extern inline int lct_client_init(void)
-{
-	int sock_fd = -1;
-
-	sock_fd = socket(AF_UNIX, SOCK_DGRAM, 0);
-	if (sock_fd < 0)
-		return -errno;
-
-	fprintf(stderr, "lct_client_init %d", sock_fd);
-
-	return sock_fd;
-}
-
-extern inline int lct_client_exit(int sock_fd)
-{
-	return close(sock_fd);
-}
-
-extern inline int lct_server_exit(int sock_fd)
-{
-	return close(sock_fd);
-}
-
-extern inline int __lct_log_data(struct ct_event ** ev, const char* data[3])
-{
-	int ret = -1;
-
-	assert(ev != NULL);
-	assert(*ev != NULL);
-
-	if (data[0])
-		if ((ret = lct_add_attchmt(ev, CT_ATTCHMT_DATA0,
-					   strlen(data[0]), data[0])))
-			goto out;
-	if (data[1])
-		if ((ret = lct_add_attchmt(ev, CT_ATTCHMT_DATA1,
-					   strlen(data[1]), data[1])))
-			goto out;
-	if (data[2])
-		if ((ret = lct_add_attchmt(ev, CT_ATTCHMT_DATA1,
-					   strlen(data[2]), data[2])))
-			goto out;
-
-	return 0;
-
- out:
-	return ret;
-}
-
-extern inline int lct_log_event(int sock_fd, struct ct_event *ev)
-{
-	return lct_snd_event(sock_fd, ev);
-}
-
-extern inline int lct_log_crash(const char* submitter_name,
-				const char* ev_name,
-				const char* data[3])
-{
-	struct ct_event *ev = NULL;
-
-	ev = lct_alloc_event(submitter_name, ev_name, CT_EV_CRASH);
-	if (!ev) {
-		return -ENOMEM;
-	}
+	__u32 new_size = sizeof(struct ct_event) + (*ev)->attchmt_size +
+		ALIGN(size + sizeof(struct ct_attchmt), ATTCHMT_ALIGNMENT);
+	struct ct_event *new_ev = new_ev = realloc(*ev, new_size);
+	if (new_ev) {
+		struct ct_attchmt *new_attchmt = (struct ct_attchmt *)
+			(((char *) new_ev->attachments) + new_ev->attchmt_size);
 
-	if (data[0]) {
-		puts(data[0]);
-	}
+		new_attchmt->size = size;
+		new_attchmt->type = at_type;
+		memcpy(new_attchmt->data, data, size);
 
-	return -1;
-}
-extern inline  int lct_log_info(int sock_fd,
-				const char* submitter_name,
-				const char* ev_name,
-				const char* data[3])
-{
-	struct ct_event *ev = NULL;
-	int ret = -1;
+		new_ev->attchmt_size = new_size - sizeof(*new_ev);
 
-	ev = lct_alloc_event(submitter_name, ev_name, CT_EV_CRASH);
-	if (!ev) {
-		return -ENOMEM;
+		*ev = new_ev;
 	}
-
-
-	if ((ret = __lct_log_data(&ev, data)))
-		goto out_malloc;
-
-	if ((ret = lct_log_event(sock_fd, ev)))
-		goto out_malloc;
-
-	lct_free_event(ev);
-
-	return 0;
-
- out_malloc:
-	lct_free_event(ev);
-	return ret;
+	return new_ev ? 0 : -ENOMEM;
 }
 
-extern inline int lct_log_error(int sock_fd,
-				const char* submitter_name,
-				const char* ev_name,
-				const char* data[3])
+extern inline int lct_log_event(struct ct_event *ev)
 {
-	struct ct_event *ev = NULL;
 	int ret = -1;
-
-	ev = lct_alloc_event(submitter_name, ev_name, CT_EV_CRASH);
-	if (!ev) {
-		return -ENOMEM;
+	int sock_fd = socket(AF_UNIX, SOCK_DGRAM, 0);
+	if (sock_fd > 0) {
+		const struct sockaddr_un addr = {
+			.sun_family = AF_UNIX,
+			.sun_path = SK_NAME,
+		};
+		ret = sendto(sock_fd, ev, PKT_SIZE(ev),
+			0x0, (const struct sockaddr*) &addr,
+			sizeof(addr));
+		close(sock_fd);
+		free(ev);
 	}
-
-	if ((ret = __lct_log_data(&ev, data)))
-		goto out_malloc;
-
-	if ((ret = lct_log_event(sock_fd, ev)))
-		goto out_malloc;
-
-	lct_free_event(ev);
-
-	return 0;
-
- out_malloc:
-	lct_free_event(ev);
 	return ret;
 }
 
-extern inline int lct_log_stat(int sock_fd,
-			       const char *submitter_name,
-			       const char *ev_name)
-{
-	struct ct_event *ev = NULL;
-	int ret = -1;
-
-	ev = lct_alloc_event(submitter_name, ev_name, CT_EV_STAT);
-	if (!ev) {
-		return -ENOMEM;
-	}
-
-	if ((ret = lct_log_event(sock_fd, ev)))
-		return ret;
-
-	lct_free_event(ev);
-
-	return 0;
-}
-
 #endif /* !LCT_H_ */
diff --git a/libc/kernel/common/linux/kct.h b/libc/kernel/common/linux/kct.h
index 5cbb32a..9264971 100644
--- a/libc/kernel/common/linux/kct.h
+++ b/libc/kernel/common/linux/kct.h
@@ -43,6 +43,7 @@ struct ct_event {
 	enum ct_ev_type type;
 	__u64 timestamp;
 	__u32 attchmt_size; /* sizeof(all_attachments inc. padding) */
+	__u32 flags;
 	struct ct_attchmt attachments[];
 }  __aligned(4);
 
-- 
1.7.4.1

