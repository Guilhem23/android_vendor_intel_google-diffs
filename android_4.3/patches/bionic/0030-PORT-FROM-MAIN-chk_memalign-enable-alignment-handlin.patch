From 1cfa1e638cc17c992d2f65f27f903ea53f52ec3a Mon Sep 17 00:00:00 2001
From: wang, biao <biao.wang@intel.com>
Date: Tue, 26 Mar 2013 10:49:02 +0800
Subject: [PORT FROM MAIN] chk_memalign: enable alignment handling in bionic

BZ: 73304

For now chk_memalign directly call chk_malloc for simplicity, but mtbf
test case enable libc.debug.malloc and some library like glib call
memalign to request aligned memory, so it will fail definitely. so this
patch enable alignment handling while checking the memory allocation.

Change-Id: I2b4bf347aa5d779d9f66d827ec5d368b87b022a2
Signed-off-by: wang, biao <biao.wang@intel.com>
---
 libc/bionic/malloc_debug_check.cpp |   48 +++++++++++++++++++++++++++++++++---
 1 files changed, 44 insertions(+), 4 deletions(-)

diff --git a/libc/bionic/malloc_debug_check.cpp b/libc/bionic/malloc_debug_check.cpp
index 91cf287..e4a558e 100644
--- a/libc/bionic/malloc_debug_check.cpp
+++ b/libc/bionic/malloc_debug_check.cpp
@@ -325,10 +325,50 @@ extern "C" void* chk_malloc(size_t size) {
     return NULL;
 }
 
-extern "C" void* chk_memalign(size_t, size_t bytes) {
-//  log_message("%s: %s\n", __FILE__, __FUNCTION__);
-    // XXX: it's better to use malloc, than being wrong
-    return chk_malloc(bytes);
+extern "C" void* chk_memalign(size_t alignment, size_t size)
+{
+    hdr_t * hdr;
+    size_t aligned_size = 0;
+    intptr_t ptr = 0;
+    size_t remainder = 0;
+
+    // we can just use malloc
+    // if (alignment <= MALLOC_ALIGNMENT)
+    //    return chk_malloc(size);
+
+    // need to make sure it's a power of two
+    if (alignment & (alignment-1))
+        alignment = 1L << (31 - __builtin_clz(alignment));
+
+    // here, aligment is at least MALLOC_ALIGNMENT<<1 bytes
+    // we will align by at least MALLOC_ALIGNMENT bytes
+    // and at most alignment-MALLOC_ALIGNMENT bytes
+    if (alignment >= sizeof(hdr_t))
+        aligned_size = alignment + size + sizeof(struct hdr_t) + sizeof(struct ftr_t);
+    else
+        aligned_size = sizeof(struct hdr_t) + size + sizeof(struct hdr_t) + sizeof(struct ftr_t);
+
+    hdr = static_cast<hdr_t*>(dlmalloc(aligned_size));
+    if (hdr) {
+        if (alignment >= sizeof(struct hdr_t)) {
+            ptr = (intptr_t)hdr;
+            remainder = (-ptr)%alignment;
+            if (remainder >= sizeof(struct hdr_t))
+                ptr += remainder;
+            else
+                ptr += remainder + alignment;
+        }
+        else {
+            ptr = (intptr_t)((unsigned long)hdr +sizeof(struct hdr_t));
+            remainder = (-ptr)%alignment;
+            ptr += remainder;
+        }
+        hdr = static_cast<hdr_t*>((void*)(ptr - sizeof(struct hdr_t)));
+        hdr->bt_depth = get_backtrace(hdr->bt, MAX_BACKTRACE_DEPTH);
+        add(hdr, size);
+        return  user(hdr);
+    }
+    return NULL;
 }
 
 extern "C" void chk_free(void *ptr) {
-- 
1.7.4.1

