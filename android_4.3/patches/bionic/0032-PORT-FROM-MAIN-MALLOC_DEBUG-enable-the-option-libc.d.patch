From 5fc9af5ba5ccb0a47a7d5ee1a4d1f98a3f2c0943 Mon Sep 17 00:00:00 2001
From: Du Chenyang <chenyang.du@intel.com>
Date: Tue, 28 May 2013 13:22:28 +0800
Subject: [PORT FROM MAIN] MALLOC_DEBUG: enable the option libc.debug.malloc = 10

BZ: 47246

Fix the compile warning to let the libc.debug.malloc=10 works well
Due to unsuitable value comparison, which cause compiler optimize the
code of comparing two digits.

Change-Id: I865df7d3c147b6854773449cc8f016b57074f147
Orig-Change-Id: Ic8abec87627dbf9ce638790df6dd30329245abe3
Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
Author: liu chuansheng <chuansheng.liu@intel.com>
Reviewed-on: http://android.intel.com:8080/61953
Reviewed-by: Yin, Fengwei <fengwei.yin@intel.com>
Reviewed-by: Du, Chenyang <chenyang.du@intel.com>
Reviewed-by: Yao, Yong <yong.yao@intel.com>
Tested-by: Li, XiaojingX <xiaojingx.li@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Reviewed-on: http://android.intel.com:8080/75102
Reviewed-by: lab_cactus <lab_cactus@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 libc/bionic/malloc_debug_check.cpp |    8 ++++----
 1 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/libc/bionic/malloc_debug_check.cpp b/libc/bionic/malloc_debug_check.cpp
index e4a558e..a8d31a8 100644
--- a/libc/bionic/malloc_debug_check.cpp
+++ b/libc/bionic/malloc_debug_check.cpp
@@ -116,7 +116,7 @@ static inline void init_front_guard(hdr_t *hdr) {
 
 static inline bool is_front_guard_valid(hdr_t *hdr) {
     for (size_t i = 0; i < FRONT_GUARD_LEN; i++) {
-        if (hdr->front_guard[i] != FRONT_GUARD) {
+        if (hdr->front_guard[i] != (char)FRONT_GUARD) {
             return 0;
         }
     }
@@ -134,7 +134,7 @@ static inline bool is_rear_guard_valid(hdr_t *hdr) {
     int first_mismatch = -1;
     ftr_t* ftr = to_ftr(hdr);
     for (i = 0; i < REAR_GUARD_LEN; i++) {
-        if (ftr->rear_guard[i] != REAR_GUARD) {
+        if (ftr->rear_guard[i] != (char)REAR_GUARD) {
             if (first_mismatch < 0)
                 first_mismatch = i;
             valid = 0;
@@ -202,7 +202,7 @@ static int was_used_after_free(hdr_t *hdr) {
     unsigned i;
     const char *data = (const char *)user(hdr);
     for (i = 0; i < hdr->size; i++)
-        if (data[i] != FREE_POISON)
+        if (data[i] != (char)FREE_POISON)
             return 1;
     return 0;
 }
@@ -211,7 +211,7 @@ static int was_used_after_free(hdr_t *hdr) {
 static inline int check_guards(hdr_t *hdr, int *safe) {
     *safe = 1;
     if (!is_front_guard_valid(hdr)) {
-        if (hdr->front_guard[0] == FRONT_GUARD) {
+        if (hdr->front_guard[0] == (char)FRONT_GUARD) {
             log_message("+++ ALLOCATION %p SIZE %d HAS A CORRUPTED FRONT GUARD\n",
                        user(hdr), hdr->size);
         } else {
-- 
1.7.4.1

