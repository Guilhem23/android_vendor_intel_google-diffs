From a694bcbb3ab36eee93682897a8a29befffbb2467 Mon Sep 17 00:00:00 2001
From: Du Chenyang <chenyang.du@intel.com>
Date: Tue, 28 May 2013 11:55:45 +0800
Subject: [PORT FROM MAIN] Make get_backtrace more robust

BZ: 58817

Now we use an workaround way to get more backtrace instead of
_Unwind_Backtrace. Limits the stack frame pointer in range of
%ebp ~ StackTop to get the right backtrace.

This patch has dependency on -fno-omit-frame-pointer.
patch:62883, BZ:51255.
Refer to Iaa254383ada88e7728d4b3ebe720da6684777d26.

Change-Id: I9a8a16ce62fa6a16dbaca2e8646cde4bfd626f6c
Orig-Change-Id: I411b24b8871b025cc2f11a22d47d57a1356a4181
Signed-off-by: ShuoX Liu <shuox.liu@intel.com>
Reviewed-on: http://android.intel.com:8080/70758
Reviewed-by: buildbot <buildbot@intel.com>
Reviewed-by: Zhang, Yanmin <yanmin.zhang@intel.com>
Reviewed-by: Chen, HuaqiangX <huaqiangx.chen@intel.com>
Reviewed-by: Yao, Yong <yong.yao@intel.com>
Reviewed-by: Pince, Jean-christophe <jean-christophe.pince@intel.com>
Reviewed-by: Li, XiaojingX <xiaojingx.li@intel.com>
Tested-by: Li, XiaojingX <xiaojingx.li@intel.com>
Reviewed-by: lab_cactus <lab_cactus@intel.com>
Tested-by: lab_cactus <lab_cactus@intel.com>
Reviewed-on: http://android.intel.com:8080/75114
Reviewed-by: Du, Chenyang <chenyang.du@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 libc/bionic/debug_stacktrace.cpp |   45 ++++++++++++++++++++++++++++++++++++++
 1 files changed, 45 insertions(+), 0 deletions(-)

diff --git a/libc/bionic/debug_stacktrace.cpp b/libc/bionic/debug_stacktrace.cpp
index fb933e6..a2ce191 100644
--- a/libc/bionic/debug_stacktrace.cpp
+++ b/libc/bionic/debug_stacktrace.cpp
@@ -36,6 +36,8 @@
 #include "debug_mapinfo.h"
 #include "libc_logging.h"
 
+#include <pthread.h>
+
 /* depends how the system includes define this */
 #ifdef HAVE_UNWIND_CONTEXT_STRUCT
 typedef struct _Unwind_Context __unwind_context;
@@ -43,6 +45,11 @@ typedef struct _Unwind_Context __unwind_context;
 typedef _Unwind_Context __unwind_context;
 #endif
 
+/*workaround if _Unwind_Backtrace can not work well */
+#ifdef __i386__
+#define UNWIND_WORKAROUND
+#endif
+
 static mapinfo_t* gMapInfo = NULL;
 static void* gDemangler;
 typedef char* (*DemanglerFn)(const char*, char*, size_t*, int*);
@@ -115,7 +122,45 @@ static _Unwind_Reason_Code trace_function(__unwind_context* context, void* arg)
 
 __LIBC_HIDDEN__ int get_backtrace(uintptr_t* frames, size_t max_depth) {
   stack_crawl_state_t state(frames, max_depth);
+
+#ifdef UNWIND_WORKAROUND
+    int s;
+    pthread_attr_t thread_attr;
+    unsigned sb, st;
+    size_t stacksize;
+    pthread_t thread = pthread_self();
+    unsigned *_ebp, *base_ebp;
+    unsigned *caller;
+
+    pthread_attr_init(&thread_attr);
+    s = pthread_getattr_np(thread, &thread_attr);
+    if (s) goto out;
+    s = pthread_attr_getstack(&thread_attr, (void **)(&sb), &stacksize);
+    if (s) goto out;
+    st = sb + stacksize;
+
+    asm ("movl %%ebp, %0"
+            : "=r" (_ebp)
+    );
+
+    if (_ebp >= (unsigned *)(st - 4) || _ebp < (unsigned *)sb || _ebp == (unsigned *)*_ebp)
+            goto out;
+    base_ebp = _ebp;
+    caller = (unsigned *) *(_ebp + 1);
+
+    while (state.frame_count < max_depth) {
+        state.frames[state.frame_count++] = (intptr_t) caller;
+        _ebp = (unsigned *) *_ebp;
+        if (_ebp >= (unsigned *)(st - 4) || _ebp < base_ebp || _ebp == (unsigned *)*_ebp) break;
+        caller = (unsigned *) *(_ebp + 1);
+    }
+
+out:
+    pthread_attr_destroy(&thread_attr);
+#else
   _Unwind_Backtrace(trace_function, &state);
+#endif // UNWIND_WORKAROUND
+
   return state.frame_count;
 }
 
-- 
1.7.4.1

