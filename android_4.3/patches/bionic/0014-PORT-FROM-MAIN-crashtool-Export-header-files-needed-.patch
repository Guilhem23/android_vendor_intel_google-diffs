From b5acd023463b56e1d22e668d7a8e20011986c7c9 Mon Sep 17 00:00:00 2001
From: Quentin Casasnovas <quentinx.casasnovas@intel.com>
Date: Thu, 14 Feb 2013 16:55:07 +0100
Subject: [PORT FROM MAIN] crashtool: Export header files needed by project using crashtool

BZ: 86746

Export header files needed by project using crashtool.

Change-Id: I664bcc066b8ef38e6d820386ac423f67510df627
Orig-Change-Id: I979062e4500578168ac46615bc6df31effa0ea1c
Signed-off-by: Quentin Casasnovas <quentinx.casasnovas@intel.com>
Reviewed-on: http://android.intel.com:8080/91923
Reviewed-by: cactus <cactus@intel.com>
Reviewed-by: Chotard, Celine <celine.chotard@intel.com>
Tested-by: Chotard, Celine <celine.chotard@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
---
 libc/include/ctm.h             |   78 +++++++++++++++++++++++++++++++
 libc/include/lct.h             |   24 ++++++++++
 libc/include/lct_.h            |   14 ++++++
 libc/kernel/common/linux/kct.h |  100 ++++++++++++++++++++++++++++++++++++++++
 4 files changed, 216 insertions(+), 0 deletions(-)
 create mode 100644 libc/include/ctm.h
 create mode 100644 libc/include/lct.h
 create mode 100644 libc/include/lct_.h
 create mode 100644 libc/kernel/common/linux/kct.h

diff --git a/libc/include/ctm.h b/libc/include/ctm.h
new file mode 100644
index 0000000..4e85651
--- /dev/null
+++ b/libc/include/ctm.h
@@ -0,0 +1,78 @@
+#ifndef CTM_H_
+#  define CTM_H_
+
+#  include <sys/socket.h>
+#  include "linux/kct.h"
+#  include <stdint.h>
+
+#  define DEBUG
+#  ifdef DEBUG
+#    define debug(Args...) fprintf(stderr, ## Args)
+#  else
+#    define debug(Args...) { }
+#  endif
+
+#  define info(Args...) fprintf(stdout, ## Args)
+#  define warning(Args...) fprintf(stderr, ## Args)
+#  define error(Args...) fprintf(stderr, ## Args)
+
+#  define max(X, Y)  ((X) < (Y) ? (Y) : (X))
+
+#  define STAT_TRIG_SUFFIX  "_trigger"
+#  define CRASH_TRIG_SUFFIX "_trigger"
+#  define INFO_TRIG_SUFFIX  "_infoevent"
+
+#  define INFO_DATA_SUFFIX "_data"
+#  define CRASH_DATA_SUFFIX "_data"
+
+struct ct_monitor_ctx {
+	int thread_should_stop;
+	int sock_nl_fd;
+	int sock_fd;
+	const char *path_stat_dir;
+	const char *path_crash_dir;
+	const char *path_info_dir;
+};
+
+enum ctm_ev_pending {
+	EV_PENDING_ALL,
+	EV_PENDING_NLSOCKET,
+	EV_PENDING_USOCKET,
+	EV_PENDING_NONE
+};
+
+typedef int (*ev_handler_t)(struct ct_event *ev);
+
+/* ctm_netlink.c */
+extern int ctm_nl_init(void);
+extern int ctm_nl_exit(int fd);
+extern int ctm_nl_sendto_kct(int fd, int type, const void *data, unsigned int size);
+extern int ctm_nl_get_packet(int fd, struct kct_packet **pkt, int flags);
+extern int ctm_nl_dclr_pid(int fd);
+
+/* ctm_comm.c */
+extern enum ctm_ev_pending	ctm_comm_wait_event(struct ct_monitor_ctx*, long timeout);
+extern int			ctm_comm_init(struct ct_monitor_ctx*);
+extern int			ctm_comm_exit(struct ct_monitor_ctx*);
+extern int			ctm_comm_handle_socket_msg(struct ct_monitor_ctx *ctx);
+extern int			ctm_comm_handle_netlink_msg(struct ct_monitor_ctx *ctx);
+
+/* ctm_signal.c */
+extern int ctm_sig_init(void);
+
+/* ctm_print.c */
+extern void print_ct_attchmt(struct ct_attchmt *at);
+extern void print_all_attchmnt(struct ct_event *ev);
+extern void print_ct_event(struct ct_event *ev);
+
+/* ctm_handlers.c */
+extern int ct_stat_handler(struct ct_event *ev);
+extern int ct_crash_handler(struct ct_event *ev);
+/* extern int ct_error_handler(struct ct_event *ev); */
+/* extern int ct_info_handler(struct ct_event *ev); */
+
+extern struct ct_monitor_ctx ctm_ctx;
+
+extern ev_handler_t ev_handlers[CT_EV_LAST];
+
+#endif /* !CTM_H_ */
diff --git a/libc/include/lct.h b/libc/include/lct.h
new file mode 100644
index 0000000..0eb03d7
--- /dev/null
+++ b/libc/include/lct.h
@@ -0,0 +1,24 @@
+#ifndef LCT_H_
+# define LCT_H_
+
+#include <sys/socket.h>
+#include <linux/kct.h>
+
+/* lct_ev.c */
+extern int		lct_log_event(int sock_fd, struct ct_event *ev);
+extern void		lct_free_event(struct ct_event*);
+extern struct ct_event* lct_alloc_event(const char*, const char*, enum ct_ev_type);
+extern int		lct_add_attchmt(struct ct_event **ev, enum ct_attchmt_type at_type,
+					unsigned int size, const char *data);
+extern int		lct_log_stat(int sock_fd, const char *submitter_name,
+				     const char *ev_name);
+/* lct_comm.c */
+extern int		lct_snd_event(int sock_fd, struct ct_event* ev);
+extern int		lct_rcv_event(int sock_fd, struct ct_event** ev);
+extern int		lct_server_init(void);
+extern int		lct_server_exit(int sock_fd);
+extern int		lct_client_init(void);
+extern int		lct_client_exit(int sock_fd);
+
+/* */
+#endif /* !LCT_H_ */
diff --git a/libc/include/lct_.h b/libc/include/lct_.h
new file mode 100644
index 0000000..6010237
--- /dev/null
+++ b/libc/include/lct_.h
@@ -0,0 +1,14 @@
+#ifndef LCT__H_
+# define LCT__H_
+
+#  ifdef DEBUG
+#    define debug(Args...) fprintf(stderr, ## Args)
+#  else
+#    define debug(Args...) { }
+#  endif
+
+#  define info(Args...) fprintf(stdout, ## Args)
+#  define warning(Args...) fprintf(stderr, ## Args)
+#  define error(Args...) fprintf(stderr, ## Args)
+
+#endif /* !LCT__H_ */
diff --git a/libc/kernel/common/linux/kct.h b/libc/kernel/common/linux/kct.h
new file mode 100644
index 0000000..5cbb32a
--- /dev/null
+++ b/libc/kernel/common/linux/kct.h
@@ -0,0 +1,100 @@
+#ifndef KCT_H_
+#  define KCT_H_
+
+#  include <linux/netlink.h>
+
+#  ifndef MAX_SB_N
+#    define MAX_SB_N 32
+#  endif
+
+#  ifndef MAX_EV_N
+#    define MAX_EV_N 32
+#  endif
+
+#  define NETLINK_CRASHTOOL 27
+#  define ATTCHMT_ALIGN 4U
+
+/* Type of events supported by crashtool */
+enum ct_ev_type {
+	CT_EV_STAT,
+	CT_EV_INFO,
+	CT_EV_ERROR,
+	CT_EV_CRASH,
+	CT_EV_LAST
+};
+
+enum ct_attchmt_type {
+	CT_ATTCHMT_DATA0,
+	CT_ATTCHMT_DATA1,
+	CT_ATTCHMT_DATA2,
+	/* Always add new types after DATA2 */
+	CT_ATTCHMT_BINARY,
+};
+
+struct ct_attchmt {
+	__u32 size; /* sizeof(data) */
+	enum ct_attchmt_type type;
+	char data[];
+} __aligned(4);
+
+struct ct_event {
+	char submitter_name[MAX_SB_N];
+	char ev_name[MAX_EV_N];
+	enum ct_ev_type type;
+	__u64 timestamp;
+	__u32 attchmt_size; /* sizeof(all_attachments inc. padding) */
+	struct ct_attchmt attachments[];
+}  __aligned(4);
+
+enum kct_nlmsg_type {
+	/* kernel -> userland */
+	KCT_EVENT,
+	/* userland -> kernel */
+	KCT_SET_PID = 4200,
+};
+
+struct kct_packet {
+	struct nlmsghdr nlh;
+	struct ct_event event;
+};
+
+#  define ATTCHMT_ALIGNMENT	4
+
+#  ifndef ALIGN
+#    define __ALIGN_MASK(x, mask)    (((x) + (mask)) & ~(mask))
+#    define __ALIGN(x, a)            __ALIGN_MASK(x, (typeof(x))(a) - 1)
+#    define ALIGN(x, a)		     __ALIGN((x), (a))
+#  endif /* !ALIGN */
+
+#  define foreach_attchmt(Event, Attchmt)				\
+	if ((Event)->attchmt_size)					\
+		for ((Attchmt) = (Event)->attachments;			\
+		     (Attchmt) < (typeof(Attchmt))(((char *)		\
+				  (Event)->attachments) +               \
+			(Event)->attchmt_size);                         \
+		     (Attchmt) = (typeof(Attchmt))ALIGN(((size_t)(Attchmt)) \
+						     + sizeof(*(Attchmt)) + \
+			      (Attchmt)->size, ATTCHMT_ALIGNMENT))
+
+#  ifdef __KERNEL__
+
+/* Helper functions */
+extern int kct_log_stat(const char *submitter_name,
+			const char *ev_name,
+			gfp_t flags) __weak;
+
+/* Raw API */
+extern struct ct_event *kct_alloc_event(const char *submitter_name,
+					const char *ev_name,
+					enum ct_ev_type ev_type,
+					gfp_t flags) __weak;
+extern int kct_add_attchmt(struct ct_event **ev,
+			   enum ct_attchmt_type at_type,
+			   unsigned int size,
+			   char *data, gfp_t flags)  __weak;
+extern void kct_free_event(struct ct_event *ev) __weak;
+extern int kct_log_event(struct ct_event *ev, gfp_t flags) __weak;
+
+#  endif /* !__KERNEL__ */
+
+#endif /* !KCT_H_ */
-- 
1.7.4.1

