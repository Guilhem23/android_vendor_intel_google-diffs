From 766095a8f597a4de60ae4e9b65220e504b4e38ba Mon Sep 17 00:00:00 2001
From: Jin Wei <wei.a.jin@intel.com>
Date: Thu, 11 Apr 2013 18:37:44 +0800
Subject: [PDK MR2 Temp] fix signal build error

BZ: 117199

Change-Id: I1cc3f610fa357e1483f34ca4ec5ad81ac4ebff5b
Signed-off-by: Jin Wei <wei.a.jin@intel.com>
---
 libc/include/signal.h |  102 ++++++++++++++++++++++++++++---------------------
 1 files changed, 58 insertions(+), 44 deletions(-)

diff --git a/libc/include/signal.h b/libc/include/signal.h
index 8c9b170..2785d52 100644
--- a/libc/include/signal.h
+++ b/libc/include/signal.h
@@ -28,12 +28,12 @@
 #ifndef _SIGNAL_H_
 #define _SIGNAL_H_
 
-#include <errno.h>
 #include <sys/cdefs.h>
 #include <limits.h>		/* For LONG_BIT */
 #include <string.h>		/* For memset() */
 #include <sys/types.h>
 #include <asm/signal.h>
+#include <errno.h>
 
 #define __ARCH_SI_UID_T __kernel_uid32_t
 #include <asm/siginfo.h>
@@ -54,57 +54,71 @@ typedef int sig_atomic_t;
 #  define _NSIG  64
 #endif
 
-extern const char* const sys_siglist[];
-extern const char* const sys_signame[];
-
-static __inline__ int sigismember(const sigset_t* set, int signum) {
-  int bit = signum - 1; // Signal numbers start at 1, but bit positions start at 0.
-  if (set == NULL || bit < 0 || bit >= (int) (8*sizeof(sigset_t))) {
-    errno = EINVAL;
-    return -1;
-  }
-  const unsigned long* local_set = (const unsigned long*) set;
-  return (int) ((local_set[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1);
+
+extern const char * const sys_siglist[];
+extern const char * const sys_signame[];
+
+static __inline__ int sigismember(sigset_t *set, int signum)
+{
+    if (set == NULL || signum <= 0 || signum >= NSIG) {
+        errno = EINVAL;
+        return -1;
+    }
+
+    unsigned long *local_set = (unsigned long *)set;
+    signum--;
+    return (int)((local_set[signum/LONG_BIT] >> (signum%LONG_BIT)) & 1);
 }
 
-static __inline__ int sigaddset(sigset_t* set, int signum) {
-  int bit = signum - 1; // Signal numbers start at 1, but bit positions start at 0.
-  if (set == NULL || bit < 0 || bit >= (int) (8*sizeof(sigset_t))) {
-    errno = EINVAL;
-    return -1;
-  }
-  unsigned long* local_set = (unsigned long*) set;
-  local_set[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
-  return 0;
+
+static __inline__ int sigaddset(sigset_t *set, int signum)
+{
+    if (set == NULL || signum <= 0 || signum >= NSIG) {
+        errno = EINVAL;
+        return -1;
+    }
+
+    unsigned long *local_set = (unsigned long *)set;
+    signum--;
+    local_set[signum/LONG_BIT] |= 1UL << (signum%LONG_BIT);
+    return 0;
 }
 
-static __inline__ int sigdelset(sigset_t* set, int signum) {
-  int bit = signum - 1; // Signal numbers start at 1, but bit positions start at 0.
-  if (set == NULL || bit < 0 || bit >= (int) (8*sizeof(sigset_t))) {
-    errno = EINVAL;
-    return -1;
-  }
-  unsigned long* local_set = (unsigned long*) set;
-  local_set[bit / LONG_BIT] &= ~(1UL << (bit % LONG_BIT));
-  return 0;
+
+static __inline__ int sigdelset(sigset_t *set, int signum)
+{
+    if (set == NULL || signum <= 0 || signum >= NSIG) {
+        errno = EINVAL;
+        return -1;
+    }
+
+    unsigned long *local_set = (unsigned long *)set;
+    signum--;
+    local_set[signum/LONG_BIT] &= ~(1UL << (signum%LONG_BIT));
+    return 0;
 }
 
-static __inline__ int sigemptyset(sigset_t* set) {
-  if (set == NULL) {
-    errno = EINVAL;
-    return -1;
-  }
-  memset(set, 0, sizeof *set);
-  return 0;
+
+static __inline__ int sigemptyset(sigset_t *set)
+{
+    if (set == NULL) {
+        errno = EINVAL;
+        return -1;
+    }
+
+    memset(set, 0, sizeof *set);
+    return 0;
 }
 
-static __inline__ int sigfillset(sigset_t* set) {
-  if (set == NULL) {
-    errno = EINVAL;
-    return -1;
-  }
-  memset(set, ~0, sizeof *set);
-  return 0;
+static __inline__ int sigfillset(sigset_t *set)
+{
+    if (set == NULL) {
+        errno = EINVAL;
+        return -1;
+    }
+
+    memset(set, ~0, sizeof *set);
+    return 0;
 }
 
 
-- 
1.7.4.1

