From 30bbc469bc7ce8bf364703db56df5c315b619ae2 Mon Sep 17 00:00:00 2001
From: jerome <jerome.anand@intel.com>
Date: Tue, 16 Jul 2013 10:42:27 +0530
Subject: [PORT FROM MAIN][WIDI BGM] The sound of game comes from remote after playback ends in remote

BZ: 114010

The playback on remote is initated only if the bgm parameter
is set from the unique application and the audio player session
is active. For other players, default deep buffer playback is
initiated

Change-Id: Iea2a0599690eff5953d429089a2e90c2c9a42086
Signed-off-by: jerome <jerome.anand@intel.com>
Signed-off-by: gbhakteX <gurudattax.bhakte@intel.com>
Reviewed-on: http://android.intel.com:8080/118922
Reviewed-by: Sameullah, MazharX <mazharx.sameullah@intel.com>
Reviewed-by: Krishna, Samaga <samaga.krishna@intel.com>
Tested-by: Gupta, ArvindX K <arvindx.k.gupta@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
---
 include/hardware/audio.h                 |    1 +
 modules/audio_remote_submix/Android.mk   |    2 +-
 modules/audio_remote_submix/audio_hw.cpp |   66 ++++++++++++++++++++++++++++--
 3 files changed, 64 insertions(+), 5 deletions(-)

diff --git a/include/hardware/audio.h b/include/hardware/audio.h
index 3fa3521..fc6f2ef 100644
--- a/include/hardware/audio.h
+++ b/include/hardware/audio.h
@@ -113,6 +113,7 @@ __BEGIN_DECLS
 /* Remote BGM state */
 #define AUDIO_PARAMETER_KEY_REMOTE_BGM_STATE "bgm_state"
 #define AUDIO_PARAMETER_VALUE_REMOTE_BGM_AUDIO "bgm_audio"
+#define AUDIO_PARAMETER_VALUE_REMOTE_BGM_SESSION_ID "bgm_session"
 
 /* Context awareness */
 #define AUDIO_PARAMETER_KEY_CONTEXT_AWARENESS_STATUS "context_awareness_status"
diff --git a/modules/audio_remote_submix/Android.mk b/modules/audio_remote_submix/Android.mk
index 5f54902..ebad973 100644
--- a/modules/audio_remote_submix/Android.mk
+++ b/modules/audio_remote_submix/Android.mk
@@ -23,7 +23,7 @@ LOCAL_SRC_FILES := \
 LOCAL_C_INCLUDES += \
 	frameworks/av/include/ \
 	frameworks/native/include/
-LOCAL_SHARED_LIBRARIES := liblog libcutils libutils libnbaio
+LOCAL_SHARED_LIBRARIES := liblog libcutils libutils libnbaio libmedia
 LOCAL_STATIC_LIBRARIES := libmedia_helper
 LOCAL_MODULE_TAGS := optional
 include $(BUILD_SHARED_LIBRARY)
diff --git a/modules/audio_remote_submix/audio_hw.cpp b/modules/audio_remote_submix/audio_hw.cpp
index 05d08a4..45a63fe 100755
--- a/modules/audio_remote_submix/audio_hw.cpp
+++ b/modules/audio_remote_submix/audio_hw.cpp
@@ -79,6 +79,8 @@ struct submix_audio_device {
     pthread_mutex_t lock;
     // remote bgm state - true, false
     char *bgmstate;
+    //bgm player session
+    char* bgmsession;
 
 };
 
@@ -617,6 +619,7 @@ static int adev_set_parameters(struct audio_hw_device *dev, const char *kvpairs)
     struct submix_audio_device *adev = (struct submix_audio_device *)dev;
     char *key,*value;
     struct str_parms *param;
+    int session = 0;
     int keyvalue = 0;
     char * kvp = NULL;
     int err = 0;
@@ -651,9 +654,16 @@ static int adev_set_parameters(struct audio_hw_device *dev, const char *kvpairs)
            }
            ALOGV("%s : audio state in BGM = %s",__func__,gbgm_audio);
        }
+
+       if (strcmp(key, AUDIO_PARAMETER_VALUE_REMOTE_BGM_SESSION_ID) == 0) {
+           if (value != NULL) {
+               adev->bgmsession = strdup(value);
+           }
+       }
     }
 
-    ALOGD("%s exit bgmstate = %s, bgmaudio = %s", __func__,adev->bgmstate,gbgm_audio);
+    ALOGV("%s exit bgmstate = %s, bgmaudio = %s bgmplayersession = %d",
+                __func__,adev->bgmstate,gbgm_audio,atoi(adev->bgmsession));
 
     return 0;
 }
@@ -664,10 +674,14 @@ static char * adev_get_parameters(const struct audio_hw_device *dev,
     struct submix_audio_device *adev = (struct submix_audio_device *)dev;
     char value[32];
 
-    ALOGD("%s entered with keys %s", __func__,keys);
+    ALOGV("%s entered with keys %s", __func__,keys);
 
     if (strcmp(keys, AUDIO_PARAMETER_KEY_REMOTE_BGM_STATE) == 0) {
         struct str_parms *parms = str_parms_create_str(keys);
+        if(!parms) {
+           ALOGE("%s failed for bgm_state",__func__);
+           goto error_exit;
+        }
         int ret = str_parms_get_str(parms, AUDIO_PARAMETER_KEY_REMOTE_BGM_STATE,
                                      value, sizeof(value));
         char *str;
@@ -676,16 +690,24 @@ static char * adev_get_parameters(const struct audio_hw_device *dev,
         if (ret >= 0) {
            ALOGV("%s adev->bgmstate %s", __func__,adev->bgmstate);
            parms = str_parms_create_str(adev->bgmstate);
+           if(!parms) {
+              ALOGE("%s failed for bgm_state",__func__);
+              goto error_exit;
+           }
            str = str_parms_to_str(parms);
            str = strtok(str, "=");
            str_parms_destroy(parms);
-           ALOGD("%s entered with key %s for which value is %s", __func__,keys,str);
+           ALOGV("%s entered with key %s for which value is %s", __func__,keys,str);
            return str;
         }
     }
 
     if (strcmp(keys, AUDIO_PARAMETER_VALUE_REMOTE_BGM_AUDIO) == 0) {
        struct str_parms *parms = str_parms_create_str(keys);
+        if(!parms) {
+           ALOGE("%s failed for bgm_audio",__func__);
+           goto error_exit;
+        }
        int ret = str_parms_get_str(parms, AUDIO_PARAMETER_VALUE_REMOTE_BGM_AUDIO,
                                      value, sizeof(value));
        char *str;
@@ -694,13 +716,48 @@ static char * adev_get_parameters(const struct audio_hw_device *dev,
        if (ret >= 0) {
           ALOGV("%s gbgm_audio %s", __func__,gbgm_audio);
           parms = str_parms_create_str(gbgm_audio);
+          if(!parms) {
+             ALOGE("%s failed for bgm_state",__func__);
+             goto error_exit;
+          }
           str = str_parms_to_str(parms);
           str = strtok(str, "=");
           str_parms_destroy(parms);
-          ALOGD("%s entered with key %s for which value is %s", __func__,keys,str);
+          ALOGV("%s entered with key %s for which value is %s", __func__,keys,str);
           return str;
        }
     }
+
+    if (strcmp(keys, AUDIO_PARAMETER_VALUE_REMOTE_BGM_SESSION_ID) == 0) {
+       struct str_parms *parms = str_parms_create_str(keys);
+        if(!parms) {
+           ALOGE("%s failed for bgm_session",__func__);
+           goto error_exit;
+        }
+       int ret = str_parms_get_str(parms, AUDIO_PARAMETER_VALUE_REMOTE_BGM_SESSION_ID,
+                                     value, sizeof(value));
+       char *str;
+
+       str_parms_destroy(parms);
+       if (ret >= 0) {
+          ALOGV("%s adev->bgmsession %s", __func__,adev->bgmsession);
+          parms = str_parms_create_str(adev->bgmsession);
+          if(!parms) {
+             ALOGE("%s failed for bgm_state",__func__);
+             goto error_exit;
+          }
+          str = str_parms_to_str(parms);
+          str = strtok(str, "=");
+          str_parms_destroy(parms);
+          ALOGV("%s entered with key %s for which value is %s", __func__,keys,str);
+          return str;
+       }
+    }
+
+    ALOGV("%s exit bgmstate = %s, bgmaudio = %s bgmplayersession = %d",
+                __func__,adev->bgmstate,gbgm_audio,atoi(adev->bgmsession));
+
+error_exit:
     return strdup("");
 }
 
@@ -868,6 +925,7 @@ static int adev_open(const hw_module_t* module, const char* name,
         return -ENOMEM;
 
     rsxadev->bgmstate = "false";
+    rsxadev->bgmsession = "0";
 
     rsxadev->device.common.tag = HARDWARE_DEVICE_TAG;
     rsxadev->device.common.version = AUDIO_DEVICE_API_VERSION_2_0;
-- 
1.7.4.1

