From a2931f439f59190894c8750759b159de8b2dd458 Mon Sep 17 00:00:00 2001
From: jerome <jerome.anand@intel.com>
Date: Mon, 10 Jun 2013 11:23:06 +0530
Subject: [PORT FROM MAIN][REMOTE SUBMIX] Enable the remote submix device in APM

BZ: 113449

The APM is updated to take in remote submix device to
co-exist along with WIDI device.

Remote submix takes precedence to WIDI device.

Change-Id: If03b177f8f7190ffa4969c35c3b971e613eb1e2b
Signed-off-by: jerome <jerome.anand@intel.com>
Reviewed-on: http://android.intel.com:8080/112585
Reviewed-by: cactus <cactus@intel.com>
Reviewed-by: Sikkandar D, Madar <madar.sikkandar.d@intel.com>
Tested-by: Gupta, ArvindX K <arvindx.k.gupta@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
---
 modules/audio_remote_submix/audio_hw.cpp |  102 ++++++++++++++++++++++++++++--
 1 files changed, 96 insertions(+), 6 deletions(-)

diff --git a/modules/audio_remote_submix/audio_hw.cpp b/modules/audio_remote_submix/audio_hw.cpp
index 5e88ef7..05d08a4 100755
--- a/modules/audio_remote_submix/audio_hw.cpp
+++ b/modules/audio_remote_submix/audio_hw.cpp
@@ -23,10 +23,6 @@
 #include <sys/time.h>
 #include <stdlib.h>
 
-#include <cutils/log.h>
-#include <cutils/str_parms.h>
-#include <cutils/properties.h>
-
 #include <hardware/hardware.h>
 #include <system/audio.h>
 #include <hardware/audio.h>
@@ -40,6 +36,10 @@
 
 extern "C" {
 
+#include <cutils/log.h>
+#include <cutils/str_parms.h>
+#include <cutils/properties.h>
+
 namespace android {
 
 #define MAX_PIPE_DEPTH_IN_FRAMES     (1024*8)
@@ -77,6 +77,9 @@ struct submix_audio_device {
 
     // device lock, also used to protect access to the audio pipe
     pthread_mutex_t lock;
+    // remote bgm state - true, false
+    char *bgmstate;
+
 };
 
 struct submix_stream_out {
@@ -96,6 +99,10 @@ struct submix_stream_in {
 };
 
 
+/*Different audio streams across player sessions are
+  possible. hence save the stream state*/
+static char* gbgm_audio = "true";
+
 /* audio HAL functions */
 
 static uint32_t out_get_sample_rate(const struct audio_stream *stream)
@@ -607,13 +614,94 @@ static void adev_close_output_stream(struct audio_hw_device *dev,
 
 static int adev_set_parameters(struct audio_hw_device *dev, const char *kvpairs)
 {
-    return -ENOSYS;
+    struct submix_audio_device *adev = (struct submix_audio_device *)dev;
+    char *key,*value;
+    struct str_parms *param;
+    int keyvalue = 0;
+    char * kvp = NULL;
+    int err = 0;
+
+    if ((kvpairs == NULL) && (adev == NULL)) {
+        ALOGE("%s NUll inputs kvpairs = %s, adev = %d",__func__, kvpairs,(int)adev);
+        return err;
+    }
+
+    kvp = (char*)kvpairs;
+    ALOGV("%s entered with key-value pair %s", __func__,kvpairs);
+
+    key = strtok(kvp,"=");
+    value = strtok(NULL, "=");
+    if (key != NULL) {
+       if (strcmp(key, AUDIO_PARAMETER_KEY_REMOTE_BGM_STATE) == 0) {
+           adev->bgmstate = strdup("false");
+           if (value != NULL) {
+               if (strcmp(value, "true") == 0) {
+                  adev->bgmstate = strdup("true");
+               }
+           }
+       }
+
+       if (strcmp(key, AUDIO_PARAMETER_VALUE_REMOTE_BGM_AUDIO) == 0) {
+           /*by default audio stream is active*/
+           gbgm_audio = strdup("true");
+           if (value != NULL) {
+               if (strcmp(value, "0") == 0) {
+                  gbgm_audio = strdup("false");
+               }
+           }
+           ALOGV("%s : audio state in BGM = %s",__func__,gbgm_audio);
+       }
+    }
+
+    ALOGD("%s exit bgmstate = %s, bgmaudio = %s", __func__,adev->bgmstate,gbgm_audio);
+
+    return 0;
 }
 
 static char * adev_get_parameters(const struct audio_hw_device *dev,
                                   const char *keys)
 {
-    return strdup("");;
+    struct submix_audio_device *adev = (struct submix_audio_device *)dev;
+    char value[32];
+
+    ALOGD("%s entered with keys %s", __func__,keys);
+
+    if (strcmp(keys, AUDIO_PARAMETER_KEY_REMOTE_BGM_STATE) == 0) {
+        struct str_parms *parms = str_parms_create_str(keys);
+        int ret = str_parms_get_str(parms, AUDIO_PARAMETER_KEY_REMOTE_BGM_STATE,
+                                     value, sizeof(value));
+        char *str;
+
+        str_parms_destroy(parms);
+        if (ret >= 0) {
+           ALOGV("%s adev->bgmstate %s", __func__,adev->bgmstate);
+           parms = str_parms_create_str(adev->bgmstate);
+           str = str_parms_to_str(parms);
+           str = strtok(str, "=");
+           str_parms_destroy(parms);
+           ALOGD("%s entered with key %s for which value is %s", __func__,keys,str);
+           return str;
+        }
+    }
+
+    if (strcmp(keys, AUDIO_PARAMETER_VALUE_REMOTE_BGM_AUDIO) == 0) {
+       struct str_parms *parms = str_parms_create_str(keys);
+       int ret = str_parms_get_str(parms, AUDIO_PARAMETER_VALUE_REMOTE_BGM_AUDIO,
+                                     value, sizeof(value));
+       char *str;
+
+       str_parms_destroy(parms);
+       if (ret >= 0) {
+          ALOGV("%s gbgm_audio %s", __func__,gbgm_audio);
+          parms = str_parms_create_str(gbgm_audio);
+          str = str_parms_to_str(parms);
+          str = strtok(str, "=");
+          str_parms_destroy(parms);
+          ALOGD("%s entered with key %s for which value is %s", __func__,keys,str);
+          return str;
+       }
+    }
+    return strdup("");
 }
 
 static int adev_init_check(const struct audio_hw_device *dev)
@@ -779,6 +867,8 @@ static int adev_open(const hw_module_t* module, const char* name,
     if (!rsxadev)
         return -ENOMEM;
 
+    rsxadev->bgmstate = "false";
+
     rsxadev->device.common.tag = HARDWARE_DEVICE_TAG;
     rsxadev->device.common.version = AUDIO_DEVICE_API_VERSION_2_0;
     rsxadev->device.common.module = (struct hw_module_t *) module;
-- 
1.7.4.1

