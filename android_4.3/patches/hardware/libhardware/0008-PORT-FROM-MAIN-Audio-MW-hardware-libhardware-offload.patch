From b1f38d800bbe2dc00935e51984991da3654a93d5 Mon Sep 17 00:00:00 2001
From: samaga Prasanna Krishna <samaga.krishna@intel.com>
Date: Tue, 4 Sep 2012 23:51:20 +0530
Subject: [PORT FROM MAIN] Audio-MW: hardware libhardware offload MP3 AAC-LC support

BZ: 46225

This patch will add codec offload parameters and policy
check for codec offload.

Change-Id: I8fc255777197d981cc740ca65ffcee7a1a5b8a05
Orig-Change-Id: Iad8aa8bd8e02942f4800ddb102d20d401df023d5
Signed-off-by: samaga Prasanna Krishna <samaga.krishna@intel.com>
Reviewed-on: http://android.intel.com:8080/78365
Reviewed-by: Yao, Yong <yong.yao@intel.com>
Reviewed-by: M, Arulselvan <arulselvan.m@intel.com>
Tested-by: M, Arulselvan <arulselvan.m@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 include/hardware/audio.h        |   50 +++++++++++++++++++++++++++++++++++++++
 include/hardware/audio_policy.h |    9 +++++++
 modules/audio/audio_policy.c    |   15 +++++++++++
 3 files changed, 74 insertions(+), 0 deletions(-)

diff --git a/include/hardware/audio.h b/include/hardware/audio.h
index 73edb2b..60e4484 100644
--- a/include/hardware/audio.h
+++ b/include/hardware/audio.h
@@ -67,6 +67,7 @@ __BEGIN_DECLS
 #define AUDIO_HARDWARE_MODULE_ID_A2DP "a2dp"
 #define AUDIO_HARDWARE_MODULE_ID_USB "usb"
 #define AUDIO_HARDWARE_MODULE_ID_REMOTE_SUBMIX "r_submix"
+#define AUDIO_HARDWARE_MODULE_ID_CODEC_OFFLOAD "codec_offload"
 
 /**************************************/
 
@@ -127,6 +128,20 @@ __BEGIN_DECLS
  * "sup_sampling_rates=44100|48000" */
 #define AUDIO_PARAMETER_STREAM_SUP_SAMPLING_RATES "sup_sampling_rates"
 
+/**
+* audio codec parameters
+*/
+
+#define AUDIO_OFFLOAD_CODEC_PARAMS "music_offload_codec_param"
+#define AUDIO_OFFLOAD_CODEC_BIT_PER_SAMPLE "music_offload_bit_per_sample"
+#define AUDIO_OFFLOAD_CODEC_BIT_RATE "music_offload_bit_rate"
+#define AUDIO_OFFLOAD_CODEC_AVG_BIT_RATE "music_offload_avg_bit_rate"
+#define AUDIO_OFFLOAD_CODEC_ID "music_offload_codec_id"
+#define AUDIO_OFFLOAD_CODEC_BLOCK_ALIGN "music_offload_block_align"
+#define AUDIO_OFFLOAD_CODEC_SAMPLE_RATE "music_offload_sample_rate"
+#define AUDIO_OFFLOAD_CODEC_ENCODE_OPTION "music_offload_encode_option"
+#define AUDIO_OFFLOAD_CODEC_NUM_CHANNEL  "music_offload_num_channels"
+#define AUDIO_OFFLOAD_CODEC_DOWN_SAMPLING  "music_offload_down_sampling"
 
 /**************************************/
 
@@ -269,6 +284,34 @@ struct audio_stream_out {
     int (*get_next_write_timestamp)(const struct audio_stream_out *stream,
                                     int64_t *timestamp);
 
+    /**
+     * Notifies to the audio driver to stop playback however the queued buffers are
+     * retained by the hardware. Useful for implementing pause/resume. Empty implemented
+     * if not supported however should be implemented for hardware with non-trivial
+     * latency. In the pause state audio hardware could still be using power. User may
+     * consider calling suspend after a timeout.
+     */
+    int (*pause)(const struct audio_stream_out* stream);
+
+    /**
+     * Notifies to the audio driver to resume playback following a pause.
+     * Returns error if called without matching pause.
+     */
+    int (*resume)(const struct audio_stream_out* stream);
+
+    /**
+     * Blocks until the queued data is played back. Useful for Deep-buffered
+     * compressed or PCM streams. Empty implemented if not supported. Drain should
+     * return immediately on stop() and flush() call
+     */
+    int (*drain)(const struct audio_stream_out* stream);
+
+    /**
+     * Notifies to the audio driver to flush the queued data. Should be called after
+     * pause. Useful for implementing seek. Empty implemented if not supported however
+     * should be implemented for non-trivial latency.
+     */
+   int (*flush)(const struct audio_stream_out* stream);
 };
 typedef struct audio_stream_out audio_stream_out_t;
 
@@ -308,6 +351,9 @@ static inline size_t audio_stream_frame_size(const struct audio_stream *s)
     size_t chan_samp_sz;
 
     switch (s->get_format(s)) {
+    case AUDIO_FORMAT_MP3:
+    case AUDIO_FORMAT_AAC:
+        return sizeof(int8_t);
     case AUDIO_FORMAT_PCM_16_BIT:
         chan_samp_sz = sizeof(int16_t);
         break;
@@ -407,6 +453,10 @@ struct audio_hw_device {
     size_t (*get_input_buffer_size)(const struct audio_hw_device *dev,
                                     const struct audio_config *config);
 
+    size_t (*get_offload_buffer_size)(const struct audio_hw_device *dev,
+                                     uint32_t bitRate, uint32_t samplingRate,
+                                     uint32_t channel);
+
     /** This method creates and opens the audio hardware output stream */
     int (*open_output_stream)(struct audio_hw_device *dev,
                               audio_io_handle_t handle,
diff --git a/include/hardware/audio_policy.h b/include/hardware/audio_policy.h
index 2684a31..038b343 100644
--- a/include/hardware/audio_policy.h
+++ b/include/hardware/audio_policy.h
@@ -244,6 +244,15 @@ struct audio_policy {
 
     /* dump state */
     int (*dump)(const struct audio_policy *pol, int fd);
+
+    /*Check offload support */
+    bool (*is_offload_supported)(struct audio_policy *pol, uint32_t format,
+                                   audio_stream_type_t stream,
+                                   uint32_t samplingRate,
+                                   uint32_t bitRate,
+                                   int64_t duration,
+                                   bool isVideo,
+                                   bool isStreaming);
 };
 
 /* audio hw module handle used by load_hw_module(), open_output_on_module()
diff --git a/modules/audio/audio_policy.c b/modules/audio/audio_policy.c
index 2dd3dbe..0496b09 100644
--- a/modules/audio/audio_policy.c
+++ b/modules/audio/audio_policy.c
@@ -229,6 +229,19 @@ static int ap_dump(const struct audio_policy *pol, int fd)
     return -ENOSYS;
 }
 
+static bool ap_is_offload_supported(struct audio_policy *pol,
+                                   uint32_t format,
+                                   audio_stream_type_t stream,
+                                   uint32_t samplingRate,
+                                   uint32_t bitRate,
+                                   int64_t duration,
+                                   bool isVideo,
+                                   bool isStreaming)
+{
+    ALOGV("legacy in use. ap_is_offload_supported");
+    return 0;
+}
+
 static int create_default_ap(const struct audio_policy_device *device,
                              struct audio_policy_service_ops *aps_ops,
                              void *service,
@@ -278,6 +291,8 @@ static int create_default_ap(const struct audio_policy_device *device,
     dap->policy.is_stream_active = ap_is_stream_active;
     dap->policy.dump = ap_dump;
 
+    dap->policy.is_offload_supported = ap_is_offload_supported;
+
     dap->service = service;
     dap->aps_ops = aps_ops;
 
-- 
1.7.4.1

