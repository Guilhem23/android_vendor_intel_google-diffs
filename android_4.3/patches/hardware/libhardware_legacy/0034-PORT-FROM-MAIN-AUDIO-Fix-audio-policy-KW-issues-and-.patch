From 3dca6a464393081d7801e6a0da013fac891c8598 Mon Sep 17 00:00:00 2001
From: Vincent Becker <vincentx.becker@intel.com>
Date: Thu, 27 Jun 2013 10:05:26 +0200
Subject: [PORT FROM MAIN] [AUDIO] Fix audio policy KW issues and compilation warnings

BZ: 107450

There are critical Klockwork errors on arrays using index
of type stream and compilation warnings in base audio policy.

Test the validity of the values of type "stream_type" before use.
Fix compilation warnings originated from a switch statement misuse.

Change-Id: I369b572cbc13ef6cc5aecdcee85502b6d95a8419
Signed-off-by: Vincent Becker <vincentx.becker@intel.com>
Reviewed-on: http://android.intel.com:8080/115777
Reviewed-by: De Chivre, Renaud <renaud.de.chivre@intel.com>
Tested-by: Dixon, CharlesX <charlesx.dixon@intel.com>
Reviewed-by: Cahuzac, ThomasX <thomasx.cahuzac@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
---
 audio/AudioPolicyManagerBase.cpp                 |   43 +++++++++++++++++++++-
 include/hardware_legacy/AudioPolicyManagerBase.h |    4 ++-
 2 files changed, 45 insertions(+), 2 deletions(-)

diff --git a/audio/AudioPolicyManagerBase.cpp b/audio/AudioPolicyManagerBase.cpp
index fb6aed4..6dc1158 100644
--- a/audio/AudioPolicyManagerBase.cpp
+++ b/audio/AudioPolicyManagerBase.cpp
@@ -533,7 +533,7 @@ AudioPolicyManagerBase::IOProfile *AudioPolicyManagerBase::getProfileForDirectOu
         for (size_t j = 0; j < mHwModules[i]->mOutputProfiles.size(); j++) {
            IOProfile *profile = mHwModules[i]->mOutputProfiles[j];
            if((channelMask <= AUDIO_CHANNEL_OUT_STEREO) &&
-                    (device == AudioSystem::DEVICE_OUT_AUX_DIGITAL)){
+                     (device == AudioSystem::DEVICE_OUT_AUX_DIGITAL)){
               /*Direct output is selected only for multichannel content over HDMI
                 NOTE - if stereo contents needs direct thread over HDMI; this condition
                        needs to be removed*/
@@ -551,12 +551,25 @@ AudioPolicyManagerBase::IOProfile *AudioPolicyManagerBase::getProfileForDirectOu
     return 0;
 }
 
+bool AudioPolicyManagerBase::isStreamValid(AudioSystem::stream_type stream)
+{
+    return ((AudioSystem::stream_type) 0 <= stream) &&
+        (stream < AudioSystem::NUM_STREAM_TYPES);
+}
+
 audio_io_handle_t AudioPolicyManagerBase::getOutput(AudioSystem::stream_type stream,
                                     uint32_t samplingRate,
                                     uint32_t format,
                                     uint32_t channelMask,
                                     AudioSystem::output_flags flags)
 {
+
+    if (!isStreamValid(stream)) {
+        ALOGE("getOutput() invalid stream of type %d", stream);
+        return 0;
+    }
+
+
     audio_io_handle_t output = 0;
     uint32_t latency = 0;
 #ifdef BGM_ENABLED
@@ -759,6 +772,12 @@ status_t AudioPolicyManagerBase::startOutput(audio_io_handle_t output,
                                              int session)
 {
     ALOGV("startOutput() output %d, stream %d, session %d", output, stream, session);
+
+    if (!isStreamValid(stream)) {
+        ALOGE("startOutput() invalid stream of type %d", stream);
+        return BAD_VALUE;
+    }
+
     ssize_t index = mOutputs.indexOfKey(output);
     if (index < 0) {
         ALOGW("startOutput() unknow output %d", output);
@@ -849,6 +868,13 @@ status_t AudioPolicyManagerBase::stopOutput(audio_io_handle_t output,
                                             int session)
 {
     ALOGV("stopOutput() output %d, stream %d, session %d", output, stream, session);
+
+    if (!isStreamValid(stream)) {
+        ALOGE("stopOutput() invalid stream of type %d", stream);
+        return BAD_VALUE;
+    }
+
+
     ssize_t index = mOutputs.indexOfKey(output);
     if (index < 0) {
         ALOGW("stopOutput() unknow output %d", output);
@@ -1109,6 +1135,12 @@ void AudioPolicyManagerBase::initStreamVolume(AudioSystem::stream_type stream,
                                             int indexMax)
 {
     ALOGV("initStreamVolume() stream %d, min %d, max %d", stream , indexMin, indexMax);
+
+    if (!isStreamValid(stream)) {
+        ALOGE("initStreamVolume() invalid stream of type %d", stream);
+        return;
+    }
+
     if (indexMin < 0 || indexMin >= indexMax) {
         ALOGW("initStreamVolume() invalid index limits for stream %d, min %d, max %d", stream , indexMin, indexMax);
         return;
@@ -1121,6 +1153,10 @@ status_t AudioPolicyManagerBase::setStreamVolumeIndex(AudioSystem::stream_type s
                                                       int index,
                                                       audio_devices_t device)
 {
+    if (!isStreamValid(stream)) {
+        ALOGE("setStreamVolumeIndex() invalid stream of type %d", stream);
+        return BAD_VALUE;
+    }
 
     if ((index < mStreams[stream].mIndexMin) || (index > mStreams[stream].mIndexMax)) {
         return BAD_VALUE;
@@ -1161,6 +1197,11 @@ status_t AudioPolicyManagerBase::getStreamVolumeIndex(AudioSystem::stream_type s
                                                       int *index,
                                                       audio_devices_t device)
 {
+    if (!isStreamValid(stream)) {
+        ALOGE("getStreamVolumeIndex() invalid stream of type %d", stream);
+        return BAD_VALUE;
+    }
+
     if (index == NULL) {
         return BAD_VALUE;
     }
diff --git a/include/hardware_legacy/AudioPolicyManagerBase.h b/include/hardware_legacy/AudioPolicyManagerBase.h
index 0deae36..edeb7d0 100644
--- a/include/hardware_legacy/AudioPolicyManagerBase.h
+++ b/include/hardware_legacy/AudioPolicyManagerBase.h
@@ -529,7 +529,9 @@ protected:
         bool getCustomPropertyAsULong(const String8 &name, unsigned long &value) const;
         bool getCustomPropertyAsFloat(const String8 &name, float &value) const;
         bool getCustomPropertyAsBool(const String8 &name, bool &value) const;
- 
+
+        // check if stream is valid
+        static bool isStreamValid(AudioSystem::stream_type stream);
 
         AudioPolicyClientInterface *mpClientInterface;  // audio policy client interface
         audio_io_handle_t mPrimaryOutput;              // primary output handle
-- 
1.7.4.1

