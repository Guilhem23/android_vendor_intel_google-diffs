From 3fe9238962152ad6505b9f704101ce0c5b2c7ca0 Mon Sep 17 00:00:00 2001
From: Jonathan DE CESCO <jonathan.de.cesco@intel.com>
Date: Wed, 31 Oct 2012 18:01:15 +0100
Subject: [PORT FROM MAIN] wifi: check if interface is up before calibrating

BZ: 61194

It is not safe to call driver in calibration if interface is up.
This scenario can be seen when wpa_supplicant (through setup
wizard) is launched during wlan_prov process.
Fix this by checking if interface is up and if yes, bring it
down before calibrating

Change-Id: Id4229a95bf5662742b453f1ee127887a5e25467d
Orig-Change-Id: Iedba443ce11562f82b6f1d3b9994edcd68fde062
Signed-off-by: Jonathan DE CESCO <jonathan.de.cesco@intel.com>
Reviewed-on: http://android.intel.com:8080/72415
Reviewed-by: buildbot <buildbot@intel.com>
Reviewed-by: Tricot, HonoreX <honorex.tricot@intel.com>
Tested-by: Champciaux, Nicolas <nicolas.champciaux@intel.com>
Reviewed-by: lab_cactus <lab_cactus@intel.com>
Tested-by: lab_cactus <lab_cactus@intel.com>
Reviewed-on: http://android.intel.com:8080/78001
Reviewed-by: Li, XiaojingX <xiaojingx.li@intel.com>
Tested-by: Li, XiaojingX <xiaojingx.li@intel.com>
---
 calibrator/plt.c |   52 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 52 insertions(+), 0 deletions(-)

diff --git a/calibrator/plt.c b/calibrator/plt.c
index 7c14b16..0dc1da3 100644
--- a/calibrator/plt.c
+++ b/calibrator/plt.c
@@ -23,6 +23,12 @@
 #include <netlink/attr.h>
 #include <linux/wireless.h>
 #include <linux/ethtool.h>
+
+#include <net/if.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/ioctl.h>
+
 #include "nl80211.h"
 
 #include "calibrator.h"
@@ -99,6 +105,43 @@ static void str2mac(unsigned char *pmac, char *pch)
 	}
 }
 
+static int isiffup(const char *vname)
+{
+	int ret=0;
+	int skfd = socket (AF_INET, SOCK_DGRAM, 0);
+
+	if (skfd) {
+		struct ifreq ifr;
+		strncpy (ifr.ifr_name, vname, sizeof ifr.ifr_name);
+		if (!ioctl (skfd, SIOCGIFFLAGS, &ifr)) {
+		   const short int flags = ifr.ifr_flags;
+		   if (flags & IFF_UP) ret=1;
+		}
+	close (skfd);
+	}
+	return ret;
+}
+
+static int setiffdown(const char *vname)
+{
+	int ret=0;
+	int skfd = socket (AF_INET, SOCK_DGRAM, 0);
+
+	if (skfd) {
+		struct ifreq ifreq;
+		strncpy(ifreq.ifr_name, vname, sizeof(ifreq.ifr_name));
+		if (!ioctl (skfd, SIOCGIFFLAGS, &ifreq)) {
+			short int flags = ifreq.ifr_flags;
+			flags &= ~IFF_UP;
+			ifreq.ifr_flags = flags;
+			if (ioctl (skfd, SIOCSIFFLAGS, &ifreq) == -1)
+				ret=1;
+		} else ret=1;
+	close (skfd);
+	}
+	return ret;
+}
+
 static int plt_power_mode(struct nl80211_state *state, struct nl_cb *cb,
 			  struct nl_msg *msg, int argc, char **argv)
 {
@@ -1242,6 +1285,15 @@ static int plt_autocalibrate(struct nl80211_state *state, struct nl_cb *cb,
 		goto out_removenvs;
 	}
 #endif
+	res = isiffup(devname);
+	if (res) {
+		fprintf(stderr, "%s interface was already up "
+			", trying to bring it down", devname);
+		if (setiffdown(devname)) {
+			fprintf(stderr, "failed to bring down %s", devname);
+			goto out_removenvs;
+		}
+	}
 
 	res = plt_do_power_on(state, devname);
 	if (res < 0)
-- 
1.7.4.1

