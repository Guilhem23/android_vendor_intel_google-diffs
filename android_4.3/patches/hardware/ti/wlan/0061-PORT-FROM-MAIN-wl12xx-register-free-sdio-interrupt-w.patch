From 2d5572c1a4e7f63c0735859e7fa1bbc54436aa2a Mon Sep 17 00:00:00 2001
From: Aymen Zayet <aymen.zayet@intel.com>
Date: Mon, 10 Dec 2012 19:39:33 +0100
Subject: [PORT FROM MAIN] wl12xx: register/free sdio interrupt when the chip is ON/OFF.

BZ: 73496

The SDIO interrupt is registered on wl1271_probe() and remains
disabled until the device is powered ON. If after booting,
the IRQ line is noised, a glitch may happen with the interrupt
disabled, so the IRQ remain pending and will not be handled until
the w1l271 turns ON

If this happens, then the suspend will be rejected because of the
pending interrupt that will never been handled while the chip
remains OFF.

To avoid this potential issue, the best way is to request / free the
interrupt when enabling / disabling the wl12xx chip.

Change-Id: I4cb4e33a6fc35102830dbad0240ecce9bb05ad7a
Orig-Change-Id: I419c3a5cbdbc249a6b28fa52e2377a9305cfa73b
Signed-off-by: Aymen Zayet <aymen.zayet@intel.com>
Signed-off-by: Quentin Casasnovas <quentinx.casasnovas@intel.com>
Reviewed-on: http://android.intel.com:8080/83062
Reviewed-by: Garcia, JeremieX <jeremiex.garcia@intel.com>
Reviewed-by: Bachot, Jean-michel <jean-michel.bachot@intel.com>
Reviewed-by: Gross, Mark <mark.gross@intel.com>
Tested-by: Champciaux, Nicolas <nicolas.champciaux@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 wl12xx-compat/drivers/net/wireless/wl12xx/main.c   |   92 ++++++++++++--------
 wl12xx-compat/drivers/net/wireless/wl12xx/sdio.c   |   16 ++++
 wl12xx-compat/drivers/net/wireless/wl12xx/wl12xx.h |    5 +
 3 files changed, 75 insertions(+), 38 deletions(-)

diff --git a/wl12xx-compat/drivers/net/wireless/wl12xx/main.c b/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
index 7555577..a29ae60 100644
--- a/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
+++ b/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
@@ -6491,12 +6491,57 @@ static irqreturn_t wl12xx_hardirq(int irq, void *cookie)
 	return IRQ_WAKE_THREAD;
 }
 
+int wl12xx_request_irq(struct wl1271 *wl)
+{
+	int ret;
+	struct device *dev = wl->dev;
+	struct wl12xx_platform_data *pdata = dev->platform_data;
+	struct ieee80211_hw *hw = wl->hw;
+	struct platform_device *pdev = container_of(dev,
+						    struct platform_device,
+						    dev);
+
+	ret = request_threaded_irq(wl->irq, wl12xx_hardirq, wl12xx_irq,
+				   wl->irqflags,
+				   pdev->name, wl);
+	if (ret < 0) {
+		wl1271_error("request_irq() failed: %d", ret);
+		goto out;
+	}
+
+	ret = enable_irq_wake(wl->irq);
+	if (!ret) {
+		wl->irq_wake_enabled = true;
+		device_init_wakeup(wl->dev, 1);
+		if (pdata->pwr_in_suspend) {
+			hw->wiphy->wowlan.flags = WIPHY_WOWLAN_ANY;
+			hw->wiphy->wowlan.n_patterns = WL1271_MAX_RX_FILTERS;
+			hw->wiphy->wowlan.pattern_min_len = 1;
+			hw->wiphy->wowlan.pattern_max_len =
+				WL1271_RX_FILTER_MAX_PATTERN_SIZE;
+		}
+
+	}
+	disable_irq(wl->irq);
+out:
+	return ret;
+}
+
+void wl12xx_free_irq(struct wl1271 *wl)
+{
+	if (wl->irq_wake_enabled) {
+		device_init_wakeup(wl->dev, 0);
+		disable_irq_wake(wl->irq);
+	}
+
+	free_irq(wl->irq, wl);
+}
+
 static int __devinit wl12xx_probe(struct platform_device *pdev)
 {
 	struct wl12xx_platform_data *pdata = pdev->dev.platform_data;
 	struct ieee80211_hw *hw;
 	struct wl1271 *wl;
-	unsigned long irqflags;
 	int ret = -ENODEV;
 
 	hw = wl1271_alloc_hw();
@@ -6516,53 +6561,32 @@ static int __devinit wl12xx_probe(struct platform_device *pdev)
 	wl->set_power = pdata->set_power;
 	wl->dev = &pdev->dev;
 	wl->if_ops = pdata->ops;
+	wl->if_ops->request_irq = wl12xx_request_irq;
+	wl->if_ops->free_irq = wl12xx_free_irq;
 
 	platform_set_drvdata(pdev, wl);
 
 	if (wl->platform_quirks & WL12XX_PLATFORM_QUIRK_EDGE_IRQ)
-		irqflags = IRQF_TRIGGER_RISING;
+		wl->irqflags = IRQF_TRIGGER_RISING;
 	else
-		irqflags = IRQF_TRIGGER_HIGH | IRQF_ONESHOT;
+		wl->irqflags = IRQF_TRIGGER_HIGH | IRQF_ONESHOT;
 
 	/* The driver handles the interrupt during suspend */
-	irqflags |= IRQF_NO_SUSPEND;
-
-	ret = request_threaded_irq(wl->irq, wl12xx_hardirq, wl12xx_irq,
-				   irqflags,
-				   pdev->name, wl);
-	if (ret < 0) {
-		wl1271_error("request_irq() failed: %d", ret);
-		goto out_free_hw;
-	}
-
-	ret = enable_irq_wake(wl->irq);
-	if (!ret) {
-		wl->irq_wake_enabled = true;
-		device_init_wakeup(wl->dev, 1);
-		if (pdata->pwr_in_suspend) {
-			hw->wiphy->wowlan.flags = WIPHY_WOWLAN_ANY;
-			hw->wiphy->wowlan.n_patterns = WL1271_MAX_RX_FILTERS;
-			hw->wiphy->wowlan.pattern_min_len = 1;
-			hw->wiphy->wowlan.pattern_max_len =
-				WL1271_RX_FILTER_MAX_PATTERN_SIZE;
-		}
-
-	}
-	disable_irq(wl->irq);
+	wl->irqflags |= IRQF_NO_SUSPEND;
 
 	ret = wl1271_init_ieee80211(wl);
 	if (ret)
-		goto out_irq;
+		goto out_free_hw;
 
 	ret = wl1271_fetch_nvs_nowait(wl);
 	if (ret)
-		goto out_irq;
+		goto out_free_hw;
 
 	/* Create sysfs file to control bt coex state */
 	ret = device_create_file(wl->dev, &dev_attr_bt_coex_state);
 	if (ret < 0) {
 		wl1271_error("failed to create sysfs file bt_coex_state");
-		goto out_irq;
+		goto out_free_hw;
 	}
 
 	/* Create sysfs file to get HW PG version */
@@ -6587,9 +6611,6 @@ out_hw_pg_ver:
 out_bt_coex_state:
 	device_remove_file(wl->dev, &dev_attr_bt_coex_state);
 
-out_irq:
-	free_irq(wl->irq, wl);
-
 out_free_hw:
 	wl1271_free_hw(wl);
 
@@ -6602,11 +6623,6 @@ static int __devexit wl12xx_remove(struct platform_device *pdev)
 	struct wl1271 *wl = platform_get_drvdata(pdev);
 
 	wait_for_completion(&wl->fw_compl);
-
-	if (wl->irq_wake_enabled) {
-		device_init_wakeup(wl->dev, 0);
-		disable_irq_wake(wl->irq);
-	}
 	wl1271_unregister_hw(wl);
 	free_irq(wl->irq, wl);
 	wl1271_free_hw(wl);
diff --git a/wl12xx-compat/drivers/net/wireless/wl12xx/sdio.c b/wl12xx-compat/drivers/net/wireless/wl12xx/sdio.c
index 889ada7..10565b8 100644
--- a/wl12xx-compat/drivers/net/wireless/wl12xx/sdio.c
+++ b/wl12xx-compat/drivers/net/wireless/wl12xx/sdio.c
@@ -52,6 +52,8 @@ struct wl12xx_sdio_glue {
 	unsigned int suspended;
 };
 
+static struct wl1271_if_operations sdio_ops;
+
 static const struct sdio_device_id wl1271_devices[] __devinitconst = {
 	{ SDIO_DEVICE(SDIO_VENDOR_ID_TI, SDIO_DEVICE_ID_TI_WL1271) },
 	{}
@@ -148,6 +150,13 @@ static int wl12xx_sdio_power_on(struct wl12xx_sdio_glue *glue)
 	int ret;
 	struct sdio_func *func = dev_to_sdio_func(glue->dev);
 	struct mmc_card *card = func->card;
+	struct wl1271 *wl = (struct wl1271 *)platform_get_drvdata(glue->core);
+
+	/* Request interrupt before enabling the device */
+	BUG_ON(!wl);
+	ret = sdio_ops.request_irq(wl);
+	if (ret)
+		goto out;
 
 	glue->suspended = 0;
 	/* Avoid manual resume */
@@ -180,6 +189,10 @@ static int wl12xx_sdio_power_off(struct wl12xx_sdio_glue *glue)
 	int ret;
 	struct sdio_func *func = dev_to_sdio_func(glue->dev);
 	struct mmc_card *card = func->card;
+	struct wl1271 *wl = (struct wl1271 *)platform_get_drvdata(glue->core);
+
+	/* Paranoia check */
+	BUG_ON(!wl);
 
 	sdio_claim_host(func);
 	sdio_disable_func(func);
@@ -196,6 +209,9 @@ static int wl12xx_sdio_power_off(struct wl12xx_sdio_glue *glue)
 	/* Enable manual resume */
 	func->card->host->bus_resume_flags |= MMC_BUSRESUME_MANUAL_RESUME;
 
+	/* Free irq */
+	sdio_ops.free_irq(wl);
+
 out:
 	return ret;
 }
diff --git a/wl12xx-compat/drivers/net/wireless/wl12xx/wl12xx.h b/wl12xx-compat/drivers/net/wireless/wl12xx/wl12xx.h
index 65e305d..3f52f87 100644
--- a/wl12xx-compat/drivers/net/wireless/wl12xx/wl12xx.h
+++ b/wl12xx-compat/drivers/net/wireless/wl12xx/wl12xx.h
@@ -235,6 +235,8 @@ struct wl1271_if_operations {
 	void (*init)(struct device *child);
 	int (*power)(struct device *child, bool enable);
 	void (*set_block_size) (struct device *child, unsigned int blksz);
+	int (*request_irq)(struct wl1271 *wl);
+	void (*free_irq)(struct wl1271 *wl);
 };
 
 #define MAX_NUM_KEYS 14
@@ -350,6 +352,7 @@ struct wl1271 {
 
 	void (*set_power)(bool enable);
 	int irq;
+	unsigned long irqflags;
 	int ref_clock;
 
 	spinlock_t wl_lock;
@@ -750,6 +753,8 @@ void wl12xx_update_sta_state(struct wl1271 *wl,
 			     struct ieee80211_sta *sta,
 			     enum ieee80211_sta_state state);
 int wl12xx_init_pll_clock(struct wl1271 *wl, int *selected_clock);
+int wl12xx_request_irq(struct wl1271 *wl);
+void wl12xx_free_irq(struct wl1271 *wl);
 
 #define JOIN_TIMEOUT 5000 /* 5000 milliseconds to join */
 
-- 
1.7.4.1

