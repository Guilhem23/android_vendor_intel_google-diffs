From 061c0e9a298ec9c5f4a181d1aac5f0a9e184306d Mon Sep 17 00:00:00 2001
From: Jean Trivelly <jean.trivelly@intel.com>
Date: Fri, 15 Jun 2012 18:46:54 +0200
Subject: [PORT FROM MAIN] WLAN: R5 Integration cleanup after code review.

BZ: 42185

After a team code review, several issues have been identified.
Some Intel patches are no more valid, others are missing...
Details:
 - patch: I9b80c6bd870b4454803efaa39bd9f3ce234470f3
   mac80211: fix bug in ieee80211_build_probe_req.
   Patch was not correctly applied.

 - patch: Ib5c1e5a117bf3948730fc8f93700886f017c1deb
   wl12xx: Clear all filters on op_stop().
   Patch was already implemented in R5. Keep only R5
   implementation.

 - patch: Iec5403f1bb0615d1c2f7057af3e92781edd82ac6
   wl12xx driver build is triggering a warning on frame size
   Patch was already implemented in R5. Keep only R5
   implementation.

 - patch: I2e47331441dcd930459b093a3fff9298c947571c
   wifi: prevent list corruption in unlink_bss
   This patch was reverted but not over R5. Need to revert it
   and apply correct fix
   (implemented by I05f8c844d7d05be694f4013d5877fc0dc232265b).

 - patch: I158e6c20a946ff303458978d6a45eafb739817b3
   WLAN: Erratic Ping response.
   This patch need to be reverted.

 - patch: I00d8ab08c73e27664d73dbdda36ee89d78043c6d
   wl12xx: Clear WL1271_FLAG_RECOVERY_WORK_PENDING after recovery process.
   This patch was not correctly applied.

Change-Id: I7a246f70c22f8e7e6437abc99595fee3a545eb88
Orig-Change-Id: Id004b9600a6fad35d91562b882bc29bd3157a371
Signed-off-by: Jean Trivelly <jean.trivelly@intel.com>
Reviewed-on: http://android.intel.com:8080/52966
Reviewed-by: Lemetayer, Jean-marieX <jean-mariex.lemetayer@intel.com>
Reviewed-by: De Cesco, Jonathan <jonathan.de.cesco@intel.com>
Reviewed-by: Marotte, Fabien <fabien.marotte@intel.com>
Tested-by: Champciaux, Nicolas <nicolas.champciaux@intel.com>
Reviewed-by: Bachot, Jean-michel <jean-michel.bachot@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Signed-off-by: Jonathan DE CESCO <jonathan.de.cesco@intel.com>
Reviewed-on: http://android.intel.com:8080/59016
Reviewed-by: Regairaz, Julie <julie.regairaz@intel.com>
Reviewed-on: http://android.intel.com:8080/77967
Reviewed-by: Li, XiaojingX <xiaojingx.li@intel.com>
Tested-by: Li, XiaojingX <xiaojingx.li@intel.com>
---
 .gitignore                                         |    3 +-
 .../drivers/net/wireless/wl12xx/debugfs.c          |    6 +-
 wl12xx-compat/drivers/net/wireless/wl12xx/main.c   |    6 +-
 wl12xx-compat/net/mac80211/ieee80211_i.h           |    5 +-
 wl12xx-compat/net/mac80211/util.c                  |    2 -
 wl12xx-compat/net/wireless/core.h                  |    1 +
 wl12xx-compat/net/wireless/scan.c                  |  288 +++++++++-----------
 7 files changed, 138 insertions(+), 173 deletions(-)

diff --git a/.gitignore b/.gitignore
index 9184edd..2ed441f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -26,7 +26,8 @@
 *.bin
 *.gz
 compat_autoconf.h
-
+version.h
+compat_regdom
 #
 # Top-level generic files
 #
diff --git a/wl12xx-compat/drivers/net/wireless/wl12xx/debugfs.c b/wl12xx-compat/drivers/net/wireless/wl12xx/debugfs.c
index d3a0f1e..acee35f 100644
--- a/wl12xx-compat/drivers/net/wireless/wl12xx/debugfs.c
+++ b/wl12xx-compat/drivers/net/wireless/wl12xx/debugfs.c
@@ -492,12 +492,13 @@ static ssize_t driver_state_read(struct file *file, char __user *user_buf,
 {
 	struct wl1271 *wl = file->private_data;
 	int res = 0;
-	size_t ret;
+	ssize_t ret;
 	char *buf;
 
 #define DRIVER_STATE_BUF_LEN 1024
 
-	if((buf = kmalloc(DRIVER_STATE_BUF_LEN, GFP_KERNEL)) == NULL)
+	buf = kmalloc(DRIVER_STATE_BUF_LEN, GFP_KERNEL);
+	if (!buf)
 		return -ENOMEM;
 
 	mutex_lock(&wl->mutex);
@@ -566,7 +567,6 @@ static ssize_t driver_state_read(struct file *file, char __user *user_buf,
 	mutex_unlock(&wl->mutex);
 
 	ret = simple_read_from_buffer(user_buf, count, ppos, buf, res);
-
 	kfree(buf);
 	return ret;
 }
diff --git a/wl12xx-compat/drivers/net/wireless/wl12xx/main.c b/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
index 096389f..937ef40 100644
--- a/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
+++ b/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
@@ -1311,6 +1311,7 @@ static void wl1271_recovery_work(struct work_struct *work)
 	return;
 out_unlock:
 	mutex_unlock(&wl->mutex);
+	clear_bit(WL1271_FLAG_RECOVERY_WORK_PENDING, &wl->flags);
 }
 
 static void wl1271_fw_wakeup(struct wl1271 *wl)
@@ -2231,10 +2232,6 @@ static void wl1271_op_stop(struct ieee80211_hw *hw)
 		wl->tx_allocated_pkts[i] = 0;
 	}
 
-	for (i=0; i < WL1271_MAX_RX_FILTERS; i++)
-		wl->rx_data_filters_status[i] = 0;
-
-
 	wl1271_debugfs_reset(wl);
 
 	kfree(wl->fw_status);
@@ -3698,7 +3695,6 @@ static void wl1271_op_sched_scan_stop(struct ieee80211_hw *hw,
 	wl1271_ps_elp_sleep(wl);
 out:
 	mutex_unlock(&wl->mutex);
-	clear_bit(WL1271_FLAG_RECOVERY_WORK_PENDING, &wl->flags);
 }
 
 static int wl1271_op_set_frag_threshold(struct ieee80211_hw *hw, u32 value)
diff --git a/wl12xx-compat/net/mac80211/ieee80211_i.h b/wl12xx-compat/net/mac80211/ieee80211_i.h
index b259359..4a160cd 100644
--- a/wl12xx-compat/net/mac80211/ieee80211_i.h
+++ b/wl12xx-compat/net/mac80211/ieee80211_i.h
@@ -55,7 +55,10 @@ struct ieee80211_local;
 #define TU_TO_EXP_TIME(x)	(jiffies + usecs_to_jiffies((x) * 1024))
 
 #define IEEE80211_DEFAULT_UAPSD_QUEUES \
-	 IEEE80211_WMM_IE_STA_QOSINFO_AC_VO
+	(IEEE80211_WMM_IE_STA_QOSINFO_AC_BK |	\
+	 IEEE80211_WMM_IE_STA_QOSINFO_AC_BE |	\
+	 IEEE80211_WMM_IE_STA_QOSINFO_AC_VI |	\
+	 IEEE80211_WMM_IE_STA_QOSINFO_AC_VO)
 
 #define IEEE80211_DEFAULT_MAX_SP_LEN		\
 	IEEE80211_WMM_IE_STA_QOSINFO_SP_ALL
diff --git a/wl12xx-compat/net/mac80211/util.c b/wl12xx-compat/net/mac80211/util.c
index 228eb62..98b024a 100644
--- a/wl12xx-compat/net/mac80211/util.c
+++ b/wl12xx-compat/net/mac80211/util.c
@@ -1059,8 +1059,6 @@ struct sk_buff *ieee80211_build_probe_req(struct ieee80211_sub_if_data *sdata,
 	skb = ieee80211_probereq_get(&local->hw, &sdata->vif,
 				     ssid, ssid_len,
 				     buf, buf_len);
-	if (!skb)
-		goto out;
 
 	if (!skb)
 		goto out;
diff --git a/wl12xx-compat/net/wireless/core.h b/wl12xx-compat/net/wireless/core.h
index 9a3321c..d102a80 100644
--- a/wl12xx-compat/net/wireless/core.h
+++ b/wl12xx-compat/net/wireless/core.h
@@ -132,6 +132,7 @@ static inline void assert_cfg80211_lock(void)
 
 struct cfg80211_internal_bss {
 	struct list_head list;
+	struct list_head list_aliases;
 	struct rb_node rbn;
 	unsigned long ts;
 	struct kref ref;
diff --git a/wl12xx-compat/net/wireless/scan.c b/wl12xx-compat/net/wireless/scan.c
index 5fbafe8..87f7acb 100644
--- a/wl12xx-compat/net/wireless/scan.c
+++ b/wl12xx-compat/net/wireless/scan.c
@@ -253,6 +253,8 @@ static void __cfg80211_unlink_bss(struct cfg80211_registered_device *dev,
 				  struct cfg80211_internal_bss *bss)
 {
 	list_del_init(&bss->list);
+	if (!list_empty(&bss->list_aliases))
+		list_del_init(&bss->list_aliases);
 	rb_erase(&bss->rbn, &dev->bss_tree);
 	kref_put(&bss->ref, bss_release);
 }
@@ -442,7 +444,7 @@ static bool is_mesh(struct cfg80211_bss *a,
 	    sizeof(struct ieee80211_meshconf_ie) - 2) == 0;
 }
 
-static int cmp_bss_core(struct cfg80211_bss *a,
+static int cmp_bss_noessid(struct cfg80211_bss *a,
 			   struct cfg80211_bss *b)
 {
 	int r;
@@ -473,7 +475,7 @@ static int cmp_bss(struct cfg80211_bss *a,
 {
 	int r;
 
-	r = cmp_bss_core(a, b);
+	r = cmp_bss_noessid(a, b);
 	if (r)
 		return r;
 
@@ -484,52 +486,6 @@ static int cmp_bss(struct cfg80211_bss *a,
 		       b->len_information_elements);
 }
 
-static int cmp_hidden_bss(struct cfg80211_bss *a,
-		   struct cfg80211_bss *b)
-{
-	const u8 *ie1;
-	const u8 *ie2;
-	int i;
-	int r;
-
-	r = cmp_bss_core(a, b);
-	if (r)
-		return r;
-
-	ie1 = cfg80211_find_ie(WLAN_EID_SSID,
-			a->information_elements,
-			a->len_information_elements);
-	ie2 = cfg80211_find_ie(WLAN_EID_SSID,
-			b->information_elements,
-			b->len_information_elements);
-
-	/* Key comparator must use same algorithm in any rb-tree
-	 * search function (order is important), otherwise ordering
-	 * of items in the tree is broken and search gives incorrect
-	 * results. This code uses same order as cmp_ies() does. */
-
-	/* sort missing IE before (left of) present IE */
-	if (!ie1)
-		return -1;
-	if (!ie2)
-		return 1;
-
-	/* zero-size SSID is used as an indication of the hidden bss */
-	if (!ie2[1])
-		return 0;
-
-	/* sort by length first, then by contents */
-	if (ie1[1] != ie2[1])
-		return ie2[1] - ie1[1];
-
-	/* zeroed SSID ie is another indication of a hidden bss */
-	for (i = 0; i < ie2[1]; i++)
-		if (ie2[i + 2])
-			return -1;
-
-	return 0;
-}
-
 struct cfg80211_bss *cfg80211_get_bss(struct wiphy *wiphy,
 				      struct ieee80211_channel *channel,
 				      const u8 *bssid,
@@ -646,7 +602,7 @@ rb_find_bss(struct cfg80211_registered_device *dev,
 }
 
 static struct cfg80211_internal_bss *
-rb_find_hidden_bss(struct cfg80211_registered_device *dev,
+rb_find_bss_alias(struct cfg80211_registered_device *dev,
 	    struct cfg80211_internal_bss *res)
 {
 	struct rb_node *n = dev->bss_tree.rb_node;
@@ -655,7 +611,7 @@ rb_find_hidden_bss(struct cfg80211_registered_device *dev,
 
 	while (n) {
 		bss = rb_entry(n, struct cfg80211_internal_bss, rbn);
-		r = cmp_hidden_bss(&res->pub, &bss->pub);
+		r = cmp_bss_noessid(&res->pub, &bss->pub);
 
 		if (r == 0)
 			return bss;
@@ -669,27 +625,120 @@ rb_find_hidden_bss(struct cfg80211_registered_device *dev,
 }
 
 static void
-copy_hidden_ies(struct cfg80211_internal_bss *res,
-		 struct cfg80211_internal_bss *hidden)
+cfg80211_bss_update_bss(struct cfg80211_registered_device *dev,
+			 struct cfg80211_internal_bss *prev,
+			 struct cfg80211_internal_bss *res,
+			 int force)
 {
-	if (unlikely(res->pub.beacon_ies))
-		return;
-	if (WARN_ON(!hidden->pub.beacon_ies))
-		return;
-	res->pub.beacon_ies = kmalloc(hidden->pub.len_beacon_ies, GFP_ATOMIC);
-	if (unlikely(!res->pub.beacon_ies))
-		return;
-	res->beacon_ies_allocated = true;
-	res->pub.len_beacon_ies = hidden->pub.len_beacon_ies;
-	memcpy(res->pub.beacon_ies, hidden->pub.beacon_ies,
-			res->pub.len_beacon_ies);
+	prev->pub.beacon_interval = res->pub.beacon_interval;
+	prev->pub.tsf = res->pub.tsf;
+	prev->pub.signal = res->pub.signal;
+	prev->pub.capability = res->pub.capability;
+	prev->ts = res->ts;
+
+	/* Update IEs */
+	if (res->pub.proberesp_ies && (force || !prev->pub.proberesp_ies)) {
+		size_t used = dev->wiphy.bss_priv_size + sizeof(*res);
+		size_t ielen = res->pub.len_proberesp_ies;
+
+		if (prev->pub.proberesp_ies &&
+		    !prev->proberesp_ies_allocated &&
+		    ksize(prev) >= used + ielen) {
+			memcpy(prev->pub.proberesp_ies,
+			       res->pub.proberesp_ies, ielen);
+			prev->pub.len_proberesp_ies = ielen;
+		} else {
+			u8 *ies = prev->pub.proberesp_ies;
+
+			if (prev->proberesp_ies_allocated)
+				ies = krealloc(ies, ielen, GFP_ATOMIC);
+			else
+				ies = kmalloc(ielen, GFP_ATOMIC);
+
+			if (ies) {
+				memcpy(ies, res->pub.proberesp_ies,
+				       ielen);
+				prev->proberesp_ies_allocated = true;
+				prev->pub.proberesp_ies = ies;
+				prev->pub.len_proberesp_ies = ielen;
+			}
+		}
+
+		/* Override possible earlier Beacon frame IEs */
+		prev->pub.information_elements =
+			prev->pub.proberesp_ies;
+		prev->pub.len_information_elements =
+			prev->pub.len_proberesp_ies;
+	}
+	if (res->pub.beacon_ies && (force || !prev->pub.beacon_ies)) {
+		size_t used = dev->wiphy.bss_priv_size + sizeof(*res);
+		size_t ielen = res->pub.len_beacon_ies;
+		bool information_elements_is_beacon_ies =
+			(prev->pub.information_elements ==
+			 prev->pub.beacon_ies);
+
+		if (prev->pub.beacon_ies &&
+		    !prev->beacon_ies_allocated &&
+		    ksize(prev) >= used + ielen) {
+			memcpy(prev->pub.beacon_ies,
+			       res->pub.beacon_ies, ielen);
+			prev->pub.len_beacon_ies = ielen;
+		} else {
+			u8 *ies = prev->pub.beacon_ies;
+
+			if (prev->beacon_ies_allocated)
+				ies = krealloc(ies, ielen, GFP_ATOMIC);
+			else
+				ies = kmalloc(ielen, GFP_ATOMIC);
+
+			if (ies) {
+				memcpy(ies, res->pub.beacon_ies,
+				       ielen);
+				prev->beacon_ies_allocated = true;
+				prev->pub.beacon_ies = ies;
+				prev->pub.len_beacon_ies = ielen;
+			}
+		}
+
+		/* Override IEs if they were from a beacon before */
+		if (information_elements_is_beacon_ies) {
+			prev->pub.information_elements =
+				prev->pub.beacon_ies;
+			prev->pub.len_information_elements =
+				prev->pub.len_beacon_ies;
+		}
+	}
+}
+
+static void
+cfg80211_bss_update_list(struct cfg80211_registered_device *dev,
+			 struct cfg80211_internal_bss *prev,
+			 struct cfg80211_internal_bss *res,
+			 int force)
+{
+	struct cfg80211_internal_bss *bss;
+
+	cfg80211_bss_update_bss(dev, prev, res, force);
+	list_for_each_entry(bss, &prev->list_aliases, list_aliases)
+		cfg80211_bss_update_bss(dev, bss, res, force);
+}
+
+static void
+cfg80211_bss_insert(struct cfg80211_registered_device *dev,
+		    struct cfg80211_internal_bss *alias,
+		    struct cfg80211_internal_bss *res)
+{
+	list_add_tail(&res->list, &dev->bss_list);
+	if (alias)
+		list_add_tail(&res->list_aliases, &alias->list_aliases);
+	rb_insert_bss(dev, res);
 }
 
 static struct cfg80211_internal_bss *
 cfg80211_bss_update(struct cfg80211_registered_device *dev,
 		    struct cfg80211_internal_bss *res)
 {
-	struct cfg80211_internal_bss *found = NULL;
+	struct cfg80211_internal_bss *found = NULL, *alias;
 
 	/*
 	 * The reference to "res" is donated to this function.
@@ -707,106 +756,21 @@ cfg80211_bss_update(struct cfg80211_registered_device *dev,
 	found = rb_find_bss(dev, res);
 
 	if (found) {
-		if (res->pub.beacon_ies)
-                found->pub.beacon_interval = res->pub.beacon_interval;
-		found->pub.tsf = res->pub.tsf;
-		found->pub.signal = res->pub.signal;
-		found->pub.capability = res->pub.capability;
-		found->ts = res->ts;
-
-		/* Update IEs */
-		if (res->pub.proberesp_ies) {
-			size_t used = dev->wiphy.bss_priv_size + sizeof(*res);
-			size_t ielen = res->pub.len_proberesp_ies;
-
-			if (found->pub.proberesp_ies &&
-			    !found->proberesp_ies_allocated &&
-			    ksize(found) >= used + ielen) {
-				memcpy(found->pub.proberesp_ies,
-				       res->pub.proberesp_ies, ielen);
-				found->pub.len_proberesp_ies = ielen;
-			} else {
-				u8 *ies = found->pub.proberesp_ies;
-
-				if (found->proberesp_ies_allocated)
-					ies = krealloc(ies, ielen, GFP_ATOMIC);
-				else
-					ies = kmalloc(ielen, GFP_ATOMIC);
-
-				if (ies) {
-					memcpy(ies, res->pub.proberesp_ies,
-					       ielen);
-					found->proberesp_ies_allocated = true;
-					found->pub.proberesp_ies = ies;
-					found->pub.len_proberesp_ies = ielen;
-				}
-			}
-
-			/* Override possible earlier Beacon frame IEs */
-			found->pub.information_elements =
-				found->pub.proberesp_ies;
-			found->pub.len_information_elements =
-				found->pub.len_proberesp_ies;
-		}
-		if (res->pub.beacon_ies) {
-			size_t used = dev->wiphy.bss_priv_size + sizeof(*res);
-			size_t ielen = res->pub.len_beacon_ies;
-			bool information_elements_is_beacon_ies =
-				(found->pub.information_elements ==
-				 found->pub.beacon_ies);
-
-			if (found->pub.beacon_ies &&
-			    !found->beacon_ies_allocated &&
-			    ksize(found) >= used + ielen) {
-				memcpy(found->pub.beacon_ies,
-				       res->pub.beacon_ies, ielen);
-				found->pub.len_beacon_ies = ielen;
-			} else {
-				u8 *ies = found->pub.beacon_ies;
-
-				if (found->beacon_ies_allocated)
-					ies = krealloc(ies, ielen, GFP_ATOMIC);
-				else
-					ies = kmalloc(ielen, GFP_ATOMIC);
-
-				if (ies) {
-					memcpy(ies, res->pub.beacon_ies,
-					       ielen);
-					found->beacon_ies_allocated = true;
-					found->pub.beacon_ies = ies;
-					found->pub.len_beacon_ies = ielen;
-				}
-			}
-
-			/* Override IEs if they were from a beacon before */
-			if (information_elements_is_beacon_ies) {
-				found->pub.information_elements =
-					found->pub.beacon_ies;
-				found->pub.len_information_elements =
-					found->pub.len_beacon_ies;
-			}
-		}
-
+                if (res->pub.beacon_ies)
+			cfg80211_bss_update_list(dev, found, res, 1);
+                else
+			cfg80211_bss_update_bss(dev, found, res, 1);
 		kref_put(&res->ref, bss_release);
 	} else {
-		struct cfg80211_internal_bss *hidden;
-
-		/* First check if the beacon is a probe response from
-		 * a hidden bss. If so, copy beacon ies (with nullified
-		 * ssid) into the probe response bss entry (with real ssid).
-		 * It is required basically for PSM implementation
-		 * (probe responses do not contain tim ie) */
-
-		/* TODO: The code is not trying to update existing probe
-		 * response bss entries when beacon ies are
-		 * getting changed. */
-		hidden = rb_find_hidden_bss(dev, res);
-		if (hidden)
-			copy_hidden_ies(res, hidden);
-
+		alias = rb_find_bss_alias(dev, res);
+        	if (alias) {
+			if (res->pub.beacon_ies)
+				cfg80211_bss_update_list(dev, alias, res, 0);
+			else
+				cfg80211_bss_update_bss(dev, res, alias, 0);
+		}
 		/* this "consumes" the reference */
-		list_add_tail(&res->list, &dev->bss_list);
-		rb_insert_bss(dev, res);
+		cfg80211_bss_insert(dev, alias, res);
 		found = res;
 	}
 
@@ -847,6 +811,7 @@ cfg80211_inform_bss(struct wiphy *wiphy,
 	res->pub.tsf = timestamp;
 	res->pub.beacon_interval = beacon_interval;
 	res->pub.capability = capability;
+	INIT_LIST_HEAD(&res->list_aliases);
 	/*
 	 * Since we do not know here whether the IEs are from a Beacon or Probe
 	 * Response frame, we need to pick one of the options and only use it
@@ -914,6 +879,7 @@ cfg80211_inform_bss_frame(struct wiphy *wiphy,
 	res->pub.tsf = le64_to_cpu(mgmt->u.probe_resp.timestamp);
 	res->pub.beacon_interval = le16_to_cpu(mgmt->u.probe_resp.beacon_int);
 	res->pub.capability = le16_to_cpu(mgmt->u.probe_resp.capab_info);
+	INIT_LIST_HEAD(&res->list_aliases);
 	/*
 	 * The initial buffer for the IEs is allocated with the BSS entry and
 	 * is located after the private area.
-- 
1.7.4.1

