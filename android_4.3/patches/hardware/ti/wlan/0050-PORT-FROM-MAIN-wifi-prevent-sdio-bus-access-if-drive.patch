From 7fb27426a143b91f1ccaf947e8de63861e9b3cd8 Mon Sep 17 00:00:00 2001
From: Jonathan DE CESCO <jonathan.de.cesco@intel.com>
Date: Wed, 14 Nov 2012 18:44:22 +0100
Subject: [PORT FROM MAIN] wifi: prevent sdio bus access if driver is suspended

BZ: 65905

Avoid kernel panics triggered by SDIO access while
SDIO host controller is suspended.
Mac80211 framework will queues functions accessing SDIO bus
in non-freezable workqueues. As these workqueues are not frozen
during suspend, it is possible that a SDIO access is done while
platform is suspended.

Change-Id: I3eb2d2511380f1e05eb57231607092bf212a60f2
Orig-Change-Id: I7a439effb2188619df22b0f8964fb14c15df8adc
Signed-off-by: Jonathan DE CESCO <jonathan.de.cesco@intel.com>
Reviewed-on: http://android.intel.com:8080/74089
Reviewed-by: Casasnovas, QuentinX <quentinx.casasnovas@intel.com>
Reviewed-by: Zayet, Aymen <aymen.zayet@intel.com>
Tested-by: Champciaux, Nicolas <nicolas.champciaux@intel.com>
Reviewed-by: Jacquet, CyrilX <cyrilx.jacquet@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Reviewed-on: http://android.intel.com:8080/78007
Reviewed-by: Li, XiaojingX <xiaojingx.li@intel.com>
Tested-by: Li, XiaojingX <xiaojingx.li@intel.com>
---
 wl12xx-compat/drivers/net/wireless/wl12xx/sdio.c |   23 ++++++++++++++++++---
 1 files changed, 19 insertions(+), 4 deletions(-)

diff --git a/wl12xx-compat/drivers/net/wireless/wl12xx/sdio.c b/wl12xx-compat/drivers/net/wireless/wl12xx/sdio.c
index dd5c1e1..b8bf9c9 100644
--- a/wl12xx-compat/drivers/net/wireless/wl12xx/sdio.c
+++ b/wl12xx-compat/drivers/net/wireless/wl12xx/sdio.c
@@ -45,9 +45,11 @@
 #define SDIO_DEVICE_ID_TI_WL1271	0x4076
 #endif
 
+
 struct wl12xx_sdio_glue {
 	struct device *dev;
 	struct platform_device *core;
+	unsigned int suspended;
 };
 
 static const struct sdio_device_id wl1271_devices[] __devinitconst = {
@@ -74,6 +76,11 @@ static int __must_check wl12xx_sdio_raw_read(struct device *child, int addr,
 	struct wl12xx_sdio_glue *glue = dev_get_drvdata(child->parent);
 	struct sdio_func *func = dev_to_sdio_func(glue->dev);
 
+	if (unlikely(glue->suspended)) {
+		dev_err(child->parent, "prevent sdio read while suspended\n");
+		return -1;
+	}
+
 	sdio_claim_host(func);
 
 	if (unlikely(addr == HW_ACCESS_ELP_CTRL_REG_ADDR)) {
@@ -105,6 +112,11 @@ static int __must_check wl12xx_sdio_raw_write(struct device *child, int addr,
 	struct wl12xx_sdio_glue *glue = dev_get_drvdata(child->parent);
 	struct sdio_func *func = dev_to_sdio_func(glue->dev);
 
+	if (unlikely(glue->suspended)) {
+		dev_err(child->parent, "prevent sdio write while suspended\n");
+		return -1;
+	}
+
 	sdio_claim_host(func);
 
 	if (unlikely(addr == HW_ACCESS_ELP_CTRL_REG_ADDR)) {
@@ -222,7 +234,7 @@ static int __devinit wl1271_probe(struct sdio_func *func,
 	}
 
 	glue->dev = &func->dev;
-
+	glue->suspended = 0;
 	/* Grab access to FN0 for ELP reg. */
 	func->card->quirks |= MMC_QUIRK_LENIENT_FN0;
 
@@ -319,7 +331,7 @@ static int wl1271_suspend(struct device *dev)
 	mmc_pm_flag_t sdio_flags;
 	int ret = 0;
 
-	dev_dbg(dev, "wl1271 suspend. wow_enabled: %d\n",
+	dev_info(dev, "wl1271 sdio suspend. wow_enabled: %d\n",
 		wl->wow_enabled);
 
 	/* check whether sdio should keep power */
@@ -339,6 +351,7 @@ static int wl1271_suspend(struct device *dev)
 			dev_err(dev, "error while trying to keep power\n");
 			goto out;
 		}
+		glue->suspended = 1;
 	}
 out:
 	return ret;
@@ -346,8 +359,10 @@ out:
 
 static int wl1271_resume(struct device *dev)
 {
-	dev_dbg(dev, "wl1271 resume\n");
-
+	struct sdio_func *func = dev_to_sdio_func(dev);
+	struct wl12xx_sdio_glue *glue = sdio_get_drvdata(func);
+	dev_info(dev, "wl1271 sdio resume\n");
+	glue->suspended = 0;
 	return 0;
 }
 
-- 
1.7.4.1

