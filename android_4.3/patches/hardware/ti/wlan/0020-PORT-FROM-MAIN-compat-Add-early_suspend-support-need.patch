From 36ac02649629e0aceeea1f88c957e480667a5ecd Mon Sep 17 00:00:00 2001
From: Aymen Zayet <aymen.zayet@intel.com>
Date: Wed, 11 Jul 2012 19:21:16 +0200
Subject: [PORT FROM MAIN] compat: Add early_suspend support needed by Android.

BZ: 43316

When the display turns off, the wake on wireless LAN setup is
configured on all wiphy devices detected.

This should reduce the power consumption by avoiding unecessary
wakeup due to broacast.

Change-Id: I8147b12d4ec533b0b4001c25d6fd61fe1823ca3f
Orig-Change-Id: I9971fb9042c3d6f0f959a8fa89fd2848ac7459c4
Signed-off-by: Aymen Zayet <aymen.zayet@intel.com>
Reviewed-on: http://android.intel.com:8080/53791
Reviewed-by: Champciaux, Nicolas <nicolas.champciaux@intel.com>
Tested-by: Champciaux, Nicolas <nicolas.champciaux@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Reviewed-on: http://android.intel.com:8080/77977
Reviewed-by: Li, XiaojingX <xiaojingx.li@intel.com>
Tested-by: Li, XiaojingX <xiaojingx.li@intel.com>
---
 wl12xx-compat/drivers/net/wireless/wl12xx/main.c |   50 ++++++++++++++++++-
 wl12xx-compat/include/linux/earlysuspend.h       |   56 +++++++++++++++++++++
 wl12xx-compat/include/net/cfg80211.h             |   10 +++-
 wl12xx-compat/include/net/mac80211.h             |   14 +++++
 wl12xx-compat/net/mac80211/Makefile              |    1 +
 wl12xx-compat/net/mac80211/cfg.c                 |   18 +++++++
 wl12xx-compat/net/mac80211/driver-ops.h          |   27 ++++++++++
 wl12xx-compat/net/mac80211/driver-trace.h        |   12 +++++
 wl12xx-compat/net/mac80211/earlysuspend.c        |   22 ++++++++
 wl12xx-compat/net/mac80211/ieee80211_i.h         |   17 ++++++
 wl12xx-compat/net/wireless/core.c                |   58 ++++++++++++++++++++++
 wl12xx-compat/net/wireless/core.h                |    9 +++
 12 files changed, 291 insertions(+), 3 deletions(-)
 create mode 100644 wl12xx-compat/include/linux/earlysuspend.h
 create mode 100644 wl12xx-compat/net/mac80211/earlysuspend.c

diff --git a/wl12xx-compat/drivers/net/wireless/wl12xx/main.c b/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
index 3e30f12..44f71f4 100644
--- a/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
+++ b/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
@@ -2081,9 +2081,10 @@ static int wl1271_op_suspend(struct ieee80211_hw *hw,
 	}
 
 	wl1271_tx_flush(wl);
+	wl->wow_enabled = true;
 
+#ifndef CONFIG_HAS_EARLYSUSPEND
 	mutex_lock(&wl->mutex);
-	wl->wow_enabled = true;
 	wl12xx_for_each_wlvif(wl, wlvif) {
 		ret = wl1271_configure_suspend(wl, wlvif, wow);
 		if (ret < 0) {
@@ -2093,6 +2094,8 @@ static int wl1271_op_suspend(struct ieee80211_hw *hw,
 		}
 	}
 	mutex_unlock(&wl->mutex);
+#endif
+
 	/* flush any remaining work */
 	wl1271_debug(DEBUG_MAC80211, "flushing remaining works");
 
@@ -2147,17 +2150,56 @@ static int wl1271_op_resume(struct ieee80211_hw *hw)
 		wl1271_enable_interrupts(wl);
 	}
 
+#ifndef CONFIG_HAS_EARLYSUSPEND
 	mutex_lock(&wl->mutex);
 	wl12xx_for_each_wlvif(wl, wlvif) {
 		wl1271_configure_resume(wl, wlvif);
 	}
-	wl->wow_enabled = false;
 	mutex_unlock(&wl->mutex);
+#endif
 
+	wl->wow_enabled = false;
 	return ret;
 }
 #endif /* CONFIG_PM */
 
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static int wl1271_op_es_suspend(struct ieee80211_hw *hw,
+				struct cfg80211_wowlan *wow)
+{
+	struct wl1271 *wl = hw->priv;
+	struct wl12xx_vif *wlvif;
+	int ret;
+
+	mutex_lock(&wl->mutex);
+	wl12xx_for_each_wlvif(wl, wlvif) {
+		ret = wl1271_configure_suspend(wl, wlvif, wow);
+		if (ret < 0) {
+			wl->wow_enabled = false;
+			wl1271_warning("early suspend failed");
+			return ret;
+		}
+	}
+	mutex_unlock(&wl->mutex);
+
+	return 0;
+}
+
+static int wl1271_op_es_resume(struct ieee80211_hw *hw)
+{
+	struct wl1271 *wl = hw->priv;
+	struct wl12xx_vif *wlvif;
+
+	mutex_lock(&wl->mutex);
+	wl12xx_for_each_wlvif(wl, wlvif) {
+		wl1271_configure_resume(wl, wlvif);
+	}
+	mutex_unlock(&wl->mutex);
+
+	return 0;
+}
+#endif
+
 static int wl1271_op_start(struct ieee80211_hw *hw)
 {
 	struct wl1271 *wl = hw->priv;
@@ -5410,6 +5452,10 @@ static const struct ieee80211_ops wl1271_ops = {
 	.suspend = wl1271_op_suspend,
 	.resume = wl1271_op_resume,
 #endif
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	.es_suspend = wl1271_op_es_suspend,
+	.es_resume = wl1271_op_es_resume,
+#endif
 	.config = wl1271_op_config,
 	.prepare_multicast = wl1271_op_prepare_multicast,
 	.configure_filter = wl1271_op_configure_filter,
diff --git a/wl12xx-compat/include/linux/earlysuspend.h b/wl12xx-compat/include/linux/earlysuspend.h
new file mode 100644
index 0000000..8343b81
--- /dev/null
+++ b/wl12xx-compat/include/linux/earlysuspend.h
@@ -0,0 +1,56 @@
+/* include/linux/earlysuspend.h
+ *
+ * Copyright (C) 2007-2008 Google, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef _LINUX_EARLYSUSPEND_H
+#define _LINUX_EARLYSUSPEND_H
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/list.h>
+#endif
+
+/* The early_suspend structure defines suspend and resume hooks to be called
+ * when the user visible sleep state of the system changes, and a level to
+ * control the order. They can be used to turn off the screen and input
+ * devices that are not used for wakeup.
+ * Suspend handlers are called in low to high level order, resume handlers are
+ * called in the opposite order. If, when calling register_early_suspend,
+ * the suspend handlers have already been called without a matching call to the
+ * resume handlers, the suspend handler will be called directly from
+ * register_early_suspend. This direct call can violate the normal level order.
+ */
+enum {
+	EARLY_SUSPEND_LEVEL_BLANK_SCREEN = 50,
+	EARLY_SUSPEND_LEVEL_STOP_DRAWING = 100,
+	EARLY_SUSPEND_LEVEL_DISABLE_FB = 150,
+};
+struct early_suspend {
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	struct list_head link;
+	int level;
+	void (*suspend)(struct early_suspend *h);
+	void (*resume)(struct early_suspend *h);
+#endif
+};
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+void register_early_suspend(struct early_suspend *handler);
+void unregister_early_suspend(struct early_suspend *handler);
+#else
+#define register_early_suspend(handler) do { } while (0)
+#define unregister_early_suspend(handler) do { } while (0)
+#endif
+
+#endif
+
diff --git a/wl12xx-compat/include/net/cfg80211.h b/wl12xx-compat/include/net/cfg80211.h
index 5a8e730..3090129 100644
--- a/wl12xx-compat/include/net/cfg80211.h
+++ b/wl12xx-compat/include/net/cfg80211.h
@@ -1326,6 +1326,12 @@ struct cfg80211_gtk_rekey_data {
  *	configured for the device.
  * @resume: wiphy device needs to be resumed
  *
+ * @es_suspend: when the screen turns OFF, the system may want to set a
+ *	custom configuration in order to reduce the power consumption.
+ *
+ * @es_resume: when the screen turns ON, the system may restore its main
+ *	configuration to bring back the relevant wiphy device fully active.
+ *
  * @add_virtual_intf: create a new virtual interface with the given name,
  *	must set the struct wireless_dev's iftype. Beware: You must create
  *	the new netdev in the wiphy's network namespace! Returns the netdev,
@@ -1499,7 +1505,9 @@ struct cfg80211_gtk_rekey_data {
 struct cfg80211_ops {
 	int	(*suspend)(struct wiphy *wiphy, struct cfg80211_wowlan *wow);
 	int	(*resume)(struct wiphy *wiphy);
-
+	int	(*es_suspend)(struct wiphy *wiphy,
+			      struct cfg80211_wowlan *wow);
+	int	(*es_resume)(struct wiphy *wiphy);
 	struct net_device * (*add_virtual_intf)(struct wiphy *wiphy,
 						char *name,
 						enum nl80211_iftype type,
diff --git a/wl12xx-compat/include/net/mac80211.h b/wl12xx-compat/include/net/mac80211.h
index 15d9cc2..6ded1d6 100644
--- a/wl12xx-compat/include/net/mac80211.h
+++ b/wl12xx-compat/include/net/mac80211.h
@@ -1832,6 +1832,15 @@ enum ieee80211_frame_release_type {
  *	to also unregister the device. If it returns 1, then mac80211
  *	will also go through the regular complete restart on resume.
  *
+ *
+ * @es_suspend: Called when the screen turns off to configure perform the
+ *	low level settings into the driver. The purpose of those settings
+ *	is to reduce the power consumption. An example of setting done in
+ *	this callback is the filtering configuration on screen OFF.
+ *
+ * @es_resume: Called when the screen turns ON to restore the configuration
+ *	on the driver level.
+ *
  * @add_interface: Called when a netdevice attached to the hardware is
  *	enabled. Because it is not called for monitor mode devices, @start
  *	and @stop must be implemented.
@@ -2145,6 +2154,11 @@ struct ieee80211_ops {
 	int (*suspend)(struct ieee80211_hw *hw, struct cfg80211_wowlan *wowlan);
 	int (*resume)(struct ieee80211_hw *hw);
 #endif
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	int (*es_suspend)(struct ieee80211_hw *hw,
+			  struct cfg80211_wowlan *wowlan);
+	int (*es_resume)(struct ieee80211_hw *hw);
+#endif
 	int (*add_interface)(struct ieee80211_hw *hw,
 			     struct ieee80211_vif *vif);
 	int (*change_interface)(struct ieee80211_hw *hw,
diff --git a/wl12xx-compat/net/mac80211/Makefile b/wl12xx-compat/net/mac80211/Makefile
index d540c3b..4391cfe 100644
--- a/wl12xx-compat/net/mac80211/Makefile
+++ b/wl12xx-compat/net/mac80211/Makefile
@@ -41,6 +41,7 @@ mac80211-$(CONFIG_MAC80211_MESH) += \
 	mesh_hwmp.o
 
 mac80211-$(CONFIG_PM) += pm.o
+mac80211-$(CONFIG_HAS_EARLYSUSPEND) += earlysuspend.o
 
 CFLAGS_driver-trace.o := -I$(src)
 
diff --git a/wl12xx-compat/net/mac80211/cfg.c b/wl12xx-compat/net/mac80211/cfg.c
index 7d6f581..f474206 100644
--- a/wl12xx-compat/net/mac80211/cfg.c
+++ b/wl12xx-compat/net/mac80211/cfg.c
@@ -1548,6 +1548,22 @@ static int ieee80211_resume(struct wiphy *wiphy)
 #define ieee80211_resume NULL
 #endif
 
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static int ieee80211_es_suspend(struct wiphy *wiphy,
+				struct cfg80211_wowlan *wowlan)
+{
+	return __ieee80211_es_suspend(wiphy_priv(wiphy), wowlan);
+}
+
+static int ieee80211_es_resume(struct wiphy *wiphy)
+{
+	return __ieee80211_es_resume(wiphy_priv(wiphy));
+}
+#else
+#define ieee80211_es_suspend NULL
+#define ieee80211_es_resume NULL
+#endif
+
 static int ieee80211_scan(struct wiphy *wiphy,
 			  struct net_device *dev,
 			  struct cfg80211_scan_request *req)
@@ -2753,6 +2769,8 @@ struct cfg80211_ops mac80211_config_ops = {
 	.set_channel = ieee80211_set_channel,
 	.suspend = ieee80211_suspend,
 	.resume = ieee80211_resume,
+	.es_suspend = ieee80211_es_suspend,
+	.es_resume = ieee80211_es_resume,
 	.scan = ieee80211_scan,
 	.scan_cancel = ieee80211_scan_cancel_req,
 	.sched_scan_start = ieee80211_sched_scan_start,
diff --git a/wl12xx-compat/net/mac80211/driver-ops.h b/wl12xx-compat/net/mac80211/driver-ops.h
index 9547c88..e0bc6b8 100644
--- a/wl12xx-compat/net/mac80211/driver-ops.h
+++ b/wl12xx-compat/net/mac80211/driver-ops.h
@@ -91,6 +91,33 @@ static inline int drv_resume(struct ieee80211_local *local)
 }
 #endif
 
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static inline int drv_es_suspend(struct ieee80211_local *local,
+				 struct cfg80211_wowlan *wowlan)
+{
+	int ret;
+
+	might_sleep();
+
+	trace_drv_es_suspend(local);
+	ret = local->ops->es_suspend(&local->hw, wowlan);
+	trace_drv_return_int(local, ret);
+	return ret;
+}
+
+static inline int drv_es_resume(struct ieee80211_local *local)
+{
+	int ret;
+
+	might_sleep();
+
+	trace_drv_es_resume(local);
+	ret = local->ops->es_resume(&local->hw);
+	trace_drv_return_int(local, ret);
+	return ret;
+}
+#endif
+
 static inline int drv_add_interface(struct ieee80211_local *local,
 				    struct ieee80211_sub_if_data *sdata)
 {
diff --git a/wl12xx-compat/net/mac80211/driver-trace.h b/wl12xx-compat/net/mac80211/driver-trace.h
index 9416428..10ed3e8 100644
--- a/wl12xx-compat/net/mac80211/driver-trace.h
+++ b/wl12xx-compat/net/mac80211/driver-trace.h
@@ -171,6 +171,18 @@ DEFINE_EVENT(local_only_evt, drv_resume,
 	TP_ARGS(local)
 );
 
+#ifdef CONFIG_HAS_EARLYSUSPEND
+DEFINE_EVENT(local_only_evt, drv_es_suspend,
+	TP_PROTO(struct ieee80211_local *local),
+	TP_ARGS(local)
+);
+
+DEFINE_EVENT(local_only_evt, drv_es_resume,
+	TP_PROTO(struct ieee80211_local *local),
+	TP_ARGS(local)
+);
+#endif
+
 DEFINE_EVENT(local_only_evt, drv_stop,
 	TP_PROTO(struct ieee80211_local *local),
 	TP_ARGS(local)
diff --git a/wl12xx-compat/net/mac80211/earlysuspend.c b/wl12xx-compat/net/mac80211/earlysuspend.c
new file mode 100644
index 0000000..546eaaa
--- /dev/null
+++ b/wl12xx-compat/net/mac80211/earlysuspend.c
@@ -0,0 +1,22 @@
+#include <net/mac80211.h>
+#include "ieee80211_i.h"
+#include "driver-ops.h"
+
+int __ieee80211_es_suspend(struct ieee80211_hw *hw,
+			   struct cfg80211_wowlan *wowlan)
+{
+	struct ieee80211_local *local = hw_to_local(hw);
+
+	local->wowlan = wowlan && local->open_count;
+	if (local->wowlan)
+		return drv_es_suspend(local, wowlan);
+
+	return 0;
+}
+
+int __ieee80211_es_resume(struct ieee80211_hw *hw)
+{
+	struct ieee80211_local *local = hw_to_local(hw);
+
+	return drv_es_resume(local);
+}
diff --git a/wl12xx-compat/net/mac80211/ieee80211_i.h b/wl12xx-compat/net/mac80211/ieee80211_i.h
index 4a160cd..9b88bd9 100644
--- a/wl12xx-compat/net/mac80211/ieee80211_i.h
+++ b/wl12xx-compat/net/mac80211/ieee80211_i.h
@@ -1352,6 +1352,23 @@ static inline int __ieee80211_resume(struct ieee80211_hw *hw)
 }
 #endif
 
+#ifdef CONFIG_HAS_EARLYSUSPEND
+int __ieee80211_es_suspend(struct ieee80211_hw *hw,
+		       struct cfg80211_wowlan *wowlan);
+int __ieee80211_es_resume(struct ieee80211_hw *hw);
+#else
+static inline int __ieee80211_es_suspend(struct ieee80211_hw *hw,
+		       struct cfg80211_wowlan *wowlan)
+{
+       return 0;
+}
+
+static inline int __ieee80211_es_resume(struct ieee80211_hw *hw)
+{
+       return 0;
+}
+#endif
+
 /* utility functions/constants */
 extern void *mac80211_wiphy_privid; /* for wiphy privid */
 u8 *ieee80211_get_bssid(struct ieee80211_hdr *hdr, size_t len,
diff --git a/wl12xx-compat/net/wireless/core.c b/wl12xx-compat/net/wireless/core.c
index b312a30..2773875 100644
--- a/wl12xx-compat/net/wireless/core.c
+++ b/wl12xx-compat/net/wireless/core.c
@@ -51,6 +51,61 @@ module_param(cfg80211_disable_40mhz_24ghz, bool, 0644);
 MODULE_PARM_DESC(cfg80211_disable_40mhz_24ghz,
 		 "Disable 40MHz support in the 2.4GHz band");
 
+#ifdef CONFIG_HAS_EARLYSUSPEND
+
+static void cfg80211_es_suspend(struct early_suspend *h)
+{
+	struct cfg80211_registered_device *rdev;
+	int ret;
+
+	assert_cfg80211_lock();
+
+	list_for_each_entry(rdev, &cfg80211_rdev_list, list) {
+		if (!rdev->ops || !rdev->ops->es_suspend)
+			continue;
+
+		ret = rdev->ops->es_suspend(&rdev->wiphy, rdev->wowlan);
+		if (ret)
+			pr_err("early suspend of wiphy idx %d failed\n",
+			       rdev->wiphy_idx);
+	}
+}
+
+static void cfg80211_es_resume(struct early_suspend *h)
+{
+	struct cfg80211_registered_device *rdev;
+	int ret;
+
+	assert_cfg80211_lock();
+
+	list_for_each_entry(rdev, &cfg80211_rdev_list, list) {
+		if (!rdev->ops || !rdev->ops->es_resume)
+			continue;
+
+		ret = rdev->ops->es_resume(&rdev->wiphy);
+		if (ret)
+			pr_err("early resume of wiphy idx %d failed\n",
+			       rdev->wiphy_idx);
+	}
+}
+
+static struct early_suspend cfg80211_early_suspend_desc = {
+	 .suspend = cfg80211_es_suspend,
+	 .resume = cfg80211_es_resume,
+	 .level = EARLY_SUSPEND_LEVEL_DISABLE_FB,
+};
+
+void cfg80211_register_earlysuspend(void)
+{
+	register_early_suspend(&cfg80211_early_suspend_desc);
+}
+
+void cfg80211_unregister_earlysuspend(void)
+{
+	unregister_early_suspend(&cfg80211_early_suspend_desc);
+}
+#endif
+
 /* requires cfg80211_mutex to be held! */
 struct cfg80211_registered_device *cfg80211_rdev_by_wiphy_idx(int wiphy_idx)
 {
@@ -1064,6 +1119,8 @@ static int __init cfg80211_init(void)
 	if (!cfg80211_wq)
 		goto out_fail_wq;
 
+	cfg80211_register_earlysuspend();
+
 	return 0;
 
 out_fail_wq:
@@ -1085,6 +1142,7 @@ subsys_initcall(cfg80211_init);
 
 static void __exit cfg80211_exit(void)
 {
+	cfg80211_unregister_earlysuspend();
 	debugfs_remove(ieee80211_debugfs_dir);
 	nl80211_exit();
 	unregister_netdevice_notifier(&cfg80211_netdev_notifier);
diff --git a/wl12xx-compat/net/wireless/core.h b/wl12xx-compat/net/wireless/core.h
index d102a80..5a94098 100644
--- a/wl12xx-compat/net/wireless/core.h
+++ b/wl12xx-compat/net/wireless/core.h
@@ -13,10 +13,19 @@
 #include <linux/debugfs.h>
 #include <linux/rfkill.h>
 #include <linux/workqueue.h>
+#include <linux/earlysuspend.h>
 #include <net/genetlink.h>
 #include <net/cfg80211.h>
 #include "reg.h"
 
+#ifdef CONFIG_HAS_EARLYSUSPEND
+void cfg80211_register_earlysuspend(void);
+void cfg80211_unregister_earlysuspend(void);
+#else
+#define cfg80211_register_earlysuspend() do { } while (0)
+#define cfg80211_unregister_earlysuspend() do { } while (0)
+#endif
+
 struct cfg80211_registered_device {
 	const struct cfg80211_ops *ops;
 	struct list_head list;
-- 
1.7.4.1

