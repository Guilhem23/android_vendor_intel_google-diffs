From 85cb45039e2f9686465b7c26de0df29724cdcde5 Mon Sep 17 00:00:00 2001
From: jianqian <jianqiang.tang@intel.com>
Date: Sat, 16 Feb 2013 19:29:22 +0800
Subject: [PORT FROM MAIN][usb/vold] Add secondary match check for USB Host UMS Mount Policy in Vold Layer.

BZ: 85125

Add secondary match check for USB Host UMS mount policy.
We support one UMS mount/unmount by vold, normally UMS will get name of
'sda' from SCSI layer, but sometimes sda node do not release and UMS will
get 'sdb/sdc/sdd/...' until phone reboot, this breaks the basic match rule.
This workaround use /block/sd in vold.fstab,
Get the secondary name if uevent is ADD and belongs to UMS also mMatchStr current is empty;
Add clear mMatchStr String before vold handle disk REMOVE event.
Place mMatchStr in DirectVolume class.
Set getMatchStr()/setMatchStr() function as private of DirectVolume class.
Also fix a Critical KlockWork issue of Possible NULL Pointer in DirectVolume::handleBlockEvent.
Original Patch:
92184:Add secondary match check for USB Host.

Change-Id: I6bda4688924556e1aa76fed0e12fb6a0f4c8a718
Signed-off-by: jianqian <jianqiang.tang@intel.com>
Signed-off-by: Bo Huang <bo.b.huang@intel.com>

Conflicts:
	DirectVolume.h
---
 DirectVolume.cpp |   35 ++++++++++++++++++++++++++++++++++-
 DirectVolume.h   |    5 ++++-
 2 files changed, 38 insertions(+), 2 deletions(-)

diff --git a/DirectVolume.cpp b/DirectVolume.cpp
index 6c9fd71..1e41087 100644
--- a/DirectVolume.cpp
+++ b/DirectVolume.cpp
@@ -31,6 +31,11 @@
 #include "ResponseCode.h"
 #include "cryptfs.h"
 
+/*
+* usbcard Volume basic match path
+*/
+const char *UMS_MATCH_DIR   = "/block/sd";
+
 // #define PARTITION_DEBUG
 
 DirectVolume::DirectVolume(VolumeManager *vm, const char *label,
@@ -45,6 +50,7 @@ DirectVolume::DirectVolume(VolumeManager *vm, const char *label,
     mDiskMajor = -1;
     mDiskMinor = -1;
     mDiskNumParts = 0;
+    mMatchStr[0] = '\0';
 
     setState(Volume::State_NoMedia);
 }
@@ -66,6 +72,10 @@ void DirectVolume::setFlags(int flags) {
     mFlags = flags;
 }
 
+void DirectVolume::setMatchStr(const char *str) {
+    strncpy(mMatchStr, str, sizeof(mMatchStr)-1);
+}
+
 dev_t DirectVolume::getDiskDevice() {
     return MKDEV(mDiskMajor, mDiskMinor);
 }
@@ -93,14 +103,33 @@ void DirectVolume::handleVolumeUnshared() {
 
 int DirectVolume::handleBlockEvent(NetlinkEvent *evt) {
     const char *dp = evt->findParam("DEVPATH");
+    int action = evt->getAction();
+
+    if (!dp) {
+        SLOGE("DEVPATH is NULL\n");
+        errno = ENODEV;
+        return -1;
+    }
+
+    /* Get the secondary match name of usb volume */
+    if (strstr(dp, UMS_MATCH_DIR)) {
+       if ((action == NetlinkEvent::NlActionAdd) && !*getMatchStr()) {
+            char *pos = strstr(dp, UMS_MATCH_DIR);
+            setMatchStr(pos);
+       }
+    }
 
     PathCollection::iterator  it;
     for (it = mPaths->begin(); it != mPaths->end(); ++it) {
         if (!strncmp(dp, *it, strlen(*it))) {
             /* We can handle this disk */
-            int action = evt->getAction();
             const char *devtype = evt->findParam("DEVTYPE");
 
+            if (strstr(dp, UMS_MATCH_DIR) && !strstr(dp, getMatchStr())) {
+                errno = ENODEV;
+                return -1;
+            }
+
             if (action == NetlinkEvent::NlActionAdd) {
                 int major = atoi(evt->findParam("MAJOR"));
                 int minor = atoi(evt->findParam("MINOR"));
@@ -130,6 +159,10 @@ int DirectVolume::handleBlockEvent(NetlinkEvent *evt) {
                 }
             } else if (action == NetlinkEvent::NlActionRemove) {
                 if (!strcmp(devtype, "disk")) {
+                    /* clear mMatchStr before disk remove */
+                    if (strstr(dp, getMatchStr())) {
+                            setMatchStr("\0");
+                    }
                     handleDiskRemoved(dp, evt);
                 } else {
                     handlePartitionRemoved(dp, evt);
diff --git a/DirectVolume.h b/DirectVolume.h
index c0139d4..4f86c67 100644
--- a/DirectVolume.h
+++ b/DirectVolume.h
@@ -21,7 +21,7 @@
 
 #include "Volume.h"
 
-#define MAX_PARTS 4
+#define MAX_MATCHSTR 25
 
 typedef android::List<char *> PathCollection;
 
@@ -40,6 +40,7 @@ protected:
     unsigned int   mPendingPartMap;
     int            mIsDecrypted;
     int            mFlags;
+    char           mMatchStr[MAX_MATCHSTR];
 
 public:
     DirectVolume(VolumeManager *vm, const char *label, const char *mount_point, int partIdx);
@@ -72,6 +73,8 @@ private:
 
     int doMountVfat(const char *deviceNode, const char *mountPoint);
 
+    const char *getMatchStr() { return mMatchStr; }
+    void setMatchStr(const char *str);
 };
 
 typedef android::List<DirectVolume *> DirectVolumeCollection;
-- 
1.7.4.1

