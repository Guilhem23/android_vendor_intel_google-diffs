From 290ca5b9081cb39b83a2180fcc90a4c9f0207dba Mon Sep 17 00:00:00 2001
From: Pavan Kumar S <pavan.kumar.s@intel.com>
Date: Fri, 24 May 2013 10:46:55 +0530
Subject: [PORT FROM MAIN] ANDROID-COS: Fix the screen always on issue when charging in COS

BZ: 55126

We need to power off the screen when charging in COS, and power
on the screen to draw battery animation when input event happen.
It is for efficient charging. Currently power on screen when power
key press and charger removal.

This patch also clears display buffer during display off.
Without this, last drawn image can momentarily flicker
when the screen turns-on again. (BZ: 91446)

Orig-Change-Id: I4f1efcf18ee6a24ed7dace8fca1c12195d8410d9

Change-Id: Ic51d547eb19ed6ad71b6c196e1fc4bb65473a04f
Signed-off-by: Pavan Kumar S <pavan.kumar.s@intel.com>
---
 charger/Android.mk |    1 +
 charger/charger.c  |   16 ++++++++++------
 2 files changed, 11 insertions(+), 6 deletions(-)

diff --git a/charger/Android.mk b/charger/Android.mk
index b9d3473..bb4d57c 100644
--- a/charger/Android.mk
+++ b/charger/Android.mk
@@ -12,6 +12,7 @@ ifeq ($(strip $(BOARD_CHARGER_DISABLE_INIT_BLANK)),true)
 LOCAL_CFLAGS := -DCHARGER_DISABLE_INIT_BLANK
 endif
 
+BOARD_CHARGER_ENABLE_SUSPEND := true
 ifeq ($(strip $(BOARD_CHARGER_ENABLE_SUSPEND)),true)
 LOCAL_CFLAGS += -DCHARGER_ENABLE_SUSPEND
 endif
diff --git a/charger/charger.c b/charger/charger.c
index 33d683d..3bad928 100644
--- a/charger/charger.c
+++ b/charger/charger.c
@@ -766,8 +766,11 @@ static void update_screen_state(struct charger *charger, int64_t now)
         redraw_screen(charger);
         reset_animation(batt_anim);
 
-        if (charger->num_supplies_online > 0)
+        if (charger->num_supplies_online > 0) {
             request_suspend(true);
+            clear_screen();
+            gr_flip();
+        }
         return;
     }
 
@@ -920,12 +923,12 @@ static void process_key(struct charger *charger, int code, int64_t now)
                  */
                 set_next_key_check(charger, key, POWER_ON_KEY_TIME);
             }
+            kick_animation(charger->batt_anim);
+            request_suspend(false);
         } else {
             /* if the power key got released, force screen state cycle */
-            if (key->pending) {
-                request_suspend(false);
+            if (key->pending)
                 kick_animation(charger->batt_anim);
-            }
         }
     }
 
@@ -943,6 +946,7 @@ static void handle_input_state(struct charger *charger, int64_t now)
 static void handle_power_supply_state(struct charger *charger, int64_t now)
 {
     if (charger->num_supplies_online == 0 || !is_battery_valid(charger)) {
+        kick_animation(charger->batt_anim);
         request_suspend(false);
         if (charger->next_pwr_check == -1) {
             charger->next_pwr_check = now + UNPLUGGED_SHUTDOWN_TIME;
@@ -950,8 +954,8 @@ static void handle_power_supply_state(struct charger *charger, int64_t now)
                  now, UNPLUGGED_SHUTDOWN_TIME, charger->next_pwr_check);
         } else if (now >= charger->next_pwr_check) {
             LOGI("[%lld] shutting down\n", now);
-             if (!is_battery_valid(charger))
-                 system("echo 1 > /sys/module/intel_mid_osip/parameters/force_shutdown_occured");
+            if (!is_battery_valid(charger))
+                system("echo 1 > /sys/module/intel_mid_osip/parameters/force_shutdown_occured");
             android_reboot(ANDROID_RB_POWEROFF, 0, 0);
         } else {
             /* otherwise we already have a shutdown timer scheduled */
-- 
1.7.4.1

