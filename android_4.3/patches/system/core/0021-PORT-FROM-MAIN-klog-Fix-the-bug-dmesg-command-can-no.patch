From 56aa74a9b3542f0c620f0eef40a0bed23742e02a Mon Sep 17 00:00:00 2001
From: shuangbo tang <shuangbo.tang@intel.com>
Date: Thu, 14 Jul 2011 01:20:57 -0200
Subject: [PORT FROM MAIN] klog: Fix the bug-dmesg command can not dump the fully complete kernel message

BZ:  22542

current kernel log buffer and dump buffer length are defined in two different
macro,it is easy to cause inconsistency. correct it, and the dump buffer length
will get by system call, so that both of them could keep consistency.

Change-Id: Ib6ac6d38343952ace0dd6b418461f689bb1286d2
Orig-Change-Id: I3c8de445824ada52513143ebc40a65060c926a50
Signed-off-by: shuangbo tang <shuangbo.tang@intel.com>
Signed-off-by: ShuoX Liu <shuox.liu@intel.com>
Reviewed-on: http://android.intel.com:8080/81227
Reviewed-by: Du, Chenyang <chenyang.du@intel.com>
Reviewed-by: Yao, Yong <yong.yao@intel.com>
Reviewed-by: Li, XiaojingX <xiaojingx.li@intel.com>
Tested-by: Li, XiaojingX <xiaojingx.li@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 toolbox/dmesg.c |   41 +++++++++++++++++++++++++++--------------
 1 files changed, 27 insertions(+), 14 deletions(-)
 mode change 100644 => 100755 toolbox/dmesg.c

diff --git a/toolbox/dmesg.c b/toolbox/dmesg.c
old mode 100644
new mode 100755
index e57f607..bcbbb33
--- a/toolbox/dmesg.c
+++ b/toolbox/dmesg.c
@@ -5,39 +5,52 @@
 #include <sys/klog.h>
 #include <string.h>
 
-#define KLOG_BUF_SHIFT	17	/* CONFIG_LOG_BUF_SHIFT from our kernel */
-#define KLOG_BUF_LEN	(1 << KLOG_BUF_SHIFT)
+#define KLOG_BUF_MAX_SHIFT  20    /* Currently, CONFIG_LOG_BUF_SHIFT from our kernel is 19 */
+#define KLOG_BUF_MAX_LEN    (1 << KLOG_BUF_MAX_SHIFT)
 
 int dmesg_main(int argc, char **argv)
 {
-    char buffer[KLOG_BUF_LEN + 1];
-    char *p = buffer;
+    char *buffer, *p;
     ssize_t ret;
-    int n, op;
+    int n, op, len;
 
-    if((argc == 2) && (!strcmp(argv[1],"-c"))) {
+    len = klogctl(KLOG_WRITE, NULL, 0);    /* read ring buffer size */
+    if (len > KLOG_BUF_MAX_LEN)
+        len = KLOG_BUF_MAX_LEN;
+    buffer = malloc(len + 1);
+    if (!buffer) {
+        perror("klogctl");
+        return EXIT_FAILURE;
+    }
+
+    if ((argc == 2) && (!strcmp(argv[1], "-c"))) {
         op = KLOG_READ_CLEAR;
     } else {
         op = KLOG_READ_ALL;
     }
 
-    n = klogctl(op, buffer, KLOG_BUF_LEN);
+    n = klogctl(op, buffer, len);
     if (n < 0) {
         perror("klogctl");
+        free(buffer);
         return EXIT_FAILURE;
     }
     buffer[n] = '\0';
 
-    while((ret = write(STDOUT_FILENO, p, n))) {
+    p = buffer;
+    while ((ret = write(STDOUT_FILENO, p, n))) {
         if (ret == -1) {
-	    if (errno == EINTR)
+            if (errno == EINTR)
                 continue;
-	    perror("write");
-	    return EXIT_FAILURE;
-	}
-	p += ret;
-	n -= ret;
+            perror("write");
+            free(buffer);
+            return EXIT_FAILURE;
+        }
+        p += ret;
+        n -= ret;
     }
 
+    free(buffer);
+
     return 0;
 }
-- 
1.7.4.1

