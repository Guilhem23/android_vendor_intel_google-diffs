From 0eed6979208491c16ac6727500a1437f11ac0e98 Mon Sep 17 00:00:00 2001
From: Andy Ross <andy.ross@windriver.com>
Date: Tue, 18 Dec 2012 12:54:32 -0800
Subject: Fix hang under BufferQueue::disconnect

disconnect() tries to drain the queue, but there are error cases in
the wild where the consumer has "lost" the BufferQueue object and
stopped consuming frames.  That causes a deadlock situation where
disconnect (itself called from under cleanup code,
e.g. eglDestroySurface()) never returns and hangs the process.

Fix this by detecting (with a timeout) the case of a queue that fails
to drain promptly and convert it to an existing error, basically
treating it the same as "abandoned".

Issue: AXIA-582
Change-Id: I313f7fb038e6f61d02a23c3b0d4b6951c54d9f20
Signed-off-by: Andy Ross <andy.ross@windriver.com>
---
 libs/gui/BufferQueue.cpp |    8 +++++++-
 1 files changed, 7 insertions(+), 1 deletions(-)

diff --git a/libs/gui/BufferQueue.cpp b/libs/gui/BufferQueue.cpp
index b4c7231..1a867fc 100644
--- a/libs/gui/BufferQueue.cpp
+++ b/libs/gui/BufferQueue.cpp
@@ -1000,8 +1000,14 @@ void BufferQueue::freeAllBuffersExceptHeadLocked() {
 }
 
 status_t BufferQueue::drainQueueLocked() {
+    const nsecs_t timeout = 300000; // 0.3s seems a reasonable wait for a valid consumer
+    nsecs_t start = systemTime();
     while (mSynchronousMode && mQueue.size() > 1) {
-        mDequeueCondition.wait(mMutex);
+        mDequeueCondition.waitRelative(mMutex, timeout);
+        if(systemTime() - start >= timeout) {
+            ST_LOGE("BufferQueue:drainQueueLocked: timeout waiting on consumer!");
+            return NO_INIT;
+        }
         if (mAbandoned) {
             ST_LOGE("drainQueueLocked: BufferQueue has been abandoned!");
             return NO_INIT;
-- 
1.7.4.1

