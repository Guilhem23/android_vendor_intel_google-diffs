From 362477f0519083557fd6203934fe6e185647a303 Mon Sep 17 00:00:00 2001
From: yi.xie@intel.com <yi.xie@intel.com>
Date: Tue, 21 Feb 2012 10:11:08 +0800
Subject: Add EGLContext validation to fix bug ANDROID-1679

Segmentation fault will occur when using an invalid EGLContext,
such as getting an EGLContext by "(EGLContext)3".

This validation process first uses msync system call
to check for unmapped memory pointer.

Moreover, Because existing properties(like dpy, config, version, etc.)
are hard to identify if this is an egl_context_t instance,
a magic property is introduced into the class egl_context_t,
which helps to see if it does represent an egl_context_t instance
for most basic accidental cases,
though not feasible to test for deliberate forgeries.

Once the pointer is confirmed valid,
invoke the isValid method of egl_context_t,
which compares magic value to the constant MAGIC to do validation.

Change-Id: If1b884134af57f703b51eb483c4bd0a85c78ec5a
Original-Change-Id: Iebebf4238498c667319c62469baa5d8538127b2d
Signed-off-by: Yi <yi.xie@intel.com>
Signed-off-by: Oliver McFadden <oliver.mcfadden@intel.com>
Signed-off-by: Russell Webb <russell.webb@intel.com>
---
 opengl/libs/EGL/eglApi.cpp     |   24 ++++++++++++++++++++++++
 opengl/libs/EGL/egl_object.cpp |    2 +-
 opengl/libs/EGL/egl_object.h   |    9 +++++++++
 3 files changed, 34 insertions(+), 1 deletions(-)

diff --git a/opengl/libs/EGL/eglApi.cpp b/opengl/libs/EGL/eglApi.cpp
index bf334cb..e7f13d9 100644
--- a/opengl/libs/EGL/eglApi.cpp
+++ b/opengl/libs/EGL/eglApi.cpp
@@ -542,6 +542,26 @@ void EGLAPI eglBeginFrame(EGLDisplay dpy, EGLSurface surface) {
 // ----------------------------------------------------------------------------
 // Contexts
 // ----------------------------------------------------------------------------
+EGLBoolean isValidContext(EGLContext ctx)
+{
+    egl_context_t* const c = static_cast<egl_context_t*>(ctx);
+
+    // the msync system call returns with ENOMEM error for unmapped memory
+    // pages.  This is used here as a way to test whether we can read through a
+    // pointer without getting a segfault.
+    uintptr_t pagesize = (uintptr_t) sysconf(_SC_PAGESIZE);
+    uintptr_t addr = ((uintptr_t)(&c->magic)) & (~(pagesize - 1));
+    int rc = msync((void *)addr, pagesize, MS_ASYNC);
+    if (0 == rc) {
+        return c->isValid();
+    }
+    if (ENOMEM == errno) {
+        ALOGE("Context refers to unmapped memory.");
+        return EGL_FALSE;
+    }
+    ALOGE("error unexpected msync error: %s (%d)", strerror(errno), errno);
+    return EGL_FALSE;
+}
 
 EGLContext eglCreateContext(EGLDisplay dpy, EGLConfig config,
                             EGLContext share_list, const EGLint *attrib_list)
@@ -552,6 +572,10 @@ EGLContext eglCreateContext(EGLDisplay dpy, EGLConfig config,
     const egl_display_ptr dp = validate_display_connection(dpy, cnx);
     if (dpy) {
         if (share_list != EGL_NO_CONTEXT) {
+            if(!isValidContext(share_list)) {
+                ALOGE("EGLContext %p invalid", share_list);
+                return setError(EGL_BAD_CONTEXT, EGL_NO_CONTEXT);
+            }
             egl_context_t* const c = get_context(share_list);
             share_list = c->context;
         }
diff --git a/opengl/libs/EGL/egl_object.cpp b/opengl/libs/EGL/egl_object.cpp
index a599315..329a185 100644
--- a/opengl/libs/EGL/egl_object.cpp
+++ b/opengl/libs/EGL/egl_object.cpp
@@ -87,7 +87,7 @@ egl_surface_t::~egl_surface_t() {
 egl_context_t::egl_context_t(EGLDisplay dpy, EGLContext context, EGLConfig config,
         egl_connection_t const* cnx, int version) :
     egl_object_t(get_display_nowake(dpy)), dpy(dpy), context(context),
-            config(config), read(0), draw(0), cnx(cnx), version(version) {
+            config(config), read(0), draw(0), cnx(cnx), version(version), magic(MAGIC) {
 }
 
 void egl_context_t::onLooseCurrent() {
diff --git a/opengl/libs/EGL/egl_object.h b/opengl/libs/EGL/egl_object.h
index 518fdec..d69627b 100644
--- a/opengl/libs/EGL/egl_object.h
+++ b/opengl/libs/EGL/egl_object.h
@@ -144,6 +144,9 @@ protected:
     ~egl_context_t() {}
 public:
     typedef egl_object_t::LocalRef<egl_context_t, EGLContext> Ref;
+    enum {
+        MAGIC   =   0xabcdef01
+    };
 
     egl_context_t(EGLDisplay dpy, EGLContext context, EGLConfig config,
             egl_connection_t const* cnx, int version);
@@ -151,6 +154,12 @@ public:
     void onLooseCurrent();
     void onMakeCurrent(EGLSurface draw, EGLSurface read);
 
+    bool isValid() const {
+        ALOGE_IF(magic != MAGIC, "invalid EGLContext (%p)", this);
+        return magic == MAGIC;
+    }
+
+    uint32_t magic;
     EGLDisplay dpy;
     EGLContext context;
     EGLConfig config;
-- 
1.7.4.1

