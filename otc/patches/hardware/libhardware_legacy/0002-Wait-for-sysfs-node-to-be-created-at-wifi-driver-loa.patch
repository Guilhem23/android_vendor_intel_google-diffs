From 6533752b797687dcc6607553e2b7b5b73af645e1 Mon Sep 17 00:00:00 2001
From: Paul Drews <paul.drews@intel.com>
Date: Wed, 25 Jul 2012 11:56:02 -0700
Subject: Wait for sysfs node to be created at wifi driver-load

Wifi drivers may do background initialization after loading
the driver kernel module.  This background initialization
includes creation of the sysfs node used subsequently by
foreground processes to communicate with the driver.  Since
these foreground processes may attempt to open the sysfs
node immediately after wifi_driver_load, this patch waits
(up to a maximum time) for the relevant sysfs node to be
created before returning.

Issue: AXIA-437
Change-Id: Icf199ae77bee562e0409986770321d22ee9abfc5
Signed-off-by: Paul Drews <paul.drews@intel.com>
---
 wifi/wifi.c |   53 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 53 insertions(+), 0 deletions(-)

diff --git a/wifi/wifi.c b/wifi/wifi.c
index 81b7b4f..b6f27e3 100644
--- a/wifi/wifi.c
+++ b/wifi/wifi.c
@@ -316,6 +316,59 @@ int wifi_load_driver()
         return -1;
     }
 
+    /*
+     * The sysfs nodes exported by the driver are typically created by
+     * initialization code that runs in the background after the driver is
+     * loaded.  Since the caller of this procedure may expect to use the driver
+     * immediately upon return, this procedure needs to wait (up to some
+     * maximum time) for the driver to create the relevant sysfs node.
+     *
+     * Do exponential-backoff on the waiting to compromise between promptness
+     * and system-load.  Use 1.2x increase per wait-cycle starting at 10 ms and
+     * a maximum total wait time of 10 seconds.
+     */
+    {
+        char ifc[PROPERTY_VALUE_MAX];
+        char *sysfs_path;
+        int ret;
+        unsigned int usec_waited;
+        unsigned int current_wait_usec;
+        struct stat s;
+
+        property_get("wifi.interface", ifc, WIFI_TEST_INTERFACE);
+        /*
+         * The parts of the following path outside of the interpolated
+         * interface name are:
+         *
+         *   () device-neutral since they come from the kernel's net/core
+         *      implementation, and
+         *   () exactly what the wpa_supplicant is using and expecting.
+         */
+        ret = asprintf(&sysfs_path, "/sys/class/net/%s/phy80211/name", ifc);
+        if (ret < 0) {
+            ALOGE("Error allocating sysfs path");
+            return -1;
+        }
+        usec_waited = 0;
+        current_wait_usec = 10 * 1000;
+        while ((usec_waited < 10 * 1000 * 1000) &&
+               ((ret = stat(sysfs_path, &s)) != 0)) {
+            usleep(current_wait_usec);
+            usec_waited += current_wait_usec;
+            current_wait_usec = current_wait_usec * 12 / 10;
+        }
+        if (ret == 0) {
+            ALOGI("Wifi driver sysfs node %s present after %d usec wait",
+                sysfs_path, usec_waited);
+        } else {
+            ALOGE("Wifi driver sysfs node %s missing after %d usec wait",
+                sysfs_path, usec_waited);
+            free(sysfs_path);
+            return -1;
+        }
+        free(sysfs_path);
+    }
+
     if (strcmp(FIRMWARE_LOADER,"") == 0) {
         /* usleep(WIFI_DRIVER_LOADER_DELAY); */
         property_set(DRIVER_PROP_NAME, "ok");
-- 
1.7.4.1

