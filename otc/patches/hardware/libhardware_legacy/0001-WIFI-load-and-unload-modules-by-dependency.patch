From d20601cd7d57bae3cedb028dac41fbad4e56528d Mon Sep 17 00:00:00 2001
From: Jianxun Zhang <jianxun.zhang@intel.com>
Date: Wed, 18 Jul 2012 16:05:30 -0700
Subject: WIFI: load and unload modules by dependency

If the WIFI_DRIVER_PROBE_PATH is defined with a non-empty string,
WIFI HAL layer will call insmod_by_dep() in libcutils to load wifi
driver module and other modules it depends on, and try to remove
all of these modules from kernel by calling rmmod_by_dep() when it
is asked at run time.

The old approach with a single insmod() is still kept as a backup
when probe path is not provided.

This commit also includes other several changes to refine the
code around module operations.

Change-Id: I48db96890bf5ebc2ec2ec3896b50585b87ceb29a
Signed-off-by: Jianxun Zhang <jianxun.zhang@intel.com>
---
 wifi/Android.mk |    3 +
 wifi/wifi.c     |  175 +++++++++++++++++++++++++++++++++++++++++--------------
 2 files changed, 134 insertions(+), 44 deletions(-)

diff --git a/wifi/Android.mk b/wifi/Android.mk
index b4a6a7c..7f06c51 100644
--- a/wifi/Android.mk
+++ b/wifi/Android.mk
@@ -6,6 +6,9 @@ LOCAL_CFLAGS += -DCONFIG_CTRL_IFACE_CLIENT_PREFIX=\"wpa_ctrl_\"
 ifdef WIFI_DRIVER_MODULE_PATH
 LOCAL_CFLAGS += -DWIFI_DRIVER_MODULE_PATH=\"$(WIFI_DRIVER_MODULE_PATH)\"
 endif
+ifdef WIFI_DRIVER_PROBE_PATH
+LOCAL_CFLAGS += -DWIFI_DRIVER_PROBE_PATH=\"$(WIFI_DRIVER_PROBE_PATH)\"
+endif
 ifdef WIFI_DRIVER_MODULE_ARG
 LOCAL_CFLAGS += -DWIFI_DRIVER_MODULE_ARG=\"$(WIFI_DRIVER_MODULE_ARG)\"
 endif
diff --git a/wifi/wifi.c b/wifi/wifi.c
index 30933fe..81b7b4f 100644
--- a/wifi/wifi.c
+++ b/wifi/wifi.c
@@ -28,6 +28,7 @@
 
 #define LOG_TAG "WifiHW"
 #include "cutils/log.h"
+#include "cutils/probe_module.h"
 #include "cutils/memory.h"
 #include "cutils/misc.h"
 #include "cutils/properties.h"
@@ -91,12 +92,40 @@ static char primary_iface[PROPERTY_VALUE_MAX];
 #define WIFI_DRIVER_LOADER_DELAY	1000000
 
 static const char IFACE_DIR[]           = "/data/system/wpa_supplicant";
+
+/* DRIVER_MODULE_PATH: path of wifi driver module for insmod
+ */
 #ifdef WIFI_DRIVER_MODULE_PATH
-static const char DRIVER_MODULE_NAME[]  = WIFI_DRIVER_MODULE_NAME;
-static const char DRIVER_MODULE_TAG[]   = WIFI_DRIVER_MODULE_NAME " ";
 static const char DRIVER_MODULE_PATH[]  = WIFI_DRIVER_MODULE_PATH;
+#else
+static const char DRIVER_MODULE_PATH[]  = "";
+#endif
+
+/* DRIVER_MODULE_NAME: the 'module name' of driver for checking and rmmod.
+ * If it is empty, only props will be changed as dummy stabs, even if
+ * module's path is provided.
+ */
+#ifdef WIFI_DRIVER_MODULE_NAME
+static const char DRIVER_MODULE_NAME[]  = WIFI_DRIVER_MODULE_NAME;
+#else
+static const char DRIVER_MODULE_NAME[]  = "";
+#endif
+
+/* DRIVER_PROBE_PATH: If it is provided, we will try to use probe_module()
+ * in libcutils to load and unload modules.
+ */
+#ifdef WIFI_DRIVER_PROBE_PATH
+static const char DRIVER_PROBE_PATH[]  = WIFI_DRIVER_PROBE_PATH;
+#else
+static const char DRIVER_PROBE_PATH[]  = "";
+#endif
+
+#ifdef WIFI_DRIVER_MODULE_ARG
 static const char DRIVER_MODULE_ARG[]   = WIFI_DRIVER_MODULE_ARG;
+#else
+static const char DRIVER_MODULE_ARG[]   = "";
 #endif
+
 static const char FIRMWARE_LOADER[]     = WIFI_FIRMWARE_LOADER;
 static const char DRIVER_PROP_NAME[]    = "wlan.driver.status";
 static const char SUPPLICANT_NAME[]     = "wpa_supplicant";
@@ -130,6 +159,37 @@ static int is_primary_interface(const char *ifname)
     return 0;
 }
 
+static inline int is_module_name_valid(const char module_name[])
+{
+    return strlen(module_name) != 0;
+}
+
+
+static int is_module_in_kernel(const char module_name[])
+{
+    FILE *proc;
+    char line[strlen(module_name)+2];
+
+    if (!strlen(module_name))
+        return 0;
+
+    if ((proc = fopen(MODULE_FILE, "r")) == NULL) {
+        ALOGE("Could not open %s: %s", MODULE_FILE, strerror(errno));
+        return 0;
+    }
+
+    while ((fgets(line, sizeof(line), proc)) != NULL) {
+        if (strstr(line, module_name) == line  // try to find a match at the beginning of a line
+                && line[strlen(module_name)] == ' ') {
+            fclose(proc);
+            return 1;
+        }
+    }
+
+    fclose(proc);
+    return 0;
+}
+
 static int insmod(const char *filename, const char *args)
 {
     void *module;
@@ -190,53 +250,71 @@ const char *get_dhcp_error_string() {
 
 int is_wifi_driver_loaded() {
     char driver_status[PROPERTY_VALUE_MAX];
-#ifdef WIFI_DRIVER_MODULE_PATH
-    FILE *proc;
-    char line[sizeof(DRIVER_MODULE_TAG)+10];
-#endif
 
-    if (!property_get(DRIVER_PROP_NAME, driver_status, NULL)
-            || strcmp(driver_status, "ok") != 0) {
-        return 0;  /* driver not loaded */
-    }
-#ifdef WIFI_DRIVER_MODULE_PATH
-    /*
-     * If the property says the driver is loaded, check to
-     * make sure that the property setting isn't just left
-     * over from a previous manual shutdown or a runtime
-     * crash.
-     */
-    if ((proc = fopen(MODULE_FILE, "r")) == NULL) {
-        ALOGW("Could not open %s: %s", MODULE_FILE, strerror(errno));
-        property_set(DRIVER_PROP_NAME, "unloaded");
-        return 0;
-    }
-    while ((fgets(line, sizeof(line), proc)) != NULL) {
-        if (strncmp(line, DRIVER_MODULE_TAG, strlen(DRIVER_MODULE_TAG)) == 0) {
-            fclose(proc);
+    // report by prop value if we have no a valid module name
+    if (!is_module_name_valid(DRIVER_MODULE_NAME)) {
+        if (!property_get(DRIVER_PROP_NAME, driver_status, NULL)
+                || strcmp(driver_status, "ok") != 0) {
+            return 0;
+        } else
+            return 1;
+    } else {
+        /*
+         * If the property says the driver is loaded, check to
+         * make sure that the property setting isn't just left
+         * over from a previous manual shutdown or a runtime
+         * crash.
+         */
+        if (is_module_in_kernel(DRIVER_MODULE_NAME))
             return 1;
+        else {
+            property_set(DRIVER_PROP_NAME, "unloaded");
+            return 0;
         }
     }
-    fclose(proc);
-    property_set(DRIVER_PROP_NAME, "unloaded");
-    return 0;
-#else
-    return 1;
-#endif
 }
 
 int wifi_load_driver()
 {
-#ifdef WIFI_DRIVER_MODULE_PATH
     char driver_status[PROPERTY_VALUE_MAX];
     int count = 100; /* wait at most 20 seconds for completion */
 
-    if (is_wifi_driver_loaded()) {
+    /* Just change props when MODULE_NAME is missed,
+     * we cannot check or remove module without name.
+     */
+
+    if (!is_module_name_valid(DRIVER_MODULE_NAME)) {
+        property_set(DRIVER_PROP_NAME, "ok");
         return 0;
     }
 
-    if (insmod(DRIVER_MODULE_PATH, DRIVER_MODULE_ARG) < 0)
+    if (is_wifi_driver_loaded())
+        return 0;
+
+    /* if we have a probe path, will try to probe modules in that path.
+     * Note: strip option is enabled and hardcoded here, this is for
+     * single layout of module directory on device.
+     */
+    if (strlen(DRIVER_PROBE_PATH)) {
+        if (insmod_by_dep(
+                DRIVER_MODULE_NAME,
+                DRIVER_MODULE_ARG,
+                NULL,
+                1,
+                DRIVER_PROBE_PATH)) {
+            ALOGE("insmod_by_dep %s with parameters %s failed\n", DRIVER_MODULE_NAME, DRIVER_MODULE_ARG);
+            return -1;
+        }
+    } else if (strlen(DRIVER_MODULE_PATH)) {    // Legacy insmod approach
+        if (insmod(DRIVER_MODULE_PATH, DRIVER_MODULE_ARG) < 0) {
+            ALOGE("insmod(%s, %s) failed\n", DRIVER_MODULE_PATH, DRIVER_MODULE_ARG);
+            return -1;
+        }
+    } else {
+        ALOGE("%s: Cannot figure out how to install wifi driver [%s].",
+                __FUNCTION__, DRIVER_MODULE_NAME);
         return -1;
+    }
 
     if (strcmp(FIRMWARE_LOADER,"") == 0) {
         /* usleep(WIFI_DRIVER_LOADER_DELAY); */
@@ -257,20 +335,33 @@ int wifi_load_driver()
         }
         usleep(200000);
     }
+
+    // timeout:
     property_set(DRIVER_PROP_NAME, "timeout");
     wifi_unload_driver();
     return -1;
-#else
-    property_set(DRIVER_PROP_NAME, "ok");
-    return 0;
-#endif
 }
 
 int wifi_unload_driver()
 {
     usleep(200000); /* allow to finish interface down */
-#ifdef WIFI_DRIVER_MODULE_PATH
-    if (rmmod(DRIVER_MODULE_NAME) == 0) {
+
+    if (!is_module_name_valid(DRIVER_MODULE_NAME)) {
+        property_set(DRIVER_PROP_NAME, "unloaded");
+        return 0;
+    }
+
+    if (!is_wifi_driver_loaded())
+        return 0;
+
+    /* if we have a probe path, we try to unload modules in dependency chain.
+     * We just use probe path to differentiate approaches even if it is not
+     * required to unload modules.
+     */
+    if (strlen(DRIVER_PROBE_PATH)) {
+        return rmmod_by_dep(DRIVER_MODULE_NAME, NULL) ? -1 : 0;
+        // no retry as legacy approach does
+    } else if (rmmod(DRIVER_MODULE_NAME) == 0) {    // Legacy rmmod approach
         int count = 20; /* wait at most 10 seconds for completion */
         while (count-- > 0) {
             if (!is_wifi_driver_loaded())
@@ -284,10 +375,6 @@ int wifi_unload_driver()
         return -1;
     } else
         return -1;
-#else
-    property_set(DRIVER_PROP_NAME, "unloaded");
-    return 0;
-#endif
 }
 
 int ensure_entropy_file_exists()
-- 
1.7.4.1

