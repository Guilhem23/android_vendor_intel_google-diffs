From 8ebd0d9b7a1509628b9e5495ad500b398e970df5 Mon Sep 17 00:00:00 2001
From: Daniel Leung <daniel.leung@intel.com>
Date: Fri, 12 Oct 2012 09:14:18 -0700
Subject: Consider stride when copying to framebuffer

Android's own GL implementation does not consider the actual line
length in the frame buffer. It makes an arbitrary assumption that
framebuffer has to be aligned on 4-byte boundary in gralloc, and
subsequent GL surface all uses this assumption. However, for
vesafb, it may align on 64-byte bounday (which makes the width of
screen multiples of 16). This causes skewed images on screen in
1366x768.

This patch changes the copying rountine to account for the per-row
padding in framebuffer. Although this is not the most ideal way
to deal with the problem. This does not require changing the whole
Android graphics stack, or making arbitrary assumptions in gralloc
for alignment boundaries.

Issue: AXIA-989
Change-Id: I3bda24e806a53157f84d58a6ffe51ef9db74eb82
Signed-off-by: Daniel Leung <daniel.leung@intel.com>
---
 modules/gralloc/framebuffer.cpp |   19 ++++++++++++++++++-
 1 files changed, 18 insertions(+), 1 deletions(-)

diff --git a/modules/gralloc/framebuffer.cpp b/modules/gralloc/framebuffer.cpp
index 326f2ae..d8e531a 100644
--- a/modules/gralloc/framebuffer.cpp
+++ b/modules/gralloc/framebuffer.cpp
@@ -121,7 +121,24 @@ static int fb_post(struct framebuffer_device_t* dev, buffer_handle_t buffer)
                 0, 0, m->info.xres, m->info.yres,
                 &buffer_vaddr);
 
-        memcpy(fb_vaddr, buffer_vaddr, m->finfo.line_length * m->info.yres);
+        int stride = m->finfo.line_length / (m->info.bits_per_pixel >> 3);
+
+        if (stride == m->info.xres) {
+            // there is no padding after a row, so do a straight copy
+            memcpy(fb_vaddr, buffer_vaddr, m->finfo.line_length * m->info.yres);
+        } else {
+            // need to copy row by row, because of padding
+            void* dst = fb_vaddr;
+            void* src = buffer_vaddr;
+            int i;
+
+            for (i = 0; i < m->info.yres; i++) {
+                memcpy(dst, src, m->finfo.line_length);
+
+                dst += m->finfo.line_length;
+                src += m->info.xres * 4;
+            }
+        }
         
         m->base.unlock(&m->base, buffer); 
         m->base.unlock(&m->base, m->framebuffer); 
-- 
1.7.4.1

