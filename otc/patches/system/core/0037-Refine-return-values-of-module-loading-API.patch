From 736b917a005b72b5db273f9fe141e979f5c715da Mon Sep 17 00:00:00 2001
From: Jianxun Zhang <jianxun.zhang@intel.com>
Date: Thu, 20 Dec 2012 08:34:06 -0800
Subject: Refine return values of module loading API

() Give caller more meaningful return values from insmod_by_dep()

() Refine ueventd logic. Queue defer modules only when dep,black
list or alias file is not ready (assuming that means FS is not ready)

() parsing alias is still done by ueventd, and we changed some
accordingly for the return values. Further patches will move parsing
alias into libcutils.

For: AXIA-653
Change-Id: Id5253c0be64f7c111095ae7df8eb5aadae447ed5
Depends-Change-Id: Ifaec8e535f6647912f76256c7f77aef450c66949
Depends-Change-Id: I4dc060b3dc540284d8063826b221717902094f91
Signed-off-by: Jianxun Zhang <jianxun.zhang@intel.com>
---
 include/cutils/probe_module.h |   29 ++++++++++++++++++++---------
 init/devices.c                |   21 +++++++++++++++------
 libcutils/probe_module.c      |   30 ++++++++++++++++++++++++------
 3 files changed, 59 insertions(+), 21 deletions(-)

diff --git a/include/cutils/probe_module.h b/include/cutils/probe_module.h
index 834e094..a739a3d 100644
--- a/include/cutils/probe_module.h
+++ b/include/cutils/probe_module.h
@@ -21,6 +21,17 @@
 extern "C" {
 #endif
 
+#define MOD_NO_ERR                  (0)         /* The operation is successful. */
+#define MOD_UNKNOWN                 (1 << 0)    /* unknown errors */
+#define MOD_IN_BLACK                (1 << 1)    /* A module is in base black list. */
+#define MOD_IN_CALLER_BLACK         (1 << 2)    /* A module is in caller's black list. */
+#define MOD_BAD_DEP                 (1 << 3)    /* Invalid module dependency file or it's parsing failed. */
+#define MOD_BAD_ALIAS               (1 << 4)    /* Invalid module alias file or it's parsing failed. */
+#define MOD_DEP_NOT_FOUND           (1 << 5)    /* Cannot find module's dependency chain */
+#define MOD_INVALID_CALLER_BLACK    (1 << 6)    /* Caller provides invalid black list or it's parsing failed. */
+#define MOD_INVALID_NAME            (1 << 7)    /* The module's name or alias is invalid */
+
+
 /* insmod_by_dep() - load a kernel module (target) with its dependency
  * The module's dependency must be described in the provided dependency file.
  * other modules in the dependency chain will be loaded prior to the target.
@@ -49,18 +60,18 @@ extern "C" {
  *              /system/lib/modules/modules.dep by default.
  *
  * blacklist  : A file of modules you don't want to loaded. It is optional.
- *              If the file name is provided, modules in it will be parsed
- *              and appended to the system's module black list which is from
- *              the base /etc/modules.blacklist. The base black list will
- *              always be appiled in insmod_by_dep(). This parameter provides
- *              a chance to callers to prevent more modules in a one-shot
- *              style. The typical format of a module in the black list file
- *              is like the below. Note, specify module's name instead of alias.
+ *              If a valid file is provided, modules in it will be parsed
+ *              and used along with the base module black list in insmod.c to
+ *              scan the dependency chain BEFORE any actual module loading.
+ *              The black list will always be applied in insmod_by_dep().
+ *              The typical format of a module in the black list file is shown
+ *              at below. Note, specify module's name instead of alias.
  *
  *              blacklist your_module_name
  *
- * return     : 0 for success; non-zero for any errors.
- *
+ * return     : 0 (MOD_NO_ERR) for success;
+ *              >0 refer to defined error macros in this file.
+ *              <0 errors returned from lower levels.
  * Note:
  * When loading modules, function will not fail for any modules which are
  * already in kernel. The module parameters passed to function will not be
diff --git a/init/devices.c b/init/devices.c
index c3e8857..92f134a 100644
--- a/init/devices.c
+++ b/init/devices.c
@@ -678,7 +678,7 @@ static int load_module_by_device_modalias(const char *id)
 {
     struct listnode *alias_node;
     struct module_alias_node *alias;
-    int ret = -1;
+    int ret = MOD_DEP_NOT_FOUND;
 
     if (!id) goto out;
 
@@ -688,7 +688,8 @@ static int load_module_by_device_modalias(const char *id)
         if (alias && alias->name && alias->pattern) {
             if (fnmatch(alias->pattern, id, 0) == 0) {
                 INFO("trying to load module %s due to uevents\n", alias->name);
-                if (insmod_by_dep(alias->name, "", NULL, 1, NULL, MODULES_BLKLST)) {
+                ret = insmod_by_dep(alias->name, "", NULL, 1, NULL, MODULES_BLKLST);
+                if (ret != MOD_NO_ERR) {
                     /* cannot load module. try another one since
                      * there may be another match.
                      */
@@ -714,6 +715,7 @@ static void handle_deferred_module_loading()
     struct listnode *node = NULL;
     struct listnode *next = NULL;
     struct module_alias_node *alias = NULL;
+    int ret = -1;
 
     /* try to read the module alias mapping if map is empty
      * if succeed, loading all the modules in the queue
@@ -724,10 +726,14 @@ static void handle_deferred_module_loading()
 
             if (alias && alias->pattern) {
                 INFO("deferred loading of module for %s\n", alias->pattern);
-                load_module_by_device_modalias(alias->pattern);
-                free(alias->pattern);
-                list_remove(node);
-                free(alias);
+                ret = load_module_by_device_modalias(alias->pattern);
+                /* if it looks like file system where these files are is not
+                 * ready, keep the module in defer list for retry. */
+                if (!(ret & (MOD_BAD_DEP | MOD_INVALID_CALLER_BLACK | MOD_BAD_ALIAS))) {
+                    free(alias->pattern);
+                    list_remove(node);
+                    free(alias);
+                }
             }
         }
     }
@@ -776,6 +782,9 @@ static void handle_module_loading(const char *modalias)
             ERROR("failed to allocate memory to store device id for deferred module loading.\n");
         }
     } else {
+        /* TODO: we don't check ret here because we have checked if alias list is ready.
+         * so the black list and dep file should be ready too on FS, this logic will be
+         * refined in further patches with the change of alias parsing. */
         load_module_by_device_modalias(modalias);
     }
 
diff --git a/libcutils/probe_module.c b/libcutils/probe_module.c
index 1758b12..874e2fc 100644
--- a/libcutils/probe_module.c
+++ b/libcutils/probe_module.c
@@ -23,6 +23,7 @@
 #include <cutils/misc.h>
 #include <cutils/list.h>
 #include <cutils/module_parsers.h>
+#include <cutils/probe_module.h>
 
 #define LOG_TAG "ProbeModule"
 #include <cutils/log.h>
@@ -432,7 +433,6 @@ static void dump_black_list(struct listnode *black_list_head)
                                  list);
 
             ALOGE("DUMP BLACK: [%s]\n", blacklist->name);
-
     }
 }
 /* insmod_by_dep() interface to outside,
@@ -447,15 +447,17 @@ int insmod_by_dep(const char *module_name,
 {
     void *dep_file = NULL;
     char **dep = NULL;
-    int ret = -1;
+    int ret = MOD_UNKNOWN;
     list_declare(base_blacklist);
     list_declare(extra_blacklist);
 
     if (!module_name || *module_name == '\0') {
         ALOGE("need valid module name\n");
-        return ret;
+        return MOD_INVALID_NAME;
     }
 
+    /* We allow no base blacklist. */
+    /* TODO: tell different cases between no caller black list and parsing failures. */
     ret = parse_blacklist_to_list("/system/etc/modules.blacklist", &base_blacklist);
 
     if (ret)
@@ -466,8 +468,10 @@ int insmod_by_dep(const char *module_name,
         if (ret) {
             ALOGI("%s: parse extra black list error %d\n", __FUNCTION__, ret);
 
-            /* Extra black list from caller is optional, but when caller does
-             * give us an extra file and something's wrong with it, we will stop going further*/
+            /* A black list from caller is optional, but when caller does
+             * give us a file and something's wrong with it, we will stop going further*/
+            ret = MOD_INVALID_CALLER_BLACK;
+
             goto free_file;
         }
     }
@@ -475,6 +479,8 @@ int insmod_by_dep(const char *module_name,
 
     if (!dep_file) {
         ALOGE("cannot load dep file : %s\n", dep_name);
+        ret = MOD_BAD_DEP;
+
         goto free_file;
     }
 
@@ -482,16 +488,22 @@ int insmod_by_dep(const char *module_name,
 
     if (!dep) {
         ALOGE("%s: cannot find module's dependency info: [%s]\n", __FUNCTION__, module_name);
+        ret = MOD_DEP_NOT_FOUND;
+
         goto free_file;
     }
 
     if (is_dep_in_blacklist(dep, &extra_blacklist)) {
         ALOGE("%s: a module is in caller's black list, stop further loading\n", __FUNCTION__);
+        ret = MOD_IN_CALLER_BLACK;
+
         goto free_file;
     }
 
     if (is_dep_in_blacklist(dep, &base_blacklist)) {
         ALOGE("%s: a module is in system black list, stop further loading\n", __FUNCTION__);
+        ret = MOD_IN_BLACK;
+
         goto free_file;
     }
 
@@ -514,10 +526,12 @@ int rmmod_by_dep(const char *module_name,
 {
     void *dep_file;
     char **dep = NULL;
-    int ret = -1;
+    int ret = MOD_UNKNOWN;
 
     if (!module_name || *module_name == '\0') {
         ALOGE("need valid module name\n");
+        ret = MOD_INVALID_NAME;
+
         return ret;
     }
 
@@ -525,6 +539,8 @@ int rmmod_by_dep(const char *module_name,
 
     if (!dep_file) {
         ALOGE("cannot load dep file : %s\n", dep_name);
+        ret = MOD_BAD_DEP;
+
         return ret;
     }
 
@@ -532,6 +548,8 @@ int rmmod_by_dep(const char *module_name,
 
     if (!dep) {
         ALOGE("%s: cannot remove module: [%s]\n", __FUNCTION__, module_name);
+        ret = MOD_DEP_NOT_FOUND;
+
         goto free_file;
     }
 
-- 
1.7.4.1

