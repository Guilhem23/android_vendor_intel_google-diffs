From 411f57a5c459bdd15a3d8d617dc3f0ac62c020b0 Mon Sep 17 00:00:00 2001
From: Andrew Boie <andrew.p.boie@intel.com>
Date: Fri, 12 Oct 2012 15:23:40 -0700
Subject: init: Add 'readprops' command

This reads the contents of a text file and sets system properties
based on its contents.

Change-Id: Ic03de7ee9afb8a12439d0dff343560011e152beb
For: AXIA-102
Signed-off-by: Andrew Boie <andrew.p.boie@intel.com>
---
 init/builtins.c         |    9 +++++++++
 init/init_parser.c      |    1 +
 init/keywords.h         |    2 ++
 init/property_service.c |   11 +++++++----
 init/property_service.h |    1 +
 init/readme.txt         |    4 ++++
 6 files changed, 24 insertions(+), 4 deletions(-)

diff --git a/init/builtins.c b/init/builtins.c
index 7a9339c..08b33c7 100644
--- a/init/builtins.c
+++ b/init/builtins.c
@@ -975,3 +975,12 @@ int do_wait(int nargs, char **args)
     } else
         return -1;
 }
+
+int do_readprops(int nargs, char **args)
+{
+    if (nargs == 2) {
+        return load_properties_from_file(args[1]);
+    }
+    return -1;
+}
+
diff --git a/init/init_parser.c b/init/init_parser.c
index cca692d..0bd5947 100644
--- a/init/init_parser.c
+++ b/init/init_parser.c
@@ -137,6 +137,7 @@ int lookup_keyword(const char *s)
         if (!strcmp(s, "robemod")) return K_probemod;
         break;
     case 'r':
+        if (!strcmp(s, "eadprops")) return K_readprops;
         if (!strcmp(s, "estart")) return K_restart;
         if (!strcmp(s, "estorecon")) return K_restorecon;
         if (!strcmp(s, "mdir")) return K_rmdir;
diff --git a/init/keywords.h b/init/keywords.h
index 51abcc5..ad4a280 100644
--- a/init/keywords.h
+++ b/init/keywords.h
@@ -38,6 +38,7 @@ int do_chmod(int nargs, char **args);
 int do_loglevel(int nargs, char **args);
 int do_load_persist_props(int nargs, char **args);
 int do_wait(int nargs, char **args);
+int do_readprops(int nargs, char **args);
 #define __MAKE_KEYWORD_ENUM__
 #define KEYWORD(symbol, flags, nargs, func) K_##symbol,
 enum {
@@ -69,6 +70,7 @@ enum {
     KEYWORD(oneshot,     OPTION,  0, 0)
     KEYWORD(onrestart,   OPTION,  0, 0)
     KEYWORD(probemod,    COMMAND, 1, do_probemod)
+    KEYWORD(readprops,   COMMAND, 1, do_readprops)
     KEYWORD(restart,     COMMAND, 1, do_restart)
     KEYWORD(restorecon,  COMMAND, 1, do_restorecon)
     KEYWORD(rm,          COMMAND, 1, do_rm)
diff --git a/init/property_service.c b/init/property_service.c
index e9cf1bb..eb34d71 100755
--- a/init/property_service.c
+++ b/init/property_service.c
@@ -502,17 +502,20 @@ static void load_properties(char *data)
     }
 }
 
-static void load_properties_from_file(const char *fn)
+int load_properties_from_file(const char *fn)
 {
     char *data;
     unsigned sz;
 
     data = read_file(fn, &sz);
 
-    if(data != 0) {
-        load_properties(data);
-        free(data);
+    if(data == NULL) {
+        ERROR("Unable to read property file '%s'\n", fn);
+        return -1;
     }
+    load_properties(data);
+    free(data);
+    return 0;
 }
 
 static void load_persistent_properties()
diff --git a/init/property_service.h b/init/property_service.h
index b9d1bf6..4b1b624 100644
--- a/init/property_service.h
+++ b/init/property_service.h
@@ -22,6 +22,7 @@
 extern void handle_property_set_fd(void);
 extern void property_init(void);
 extern void property_load_boot_defaults(void);
+extern int load_properties_from_file(const char *fn);
 extern void load_persist_props(void);
 extern void start_property_service(void);
 void get_property_workspace(int *fd, int *sz);
diff --git a/init/readme.txt b/init/readme.txt
index 7a5997d..2174605 100644
--- a/init/readme.txt
+++ b/init/readme.txt
@@ -204,6 +204,10 @@ setenforce 0|1
    Set the SELinux system-wide enforcing status.
    0 is permissive (i.e. log but do not deny), 1 is enforcing.
 
+readprops <path>
+   Read and set system properties based on the contents of a text file
+   at <path>
+
 setkey
    TBD
 
-- 
1.7.4.1

