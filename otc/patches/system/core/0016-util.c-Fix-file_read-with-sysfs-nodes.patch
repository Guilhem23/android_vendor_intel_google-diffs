From 42d8bbbabe54dc2340accad45e02cdfd1f2f484b Mon Sep 17 00:00:00 2001
From: Andrew Boie <andrew.p.boie@intel.com>
Date: Tue, 29 Nov 2011 12:45:58 -0800
Subject: util.c: Fix file_read() with sysfs nodes

Sysfs nodes always report a file size of 4096 regardless of how much
data can be read. Hence don't fail if read() can't get the full size;
specifically look for errors or 0 (which is EOF).

Change-Id: Ief1ffbe08ac5e4daa80805713efa4f2af0a1a33e
---
 init/util.c |   28 ++++++++++++++++++++++------
 1 files changed, 22 insertions(+), 6 deletions(-)

diff --git a/init/util.c b/init/util.c
index 918bc05..d06f63f 100755
--- a/init/util.c
+++ b/init/util.c
@@ -140,10 +140,13 @@ out_close:
 /* reads a file, making sure it is terminated with \n \0 */
 void *read_file(const char *fn, unsigned *_sz)
 {
-    char *data;
+    unsigned char *data;
     int sz;
     int fd;
     struct stat sb;
+    unsigned cur_sz;
+    unsigned char* cur_data;
+    ssize_t bytes_read;
 
     data = 0;
     fd = open(fn, O_RDONLY);
@@ -165,14 +168,27 @@ void *read_file(const char *fn, unsigned *_sz)
 
     if(lseek(fd, 0, SEEK_SET) != 0) goto oops;
 
-    data = (char*) malloc(sz + 2);
+    data = (unsigned char*) malloc(sz + 2);
     if(data == 0) goto oops;
 
-    if(read(fd, data, sz) != sz) goto oops;
+    cur_sz = sz;
+    cur_data = data;
+    while (cur_sz) {
+        bytes_read = read(fd, cur_data, sz);
+        if (bytes_read == 0) {
+            /* EOF, can happen before file size on sysfs nodes */
+            break;
+        }
+        if (bytes_read < 0)
+            goto oops;
+        cur_sz -= bytes_read;
+        cur_data += bytes_read;
+    }
     close(fd);
-    data[sz] = '\n';
-    data[sz+1] = 0;
-    if(_sz) *_sz = sz;
+    cur_data[0] = '\n';
+    cur_data[1] = 0;
+
+    if(_sz) *_sz = cur_data - data;
     return data;
 
 oops:
-- 
1.7.4.1

