From 56ed3981c26000fb42b0de6a4210fdf7d5fc2a91 Mon Sep 17 00:00:00 2001
From: Jianxun Zhang <jianxun.zhang@intel.com>
Date: Wed, 19 Dec 2012 10:37:15 -0800
Subject: Copy parser for black list and alias to libcutils

This is the first part to refine module loading implementation.
This patch copy the existing logic of module parser from init
to libcutils with modifications.

Parser logic by AOSP in init is also copied because our module
parser relies on it.

The original author of module parser in init is:
Daniel Leung <daniel.leung@intel.com>

The further plan is:
() remove existing module parser from init with moving black list
and alias to libcutils.

() module parser in libcutils will work as the back end of whole
module loading stuff, parsing alias, black list and dependency.

For: AXIA-653
Change-Id: If0c3e9b118d45bda389c6d16d80c5ecde0e6ccf3
Signed-off-by: Jianxun Zhang <jianxun.zhang@intel.com>
---
 include/cutils/module_parsers.h |   39 ++++
 libcutils/Android.mk            |    1 +
 libcutils/module_parsers.c      |  369 +++++++++++++++++++++++++++++++++++++++
 3 files changed, 409 insertions(+), 0 deletions(-)
 create mode 100644 include/cutils/module_parsers.h
 create mode 100644 libcutils/module_parsers.c

diff --git a/include/cutils/module_parsers.h b/include/cutils/module_parsers.h
new file mode 100644
index 0000000..db14dfb
--- /dev/null
+++ b/include/cutils/module_parsers.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/* parsers for module alias and blacklists */
+
+#include <cutils/list.h>
+
+#define READ_MODULES_ALIAS  1
+#define READ_MODULES_BLKLST 2
+
+struct module_alias_node {
+    char *name;
+    char *pattern;
+    struct listnode list;
+};
+
+struct module_blacklist_node {
+    char *name;
+    struct listnode list;
+};
+
+int is_module_blacklisted(const char *name, struct listnode *black_list);
+int parse_alias_to_list(const char *file_name, struct listnode *head);
+int parse_blacklist_to_list(const char *file_name, struct listnode *head);
+void free_alias_list(struct listnode *head);
+void free_black_list(struct listnode *head);
diff --git a/libcutils/Android.mk b/libcutils/Android.mk
index 8fee9dd..940ff57 100644
--- a/libcutils/Android.mk
+++ b/libcutils/Android.mk
@@ -52,6 +52,7 @@ commonSources := \
 	iosched_policy.c \
 	probe_module.c \
 	str_parms.c \
+	module_parsers.c \
 
 commonHostSources := \
         ashmem-host.c
diff --git a/libcutils/module_parsers.c b/libcutils/module_parsers.c
new file mode 100644
index 0000000..5371146
--- /dev/null
+++ b/libcutils/module_parsers.c
@@ -0,0 +1,369 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/* parsers for module alias and blacklists */
+
+#define _GNU_SOURCE 1
+
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <string.h>
+#include <cutils/list.h>
+#include <stdlib.h>
+#include <cutils/log.h>
+#include <cutils/misc.h>
+#include <cutils/module_parsers.h>
+
+#define READ_MODULES_ALIAS  1
+#define READ_MODULES_BLKLST 2
+
+/* These macros, parse_state and next_token are copied
+ * from parser in init with modifications.
+ */
+#define T_EOF 0
+#define T_TEXT 1
+#define T_NEWLINE 2
+
+struct parse_state
+{
+    char *ptr;
+    char *text;
+    int line;
+    int nexttoken;
+    void *context;
+    void (*parse_line)(struct parse_state *state, int nargs, char **args, struct listnode *head);
+    const char *filename;
+    void *priv;
+};
+
+int next_token(struct parse_state *state)
+{
+    char *x = state->ptr;
+    char *s;
+
+    if (state->nexttoken) {
+        int t = state->nexttoken;
+        state->nexttoken = 0;
+        return t;
+    }
+
+    for (;;) {
+        switch (*x) {
+        case 0:
+            state->ptr = x;
+            return T_EOF;
+        case '\n':
+            x++;
+            state->ptr = x;
+            return T_NEWLINE;
+        case ' ':
+        case '\t':
+        case '\r':
+            x++;
+            continue;
+        case '#':
+            while (*x && (*x != '\n')) x++;
+            if (*x == '\n') {
+                state->ptr = x+1;
+                return T_NEWLINE;
+            } else {
+                state->ptr = x;
+                return T_EOF;
+            }
+        default:
+            goto text;
+        }
+    }
+
+textdone:
+    state->ptr = x;
+    *s = 0;
+    return T_TEXT;
+text:
+    state->text = s = x;
+textresume:
+    for (;;) {
+        switch (*x) {
+        case 0:
+            goto textdone;
+        case ' ':
+        case '\t':
+        case '\r':
+            x++;
+            goto textdone;
+        case '\n':
+            state->nexttoken = T_NEWLINE;
+            x++;
+            goto textdone;
+        case '"':
+            x++;
+            for (;;) {
+                switch (*x) {
+                case 0:
+                        /* unterminated quoted thing */
+                    state->ptr = x;
+                    return T_EOF;
+                case '"':
+                    x++;
+                    goto textresume;
+                default:
+                    *s++ = *x++;
+                }
+            }
+            break;
+        case '\\':
+            x++;
+            switch (*x) {
+            case 0:
+                goto textdone;
+            case 'n':
+                *s++ = '\n';
+                break;
+            case 'r':
+                *s++ = '\r';
+                break;
+            case 't':
+                *s++ = '\t';
+                break;
+            case '\\':
+                *s++ = '\\';
+                break;
+            case '\r':
+                    /* \ <cr> <lf> -> line continuation */
+                if (x[1] != '\n') {
+                    x++;
+                    continue;
+                }
+            case '\n':
+                    /* \ <lf> -> line continuation */
+                state->line++;
+                x++;
+                    /* eat any extra whitespace */
+                while((*x == ' ') || (*x == '\t')) x++;
+                continue;
+            default:
+                    /* unknown escape -- just copy */
+                *s++ = *x++;
+            }
+            continue;
+        default:
+            *s++ = *x++;
+        }
+    }
+    return T_EOF;
+}
+
+void free_alias_list(struct listnode *head)
+{
+    struct listnode *node = NULL;
+    struct listnode *next = NULL;
+    struct module_alias_node *alias = NULL;
+
+    list_for_each_safe(node, next, head)
+    {
+        alias = node_to_item(node, struct module_alias_node, list);
+        if (alias) {
+            ALOGI("free alias name [%s] pattern [%s]\n", alias->name, alias->pattern);
+            free(alias->pattern);
+            free(alias->name);
+            list_remove(node);
+            free(alias);
+        }
+    }
+}
+
+void free_black_list(struct listnode *head)
+{
+    struct listnode *node = NULL;
+    struct listnode *next = NULL;
+    struct module_blacklist_node *black = NULL;
+
+    list_for_each_safe(node, next, head)
+    {
+        black = node_to_item(node, struct module_blacklist_node, list);
+        if (black) {
+            ALOGI("free black list name [%s]\n", black->name);
+            free(black->name);
+            list_remove(node);
+            free(black);
+        }
+    }
+}
+
+
+int is_module_blacklisted(const char *name, struct listnode *black_list_head)
+{
+    struct listnode *blklst_node;
+    struct module_blacklist_node *blacklist;
+    int ret = 0;
+
+    if (!name) goto out;
+
+    /* See if module is blacklisted, skip if it is */
+    list_for_each(blklst_node, black_list_head) {
+        blacklist = node_to_item(blklst_node,
+                                 struct module_blacklist_node,
+                                 list);
+        if (!strcmp(name, blacklist->name)) {
+            ALOGI("modules %s is blacklisted\n", name);
+            ret = 1;
+            goto out;
+        }
+    }
+
+out:
+    return ret;
+}
+
+static void parse_line_module_blacklist(struct parse_state *state, int nargs, char **args, struct listnode *head)
+{
+    struct module_blacklist_node *node;
+
+    if (!args ||
+        (nargs != 2) ||
+        !args[0] || !args[1]) {
+        /* empty line or not enough arguments */
+        return;
+    }
+
+    /* this line does not begin with "blacklist" */
+    if (strncmp(args[0], "blacklist", 9)) return;
+
+    node = calloc(1, sizeof(*node));
+    if (!node) return;
+
+    node->name = strdup(args[1]);
+    if (!node->name) {
+        free(node);
+        return;
+    }
+    /* caller must get mutex first. */
+    list_add_tail(head, &node->list);
+}
+
+static void parse_line_module_alias(struct parse_state *state, int nargs, char **args, struct listnode *head)
+{
+    struct module_alias_node *node;
+
+    if (!args ||
+        (nargs != 3) ||
+        !args[0] || !args[1] || !args[2]) {
+        /* empty line or not enough arguments */
+        return;
+    }
+
+    node = calloc(1, sizeof(*node));
+    if (!node) return;
+
+    node->name = strdup(args[2]);
+    if (!node->name) {
+        free(node);
+        return;
+    }
+
+    node->pattern = strdup(args[1]);
+    if (!node->pattern) {
+        free(node->name);
+        free(node);
+        return;
+    }
+    /* Caller must get mutex first. */
+    list_add_tail(head, &node->list);
+}
+
+int module_parser(const char *file_name, int mode, struct listnode *head)
+{
+    struct parse_state state;
+    char *args[3];
+    int nargs;
+    char *data = NULL;
+    char *fn;
+    int ret = -1;
+    int args_to_read = 0;
+
+    if (mode == READ_MODULES_ALIAS) {
+        /* read modules.alias */
+        if (asprintf(&fn, "%s", file_name) <= 0) {
+            goto out;
+        }
+    } else if (mode == READ_MODULES_BLKLST) {
+        /* read modules.blacklist */
+        if (asprintf(&fn, "%s", file_name) <= 0) {
+            goto out;
+        }
+    } else {
+        /* unknown mode */
+        return ret;
+    }
+
+    /* read the whole file */
+    data = load_file(fn, 0);
+    if (!data) {
+        goto out;
+    }
+
+    /* invoke tokenizer */
+    nargs = 0;
+    state.filename = fn;
+    state.line = 1;
+    state.ptr = data;
+    state.nexttoken = 0;
+    if (mode == READ_MODULES_ALIAS) {
+        state.parse_line = parse_line_module_alias;
+        args_to_read = 3;
+    } else if (mode == READ_MODULES_BLKLST) {
+        state.parse_line = parse_line_module_blacklist;
+        args_to_read = 2;
+    }
+    for (;;) {
+        int token = next_token(&state);
+        switch (token) {
+        case T_EOF:
+            state.parse_line(&state, 0, 0, head);
+            ret = 0;
+            goto out;
+        case T_NEWLINE:
+            if (nargs) {
+                state.parse_line(&state, nargs, args, head);
+                nargs = 0;
+            }
+            break;
+        case T_TEXT:
+            if (nargs < args_to_read) {
+                args[nargs++] = state.text;
+            }
+            break;
+        }
+    }
+    ret = 0;
+
+out:
+
+    free(data);
+    return ret;
+}
+
+int parse_alias_to_list(const char *file_name, struct listnode *head)
+{
+    return module_parser(file_name, READ_MODULES_ALIAS, head);
+}
+
+int parse_blacklist_to_list(const char *file_name, struct listnode *head)
+{
+    return module_parser(file_name, READ_MODULES_BLKLST, head);
+}
-- 
1.7.4.1

