From 5f76043de92cabf09fe0563ee750dd65acf5efa2 Mon Sep 17 00:00:00 2001
From: Ken Lierman <ken.lierman@windriver.com>
Date: Wed, 1 May 2013 10:36:45 -0700
Subject: cleanup ADB's debug output

The server was using stderr to talk back to the client to ACK it
starting correctly, which made the debug output from the server get
lost (before it later gets redirected to a file).  Change it to stdout
and add a fflush() to force the output.

Add the pid to the output so you can tell which process the output is
coming from.

Add basename to the __FILE__ part of the output to remove the unnecessary
and redundant system/core/adb path info from every output line.

Remove the duplicated fdevents debug output macro so it gets redirected
into the server log file like it should.

Change-Id: I8eaf3c8ccbca62f907b0ee7b52a0e179db5ff82d
---
 adb/adb.c     |    9 +++++----
 adb/adb.h     |    8 ++++++--
 adb/fdevent.c |   25 +++++++------------------
 3 files changed, 18 insertions(+), 24 deletions(-)

diff --git a/adb/adb.c b/adb/adb.c
index d2a2d27..8d51eb4 100644
--- a/adb/adb.c
+++ b/adb/adb.c
@@ -106,6 +106,7 @@ void  adb_trace_init(void)
         { "jdwp", TRACE_JDWP },
         { "services", TRACE_SERVICES },
         { "auth", TRACE_AUTH },
+        { "fdevents", TRACE_FDEVENT },
         { NULL, 0 }
     };
 
@@ -1132,10 +1133,9 @@ int launch_server(int server_port)
     if (pid == 0) {
         // child side of the fork
 
-        // redirect stderr to the pipe
-        // we use stderr instead of stdout due to stdout's buffering behavior.
+        // redirect stdout to the pipe
         adb_close(fd[0]);
-        dup2(fd[1], STDERR_FILENO);
+        dup2(fd[1], STDOUT_FILENO);
         adb_close(fd[1]);
 
         char str_port[30];
@@ -1387,7 +1387,8 @@ int adb_main(int is_daemon, int server_port)
         DWORD  count;
         WriteFile( GetStdHandle( STD_OUTPUT_HANDLE ), "OK\n", 3, &count, NULL );
 #elif defined(HAVE_FORKEXEC)
-        fprintf(stderr, "OK\n");
+        fprintf(stdout, "OK\n");
+        fflush(stdout);
 #endif
         start_logging();
     }
diff --git a/adb/adb.h b/adb/adb.h
index a01d460..36e3645 100644
--- a/adb/adb.h
+++ b/adb/adb.h
@@ -18,6 +18,7 @@
 #define __ADB_H
 
 #include <limits.h>
+#include <libgen.h>
 
 #include "transport.h"  /* readx(), writex() */
 
@@ -359,6 +360,7 @@ typedef enum {
     TRACE_JDWP,      /* 0x100 */
     TRACE_SERVICES,
     TRACE_AUTH,
+    TRACE_FDEVENT,
 } AdbTrace;
 
 #if ADB_TRACE
@@ -390,8 +392,10 @@ void adb_qemu_trace(const char* fmt, ...);
             if (ADB_TRACING) {                         \
                 int save_errno = errno;                \
                 adb_mutex_lock(&D_lock);               \
-                fprintf(stderr, "%s::%s():",           \
-                        __FILE__, __FUNCTION__);       \
+                fprintf(stderr, "%d::%s::%s():",       \
+                        getpid(),                      \
+                        basename(__FILE__),            \
+                        __FUNCTION__);                 \
                 errno = save_errno;                    \
                 fprintf(stderr, __VA_ARGS__ );         \
                 fflush(stderr);                        \
diff --git a/adb/fdevent.c b/adb/fdevent.c
index 5c374a7..5a36407 100644
--- a/adb/fdevent.c
+++ b/adb/fdevent.c
@@ -28,23 +28,22 @@
 #include <stdarg.h>
 #include <stddef.h>
 
+#define  TRACE_TAG   TRACE_FDEVENT
+
 #include "fdevent.h"
 #include "transport.h"
 #include "sysdeps.h"
+#include "adb.h"
 
 
-/* !!! Do not enable DEBUG for the adb that will run as the server:
-** both stdout and stderr are used to communicate between the client
-** and server. Any extra output will cause failures.
-*/
-#define DEBUG 0   /* non-0 will break adb server */
+#define DEBUG 0
 
 // This socket is used when a subproc shell service exists.
 // It wakes up the fdevent_loop() and cause the correct handling
 // of the shell's pseudo-tty master. I.e. force close it.
 int SHELL_EXIT_NOTIFY_FD = -1;
 
-static void fatal(const char *fn, const char *fmt, ...)
+static void ffatal(const char *fn, const char *fmt, ...)
 {
     va_list ap;
     va_start(ap, fmt);
@@ -54,19 +53,10 @@ static void fatal(const char *fn, const char *fmt, ...)
     abort();
 }
 
-#define FATAL(x...) fatal(__FUNCTION__, x)
+
+#define FATAL(x...) ffatal(__FUNCTION__, x)
 
 #if DEBUG
-#define D(...) \
-    do { \
-        adb_mutex_lock(&D_lock);               \
-        int save_errno = errno;                \
-        fprintf(stderr, "%s::%s():", __FILE__, __FUNCTION__);  \
-        errno = save_errno;                    \
-        fprintf(stderr, __VA_ARGS__);          \
-        adb_mutex_unlock(&D_lock);             \
-        errno = save_errno;                    \
-    } while(0)
 static void dump_fde(fdevent *fde, const char *info)
 {
     adb_mutex_lock(&D_lock);
@@ -78,7 +68,6 @@ static void dump_fde(fdevent *fde, const char *info)
     adb_mutex_unlock(&D_lock);
 }
 #else
-#define D(...) ((void)0)
 #define dump_fde(fde, info) do { } while(0)
 #endif
 
-- 
1.7.4.1

