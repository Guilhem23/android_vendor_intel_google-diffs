From 8be20f47875dee28556ce5bc2061b78891a6cf2d Mon Sep 17 00:00:00 2001
From: Yong Yao <yong.yao@intel.com>
Date: Sun, 16 Jun 2013 20:24:32 +0800
Subject: Temp fix for pthread and linker

Change-Id: I6aebf9c5dc3741445d17750678ce25fe45129f82
Signed-off-by: Yong Yao <yong.yao@intel.com>
---
 libc/bionic/pthread_debug.cpp |   16 ++++++++--------
 linker/Android.mk             |    2 +-
 2 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/libc/bionic/pthread_debug.cpp b/libc/bionic/pthread_debug.cpp
index 94c23de..fd75809 100644
--- a/libc/bionic/pthread_debug.cpp
+++ b/libc/bionic/pthread_debug.cpp
@@ -366,14 +366,14 @@ static int traverseTree(MutexInfo* obj, MutexInfo const* objParent)
         /* Turn off prediction temporarily in this thread while logging */
         sPthreadDebugDisabledThread = gettid();
 
-        backtrace_startup();
+        //backtrace_startup();
 
         LOGW("%s\n", kStartBanner);
         LOGW("pid: %d, tid: %d >>> %s <<<", getpid(), gettid(), __progname);
         LOGW("Illegal lock attempt:\n");
         LOGW("--- pthread_mutex_t at %p\n", obj->mutex);
-        stackDepth = get_backtrace(addrs, STACK_TRACE_DEPTH);
-        log_backtrace(addrs, stackDepth);
+        //stackDepth = get_backtrace(addrs, STACK_TRACE_DEPTH);
+        //log_backtrace(addrs, stackDepth);
 
         LOGW("+++ Currently held locks in this thread (in reverse order):");
         MutexInfo* cur = obj;
@@ -384,7 +384,7 @@ static int traverseTree(MutexInfo* obj, MutexInfo const* objParent)
             if (parent->owner == ourtid) {
                 LOGW("--- pthread_mutex_t at %p\n", parent->mutex);
                 if (sPthreadDebugLevel >= CAPTURE_CALLSTACK) {
-                    log_backtrace(parent->stackTrace, parent->stackDepth);
+                    //log_backtrace(parent->stackTrace, parent->stackDepth);
                 }
                 cur = parent;
                 break;
@@ -407,9 +407,9 @@ static int traverseTree(MutexInfo* obj, MutexInfo const* objParent)
             if (sPthreadDebugLevel >= CAPTURE_CALLSTACK) {
                 int index = historyListHas(&obj->parents, objParent);
                 if ((size_t)index < (size_t)obj->stacks.count) {
-                    log_backtrace(obj->stacks.stack[index].addrs, obj->stacks.stack[index].depth);
+                    //log_backtrace(obj->stacks.stack[index].addrs, obj->stacks.stack[index].depth);
                 } else {
-                    log_backtrace(obj->stackTrace, obj->stackDepth);
+                    //log_backtrace(obj->stackTrace, obj->stackDepth);
                 }
             }
             result = 0;
@@ -437,7 +437,7 @@ static void mutex_lock_checked(MutexInfo* mrl, MutexInfo* object)
     if (sPthreadDebugLevel >= CAPTURE_CALLSTACK) {
         // always record the call stack when acquiring a lock.
         // it's not efficient, but is useful during diagnostics
-        object->stackDepth = get_backtrace(object->stackTrace, STACK_TRACE_DEPTH);
+        //object->stackDepth = get_backtrace(object->stackTrace, STACK_TRACE_DEPTH);
     }
 
     // no other locks held in this thread -- no deadlock possible!
@@ -454,7 +454,7 @@ static void mutex_lock_checked(MutexInfo* mrl, MutexInfo* object)
 
     linkParentToChild(mrl, object);
     if (!traverseTree(object, mrl)) {
-        backtrace_shutdown();
+        //backtrace_shutdown();
         LOGW("%s\n", kEndBanner);
         unlinkParentFromChild(mrl, object);
         // reenable pthread debugging for this thread
diff --git a/linker/Android.mk b/linker/Android.mk
index d1773a8..61c368a 100644
--- a/linker/Android.mk
+++ b/linker/Android.mk
@@ -41,7 +41,7 @@ endif
 LOCAL_MODULE:= linker
 LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
 
-LOCAL_STATIC_LIBRARIES := libc_nomalloc
+LOCAL_STATIC_LIBRARIES := libc_nomalloc liblog
 
 #LOCAL_FORCE_STATIC_EXECUTABLE := true # not necessary when not including BUILD_EXECUTABLE
 
-- 
1.7.4.1

