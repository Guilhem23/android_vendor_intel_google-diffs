From cb6603021fe6b80b14ba8073f3f3e3977f653e43 Mon Sep 17 00:00:00 2001
From: Daniel Leung <daniel.leung@intel.com>
Date: Mon, 10 Dec 2012 16:52:43 -0800
Subject: Add mmap64()

This adds mmap64() to bionic so that it is possible to have
large offset passed to kernel. However, the syscall mechanism
only passes 32-bit number to kernel. So effectively, the
largest offset that can be passed is about 43 bits (since
offset is signed, and the number passed to kernel is number
of pages (page size == 4K => 12 bits)).

For: AXIA-1343
Change-Id: I4f7699dfd4d1c7a2bd46fdd646f0c4a90dc4eb72
Depends-Change-Id: Idb207d912ec50dffa51369c6581e9255a4ca15ae
Signed-off-by: Daniel Leung <daniel.leung@intel.com>
---
 libc/bionic/mmap.c      |   21 +++++++++++++++++++++
 libc/include/sys/mman.h |    1 +
 2 files changed, 22 insertions(+), 0 deletions(-)

diff --git a/libc/bionic/mmap.c b/libc/bionic/mmap.c
index 40a6538..0af455a 100644
--- a/libc/bionic/mmap.c
+++ b/libc/bionic/mmap.c
@@ -41,3 +41,24 @@ void* mmap(void *addr, size_t size, int prot, int flags, int fd, long offset)
 
     return __mmap2(addr, size, prot, flags, fd, (size_t)offset >> MMAP2_SHIFT);
 }
+
+void* mmap64(void *addr, size_t size, int prot, int flags, int fd, off64_t offset)
+{
+    void *ret;
+    int saved_errno;
+
+    if (offset & ((1UL << MMAP2_SHIFT)-1)) {
+        errno = EINVAL;
+        return MAP_FAILED;
+    }
+
+    // type-casting offset to uint64_t so shifting works correctly
+    ret = __mmap2(addr, size, prot, flags, fd, (uint64_t)offset >> MMAP2_SHIFT);
+
+    if (ret && (flags & (MAP_PRIVATE | MAP_ANONYMOUS))) {
+        saved_errno = errno;
+        madvise(ret, size, MADV_MERGEABLE);
+        errno = saved_errno;
+    }
+    return ret;
+}
diff --git a/libc/include/sys/mman.h b/libc/include/sys/mman.h
index 7a32974..7c5f8d7 100644
--- a/libc/include/sys/mman.h
+++ b/libc/include/sys/mman.h
@@ -45,6 +45,7 @@ __BEGIN_DECLS
 #define MREMAP_FIXED    2
 
 extern void*  mmap(void *, size_t, int, int, int, off_t);
+extern void*  mmap64(void *, size_t, int, int, int, off64_t);
 extern int    munmap(void *, size_t);
 extern int    msync(const void *, size_t, int);
 extern int    mprotect(const void *, size_t, int);
-- 
1.7.4.1

