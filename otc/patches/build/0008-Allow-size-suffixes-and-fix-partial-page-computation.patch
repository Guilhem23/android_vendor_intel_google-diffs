From 175ef3355dacc5b98147abfe1b905022588347e8 Mon Sep 17 00:00:00 2001
From: Alin Dobre <alin.m.dobre@intel.com>
Date: Tue, 10 May 2011 07:20:03 +0300
Subject: Allow size suffixes and fix partial page computation

() handle the K, M, or G characters at the end of the image size parameter and
transform it into bytes. Support for this also added to OTA releasetools.
() rounds up any partial-page when computing image-size parameter to avoid
subsequent divisions by zero

Change-Id: I6c97a0309ce8bdc50669dcfef517da84b3e12fd3
Signed-off-by: Alin Dobre <alin.m.dobre@intel.com>
Signed-off-by: Paul Drews <paul.drews@intel.com>
Signed-off-by: Andrew Boie <andrew.p.boie@intel.com>
---
 core/definitions.mk          |   33 ++++++++++++++++++++++++++++-----
 tools/releasetools/common.py |   11 ++++++++++-
 2 files changed, 38 insertions(+), 6 deletions(-)

diff --git a/core/definitions.mk b/core/definitions.mk
index 7834baa..eee30c4 100644
--- a/core/definitions.mk
+++ b/core/definitions.mk
@@ -1938,12 +1938,35 @@ endif
 # Convert a partition data size (eg, as reported in /proc/mtd) to the
 # size of the image used to flash that partition (which includes a
 # spare area for each page).
-# $(1): the partition data size
+# $(1): the partition data size, supported in the same format as for
+# make_ext4fs, with K, M, or G appended to the size.
+#
+# The computation does:
+# () convert K, M, or G suffixed number to bytes
+# () convert to NAND-pages, rounding up any fractional page
+# () convert NAND-pages to bytes accounting for SPARE bytes in pages.
+# Note that if (and only if) you pass in zero as the parameter, the
+# result is zero.  Should help avoid division-by-zero in the
+# assert-max-file-size function defined below.
 define image-size-from-data-size
-$(strip $(eval _isfds_value := $$(shell echo $$$$(($(1) / $(BOARD_NAND_PAGE_SIZE) * \
-  ($(BOARD_NAND_PAGE_SIZE)+$(BOARD_NAND_SPARE_SIZE))))))\
-$(if $(filter 0, $(_isfds_value)),$(shell echo $$(($(BOARD_NAND_PAGE_SIZE)+$(BOARD_NAND_SPARE_SIZE)))),$(_isfds_value))\
-$(eval _isfds_value :=))
+$(shell echo \
+$$(( \
+	( \
+		$$( \
+			bytes=$(1); \
+			case $${bytes: -1} in \
+				(K) bytes=$$(($${bytes%K} * 1024)) ;; \
+				(M) bytes=$$(($${bytes%M} * 1024 * 1024)) ;; \
+				(G) bytes=$$(($${bytes%G} * 1024 * 1024 * 1024)) ;; \
+			esac; \
+			echo $${bytes} \
+		) \
+	+ $(BOARD_NAND_PAGE_SIZE) - 1 \
+	) \
+	/ $(BOARD_NAND_PAGE_SIZE) * \
+	($(BOARD_NAND_PAGE_SIZE)+$(BOARD_NAND_SPARE_SIZE)) \
+)) \
+)
 endef
 
 # $(1): The file(s) to check (often $@)
diff --git a/tools/releasetools/common.py b/tools/releasetools/common.py
index 263ae11..fa8a81e 100644
--- a/tools/releasetools/common.py
+++ b/tools/releasetools/common.py
@@ -134,8 +134,17 @@ def LoadInfoDict(zip):
     pass
 
   def makeint(key):
+    multable = {
+       "K" : 1024,
+       "M" : 1024 * 1024,
+       "G" : 1024 * 1024 * 1024
+       }
     if key in d:
-      d[key] = int(d[key], 0)
+      v = d[key]
+      if v[-1] in multable:
+        d[key] = int(v[:-1]) * multable[v[-1]]
+      else:
+        d[key] = int(v)
 
   makeint("recovery_api_version")
   makeint("blocksize")
-- 
1.7.4.1

