From 7cc79e58438a20456d5089b65320ce73bc6f6cc5 Mon Sep 17 00:00:00 2001
From: Chih-Wei Huang <cwhuang@linux.org.tw>
Date: Wed, 16 Mar 2011 10:36:30 +0800
Subject: add kernel.mk to build kernel image on-fly

The patch collapses all changes of kernel.mk into one.
kernel.mk: Don't assume kernel source is in kernel/

Use a new variable TARGET_KERNEL_SOURCE which the board can specify in
its configuration. If variable is not set, revert to previous behavior.

The kernel build system places all modules into a nice hierarchy in the
output directory. However, our current android system expects them in
a flat hierarchy at system/lib/modules. This change links the modules
from the kernel installation path into system/lib/modules.

The ideal solution would be to makes the links symbolic, however doing
that uncovers a bug in make_ext4fs and prevents it from building the
system image. Until that bug can be fixed, we need to use hard links.

Change-Id: Ided9b8fb2b57358ac441daae383d0a4b365930f8
Signed-off-by: Matt Gumbel <matthew.k.gumbel@intel.com>
---
 core/Makefile  |    4 ++-
 core/kernel.mk |   74 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 77 insertions(+), 1 deletions(-)
 create mode 100644 core/kernel.mk

diff --git a/core/Makefile b/core/Makefile
index 55ab6a5..8c2e0fd 100644
--- a/core/Makefile
+++ b/core/Makefile
@@ -424,6 +424,8 @@ $(INSTALLED_BOOTIMAGE_TARGET): $(MKBOOTIMG) $(INTERNAL_BOOTIMAGE_FILES)
 	$(hide) $(call assert-max-image-size,$@,$(BOARD_BOOTIMAGE_PARTITION_SIZE),raw)
 endif # TARGET_BOOTIMAGE_USE_EXT2
 
+include $(BUILD_SYSTEM)/kernel.mk
+
 else	# TARGET_NO_KERNEL
 # HACK: The top-level targets depend on the bootimage.  Not all targets
 # can produce a bootimage, though, and emulator targets need the ramdisk
@@ -791,7 +793,7 @@ define build-systemimage-target
       $(TARGET_OUT) $(systemimage_intermediates)/system_image_info.txt $(1)
 endef
 
-$(BUILT_SYSTEMIMAGE): $(FULL_SYSTEMIMAGE_DEPS) $(INSTALLED_FILES_FILE)
+$(BUILT_SYSTEMIMAGE): $(INSTALLED_KERNEL_TARGET) $(INTERNAL_SYSTEMIMAGE_FILES) $(INTERNAL_USERIMAGES_DEPS)
 	$(call build-systemimage-target,$@)
 
 INSTALLED_SYSTEMIMAGE := $(PRODUCT_OUT)/system.img
diff --git a/core/kernel.mk b/core/kernel.mk
new file mode 100644
index 0000000..918a189
--- /dev/null
+++ b/core/kernel.mk
@@ -0,0 +1,74 @@
+#
+# Copyright (C) 2009 The Android-x86 Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+
+ifeq ($(TARGET_PREBUILT_KERNEL),)
+
+ifeq ($(TARGET_ARCH),x86)
+KERNEL_TARGET := bzImage
+TARGET_KERNEL_CONFIG ?= android-x86_defconfig
+endif
+ifeq ($(TARGET_ARCH),arm)
+KERNEL_TARGET := zImage
+TARGET_KERNEL_CONFIG ?= goldfish_defconfig
+endif
+
+TARGET_KERNEL_SOURCE ?= kernel
+
+KBUILD_OUTPUT := $(CURDIR)/$(TARGET_OUT_INTERMEDIATES)/kernel
+mk_kernel := + $(hide) $(MAKE) -C $(TARGET_KERNEL_SOURCE)  O=$(KBUILD_OUTPUT) ARCH=$(TARGET_ARCH) $(if $(SHOW_COMMANDS),V=1)
+ifneq ($(TARGET_TOOLS_PREFIX),)
+mk_kernel += CROSS_COMPILE=$(CURDIR)/$(TARGET_TOOLS_PREFIX)
+endif
+
+ifneq ($(wildcard $(TARGET_KERNEL_CONFIG)),)
+KERNEL_CONFIG_FILE := $(TARGET_KERNEL_CONFIG)
+else
+KERNEL_CONFIG_FILE := $(TARGET_KERNEL_SOURCE)/arch/$(TARGET_ARCH)/configs/$(TARGET_KERNEL_CONFIG)
+endif
+MOD_ENABLED := $(shell grep ^CONFIG_MODULES=y $(KERNEL_CONFIG_FILE))
+FIRMWARE_ENABLED := $(shell grep ^CONFIG_FIRMWARE_IN_KERNEL=y $(KERNEL_CONFIG_FILE))
+
+# I understand Android build system discourage to use submake,
+# but I don't want to write a complex Android.mk to build kernel.
+# This is the simplest way I can think.
+KERNEL_DOTCONFIG_FILE := $(KBUILD_OUTPUT)/.config
+$(KERNEL_DOTCONFIG_FILE): $(KERNEL_CONFIG_FILE) | $(ACP)
+	$(copy-file-to-new-target)
+
+BUILT_KERNEL_TARGET := $(KBUILD_OUTPUT)/arch/$(TARGET_ARCH)/boot/$(KERNEL_TARGET)
+
+.PHONY : $(INSTALLED_KERNEL_TARGET)
+$(INSTALLED_KERNEL_TARGET): $(KERNEL_DOTCONFIG_FILE)
+	$(mk_kernel) oldnoconfig
+	$(mk_kernel) $(KERNEL_TARGET) $(if $(MOD_ENABLED),modules)
+	$(hide) $(ACP) -fp $(BUILT_KERNEL_TARGET) $@
+ifdef TARGET_PREBUILT_MODULES
+	$(hide) $(ACP) -r $(TARGET_PREBUILT_MODULES) $(TARGET_OUT)/lib
+else
+	$(hide) rm -rf $(TARGET_OUT)/lib/modules
+	$(if $(MOD_ENABLED),$(mk_kernel) INSTALL_MOD_PATH=$(CURDIR)/$(TARGET_OUT) modules_install)
+	$(hide) rm -f $(TARGET_OUT)/lib/modules/*/{build,source}
+	$(hide) cd $(TARGET_OUT)/lib/modules && find -type f | xargs ln -t .
+endif
+	$(if $(FIRMWARE_ENABLED),$(mk_kernel) INSTALL_MOD_PATH=$(CURDIR)/$(TARGET_OUT) firmware_install)
+
+installclean: FILES += $(KBUILD_OUTPUT) $(INSTALLED_KERNEL_TARGET)
+
+TARGET_PREBUILT_KERNEL  := $(INSTALLED_KERNEL_TARGET)
+
+.PHONY: kernel
+kernel: $(TARGET_PREBUILT_KERNEL)
+
+else
+
+$(INSTALLED_KERNEL_TARGET): $(TARGET_PREBUILT_KERNEL) | $(ACP)
+	$(copy-file-to-new-target)
+
+endif # TARGET_PREBUILT_KERNEL
-- 
1.7.4.1

