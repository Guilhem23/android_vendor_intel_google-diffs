From 8afaafcc75c323824f91388517d40b2a394c470e Mon Sep 17 00:00:00 2001
From: Andrew Boie <andrew.p.boie@intel.com>
Date: Tue, 24 May 2011 11:50:02 -0700
Subject: kernel.mk: kernel build improvements

Author: Andrew Boie <andrew.p.boie@intel.com>
Author: Alin Dobre <alin.m.dobre@intel.com>
Author: Matt Gumbel <matthew.k.gumbel@intel.com>
Author: Daniel Leung <daniel.leung@intel.com>
Author: Lukasz Anaczkowski <lukasz.anaczkowski@intel.com>
Author: Bruce Beare <bruce.j.beare@intel.com>
Author: Igor Zamyatin <igor.zamyatin@intel.com>

The kernel build now produces 4 artifacts: the image itself, a tarball
full of modules, a tarball full of firmware, and System.map. We introduce
INSTALLED_MODULES_TARGET, INSTALLED_KERNELFW_TARGET, and INSTALLED_SYSTEM_MAP
for the latter 3 items so that they can be referenced elsewhere in the build.
If there are no modules or firmware the respective tarballs still exist
but are empty. System.map doesn't go on the device, but is extremely
useful for debugging and needs to be stored with release deliverables.

BUILT_SYSTEMIMAGE and INSTALLED_SYSTEMTARBALL_TARGET now depend on the
modules and firmware tarballs, and their contents are expanded in the
proper locations during the creation of these targets.

The kernel defconfig can now be constructed out of an arbitrary number of
fragments which are assembled by the build prior to invoking the kernel
build. This allows, for example, to have a base configuration plus some
overlays which alter it to enable/disable options based on whether a build
is debug-enabled. Users set TARGET_KERNEL_CONFIG to their base defconfig,
and can add any number of overlays to TARGET_KERNEL_CONFIG_OVERRIDES.

There is a small hack in place to fool the kernel build into using
minigzip instead of gzip when creating the bzImage.
This is because the deflate algorithm in gzip is very old compared
to zlib, and the recovery imgdiff codes create very large diffs
if the source file isn't compressed with the same version of deflate
that it has access to.

There is support for building out-of-tree kernel modules. Users will want
to set EXTERNAL_KERNEL_MODULES as a list of paths to the directories where
the modules live.

We want the kernel build process to be the same whether we are
doing a clean kernel build or an incremental one. The 'oldnoconfig'
command used updates .config.old based on the contents of .config,
but we don't want any prior state hanging around that affects how
the kernel is built. Hence delete .config.old before building each
time.

We support prebuilt kernels, modules, and firmware. Setting BUILD_KERNEL=1
will force a kernel compile, otherwise if suitable prebuilts exist in
TARGET_PREBUILT_KERNEL_DIR they will be used instead. This is desirable
for speeding up build times; the kernel build must be called as a sub-make
and the resulting images are always touched. Typical use is to have a Jenkins
job which watches for changes in the source tree and generates/commits new
prebuilts when that happens.

TODO:
- Fixup out-of-tree kernel module build to be more like other Android modules
- Remove gzip hack and patch kernel to know about minigzip
- Fix Linux kbuild Makefiles so that you can use M= and O= simultaneously
- Fix kernel_{mod|fw}_enabled to also check overrides

Change-Id: I242453ba450e5552fffa549e055663b9c2950bf0
---
 core/Makefile            |   24 +++++-
 core/cleanbuild.mk       |    5 +
 core/kernel.mk           |  226 +++++++++++++++++++++++++++++++++++++++-------
 target/board/Android.mk  |    6 ++
 tools/build-defconfig.py |   87 ++++++++++++++++++
 tools/gzip_hack/gzip     |   11 +++
 6 files changed, 322 insertions(+), 37 deletions(-)
 create mode 100755 tools/build-defconfig.py
 create mode 100755 tools/gzip_hack/gzip

diff --git a/core/Makefile b/core/Makefile
index 8c2e0fd..b651eec 100644
--- a/core/Makefile
+++ b/core/Makefile
@@ -793,7 +793,18 @@ define build-systemimage-target
       $(TARGET_OUT) $(systemimage_intermediates)/system_image_info.txt $(1)
 endef
 
-$(BUILT_SYSTEMIMAGE): $(INSTALLED_KERNEL_TARGET) $(INTERNAL_SYSTEMIMAGE_FILES) $(INTERNAL_USERIMAGES_DEPS)
+$(BUILT_SYSTEMIMAGE): $(INSTALLED_MODULES_TARGET) \
+		      $(INSTALLED_KERNELFW_TARGET) \
+		      $(INTERNAL_SYSTEMIMAGE_FILES) \
+		      $(INTERNAL_USERIMAGES_DEPS) \
+
+	$(hide) rm -rf $(TARGET_OUT)/lib/modules
+	$(hide) rm -rf $(TARGET_OUT)/lib/firmware
+	$(hide) mkdir -p $(TARGET_OUT)/lib/
+	$(if $(INSTALLED_MODULES_TARGET),$(hide) tar -xz -C $(TARGET_OUT)/lib/ -f $(INSTALLED_MODULES_TARGET))
+	$(hide) chmod -fR g-w $(TARGET_OUT)/lib/modules
+	$(if $(INSTALLED_KERNELFW_TARGET),$(hide) tar -xz -C $(TARGET_OUT)/lib/ -f $(INSTALLED_KERNELFW_TARGET))
+	$(hide) chmod -fR g-w $(TARGET_OUT)/lib/firmware
 	$(call build-systemimage-target,$@)
 
 INSTALLED_SYSTEMIMAGE := $(PRODUCT_OUT)/system.img
@@ -853,7 +864,16 @@ endif
 system_tar := $(PRODUCT_OUT)/system.tar
 INSTALLED_SYSTEMTARBALL_TARGET := $(system_tar).$(SYSTEM_TARBALL_FORMAT)
 $(INSTALLED_SYSTEMTARBALL_TARGET): PRIVATE_SYSTEM_TAR := $(system_tar)
-$(INSTALLED_SYSTEMTARBALL_TARGET): $(FS_GET_STATS) $(INTERNAL_SYSTEMIMAGE_FILES)
+$(INSTALLED_SYSTEMTARBALL_TARGET): $(FS_GET_STATS) \
+		$(INTERNAL_SYSTEMIMAGE_FILES) \
+		$(INSTALLED_MODULES_TARGET) \
+		$(INSTALLED_KERNELFW_TARGET) \
+
+	$(hide) rm -rf $(TARGET_OUT)/lib/modules
+	$(hide) rm -rf $(TARGET_OUT)/lib/firmware
+	$(hide) mkdir -p $(TARGET_OUT)/lib/
+	$(if $(INSTALLED_MODULES_TARGET),$(hide) tar -xz -C $(TARGET_OUT)/lib/ -f $(INSTALLED_MODULES_TARGET))
+	$(if $(INSTALLED_KERNELFW_TARGET),$(hide) tar -xz -C $(TARGET_OUT)/lib/ -f $(INSTALLED_KERNELFW_TARGET))
 	$(build-systemtarball-target)
 
 .PHONY: systemtarball-nodeps
diff --git a/core/cleanbuild.mk b/core/cleanbuild.mk
index 1d17f77..80a46c9 100644
--- a/core/cleanbuild.mk
+++ b/core/cleanbuild.mk
@@ -182,6 +182,7 @@ installclean_files := \
 	$(PRODUCT_OUT)/*.txt \
 	$(PRODUCT_OUT)/*.xlb \
 	$(PRODUCT_OUT)/*.zip \
+	$(PRODUCT_OUT)/*.tar.gz \
 	$(PRODUCT_OUT)/data \
 	$(PRODUCT_OUT)/obj/APPS \
 	$(PRODUCT_OUT)/obj/NOTICE_FILES \
@@ -191,6 +192,10 @@ installclean_files := \
 	$(PRODUCT_OUT)/system \
 	$(PRODUCT_OUT)/dex_bootjars \
 	$(PRODUCT_OUT)/obj/JAVA_LIBRARIES \
+	$(PRODUCT_OUT)/obj/kernel \
+	$(PRODUCT_OUT)/obj/kernelmods \
+	$(PRODUCT_OUT)/System.map \
+	$(PRODUCT_OUT)/kernel \
 	$(PRODUCT_OUT)/obj/FAKE \
 	$(PRODUCT_OUT)/obj/EXECUTABLES/adbd_intermediates \
 	$(PRODUCT_OUT)/obj/EXECUTABLES/init_intermediates \
diff --git a/core/kernel.mk b/core/kernel.mk
index 918a189..39cd0a0 100644
--- a/core/kernel.mk
+++ b/core/kernel.mk
@@ -8,67 +8,223 @@
 #      http://www.apache.org/licenses/LICENSE-2.0
 #
 
-ifeq ($(TARGET_PREBUILT_KERNEL),)
+ifneq ($(strip $(TARGET_NO_KERNEL)),true)
+
+# use_prebuilt_kernel is the variable used for determining if we will be using
+# prebuilt kernel components or build kernel from source, in the code that
+# follows below.
+use_prebuilt_kernel :=
+
+# kernel_prebuilt_* variables will hold the full paths to the kernel artifacts,
+# if they exist, otherwise they will have empty values. The exact file name is
+# being determined by keeping the file name base of the corresponding targets,
+# then using the wildcard function to actually see if these files exist in the
+# TARGET_PREBUILT_KERNEL_DIR directory, which is usually set in a
+# BoardConfig.mk file.
+kernel_prebuilt_image  := $(wildcard $(TARGET_PREBUILT_KERNEL_DIR)/$(notdir $(INSTALLED_KERNEL_TARGET)))
+kernel_prebuilt_sysmap := $(wildcard $(TARGET_PREBUILT_KERNEL_DIR)/$(notdir $(INSTALLED_SYSTEM_MAP)))
+kernel_prebuilt_mods   := $(wildcard $(TARGET_PREBUILT_KERNEL_DIR)/$(notdir $(INSTALLED_MODULES_TARGET)))
+kernel_prebuilt_fw     := $(wildcard $(TARGET_PREBUILT_KERNEL_DIR)/$(notdir $(INSTALLED_KERNELFW_TARGET)))
+
+# The kernel image and the System.map files are mandatory for considering that
+# we have a full prebuilt kernel. So, both the above set variables are actually
+# pointing to existing files, then we can consider using prebuilt kernels.
+ifneq ($(and $(kernel_prebuilt_image),$(kernel_prebuilt_sysmap)),)
+$(info KERNEL: Kernel prebuilt image and system map are available)
+
+# We have all the ingredients necessary for prebuilt kernels, but we make sure
+# that the user didn't set the BUILD_KERNEL variable, in which case we will be
+# forcing the kernel build from source.
+ifeq ($(BUILD_KERNEL),)
+$(info KERNEL: BUILD_KERNEL is not set, will not force kernel source build)
+
+# Under this condition, we set use_prebuilt_kernel to true, which means that we
+# will be using prebuilt kernels below.
+use_prebuilt_kernel := true
+$(info KERNEL: Will use prebuilt kernel)
+else # BUILD_KERNEL != null
+# This is the case where users force kernel build from source.
+$(info KERNEL: BUILD_KERNEL is set to a non-null value. Will not use prebuilt kernels)
+endif
+else # kernel prebuilt mandatory ingredients are not available
+$(info KERNEL: Kernel prebuilt image and/or system map are not available. Will not use prebuilt kernels)
+endif
+
+ifneq ($(use_prebuilt_kernel),true)
+
+$(info Building kernel from source)
+
+# Boards will typically need to set the following variables
+# TARGET_KERNEL_CONFIG - Name of the base defconfig to use
+# TARGET_KERNEL_CONFIG_OVERRIDES - 0 or more 'override' files to modify the
+#     base defconfig; for enable, special overrides for user builds to disable
+#     debug features, etc.
+# TARGET_KERNEL_SOURCE - Location of kernel source directory relative to the
+#     top level
+# TARGET_KERNEL_EXTRA_CFLAGS - Additional CFLAGS which will be passed to the
+#     kernel 'make' invocation as KCFLAGS
+
 
 ifeq ($(TARGET_ARCH),x86)
 KERNEL_TARGET := bzImage
 TARGET_KERNEL_CONFIG ?= android-x86_defconfig
+ifeq ($(TARGET_KERNEL_ARCH),)
+TARGET_KERNEL_ARCH := i386
+endif
 endif
 ifeq ($(TARGET_ARCH),arm)
 KERNEL_TARGET := zImage
 TARGET_KERNEL_CONFIG ?= goldfish_defconfig
+ifeq ($(TARGET_KERNEL_ARCH),)
+TARGET_KERNEL_ARCH := arm
+endif
 endif
 
 TARGET_KERNEL_SOURCE ?= kernel
 
-KBUILD_OUTPUT := $(CURDIR)/$(TARGET_OUT_INTERMEDIATES)/kernel
-mk_kernel := + $(hide) $(MAKE) -C $(TARGET_KERNEL_SOURCE)  O=$(KBUILD_OUTPUT) ARCH=$(TARGET_ARCH) $(if $(SHOW_COMMANDS),V=1)
+kbuild_output := $(CURDIR)/$(TARGET_OUT_INTERMEDIATES)/kernel
+modbuild_output := $(CURDIR)/$(TARGET_OUT_INTERMEDIATES)/kernelmods
+
+# Leading "+" gives child Make access to the jobserver.
+# gzip hack necessary to get the kernel to compress the
+# bzImage with minigzip instead of host gzip, so that the
+# newer verion of deflate algorithn inside zlib is used.
+# This is needed by OTA applypatch, which makes much larger
+# binary diffs of compressed data if the deflate versions
+# are out of alignment.
+mk_kernel := + $(hide) PATH=$(CURDIR)/build/tools/gzip_hack/:$(PATH) $(MAKE) -C $(TARGET_KERNEL_SOURCE)  O=$(kbuild_output) ARCH=$(TARGET_KERNEL_ARCH) $(if $(SHOW_COMMANDS),V=1) KCFLAGS="$(TARGET_KERNEL_EXTRA_CFLAGS)"
+ifneq ($(TARGET_KERNEL_CROSS_COMPILE),false)
 ifneq ($(TARGET_TOOLS_PREFIX),)
+ifneq ($(USE_CCACHE),)
+mk_kernel += CROSS_COMPILE="$(CCACHE_BIN) $(CURDIR)/$(TARGET_TOOLS_PREFIX)"
+else
 mk_kernel += CROSS_COMPILE=$(CURDIR)/$(TARGET_TOOLS_PREFIX)
 endif
+endif
+endif
 
-ifneq ($(wildcard $(TARGET_KERNEL_CONFIG)),)
-KERNEL_CONFIG_FILE := $(TARGET_KERNEL_CONFIG)
+# If there's a file in the arch-specific configs directory that matches
+# what's in $(TARGET_KERNEL_CONFIG), use that. Otherwise, use $(TARGET_KERNEL_CONFIG)
+# verbatim
+ifneq ($(wildcard $(TARGET_KERNEL_SOURCE)/arch/$(TARGET_ARCH)/configs/$(TARGET_KERNEL_CONFIG)),)
+kernel_config_file := $(TARGET_KERNEL_SOURCE)/arch/$(TARGET_ARCH)/configs/$(TARGET_KERNEL_CONFIG)
 else
-KERNEL_CONFIG_FILE := $(TARGET_KERNEL_SOURCE)/arch/$(TARGET_ARCH)/configs/$(TARGET_KERNEL_CONFIG)
+kernel_config_file := $(TARGET_KERNEL_CONFIG)
 endif
-MOD_ENABLED := $(shell grep ^CONFIG_MODULES=y $(KERNEL_CONFIG_FILE))
-FIRMWARE_ENABLED := $(shell grep ^CONFIG_FIRMWARE_IN_KERNEL=y $(KERNEL_CONFIG_FILE))
-
-# I understand Android build system discourage to use submake,
-# but I don't want to write a complex Android.mk to build kernel.
-# This is the simplest way I can think.
-KERNEL_DOTCONFIG_FILE := $(KBUILD_OUTPUT)/.config
-$(KERNEL_DOTCONFIG_FILE): $(KERNEL_CONFIG_FILE) | $(ACP)
-	$(copy-file-to-new-target)
 
-BUILT_KERNEL_TARGET := $(KBUILD_OUTPUT)/arch/$(TARGET_ARCH)/boot/$(KERNEL_TARGET)
+# FIXME: doesn't check overrides, only the base configuration file
+kernel_mod_enabled = $(shell grep ^CONFIG_MODULES=y $(kernel_config_file))
+kernel_fw_enabled = $(shell grep ^CONFIG_FIRMWARE_IN_KERNEL=y $(kernel_config_file))
+
+# The actual .config that is in use during the build is derived from
+# a base $kernel_config_file, plus a a list of config overrides which
+# are processed in order.
+kernel_dotconfig_file := $(kbuild_output)/.config
+$(kernel_dotconfig_file): $(kernel_config_file) $(TARGET_KERNEL_CONFIG_OVERRIDES) | $(ACP)
+	$(hide) mkdir -p $(dir $@)
+	build/tools/build-defconfig.py $^ > $@
 
+built_kernel_target := $(kbuild_output)/arch/$(TARGET_ARCH)/boot/$(KERNEL_TARGET)
+
+# Declared .PHONY to force a rebuild each time. We can't tell if the kernel
+# sources have changed from this context
 .PHONY : $(INSTALLED_KERNEL_TARGET)
-$(INSTALLED_KERNEL_TARGET): $(KERNEL_DOTCONFIG_FILE)
+
+$(INSTALLED_KERNEL_TARGET): $(kernel_dotconfig_file) $(MINIGZIP) | $(ACP)
+	$(hide) rm -f $(kbuild_output)/.config.old
 	$(mk_kernel) oldnoconfig
-	$(mk_kernel) $(KERNEL_TARGET) $(if $(MOD_ENABLED),modules)
-	$(hide) $(ACP) -fp $(BUILT_KERNEL_TARGET) $@
-ifdef TARGET_PREBUILT_MODULES
-	$(hide) $(ACP) -r $(TARGET_PREBUILT_MODULES) $(TARGET_OUT)/lib
-else
-	$(hide) rm -rf $(TARGET_OUT)/lib/modules
-	$(if $(MOD_ENABLED),$(mk_kernel) INSTALL_MOD_PATH=$(CURDIR)/$(TARGET_OUT) modules_install)
-	$(hide) rm -f $(TARGET_OUT)/lib/modules/*/{build,source}
-	$(hide) cd $(TARGET_OUT)/lib/modules && find -type f | xargs ln -t .
-endif
-	$(if $(FIRMWARE_ENABLED),$(mk_kernel) INSTALL_MOD_PATH=$(CURDIR)/$(TARGET_OUT) firmware_install)
+	$(mk_kernel) $(KERNEL_TARGET) $(if $(kernel_mod_enabled),modules)
+	$(hide) $(ACP) -fp $(built_kernel_target) $@
 
-installclean: FILES += $(KBUILD_OUTPUT) $(INSTALLED_KERNEL_TARGET)
+$(INSTALLED_SYSTEM_MAP): $(INSTALLED_KERNEL_TARGET) | $(ACP)
+	$(hide) $(ACP) $(kbuild_output)/System.map $@
 
-TARGET_PREBUILT_KERNEL  := $(INSTALLED_KERNEL_TARGET)
+# FIXME Workaround due to lack of simultaneous support of M= and O=; copy the
+# source into an intermediate directory and compile it there, preserving
+# timestamps so code is only rebuilt if it changes.
+# Extra newline intentional to prevent calling foreach from concatenating
+# into a single line
+# FIXME: Need to extend this so that all external modules are not built by
+# default, need to define them each as an Android module and include them as
+# needed in PRODUCT_PACKAGES
+define make-ext-module
+	$(hide) mkdir -p $(kbuild_output)/extmods/$(1)
+	$(hide) $(ACP) -rtf $(1)/* $(kbuild_output)/extmods/$(1)
+	$(mk_kernel) M=$(kbuild_output)/extmods/$(1) INSTALL_MOD_PATH=$(2) modules
+	$(mk_kernel) M=$(kbuild_output)/extmods/$(1) INSTALL_MOD_PATH=$(2) modules_install
 
-.PHONY: kernel
-kernel: $(TARGET_PREBUILT_KERNEL)
+endef
 
-else
+define make-modules
+	$(mk_kernel) INSTALL_MOD_PATH=$(1) modules_install
+	$(foreach item,$(EXTERNAL_KERNEL_MODULES),$(call make-ext-module,$(item),$(1)))
+	$(hide) rm -f $(1)/lib/modules/*/{build,source}
+	$(hide) cd $(1)/lib/modules && find -type f -print0 | xargs -t -0 -I{} mv {} .
+endef
+
+$(INSTALLED_MODULES_TARGET): $(INSTALLED_KERNEL_TARGET) $(MINIGZIP) | $(ACP)
+	$(hide) rm -rf $(modbuild_output)/lib/modules
+	$(hide) mkdir -p $(modbuild_output)/lib/modules
+	$(if $(kernel_mod_enabled),$(call make-modules,$(modbuild_output)))
+	$(hide) tar -cz -C $(modbuild_output)/lib/ -f $(CURDIR)/$@ modules
+
+$(INSTALLED_KERNELFW_TARGET): $(INSTALLED_KERNEL_TARGET) $(INSTALLED_MODULES_TARGET) $(MINIGZIP)
+	$(hide) rm -rf $(modbuild_output)/lib/firmware
+	$(hide) mkdir -p $(modbuild_output)/lib/firmware
+	$(if $(kernel_fw_enabled),$(mk_kernel) INSTALL_MOD_PATH=$(modbuild_output) firmware_install)
+	$(hide) tar -cz -C $(modbuild_output)/lib/ -f $(CURDIR)/$@ firmware
 
-$(INSTALLED_KERNEL_TARGET): $(TARGET_PREBUILT_KERNEL) | $(ACP)
+PREBUILT-PROJECT-linux: \
+		$(INSTALLED_KERNEL_TARGET) \
+		$(INSTALLED_SYSTEM_MAP) \
+		$(INSTALLED_MODULES_TARGET) \
+		$(INSTALLED_KERNELFW_TARGET)
+		$(hide) rm -rf out/prebuilt/linux/$(TARGET_PREBUILT_TAG)/kernel/$(TARGET_PRODUCT)-$(TARGET_BUILD_VARIANT)
+		$(hide) mkdir -p out/prebuilt/linux/$(TARGET_PREBUILT_TAG)/kernel/$(TARGET_PRODUCT)-$(TARGET_BUILD_VARIANT)
+		$(hide) $(ACP) -fp $^ out/prebuilt/linux/$(TARGET_PREBUILT_TAG)/kernel/$(TARGET_PRODUCT)-$(TARGET_BUILD_VARIANT)
+
+else # use_prebuilt_kernel = true
+
+$(info Using prebuilt kernel components)
+$(INSTALLED_KERNEL_TARGET): $(kernel_prebuilt_image) | $(ACP)
 	$(copy-file-to-new-target)
 
-endif # TARGET_PREBUILT_KERNEL
+$(INSTALLED_SYSTEM_MAP): $(kernel_prebuilt_sysmap) | $(ACP)
+	$(copy-file-to-new-target)
+
+# Test if we have a kernel modules archive in the prebuilts area
+ifneq ($(kernel_prebuilt_mods),)
+$(INSTALLED_MODULES_TARGET): $(kernel_prebuilt_mods) | $(ACP)
+	$(copy-file-to-new-target)
+else # kernel_prebuilt_mods is empty
+# We empty the modules target
+INSTALLED_MODULES_TARGET :=
+endif
+
+# Test if we have a kernel firmware archive in the prebuilts area
+ifneq ($(kernel_prebuilt_fw),)
+$(INSTALLED_KERNELFW_TARGET): $(kernel_prebuilt_fw) | $(ACP)
+	$(copy-file-to-new-target)
+else # kernel_prebuilt_fw is empty
+# We empty the firmware target
+INSTALLED_KERNELFW_TARGET :=
+endif
+
+# It makes no sense to use the automatic prebuilts machinery target, if we have
+# used the prebuilt kernel. It would mean re-copying the same files in the
+# upstream repository, from where they came initially. So, we return an error
+# if anyone is trying a "make PREBUILT-*" target.
+PREBUILT-PROJECT-linux:
+	$(error Automatic prebuilts for kernel are available only when building kernel from source)
+
+endif # use_prebuilt_kernel
+
+use_prebuilt_kernel :=
+
+.PHONY: kernel
+kernel: $(INSTALLED_KERNEL_TARGET) \
+		$(INSTALLED_SYSTEM_MAP) \
+		$(INSTALLED_MODULES_TARGET) \
+		$(INSTALLED_KERNELFW_TARGET)
+
+endif # TARGET_NO_KERNEL
diff --git a/target/board/Android.mk b/target/board/Android.mk
index 7d94ee0..bb3916a 100644
--- a/target/board/Android.mk
+++ b/target/board/Android.mk
@@ -16,8 +16,14 @@ endif	# TARGET_NO_BOOTLOADER
 
 ifneq ($(strip $(TARGET_NO_KERNEL)),true)
   INSTALLED_KERNEL_TARGET := $(PRODUCT_OUT)/kernel
+  INSTALLED_MODULES_TARGET := $(PRODUCT_OUT)/kernelmod.tar.gz
+  INSTALLED_KERNELFW_TARGET := $(PRODUCT_OUT)/kernelfw.tar.gz
+  INSTALLED_SYSTEM_MAP := $(PRODUCT_OUT)/System.map
 else
   INSTALLED_KERNEL_TARGET :=
+  INSTALLED_MODULES_TARGET :=
+  INSTALLED_KERNELFW_TARGET :=
+  INSTALLED_SYSTEM_MAP :=
 endif
 
 -include $(TARGET_DEVICE_DIR)/AndroidBoard.mk
diff --git a/tools/build-defconfig.py b/tools/build-defconfig.py
new file mode 100755
index 0000000..24d9f2e
--- /dev/null
+++ b/tools/build-defconfig.py
@@ -0,0 +1,87 @@
+#!/usr/bin/env python
+
+#
+# This script is designed to build a Linux kernel defconfig file out of an
+# arbitrary number of fragments. Input can be passed on stdin or as a list of
+# filenames to read as program arguments. Each input line is analyzed for a
+# config variable. If found, any previous setting of that variable is discarded
+# and replaced with the new setting. If no previous setting of the variable
+# existed, the new setting is added as-is.
+#
+
+import fileinput, sys, re
+
+# Extract the CONFIG_ variable name from an input line:
+def varname(line):
+	comments_stripped = re.sub( r'^[# \t]*', "", line)
+	tokens = re.split( '[= ]', comments_stripped)
+	return tokens[0]
+
+# Determine if line specifies a CONFIG variable or not:
+def is_config(line):
+	if re.search( '^\s*CONFIG', line):                    return True
+	if re.search( '^\s*#\s*CONFIG.*is not set\s*', line): return True
+	return False
+
+if __name__ == "__main__":
+	output = []
+	cache = {}
+	for input_line in fileinput.input():
+
+		# Pass comments directly through:
+		if not is_config(input_line):
+			output.append(input_line)
+			continue
+
+		# If we've already seen this variable, update it:
+		name = varname(input_line)
+		if name in cache:
+			lineno = cache[name]
+			output[lineno] = input_line
+			continue
+
+		# If we haven't seen this variable before, cache it and pass it
+		# through:
+		cache[name] = len(output)
+		output.append(input_line)
+
+	sys.stdout.writelines(output)
+	sys.exit(0)
+
+# Test dataset:
+
+# # Un-duplicated variable
+# CONFIG_A=A
+#
+# # Variable gets changed
+# CONFIG_B=B
+# CONFIG_B=A
+#
+# # Not set variable gets passed through
+# # CONFIG_C is not set
+#
+# # Not set variable gets set
+# # CONFIG_D is not set
+# CONFIG_D=D
+#
+# # Set variable gets unset
+# CONFIG_E=E
+# # CONFIG_E is not set
+
+# Output should be:
+
+# # Un-duplicated variable
+# CONFIG_A=A
+#
+# # Variable gets changed
+# CONFIG_B=A
+#
+# # Not set variable gets passed through
+# # CONFIG_C is not set
+#
+# # Not set variable gets set
+# CONFIG_D=D
+#
+# # Set variable gets unset
+# # CONFIG_E is not set
+
diff --git a/tools/gzip_hack/gzip b/tools/gzip_hack/gzip
new file mode 100755
index 0000000..0510e3e
--- /dev/null
+++ b/tools/gzip_hack/gzip
@@ -0,0 +1,11 @@
+#!/bin/sh
+
+# gzip "wrapper" for minigzip only for use with Kbuild.
+# gzip hack necessary to get the kernel to compress the
+# bzImage with minigzip instead of host gzip, so that the
+# newer verion of deflate algorithn inside zlib is used.
+# This is needed by OTA applypatch, which makes much larger
+# binary diffs of compressed data if the deflate versions
+# are out of alignment.
+
+minigzip -c -9
-- 
1.7.4.1

