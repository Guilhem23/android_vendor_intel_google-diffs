From a145ca83b7f124a40bfd70e0bb9870787a264ada Mon Sep 17 00:00:00 2001
From: Jean Trivelly <jean.trivelly@intel.com>
Date: Wed, 28 Nov 2012 18:00:22 +0100
Subject: [PATCH 03/11] [PORT FROM MAIN] widi: Add to netd some widi dhcp
 capabilities

BZ: 52508

[DO NOT UPSTREAM]

This patch allows netd to handle new commands
related to widi dhcp feature.

Change-Id: Ic0839e84652778e7e3933342fce5fd7275541df9
Signed-off-by: Jean Trivelly <jean.trivelly@intel.com>
Reviewed-on: http://android.intel.com:8080/77540
Reviewed-by: Bachot, Jean-michel <jean-michel.bachot@intel.com>
Tested-by: Champciaux, Nicolas <nicolas.champciaux@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 Android.mk           |    9 ++-
 CommandListener.cpp  |   61 ++++++++++++++++++++
 CommandListener.h    |   14 +++++
 WidiConnectivity.cpp |  151 ++++++++++++++++++++++++++++++++++++++++++++++++++
 WidiConnectivity.h   |   37 ++++++++++++
 5 files changed, 270 insertions(+), 2 deletions(-)
 create mode 100644 WidiConnectivity.cpp
 create mode 100644 WidiConnectivity.h

diff --git a/Android.mk b/Android.mk
index 4c0bcce..cf63a1e 100644
--- a/Android.mk
+++ b/Android.mk
@@ -24,6 +24,11 @@ LOCAL_SRC_FILES:=                                      \
                   logwrapper.c                         \
                   main.cpp                             \
 
+ifeq ($(INTEL_WIDI), true)
+LOCAL_SRC_FILES+= WidiConnectivity.cpp
+LOCAL_CFLAGS += -DINTEL_WIDI
+endif
+
 ifeq ($(BOARD_HAVE_TI12XX),true)
    LOCAL_SRC_FILES += SoftapControllerTI.cpp
 else
@@ -42,9 +47,9 @@ LOCAL_C_INCLUDES := $(KERNEL_HEADERS) \
 
 ifeq ($(BOARD_HAVE_TI12XX),true)
    LOCAL_C_INCLUDES += external/libnl-headers
-   LOCAL_CFLAGS := -DCONFIG_LIBNL20 -Werror=format
+   LOCAL_CFLAGS += -DCONFIG_LIBNL20 -Werror=format
 else
-   LOCAL_CFLAGS := -Werror=format
+   LOCAL_CFLAGS += -Werror=format
 endif
 
 LOCAL_SHARED_LIBRARIES := libstlport libsysutils libcutils libnetutils \
diff --git a/CommandListener.cpp b/CommandListener.cpp
index 7b82682..cc5de03 100644
--- a/CommandListener.cpp
+++ b/CommandListener.cpp
@@ -53,6 +53,9 @@ InterfaceController *CommandListener::sInterfaceCtrl = NULL;
 ResolverController *CommandListener::sResolverCtrl = NULL;
 SecondaryTableController *CommandListener::sSecondaryTableCtrl = NULL;
 FirewallController *CommandListener::sFirewallCtrl = NULL;
+#ifdef INTEL_WIDI
+WidiConnectivity *CommandListener::sWidiCtrl = NULL;
+#endif
 
 /**
  * List of module chains to be created, along with explicit ordering. ORDERING
@@ -136,6 +139,9 @@ CommandListener::CommandListener() :
     registerCmd(new IdletimerControlCmd());
     registerCmd(new ResolverCmd());
     registerCmd(new FirewallCmd());
+#ifdef INTEL_WIDI
+    registerCmd(new WidiCmd());
+#endif
 
     if (!sSecondaryTableCtrl)
         sSecondaryTableCtrl = new SecondaryTableController();
@@ -157,6 +163,10 @@ CommandListener::CommandListener() :
         sFirewallCtrl = new FirewallController();
     if (!sInterfaceCtrl)
         sInterfaceCtrl = new InterfaceController();
+#ifdef INTEL_WIDI
+    if (!sWidiCtrl)
+        sWidiCtrl = new WidiConnectivity();
+#endif
 
     /*
      * This is the only time we touch top-level chains in iptables; controllers
@@ -1439,3 +1449,54 @@ int CommandListener::FirewallCmd::runCommand(SocketClient *cli, int argc,
     cli->sendMsg(ResponseCode::CommandSyntaxError, "Unknown command", false);
     return 0;
 }
+
+#ifdef INTEL_WIDI
+
+CommandListener::WidiCmd::WidiCmd() :
+        NetdCommand("widi") {
+}
+
+int CommandListener::WidiCmd::runCommand(SocketClient *cli, int argc, char **argv) {
+    int rc = 0;
+
+    if (argc < 2) {
+        cli->sendMsg(ResponseCode::CommandSyntaxError, "Widi Missing argument", false);
+        return 0;
+    }
+
+    if (!strcmp(argv[1], "dhcp")) {
+        if (!strcmp(argv[2], "start"))
+            if (argc == 5) {
+                in_addr addr;
+
+                if (!inet_aton(argv[4], &addr)) {
+                    cli->sendMsg(ResponseCode::CommandParameterError, "Widi Invalid IP address", false);
+                    return 0;
+                }
+
+                rc = sWidiCtrl->startDhcp(argv[3], 1, &addr);
+            }
+            else
+                /* Syntax:  dhcp <start> <interface> <Adapter IP addr> */
+                cli->sendMsg(ResponseCode::CommandSyntaxError, "Widi Missing argument", false);
+
+        else if (!strcmp(argv[2], "stop"))
+            rc = sWidiCtrl->stopDhcp();
+        else
+            cli->sendMsg(ResponseCode::CommandSyntaxError, "Widi Unknown argument", false);
+
+    }
+    else {
+        cli->sendMsg(ResponseCode::CommandSyntaxError, "Widi Unknown cmd", false);
+        return 0;
+    }
+
+    if (!rc) {
+        cli->sendMsg(ResponseCode::CommandOkay, "Widi operation succeeded", false);
+    } else {
+        cli->sendMsg(ResponseCode::OperationFailed, "Widi operation failed", true);
+    }
+
+    return 0;
+}
+#endif
diff --git a/CommandListener.h b/CommandListener.h
index 6cae13e..951a022 100644
--- a/CommandListener.h
+++ b/CommandListener.h
@@ -30,6 +30,9 @@
 #include "ResolverController.h"
 #include "SecondaryTableController.h"
 #include "FirewallController.h"
+#ifdef INTEL_WIDI
+#include "WidiConnectivity.h"
+#endif
 
 class CommandListener : public FrameworkListener {
     static TetherController *sTetherCtrl;
@@ -42,6 +45,9 @@ class CommandListener : public FrameworkListener {
     static ResolverController *sResolverCtrl;
     static SecondaryTableController *sSecondaryTableCtrl;
     static FirewallController *sFirewallCtrl;
+#ifdef INTEL_WIDI
+    static WidiConnectivity *sWidiCtrl;
+#endif
 
 public:
     CommandListener();
@@ -136,6 +142,14 @@ private:
         int sendGenericOkFail(SocketClient *cli, int cond);
         static FirewallRule parseRule(const char* arg);
     };
+#ifdef INTEL_WIDI
+    class WidiCmd : public NetdCommand {
+    public:
+        WidiCmd();
+        virtual ~WidiCmd() {}
+        int runCommand(SocketClient *c, int argc, char ** argv);
+    };
+#endif
 };
 
 #endif
diff --git a/WidiConnectivity.cpp b/WidiConnectivity.cpp
new file mode 100644
index 0000000..8844e6f
--- /dev/null
+++ b/WidiConnectivity.cpp
@@ -0,0 +1,151 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stdlib.h>
+#include <errno.h>
+#include <fcntl.h>
+
+#include <sys/socket.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+
+#include <netinet/in.h>
+#include <arpa/inet.h>
+
+#define LOG_TAG "WidiConnectivity"
+#include <cutils/log.h>
+
+
+#include "WidiConnectivity.h"
+
+WidiConnectivity::WidiConnectivity() {
+	dhcpFd = -1;
+	dhcpPid = 0;
+}
+
+WidiConnectivity::~WidiConnectivity() {
+}
+
+int WidiConnectivity::startDhcp(const char *interface, int num_addrs,
+				struct in_addr* addrs) {
+	if (dhcpPid != 0) {
+		LOGI("DHCP already started, restart it!");
+		stopDhcp();
+	}
+
+	LOGD("Starting WiDi DHCP service");
+
+	pid_t pid;
+	int pipefd[2];
+
+	if (pipe(pipefd) < 0) {
+		LOGE("pipe failed (%s)", strerror(errno));
+		return -1;
+	}
+
+	/*
+	 * TODO: Create a monitoring thread to handle and restart
+	 * the daemon if it exits prematurely
+	 */
+	if ((pid = fork()) < 0) {
+		LOGE("fork failed (%s)", strerror(errno));
+		close(pipefd[0]);
+		close(pipefd[1]);
+		return -1;
+	}
+
+	if (!pid) {
+		close(pipefd[1]);
+		if (pipefd[0] != STDIN_FILENO) {
+			if (dup2(pipefd[0], STDIN_FILENO) != STDIN_FILENO) {
+				LOGE("dup2 failed (%s)", strerror(errno));
+				return -1;
+			}
+			close(pipefd[0]);
+		}
+
+		int num_processed_args = 9 + (num_addrs/2) + 1;
+						// 1 null for termination
+		if (num_addrs == 1)
+			num_processed_args++;
+
+		char **args = (char **)malloc(sizeof(char *) *
+							num_processed_args);
+		args[num_processed_args - 1] = NULL;
+		args[0] = (char *)"/system/bin/dnsmasq";
+		args[1] = (char *)"--no-daemon";
+		args[2] = (char *)"--no-resolv";
+		args[3] = (char *)"--no-poll";
+		asprintf(&(args[4]),"-i%s", interface);
+		args[5] = (char *)"--leasefile-ro";
+		args[6] = (char *)"-z";
+		args[7] = (char *)"-Ilo";
+		args[8] = (char *)"--no-ping";
+
+		int nextArg = 9;
+		if (num_addrs == 1)
+		{
+			char *start = strdup(inet_ntoa(addrs[0]));
+			asprintf(&(args[nextArg++]),"--dhcp-range=%s,%s,1h",
+							start, start);
+		}
+		else {
+			for (int addrIndex=0; addrIndex < num_addrs;) {
+				char *start = strdup(inet_ntoa(addrs[addrIndex++]));
+				char *end = strdup(inet_ntoa(addrs[addrIndex++]));
+				asprintf(&(args[nextArg++]),"--dhcp-range=%s,%s,1h",
+							start, end);
+			}
+		}
+
+		if (execv(args[0], args)) {
+			LOGE("execl failed (%s)", strerror(errno));
+		}
+		LOGE("Should never get here!");
+		free(args);
+		return 0;
+	}
+	else {
+		close(pipefd[0]);
+		dhcpPid = pid;
+		dhcpFd = pipefd[1];
+		LOGD("WiDi DHCP service running");
+	}
+
+	return 0;
+}
+
+int WidiConnectivity::stopDhcp() {
+
+	if (dhcpPid == 0) {
+		LOGE("Widi DHCP already stopped");
+		return 0;
+	}
+
+	LOGD("Stopping WiDi DHCP service");
+
+	kill(dhcpPid, SIGTERM);
+	waitpid(dhcpPid, NULL, 0);
+	dhcpPid = 0;
+
+	close(dhcpFd);
+	dhcpFd = -1;
+
+	LOGD("Widi DHCP service stopped");
+
+	return 0;
+}
diff --git a/WidiConnectivity.h b/WidiConnectivity.h
new file mode 100644
index 0000000..6f67fb4
--- /dev/null
+++ b/WidiConnectivity.h
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _WIDI_CONNECTIVITY_H
+#define _WIDI_CONNECTIVITY_H
+
+#include <linux/in.h>
+
+#include <utils/List.h>
+
+class WidiConnectivity {
+	pid_t                 dhcpPid;
+	int                   dhcpFd;
+
+public:
+	WidiConnectivity();
+	virtual ~WidiConnectivity();
+
+	int startDhcp(const char *interface, int num_addrs,
+				  struct in_addr* addrs);
+	int stopDhcp();
+};
+
+#endif
-- 
1.7.9

