From 6598a42177df780f393ec8c2f3bfad974bb597c3 Mon Sep 17 00:00:00 2001
From: Lei Zhang <lei.zhang@intel.com>
Date: Wed, 5 Dec 2012 19:04:23 +0800
Subject: [PATCH 18/39] SurfaceFlinger: Optimize Rotation Animation on
 External Display

BZ: 72116

This is the patch to optimize rotation animation on external display.
Due to time difference on orientatin setting and layer transform,
external display shows instant inverted image on screen. Fix it by
bypassing external display composition until the rotation animation
works on the layers.

Change-Id: I8d82b13548b7021d73c3a9982e7b8002011f2967
Signed-off-by: Lei Zhang <lei.zhang@intel.com>
Signed-off-by: Tong, Bo <box.tong@intel.com>
Reviewed-on: http://android.intel.com:8080/79161
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 services/surfaceflinger/SurfaceFlinger.cpp |   24 +++++++++++++++++++++++-
 services/surfaceflinger/SurfaceFlinger.h   |    1 +
 2 files changed, 24 insertions(+), 1 deletions(-)

diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index cd8649f..16f4763 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -105,7 +105,8 @@ SurfaceFlinger::SurfaceFlinger()
         mBootFinished(false),
         mAnimFlag(true),
         mMutexLocked(false),
-        mSurfaceFlingerThreadId(0)
+        mSurfaceFlingerThreadId(0),
+        mBypassComposition(false)
 {
     ALOGI("SurfaceFlinger is starting");
 
@@ -945,6 +946,16 @@ void SurfaceFlinger::setUpHWComposer() {
                             if (mDebugDisableHWC || mDebugRegion) {
                                 cur->setSkip(true);
                             }
+                            // when rotation really happens on layers, set
+                            // mBypassCompostion back to be false.
+                            if (i==0 && dpy==0 && mBypassComposition) {
+                                const LayerBase::State& s(layer->drawingState());
+                                const uint32_t finalTransform =
+                                                    s.transform.getOrientation();
+                                if (finalTransform & Transform::ROT_INVALID) {
+                                    mBypassComposition = false;
+                                }
+                            }
                         }
                     }
                 }
@@ -982,6 +993,13 @@ void SurfaceFlinger::doComposition() {
     const bool repaintEverything = android_atomic_and(0, &mRepaintEverything);
     for (size_t dpy=0 ; dpy<mDisplays.size() ; dpy++) {
         const sp<DisplayDevice>& hw(mDisplays[dpy]);
+        // Bypass composition on external display when
+        // orientation changed but rotation has not happen
+        // on layers. It is used to optimize user experience
+        // of external display rotation animation.
+        if (dpy == 1 && mBypassComposition)
+            continue;
+
         if (hw->canDraw()) {
             // transform the dirty region into this screen's coordinate space
             const Region dirtyRegion(hw->getDirtyRegion(repaintEverything));
@@ -1155,6 +1173,10 @@ void SurfaceFlinger::handleTransactionLocked(uint32_t transactionFlags)
                             Rect frame = state.frame;
                             Rect viewport = state.viewport;
                             handleDisplayScaling(state, viewport, frame);
+                            // set mBypassComposition once orientation change
+                            if (i==0 && (state.orientation != draw[i].orientation)) {
+                                mBypassComposition = true;
+                            }
                             disp->setProjection(state.orientation,
                                     viewport, frame);
                         }
diff --git a/services/surfaceflinger/SurfaceFlinger.h b/services/surfaceflinger/SurfaceFlinger.h
index c69f6d2..9919195 100644
--- a/services/surfaceflinger/SurfaceFlinger.h
+++ b/services/surfaceflinger/SurfaceFlinger.h
@@ -462,6 +462,7 @@ private:
     volatile nsecs_t mDebugInTransaction;
     nsecs_t mLastTransactionTime;
     bool mBootFinished;
+    bool mBypassComposition;
     bool mAnimFlag;
 
     // these are thread safe
-- 
1.7.9

