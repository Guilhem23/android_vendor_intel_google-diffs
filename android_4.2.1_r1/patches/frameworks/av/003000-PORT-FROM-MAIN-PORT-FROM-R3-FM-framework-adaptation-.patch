From 852f7e0a6b9beec8dee457caaded9ff603c61fb5 Mon Sep 17 00:00:00 2001
From: Sylvain Pichon <sylvainx.pichon@intel.com>
Date: Fri, 27 Jul 2012 16:18:49 +0200
Subject: [PATCH 030/170] [PORT FROM MAIN] [PORT FROM R3]FM: framework
 adaptation for FM mode

BZ: 20378

Add needed function to eventually transmit FM Mode
to audio HAL. Based on same model than telephony mode

Change-Id: Ib9dee263b5678cfff0e08f67ced0520750705216
Orig-Change-Id: Iab95df74938daf5681f623048ffab8db1ef8c435
Orig-Change-Id: I1e4629c8d9493f4efa9f2a911993239dc553cf09
Signed-off-by: Sylvain Pichon <sylvainx.pichon@intel.com>
Reviewed-on: http://android.intel.com:8080/75596
Reviewed-by: lab_cactus <lab_cactus@intel.com>
Reviewed-by: Yao, Yong <yong.yao@intel.com>
Tested-by: Barthes, FabienX <fabienx.barthes@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 include/media/AudioSystem.h                |    4 ++++
 include/media/IAudioFlinger.h              |    2 ++
 include/media/IAudioPolicyService.h        |    1 +
 media/libmedia/AudioSystem.cpp             |   16 ++++++++++++++++
 media/libmedia/IAudioFlinger.cpp           |   10 ++++++++++
 media/libmedia/IAudioPolicyService.cpp     |   16 ++++++++++++++++
 services/audioflinger/AudioFlinger.cpp     |   21 +++++++++++++++++++++
 services/audioflinger/AudioFlinger.h       |    1 +
 services/audioflinger/AudioPolicyService.h |    1 +
 9 files changed, 72 insertions(+), 0 deletions(-)

diff --git a/include/media/AudioSystem.h b/include/media/AudioSystem.h
index 49e1afc..98e235c 100644
--- a/include/media/AudioSystem.h
+++ b/include/media/AudioSystem.h
@@ -67,6 +67,9 @@ public:
     // set audio mode in audio hardware
     static status_t setMode(audio_mode_t mode);
 
+    // set FM RX mode ON/OFF
+    static status_t setFmRxMode(int mode);
+
     // returns true in *state if tracks are active on the specified stream or has been active
     // in the past inPastMs milliseconds
     static status_t isStreamActive(audio_stream_type_t stream, bool *state, uint32_t inPastMs = 0);
@@ -186,6 +189,7 @@ public:
     static status_t setDeviceConnectionState(audio_devices_t device, audio_policy_dev_state_t state, const char *device_address);
     static audio_policy_dev_state_t getDeviceConnectionState(audio_devices_t device, const char *device_address);
     static status_t setPhoneState(audio_mode_t state);
+    static status_t setFmRxState(int state);
     static status_t setForceUse(audio_policy_force_use_t usage, audio_policy_forced_cfg_t config);
     static audio_policy_forced_cfg_t getForceUse(audio_policy_force_use_t usage);
     static audio_io_handle_t getOutput(audio_stream_type_t stream,
diff --git a/include/media/IAudioFlinger.h b/include/media/IAudioFlinger.h
index 5170a87..d5407b5 100644
--- a/include/media/IAudioFlinger.h
+++ b/include/media/IAudioFlinger.h
@@ -116,6 +116,8 @@ public:
 
     // set audio mode
     virtual     status_t    setMode(audio_mode_t mode) = 0;
+    // set FM RX mode
+    virtual     status_t    setFmRxMode(int mode) = 0;
 
     // mic mute/state
     virtual     status_t    setMicMute(bool state) = 0;
diff --git a/include/media/IAudioPolicyService.h b/include/media/IAudioPolicyService.h
index cc2e069..1e3029a 100644
--- a/include/media/IAudioPolicyService.h
+++ b/include/media/IAudioPolicyService.h
@@ -46,6 +46,7 @@ public:
     virtual audio_policy_dev_state_t getDeviceConnectionState(audio_devices_t device,
                                                                           const char *device_address) = 0;
     virtual status_t setPhoneState(audio_mode_t state) = 0;
+    virtual status_t setFmRxState(int state) = 0;
     virtual status_t setForceUse(audio_policy_force_use_t usage, audio_policy_forced_cfg_t config) = 0;
     virtual audio_policy_forced_cfg_t getForceUse(audio_policy_force_use_t usage) = 0;
     virtual audio_io_handle_t getOutput(audio_stream_type_t stream,
diff --git a/media/libmedia/AudioSystem.cpp b/media/libmedia/AudioSystem.cpp
index 207f96f..0bd410d 100644
--- a/media/libmedia/AudioSystem.cpp
+++ b/media/libmedia/AudioSystem.cpp
@@ -166,6 +166,14 @@ status_t AudioSystem::setMode(audio_mode_t mode)
     return af->setMode(mode);
 }
 
+status_t AudioSystem::setFmRxMode(int mode)
+{
+    if (mode >= AUDIO_MODE_FM_CNT) return BAD_VALUE;
+    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
+    if (af == 0) return PERMISSION_DENIED;
+    return af->setFmRxMode(mode);
+}
+
 status_t AudioSystem::setParameters(audio_io_handle_t ioHandle, const String8& keyValuePairs) {
     const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
     if (af == 0) return PERMISSION_DENIED;
@@ -570,6 +578,14 @@ status_t AudioSystem::setPhoneState(audio_mode_t state)
     return aps->setPhoneState(state);
 }
 
+status_t AudioSystem::setFmRxState(int state)
+{
+    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
+    if (aps == 0) return PERMISSION_DENIED;
+
+    return aps->setFmRxState(state);
+}
+
 status_t AudioSystem::setForceUse(audio_policy_force_use_t usage, audio_policy_forced_cfg_t config)
 {
     const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
diff --git a/media/libmedia/IAudioFlinger.cpp b/media/libmedia/IAudioFlinger.cpp
index ce8ffc4..14addb5 100644
--- a/media/libmedia/IAudioFlinger.cpp
+++ b/media/libmedia/IAudioFlinger.cpp
@@ -45,6 +45,7 @@ enum {
     STREAM_VOLUME,
     STREAM_MUTE,
     SET_MODE,
+    SET_FMRX_MODE,
     SET_MIC_MUTE,
     GET_MIC_MUTE,
     SET_PARAMETERS,
@@ -308,6 +309,15 @@ public:
         return reply.readInt32();
     }
 
+    virtual status_t setFmRxMode(int mode)
+    {
+        Parcel data, reply;
+        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
+        data.writeInt32(mode);
+        remote()->transact(SET_FMRX_MODE, data, &reply);
+        return reply.readInt32();
+    }
+
     virtual status_t setMicMute(bool state)
     {
         Parcel data, reply;
diff --git a/media/libmedia/IAudioPolicyService.cpp b/media/libmedia/IAudioPolicyService.cpp
index 401437c..a115c7b 100644
--- a/media/libmedia/IAudioPolicyService.cpp
+++ b/media/libmedia/IAudioPolicyService.cpp
@@ -33,6 +33,7 @@ enum {
     SET_DEVICE_CONNECTION_STATE = IBinder::FIRST_CALL_TRANSACTION,
     GET_DEVICE_CONNECTION_STATE,
     SET_PHONE_STATE,
+    SET_FMRX_STATE,
     SET_RINGER_MODE,    // reserved, no longer used
     SET_FORCE_USE,
     GET_FORCE_USE,
@@ -101,6 +102,15 @@ public:
         return static_cast <status_t> (reply.readInt32());
     }
 
+    virtual status_t setFmRxState(int state)
+    {
+        Parcel data, reply;
+        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
+        data.writeInt32(state);
+        remote()->transact(SET_FMRX_STATE, data, &reply);
+        return static_cast <status_t> (reply.readInt32());
+    }
+
     virtual status_t setForceUse(audio_policy_force_use_t usage, audio_policy_forced_cfg_t config)
     {
         Parcel data, reply;
@@ -403,6 +413,12 @@ status_t BnAudioPolicyService::onTransact(
             return NO_ERROR;
         } break;
 
+        case SET_FMRX_STATE: {
+            CHECK_INTERFACE(IAudioPolicyService, data, reply);
+            reply->writeInt32(static_cast <uint32_t>(setFmRxState(data.readInt32())));
+            return NO_ERROR;
+        } break;
+
         case SET_FORCE_USE: {
             CHECK_INTERFACE(IAudioPolicyService, data, reply);
             audio_policy_force_use_t usage = static_cast <audio_policy_force_use_t>(data.readInt32());
diff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index 76d6447..333a970 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -672,6 +672,27 @@ status_t AudioFlinger::setMode(audio_mode_t mode)
     return ret;
 }
 
+status_t AudioFlinger::setFmRxMode(int mode) {
+    status_t ret = initCheck();
+    if (ret != NO_ERROR) {
+        return ret;
+    }
+
+    if ((mode < 0) || (mode >= AUDIO_MODE_FM_CNT)) {
+        LOGW("Illegal value: setFmRxMode(%d)", mode);
+        return BAD_VALUE;
+    }
+
+    { // scope for the lock
+        AutoMutex lock(mHardwareLock);
+        mHardwareStatus = AUDIO_HW_SET_MODE;
+        ret = mPrimaryHardwareDev->hwDevice()->set_fmrx_mode(mPrimaryHardwareDev->hwDevice(), mode);
+        mHardwareStatus = AUDIO_HW_IDLE;
+    }
+
+    return ret;
+}
+
 status_t AudioFlinger::setMicMute(bool state)
 {
     status_t ret = initCheck();
diff --git a/services/audioflinger/AudioFlinger.h b/services/audioflinger/AudioFlinger.h
index 49e2b2c..c6496e1 100644
--- a/services/audioflinger/AudioFlinger.h
+++ b/services/audioflinger/AudioFlinger.h
@@ -133,6 +133,7 @@ public:
     virtual     bool        streamMute(audio_stream_type_t stream) const;
 
     virtual     status_t    setMode(audio_mode_t mode);
+    virtual     status_t    setFmRxMode(int mode);
 
     virtual     status_t    setMicMute(bool state);
     virtual     bool        getMicMute() const;
diff --git a/services/audioflinger/AudioPolicyService.h b/services/audioflinger/AudioPolicyService.h
index 63f9549..cb3aa01 100644
--- a/services/audioflinger/AudioPolicyService.h
+++ b/services/audioflinger/AudioPolicyService.h
@@ -59,6 +59,7 @@ public:
                                                                 audio_devices_t device,
                                                                 const char *device_address);
     virtual status_t setPhoneState(audio_mode_t state);
+    virtual status_t setFmRxState(int state);
     virtual status_t setForceUse(audio_policy_force_use_t usage, audio_policy_forced_cfg_t config);
     virtual audio_policy_forced_cfg_t getForceUse(audio_policy_force_use_t usage);
     virtual audio_io_handle_t getOutput(audio_stream_type_t stream,
-- 
1.7.9

