From 1e4c212a70d9776a81cd5d103a4aff8fe6bc3d90 Mon Sep 17 00:00:00 2001
From: Jason Hu <jason.hu@intel.com>
Date: Mon, 30 Jul 2012 18:14:07 -0400
Subject: [PATCH 048/170] [PORT FROM MAIN] libstagefright: pass down playing
 info to display Hal.

BZ: 49467

We need to pass down playing info to display Hal. Display Hal
can set proper display mode according to this info. This patch
is an extension for libstagefright to support multiple display
devices.

Change-Id: I34617e58d14df3c06abf02d20af5d79e5e92d748
Signed-off-by: Jason Hu <jason.hu@intel.com>
Reviewed-on: http://android.intel.com:8080/75202
Reviewed-by: cactus <cactus@intel.com>
Tested-by: Ding, Haitao <haitao.ding@intel.com>
Tested-by: Tong, BoX <box.tong@intel.com>
Reviewed-by: Tong, BoX <box.tong@intel.com>
---
 media/libmediaplayerservice/Android.mk            |    6 ++
 media/libmediaplayerservice/nuplayer/Android.mk   |    6 ++
 media/libmediaplayerservice/nuplayer/NuPlayer.cpp |   36 ++++++++++++
 media/libmediaplayerservice/nuplayer/NuPlayer.h   |    7 ++
 media/libstagefright/Android.mk                   |    6 ++
 media/libstagefright/AwesomePlayer.cpp            |   64 ++++++++++++++++++++-
 media/libstagefright/include/AwesomePlayer.h      |    9 +++
 7 files changed, 133 insertions(+), 1 deletions(-)

diff --git a/media/libmediaplayerservice/Android.mk b/media/libmediaplayerservice/Android.mk
index 5b5ed71..28f80f2 100644
--- a/media/libmediaplayerservice/Android.mk
+++ b/media/libmediaplayerservice/Android.mk
@@ -49,6 +49,12 @@ LOCAL_C_INCLUDES :=                                                 \
     $(TOP)/frameworks/native/include/media/openmax                  \
     $(TOP)/external/tremolo/Tremolo                                 \
 
+ifeq ($(TARGET_HAS_MULTIPLE_DISPLAY),true)
+    LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/display
+    LOCAL_SHARED_LIBRARIES += libmultidisplay
+    LOCAL_CFLAGS += -DTARGET_HAS_MULTIPLE_DISPLAY
+endif
+
 LOCAL_MODULE:= libmediaplayerservice
 
 include $(BUILD_SHARED_LIBRARY)
diff --git a/media/libmediaplayerservice/nuplayer/Android.mk b/media/libmediaplayerservice/nuplayer/Android.mk
index f946c1c..26e4a95 100644
--- a/media/libmediaplayerservice/nuplayer/Android.mk
+++ b/media/libmediaplayerservice/nuplayer/Android.mk
@@ -20,6 +20,12 @@ LOCAL_C_INCLUDES := \
 	$(TOP)/frameworks/av/media/libstagefright/rtsp                \
 	$(TOP)/frameworks/native/include/media/openmax
 
+ifeq ($(TARGET_HAS_MULTIPLE_DISPLAY),true)
+    LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/display
+    LOCAL_SHARED_LIBRARIES += libmultidisplay
+    LOCAL_CFLAGS += -DTARGET_HAS_MULTIPLE_DISPLAY
+endif
+
 LOCAL_MODULE:= libstagefright_nuplayer
 
 LOCAL_MODULE_TAGS := eng
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayer.cpp b/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
index 182c258..888b7ef 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
+++ b/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
@@ -69,12 +69,18 @@ NuPlayer::NuPlayer()
       mVideoLateByUs(0ll),
       mNumFramesTotal(0ll),
       mNumFramesDropped(0ll),
+#ifdef TARGET_HAS_MULTIPLE_DISPLAY
+      mMDClient(NULL),
+#endif
       mVideoScalingMode(NATIVE_WINDOW_SCALING_MODE_SCALE_TO_WINDOW),
       mSourceAlreadyStart(false),
       mPreparePending(false) {
 }
 
 NuPlayer::~NuPlayer() {
+#ifdef TARGET_HAS_MULTIPLE_DISPLAY
+    setDisplaySource(false);
+#endif
 }
 
 void NuPlayer::setUID(uid_t uid) {
@@ -100,6 +106,33 @@ void NuPlayer::setDataSource(const sp<IStreamSource> &source) {
     msg->post();
 }
 
+#ifdef TARGET_HAS_MULTIPLE_DISPLAY
+void NuPlayer::setDisplaySource(bool isplaying) {
+    MDSVideoInfo info;
+    LOGI("%s: MultiDisplay: %d", __func__, isplaying);
+    if (isplaying) {
+        if (mVideoDecoder != NULL) {
+            if (mMDClient == NULL) {
+                mMDClient = new MultiDisplayClient();
+            }
+            memset(&info, 0 ,sizeof(&info));
+            info.isplaying = true;
+            info.isprotected = false;
+            mMDClient->updateVideoInfo(&info);
+        }
+    } else {
+      if (mMDClient != NULL) {
+          memset(&info, 0 ,sizeof(&info));
+          info.isplaying = false;
+          info.isprotected = false;
+          mMDClient->updateVideoInfo(&info);
+          delete mMDClient;
+          mMDClient = NULL;
+      }
+    }
+}
+#endif
+
 static bool IsHTTPLiveURL(const char *url) {
     if (!strncasecmp("http://", url, 7)
             || !strncasecmp("https://", url, 8)) {
@@ -375,6 +408,9 @@ void NuPlayer::onMessageReceived(const sp<AMessage> &msg) {
                 msg->post(100000ll);
                 mScanSourcesPending = true;
             }
+#ifdef TARGET_HAS_MULTIPLE_DISPLAY
+            setDisplaySource(true);
+#endif
             break;
         }
 
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayer.h b/media/libmediaplayerservice/nuplayer/NuPlayer.h
index ea8bb55..926089f 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayer.h
+++ b/media/libmediaplayerservice/nuplayer/NuPlayer.h
@@ -21,6 +21,9 @@
 #include <media/MediaPlayerInterface.h>
 #include <media/stagefright/foundation/AHandler.h>
 #include <media/stagefright/NativeWindowWrapper.h>
+#ifdef TARGET_HAS_MULTIPLE_DISPLAY
+#include <display/MultiDisplayClient.h>
+#endif
 
 namespace android {
 
@@ -139,6 +142,10 @@ private:
 
     int64_t mVideoLateByUs;
     int64_t mNumFramesTotal, mNumFramesDropped;
+#ifdef TARGET_HAS_MULTIPLE_DISPLAY
+    MultiDisplayClient* mMDClient;
+    void setDisplaySource(bool isplaying);
+#endif
 
     int32_t mVideoScalingMode;
 
diff --git a/media/libstagefright/Android.mk b/media/libstagefright/Android.mk
index fea2564..e782af2 100644
--- a/media/libstagefright/Android.mk
+++ b/media/libstagefright/Android.mk
@@ -138,6 +138,12 @@ LOCAL_SHARED_LIBRARIES += \
 
 LOCAL_CFLAGS += -Wno-multichar
 
+ifeq ($(TARGET_HAS_MULTIPLE_DISPLAY),true)
+    LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/display
+    LOCAL_SHARED_LIBRARIES += libmultidisplay
+    LOCAL_CFLAGS += -DTARGET_HAS_MULTIPLE_DISPLAY
+endif
+
 LOCAL_MODULE:= libstagefright
 
 LOCAL_MODULE_TAGS := optional
diff --git a/media/libstagefright/AwesomePlayer.cpp b/media/libstagefright/AwesomePlayer.cpp
index f7dcdb7..bdf4078 100644
--- a/media/libstagefright/AwesomePlayer.cpp
+++ b/media/libstagefright/AwesomePlayer.cpp
@@ -193,6 +193,9 @@ AwesomePlayer::AwesomePlayer()
       mExtractorFlags(0),
       mVideoBuffer(NULL),
       mDecryptHandle(NULL),
+#ifdef TARGET_HAS_MULTIPLE_DISPLAY
+      mMDClient(NULL),
+#endif
       mLastVideoTimeUs(-1),
       mTextDriver(NULL) {
     CHECK_EQ(mClient.connect(), (status_t)OK);
@@ -224,6 +227,9 @@ AwesomePlayer::~AwesomePlayer() {
     reset();
 
     mClient.disconnect();
+#ifdef TARGET_HAS_MULTIPLE_DISPLAY
+    setDisplaySource_l(false);
+#endif
 }
 
 void AwesomePlayer::cancelPlayerEvents(bool keepNotifications) {
@@ -350,6 +356,57 @@ void AwesomePlayer::checkDrmStatus(const sp<DataSource>& dataSource) {
     }
 }
 
+#ifdef TARGET_HAS_MULTIPLE_DISPLAY
+void AwesomePlayer::setDisplaySource_l(bool isplaying) {
+    MDSVideoInfo info;
+    LOGI("%s: MultiDisplay %d", __func__, isplaying);
+    if (isplaying) {
+        if (mVideoSource != NULL) {
+            if (mMDClient == NULL) {
+                mMDClient = new MultiDisplayClient();
+            }
+            int wcom = 0;
+            if (mNativeWindow != NULL)
+                mNativeWindow->query(mNativeWindow.get(), NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER, &wcom);
+            /*
+             * 0 means the buffers do not go directly to the window compositor;
+             * 1 means the ANativeWindow DOES send queued buffers
+             * directly to the window compositor;
+             */
+            if (wcom == 1) {
+                sp<MetaData> meta = NULL;
+                int32_t displayW, displayH, frameRate;
+                displayW = displayH = frameRate = 0;
+                memset(&info, 0, sizeof(MDSVideoInfo));
+                info.isplaying = true;
+                info.isprotected = (mDecryptHandle != NULL);
+                bool success = false;
+                if (mVideoTrack != NULL)
+                    meta = mVideoTrack->getFormat();
+                if (meta != NULL) {
+                    success = meta->findInt32(kKeyFrameRate, &frameRate);
+                    if (!success)
+                        frameRate = 0;
+                }
+                info.frameRate = frameRate;
+                info.displayW = displayW;
+                info.displayH = displayH;
+                mMDClient->updateVideoInfo(&info);
+            }
+        }
+    } else {
+        if (mMDClient != NULL) {
+           memset(&info, 0, sizeof(MDSVideoInfo));
+           info.isplaying = false;
+           info.isprotected = false;
+           mMDClient->updateVideoInfo(&info);
+           delete mMDClient;
+           mMDClient = NULL;
+        }
+    }
+}
+#endif
+
 status_t AwesomePlayer::setDataSource_l(const sp<MediaExtractor> &extractor) {
     // Attempt to approximate overall stream bitrate by summing all
     // tracks' individual bitrates, if not all of them advertise bitrate,
@@ -969,7 +1026,9 @@ status_t AwesomePlayer::play_l() {
         params |= IMediaPlayerService::kBatteryDataTrackVideo;
     }
     addBatteryData(params);
-
+#ifdef TARGET_HAS_MULTIPLE_DISPLAY
+    setDisplaySource_l(true);
+#endif
     return OK;
 }
 
@@ -1236,6 +1295,9 @@ void AwesomePlayer::shutdownVideoDecoder_l() {
     }
     IPCThreadState::self()->flushCommands();
     ALOGV("video decoder shutdown completed");
+#ifdef TARGET_HAS_MULTIPLE_DISPLAY
+    setDisplaySource_l(false);
+#endif
 }
 
 status_t AwesomePlayer::setNativeWindow_l(const sp<ANativeWindow> &native) {
diff --git a/media/libstagefright/include/AwesomePlayer.h b/media/libstagefright/include/AwesomePlayer.h
index 1422687..272474b 100644
--- a/media/libstagefright/include/AwesomePlayer.h
+++ b/media/libstagefright/include/AwesomePlayer.h
@@ -27,6 +27,9 @@
 #include <media/stagefright/TimeSource.h>
 #include <utils/threads.h>
 #include <drm/DrmManagerClient.h>
+#ifdef TARGET_HAS_MULTIPLE_DISPLAY
+#include <display/MultiDisplayClient.h>
+#endif
 
 namespace android {
 
@@ -200,6 +203,9 @@ private:
 
     bool mWatchForAudioSeekComplete;
     bool mWatchForAudioEOS;
+#ifdef TARGET_HAS_MULTIPLE_DISPLAY
+    MultiDisplayClient* mMDClient;
+#endif
 
     sp<TimedEventQueue::Event> mVideoEvent;
     bool mVideoEventPending;
@@ -245,6 +251,9 @@ private:
 
     status_t setDataSource_l(const sp<DataSource> &dataSource);
     status_t setDataSource_l(const sp<MediaExtractor> &extractor);
+#ifdef TARGET_HAS_MULTIPLE_DISPLAY
+    void setDisplaySource_l(bool isplaying);
+#endif
     void reset_l();
     status_t seekTo_l(int64_t timeUs);
     status_t pause_l(bool at_eos = false);
-- 
1.7.9

