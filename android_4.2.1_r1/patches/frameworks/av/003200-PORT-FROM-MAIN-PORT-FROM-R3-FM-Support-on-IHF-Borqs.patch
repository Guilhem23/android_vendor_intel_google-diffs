From 98e2aa120e8e2f8ecedc165904ff2c68c9a7f052 Mon Sep 17 00:00:00 2001
From: Eduardo Mendi <eduardoX.mendi@intel.com>
Date: Fri, 14 Sep 2012 14:37:12 +0200
Subject: [PATCH 032/170] [PORT FROM MAIN] [PORT FROM R3]FM Support on IHF
 (Borqs)

BZ: 56091

This patch combines 3 contributions from Borqs
See detail below

fmradio: Integration of Borqs contribution (Date: Sep 4, 2012).

BZ: 55486

Original commit message:

Sun Liang: enable fm radio through speaker

borqsbtx:0034955
rootcause: add new API for FM radio application enable/disable speaker.
1. setSpeakerfmOn(boolean on) enable/disable speaker
2. boolean isSpeakerfmOn() check speaker status

Orig-Change-Id: Ia32c6b487b9f80a8da1e13625507665357c1111d
Reviewed-on: https://bkbgerrit.borqs.com/gerrit/7869
Tested-by: svnadmin <svnadmin@borqs.com>
Reviewed-by: b169 <b169@borqs.com>

fmradio: Integration of Borqs contribution (Date: Sep 10, 2012).

BZ: 56509

Original commit message:

Sun Liang: add lock protection for set_fm_mode

borqsbtx:0036867
rootcause: in setFmRxState function, set_fm_mode is called without lock protection,
there exist output device swithc in set_fm_mode, so lock protection is needed for
potential thread concurrency

orig-Change-Id: Ie7ff48bc44f069755736f317d6a8dc35e1324bfb
Reviewed-on: https://bkbgerrit.borqs.com/gerrit/9239
Tested-by: svnadmin <svnadmin@borqs.com>
Reviewed-by: b461 <b461@borqs.com>

fmradio: Integration of Borqs contribution (Date: Sep 10, 2012).

BZ: 56509

Original commit message:

Sun Liang: reset FM volume to avoid audio bursts when do FM output device swith

borqsbtx: 0036841
rootcause: reset FM volume to avoid audio bursts when do FM output device swith,
FM stack receive AudioManager.VOLUME_CHANGED_ACTION intent to reset volume again.

Change-Id: I002d0d3e00d41b18150ca2186150e171c5b98c09
orig-Change-Id: I7d6daefca32851c92dce35d1697a27493d8aa721
orig-Change-Id: Ia8c5645cec0b15c4241456a50130c419b6d8009d
Reviewed-on: https://bkbgerrit.borqs.com/gerrit/9209
Tested-by: svnadmin <svnadmin@borqs.com>
Reviewed-by: b461 <b461@borqs.com>
Reviewed-on: http://android.intel.com:8080/75595
Reviewed-by: lab_cactus <lab_cactus@intel.com>
Reviewed-by: Yao, Yong <yong.yao@intel.com>
Tested-by: Barthes, FabienX <fabienx.barthes@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 services/audioflinger/AudioPolicyService.cpp |   26 ++++++++++++++++++++++++++
 1 files changed, 26 insertions(+), 0 deletions(-)

diff --git a/services/audioflinger/AudioPolicyService.cpp b/services/audioflinger/AudioPolicyService.cpp
index c5226ef..fa4b4e8 100644
--- a/services/audioflinger/AudioPolicyService.cpp
+++ b/services/audioflinger/AudioPolicyService.cpp
@@ -49,6 +49,13 @@ static const char kCmdDeadlockedString[] = "AudioPolicyService command thread ma
 static const int kDumpLockRetries = 50;
 static const int kDumpLockSleepUs = 20000;
 
+ static bool checkPermission() {
+	if (getpid() == IPCThreadState::self()->getCallingPid()) return true;
+	bool ok = checkCallingPermission(String16("android.permission.MODIFY_AUDIO_SETTINGS"));
+	if (!ok) LOGE("Request requires android.permission.MODIFY_AUDIO_SETTINGS");
+	return ok;
+}
+
 namespace {
     extern struct audio_policy_service_ops aps_ops;
 };
@@ -184,6 +191,25 @@ status_t AudioPolicyService::setPhoneState(audio_mode_t state)
     return NO_ERROR;
 }
 
+status_t AudioPolicyService::setFmRxState(int state)
+{
+    if (mpAudioPolicy == NULL) {
+    	return NO_INIT;
+    }
+    if (!checkPermission()) {
+    	return PERMISSION_DENIED;
+    }
+    if (state < 0 || state > AUDIO_MODE_FM_MAX) {
+      	return BAD_VALUE;
+    }
+    
+    AudioSystem::setFmRxMode(state);
+    
+    Mutex::Autolock _l(mLock);
+    mpAudioPolicy->set_fm_mode(mpAudioPolicy, state);
+    return NO_ERROR;
+}
+
 status_t AudioPolicyService::setForceUse(audio_policy_force_use_t usage,
                                          audio_policy_forced_cfg_t config)
 {
-- 
1.7.9

