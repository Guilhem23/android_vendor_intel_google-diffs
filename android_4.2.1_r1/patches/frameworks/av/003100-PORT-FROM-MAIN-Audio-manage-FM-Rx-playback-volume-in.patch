From 273ee988fcfbfb6f93069676fbf2b7f8715805c0 Mon Sep 17 00:00:00 2001
From: jbelloua <jean-marie.bellouard@intel.com>
Date: Tue, 25 Sep 2012 18:26:19 +0200
Subject: [PATCH 031/170] [PORT FROM MAIN] [Audio] manage FM Rx playback
 volume in Audio Framework

BZ: 46452

add new API to update FM Rx volume in audio framework

Change-Id: Idb8d3784bd070f32ec5d013ead7fe6d065bb3d04
Orig-Change-Id: I37f03514a1301577fadc316156c283c24f2500e4
Signed-off-by: jbelloua <jean-marie.bellouard@intel.com>
Reviewed-on: http://android.intel.com:8080/75604
Reviewed-by: lab_cactus <lab_cactus@intel.com>
Reviewed-by: Yao, Yong <yong.yao@intel.com>
Tested-by: Barthes, FabienX <fabienx.barthes@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 include/media/AudioSystem.h                  |    1 +
 include/media/IAudioFlinger.h                |    1 +
 media/libmedia/AudioSystem.cpp               |    7 ++++
 media/libmedia/IAudioFlinger.cpp             |   16 ++++++++
 services/audioflinger/AudioFlinger.cpp       |   20 ++++++++++
 services/audioflinger/AudioFlinger.h         |    3 ++
 services/audioflinger/AudioPolicyService.cpp |   50 ++++++++++++++++++++++++++
 services/audioflinger/AudioPolicyService.h   |   10 +++++-
 8 files changed, 107 insertions(+), 1 deletions(-)

diff --git a/include/media/AudioSystem.h b/include/media/AudioSystem.h
index 98e235c..8ebf306 100644
--- a/include/media/AudioSystem.h
+++ b/include/media/AudioSystem.h
@@ -119,6 +119,7 @@ public:
         audio_channel_mask_t channelMask, size_t* buffSize);
 
     static status_t setVoiceVolume(float volume);
+    static status_t setFmRxVolume(float volume);
 
     // return the number of audio frames written by AudioFlinger to audio HAL and
     // audio dsp to DAC since the output on which the specified stream is playing
diff --git a/include/media/IAudioFlinger.h b/include/media/IAudioFlinger.h
index d5407b5..16d4092 100644
--- a/include/media/IAudioFlinger.h
+++ b/include/media/IAudioFlinger.h
@@ -157,6 +157,7 @@ public:
     virtual status_t setStreamOutput(audio_stream_type_t stream, audio_io_handle_t output) = 0;
 
     virtual status_t setVoiceVolume(float volume) = 0;
+    virtual status_t setFmRxVolume(float volume) = 0;
 
     virtual status_t getRenderPosition(uint32_t *halFrames, uint32_t *dspFrames,
                                     audio_io_handle_t output) const = 0;
diff --git a/media/libmedia/AudioSystem.cpp b/media/libmedia/AudioSystem.cpp
index 0bd410d..a6384c9 100644
--- a/media/libmedia/AudioSystem.cpp
+++ b/media/libmedia/AudioSystem.cpp
@@ -377,6 +377,13 @@ status_t AudioSystem::setVoiceVolume(float value)
     return af->setVoiceVolume(value);
 }
 
+status_t AudioSystem::setFmRxVolume(float value)
+{
+    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
+    if (af == 0) return PERMISSION_DENIED;
+    return af->setFmRxVolume(value);
+}
+
 status_t AudioSystem::getRenderPosition(uint32_t *halFrames, uint32_t *dspFrames, audio_stream_type_t stream)
 {
     const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
diff --git a/media/libmedia/IAudioFlinger.cpp b/media/libmedia/IAudioFlinger.cpp
index 14addb5..8107a79 100644
--- a/media/libmedia/IAudioFlinger.cpp
+++ b/media/libmedia/IAudioFlinger.cpp
@@ -61,6 +61,7 @@ enum {
     CLOSE_INPUT,
     SET_STREAM_OUTPUT,
     SET_VOICE_VOLUME,
+    SET_FM_RX_VOLUME,
     GET_RENDER_POSITION,
     GET_INPUT_FRAMES_LOST,
     NEW_AUDIO_SESSION_ID,
@@ -511,6 +512,15 @@ public:
         return reply.readInt32();
     }
 
+    virtual status_t setFmRxVolume(float volume)
+    {
+        Parcel data, reply;
+        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
+        data.writeFloat(volume);
+        remote()->transact(SET_FM_RX_VOLUME, data, &reply);
+        return reply.readInt32();
+    }
+
     virtual status_t getRenderPosition(uint32_t *halFrames, uint32_t *dspFrames,
             audio_io_handle_t output) const
     {
@@ -972,6 +982,12 @@ status_t BnAudioFlinger::onTransact(
             reply->writeInt32( setVoiceVolume(volume) );
             return NO_ERROR;
         } break;
+        case SET_FM_RX_VOLUME: {
+            CHECK_INTERFACE(IAudioFlinger, data, reply);
+            float volume = data.readFloat();
+            reply->writeInt32( setFmRxVolume(volume) );
+            return NO_ERROR;
+        } break;
         case GET_RENDER_POSITION: {
             CHECK_INTERFACE(IAudioFlinger, data, reply);
             audio_io_handle_t output = (audio_io_handle_t) data.readInt32();
diff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index 333a970..3e36da6 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -1049,6 +1049,26 @@ status_t AudioFlinger::setVoiceVolume(float value)
     return ret;
 }
 
+status_t AudioFlinger::setFmRxVolume(float value)
+{
+    status_t ret = initCheck();
+    if (ret != NO_ERROR) {
+        return ret;
+    }
+
+    // check calling permissions
+    if (!settingsAllowed()) {
+        return PERMISSION_DENIED;
+    }
+
+    AutoMutex lock(mHardwareLock);
+    mHardwareStatus = AUDIO_HW_SET_FM_RX_VOLUME;
+    ret = mPrimaryHardwareDev->hwDevice()->set_fm_rx_volume(mPrimaryHardwareDev->hwDevice(), value);
+    mHardwareStatus = AUDIO_HW_IDLE;
+
+    return ret;
+}
+
 status_t AudioFlinger::getRenderPosition(uint32_t *halFrames, uint32_t *dspFrames,
         audio_io_handle_t output) const
 {
diff --git a/services/audioflinger/AudioFlinger.h b/services/audioflinger/AudioFlinger.h
index c6496e1..8f6f6ef 100644
--- a/services/audioflinger/AudioFlinger.h
+++ b/services/audioflinger/AudioFlinger.h
@@ -175,6 +175,8 @@ public:
 
     virtual status_t setVoiceVolume(float volume);
 
+    virtual status_t setFmRxVolume(float volume);
+
     virtual status_t getRenderPosition(uint32_t *halFrames, uint32_t *dspFrames,
                                        audio_io_handle_t output) const;
 
@@ -2023,6 +2025,7 @@ mutable Mutex               mLock;      // mutex for process, commands and handl
         AUDIO_HW_GET_MIC_MUTE,          // get_mic_mute
         AUDIO_HW_SET_MIC_MUTE,          // set_mic_mute
         AUDIO_HW_SET_VOICE_VOLUME,      // set_voice_volume
+        AUDIO_HW_SET_FM_RX_VOLUME,      // set_fm_rx_volume
         AUDIO_HW_SET_PARAMETER,         // set_parameters
         AUDIO_HW_GET_INPUT_BUFFER_SIZE, // get_input_buffer_size
         AUDIO_HW_GET_MASTER_VOLUME,     // get_master_volume
diff --git a/services/audioflinger/AudioPolicyService.cpp b/services/audioflinger/AudioPolicyService.cpp
index 8b99bd2..c5226ef 100644
--- a/services/audioflinger/AudioPolicyService.cpp
+++ b/services/audioflinger/AudioPolicyService.cpp
@@ -723,6 +723,17 @@ bool AudioPolicyService::AudioCommandThread::threadLoop()
                     }
                     delete data;
                     }break;
+                case SET_FM_RX_VOLUME: {
+                    FmRxVolumeData *data = (FmRxVolumeData *)command->mParam;
+                    ALOGV("AudioCommandThread() processing set fm rx volume: value %f",
+                            data->mVolume);
+                    command->mStatus = AudioSystem::setFmRxVolume(data->mVolume);
+                    if (command->mWaitStatus) {
+                        command->mCond.signal();
+                        mWaitWorkCV.wait(mLock);
+                    }
+                    delete data;
+                    }break;
                 default:
                     ALOGW("AudioCommandThread() unknown command %d", command->mCommand);
                 }
@@ -878,6 +889,32 @@ status_t AudioPolicyService::AudioCommandThread::voiceVolumeCommand(float volume
     return status;
 }
 
+status_t AudioPolicyService::AudioCommandThread::fmRxVolumeCommand(float volume, int delayMs)
+{
+    status_t status = NO_ERROR;
+
+    AudioCommand *command = new AudioCommand();
+    command->mCommand = SET_FM_RX_VOLUME;
+    FmRxVolumeData *data = new FmRxVolumeData();
+    data->mVolume = volume;
+    command->mParam = data;
+    if (delayMs == 0) {
+        command->mWaitStatus = true;
+    } else {
+        command->mWaitStatus = false;
+    }
+    Mutex::Autolock _l(mLock);
+    insertCommand_l(command, delayMs);
+    ALOGV("AudioCommandThread() adding set fm rx volume volume %f", volume);
+    mWaitWorkCV.signal();
+    if (command->mWaitStatus) {
+        command->mCond.wait(mLock);
+        status =  command->mStatus;
+        mWaitWorkCV.signal();
+    }
+    return status;
+}
+
 // insertCommand_l() must be called with mLock held
 void AudioPolicyService::AudioCommandThread::insertCommand_l(AudioCommand *command, int delayMs)
 {
@@ -1043,6 +1080,11 @@ int AudioPolicyService::setVoiceVolume(float volume, int delayMs)
     return (int)mAudioCommandThread->voiceVolumeCommand(volume, delayMs);
 }
 
+int AudioPolicyService::setFmRxVolume(float volume, int delayMs)
+{
+    return (int)mAudioCommandThread->fmRxVolumeCommand(volume, delayMs);
+}
+
 // ----------------------------------------------------------------------------
 // Audio pre-processing configuration
 // ----------------------------------------------------------------------------
@@ -1539,6 +1581,13 @@ static int aps_set_voice_volume(void *service, float volume, int delay_ms)
     return audioPolicyService->setVoiceVolume(volume, delay_ms);
 }
 
+static int aps_set_fm_rx_volume(void *service, float volume, int delay_ms)
+{
+    AudioPolicyService *audioPolicyService = (AudioPolicyService *)service;
+
+    return audioPolicyService->setFmRxVolume(volume, delay_ms);
+}
+
 }; // extern "C"
 
 namespace {
@@ -1557,6 +1606,7 @@ namespace {
         start_tone            : aps_start_tone,
         stop_tone             : aps_stop_tone,
         set_voice_volume      : aps_set_voice_volume,
+        set_fm_rx_volume      : aps_set_fm_rx_volume,
         move_effects          : aps_move_effects,
         load_hw_module        : aps_load_hw_module,
         open_output_on_module : aps_open_output_on_module,
diff --git a/services/audioflinger/AudioPolicyService.h b/services/audioflinger/AudioPolicyService.h
index cb3aa01..13b9ba5 100644
--- a/services/audioflinger/AudioPolicyService.h
+++ b/services/audioflinger/AudioPolicyService.h
@@ -135,6 +135,7 @@ public:
     virtual status_t startTone(audio_policy_tone_t tone, audio_stream_type_t stream);
     virtual status_t stopTone();
     virtual status_t setVoiceVolume(float volume, int delayMs = 0);
+    virtual status_t setFmRxVolume(float volume, int delayMs = 0);
 
 private:
                         AudioPolicyService();
@@ -158,7 +159,8 @@ private:
             STOP_TONE,
             SET_VOLUME,
             SET_PARAMETERS,
-            SET_VOICE_VOLUME
+            SET_VOICE_VOLUME,
+            SET_FM_RX_VOLUME
         };
 
         AudioCommandThread (String8 name);
@@ -179,6 +181,7 @@ private:
                     status_t    parametersCommand(audio_io_handle_t ioHandle,
                                             const char *keyValuePairs, int delayMs = 0);
                     status_t    voiceVolumeCommand(float volume, int delayMs = 0);
+                    status_t    fmRxVolumeCommand(float volume, int delayMs = 0);
                     void        insertCommand_l(AudioCommand *command, int delayMs = 0);
 
     private:
@@ -223,6 +226,11 @@ private:
             float mVolume;
         };
 
+        class FmRxVolumeData {
+        public:
+            float mVolume;
+        };
+
         Mutex   mLock;
         Condition mWaitWorkCV;
         Vector <AudioCommand *> mAudioCommands; // list of pending commands
-- 
1.7.9

