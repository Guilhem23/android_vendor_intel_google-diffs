From 56414b5439fbd95981aefab8c57b8aa0783eca82 Mon Sep 17 00:00:00 2001
From: Charitardha <satya.charitardha.jayanti@intel.com>
Date: Thu, 23 Aug 2012 14:07:16 +0530
Subject: [PATCH 068/170] [PORT FROM MAIN]JB: Support of ALAC Decoder

BZ: 53589

Patch 5
Created ALAC Decoder header and OMX Extension header
for adding new OMX Extension indices for ALAC OMX-SF
plug-in for JellyBean. Implemented the ALAC format
extractor as a standard stagefright plug-in
component, enabling the standard media player to
recognize ALAC content, unpack the elementary
stream, and pass it to the ALAC decoder engine.
Added new meta data keys for ALAC.
DO NOT UPSTREAM

Change-Id: Ia5bf6eb8155821d4c7b21f60a517d328a3e9e9db
Signed-off-by: Charitardha <satya.charitardha.jayanti@intel.com>
Reviewed-on: http://android.intel.com:8080/75496
Reviewed-by: M, Arulselvan <arulselvan.m@intel.com>
Tested-by: M, Arulselvan <arulselvan.m@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 include/media/stagefright/MediaDefs.h      |    1 +
 include/media/stagefright/MetaData.h       |    1 +
 include/media/stagefright/OMXCodec.h       |    1 +
 media/libstagefright/Android.mk            |    1 +
 media/libstagefright/MPEG4Extractor.cpp    |  110 ++++++++++++++++++++++++++++
 media/libstagefright/MediaDefs.cpp         |    1 +
 media/libstagefright/OMXCodec.cpp          |   44 +++++++++++-
 media/libstagefright/include/ALACDecoder.h |  101 +++++++++++++++++++++++++
 media/libstagefright/omx/OMX_Ext_Intel.h   |  105 ++++++++++++++++++++++++++
 media/libstagefright/omx/SoftOMXPlugin.cpp |    1 +
 10 files changed, 365 insertions(+), 1 deletions(-)
 create mode 100644 media/libstagefright/include/ALACDecoder.h
 create mode 100644 media/libstagefright/omx/OMX_Ext_Intel.h

diff --git a/include/media/stagefright/MediaDefs.h b/include/media/stagefright/MediaDefs.h
index 03e0fa8..c2dafc9 100644
--- a/include/media/stagefright/MediaDefs.h
+++ b/include/media/stagefright/MediaDefs.h
@@ -42,6 +42,7 @@ extern const char *MEDIA_MIMETYPE_AUDIO_G711_MLAW;
 extern const char *MEDIA_MIMETYPE_AUDIO_RAW;
 extern const char *MEDIA_MIMETYPE_AUDIO_FLAC;
 extern const char *MEDIA_MIMETYPE_AUDIO_AAC_ADTS;
+extern const char *MEDIA_MIMETYPE_AUDIO_ALAC;
 
 extern const char *MEDIA_MIMETYPE_CONTAINER_MPEG4;
 extern const char *MEDIA_MIMETYPE_CONTAINER_WAV;
diff --git a/include/media/stagefright/MetaData.h b/include/media/stagefright/MetaData.h
index 6811394..817f64f 100644
--- a/include/media/stagefright/MetaData.h
+++ b/include/media/stagefright/MetaData.h
@@ -52,6 +52,7 @@ enum {
     kKeyAACProfile        = 'aacp',  // int32_t
     kKeyAVCC              = 'avcc',  // raw data
     kKeyD263              = 'd263',  // raw data
+    kKeyAlacMagicCookie   = 'almc',  // raw data
     kKeyVorbisInfo        = 'vinf',  // raw data
     kKeyVorbisBooks       = 'vboo',  // raw data
     kKeyWantsNALFragments = 'NALf',
diff --git a/include/media/stagefright/OMXCodec.h b/include/media/stagefright/OMXCodec.h
index 41b00d5..1ce7f59 100644
--- a/include/media/stagefright/OMXCodec.h
+++ b/include/media/stagefright/OMXCodec.h
@@ -254,6 +254,7 @@ private:
             int32_t aacProfile, bool isADTS);
 
     void setG711Format(int32_t numChannels);
+    status_t setALACFormat( void *pConfig );
 
     status_t setVideoPortFormatType(
             OMX_U32 portIndex,
diff --git a/media/libstagefright/Android.mk b/media/libstagefright/Android.mk
index 576791d..25cffb5 100644
--- a/media/libstagefright/Android.mk
+++ b/media/libstagefright/Android.mk
@@ -66,6 +66,7 @@ LOCAL_C_INCLUDES:= \
         $(TOP)/external/flac/include \
         $(TOP)/external/tremolo \
         $(TOP)/external/openssl/include \
+        $(TOP)/frameworks/av/media/libstagefright/omx \
 
 LOCAL_SHARED_LIBRARIES := \
         libbinder \
diff --git a/media/libstagefright/MPEG4Extractor.cpp b/media/libstagefright/MPEG4Extractor.cpp
index f37fca2..f951251 100644
--- a/media/libstagefright/MPEG4Extractor.cpp
+++ b/media/libstagefright/MPEG4Extractor.cpp
@@ -19,6 +19,7 @@
 #include <utils/Log.h>
 
 #include "include/MPEG4Extractor.h"
+#include "include/ALACDecoder.h"
 #include "include/SampleTable.h"
 #include "include/ESDS.h"
 
@@ -246,6 +247,9 @@ static const char *FourCC2MIME(uint32_t fourcc) {
         case FOURCC('s', 'a', 'w', 'b'):
             return MEDIA_MIMETYPE_AUDIO_AMR_WB;
 
+        case FOURCC('a', 'l', 'a', 'c'):
+            return MEDIA_MIMETYPE_AUDIO_ALAC;
+
         case FOURCC('m', 'p', '4', 'v'):
             return MEDIA_MIMETYPE_VIDEO_MPEG4;
 
@@ -868,6 +872,112 @@ status_t MPEG4Extractor::parseChunk(off64_t *offset, int depth) {
             break;
         }
 
+        case FOURCC('c', 'h', 'a', 'n'):
+        {
+            ALOGV("Found optional Channel Layout Info for ALAC magic cookie");
+
+            if (chunk_size == sizeof(ALACChannelLayoutInfo))
+            {
+                ALACChannelLayoutInfo cli;
+
+                if (mDataSource->readAt(data_offset, &cli, sizeof(ALACChannelLayoutInfo)) != sizeof(ALACChannelLayoutInfo))
+                {
+                    ALOGE("Error reading ALAC Channel Layout Info chunk.");
+                    return ERROR_MALFORMED;
+                }
+
+                ALOGV("ALAC channel layout info: size(%u), id(%u), vflags(%u), tag(%u)",
+                    ntohl(cli.channelLayoutInfoSize),
+                    ntohl(cli.channelLayoutInfoID),
+                    ntohl(cli.versionFlags),
+                    ntohl(cli.channelLayoutTag));
+
+                // Not used yet. TODO: pass to decoder.
+            }
+            else
+            {
+                ALOGV("Ignoring potentially malformed alac channel layout info: size=0x%llx", chunk_size);
+            }
+
+            *offset += chunk_size;
+            break;
+        }
+        case FOURCC('a', 'l', 'a', 'c'):
+        {
+            // Note: parseChunk() routine handles "big box" where size is stored differently.
+            // For purpose of ALAC support the size should be deterministic, and stored in 32 bit.
+            // alac chunk could be for AudioSampleEntry which encapsulate entire magic cookie
+            // ALACSpecificConfig has a 12-byte FullBox header
+            if (chunk_size == (sizeof(FullBox) + sizeof(ALACSpecificConfig))) {
+                // ALACSpecificConfig
+                uint8_t buffer[sizeof(ALACSpecificConfig)];
+                ALACSpecificConfig *pasc = (ALACSpecificConfig *)&buffer[0];
+                data_offset = *offset + sizeof(FullBox);
+                if (mDataSource->readAt(data_offset, &buffer[0], sizeof(ALACSpecificConfig)) != sizeof(ALACSpecificConfig)) {
+                    ALOGE("Cannot retrieved required ALAC magic cookie!");
+                    return ERROR_MALFORMED;
+                }
+
+                // set the sample rate and channel count with values in magic cookie
+                mLastTrack->meta->setInt32(kKeyChannelCount, (0x000000ff & pasc->numChannels));
+                mLastTrack->meta->setInt32(kKeySampleRate, ntohl(pasc->sampleRate));
+
+                // Convert magic cookie to little endian
+                ALACSpecificConfig *pMC;
+                pMC = (ALACSpecificConfig *)&(buffer[0]);
+                pMC->frameLength = U32_AT((uint8_t *)&(pMC->frameLength));
+                pMC->maxRun = U16_AT((uint8_t *)&(pMC->maxRun));
+                pMC->maxFrameBytes = U32_AT((uint8_t *)&(pMC->maxFrameBytes));
+                pMC->avgBitRate = U32_AT((uint8_t *)&(pMC->avgBitRate));
+                pMC->sampleRate = U32_AT((uint8_t *)&(pMC->sampleRate));
+                mLastTrack->meta->setData(kKeyAlacMagicCookie, 0, (void *)&buffer[0], sizeof(ALACSpecificConfig));
+                *offset += chunk_size;
+            }
+            else if (chunk_size > sizeof(AudioSampleEntry)) {
+                // Treat as Audio Sample Entry and parse recursively.
+                AudioSampleEntry ase;
+                if (mDataSource->readAt(*offset, &ase, sizeof(AudioSampleEntry)) != sizeof(AudioSampleEntry)) {
+                    ALOGE("Cannot retrieved required ALAC magic cookie!");
+                    return ERROR_MALFORMED;
+                }
+
+                ase.channel_count = ntohs(ase.channel_count);
+                ase.sample_rate = ntohl(ase.sample_rate);
+                mLastTrack->meta->setCString(kKeyMIMEType, FourCC2MIME(chunk_type));
+                mLastTrack->meta->setInt32(kKeyChannelCount, ase.channel_count);
+                mLastTrack->meta->setInt32(kKeySampleRate, ase.sample_rate);
+
+                ALOGV("ase.size=%u", ntohl(ase.size));
+                ALOGV("ase.type='%c' '%c' '%c' '%c'", ase.type & 0xff, (ase.type & 0xff00) >> 8, (ase.type &0xff0000) >> 16,  (ase.type & 0xff000000) >> 24);
+                ALOGV("ase.data_reference_index=%u", ntohs(ase.data_reference_index));
+                ALOGV("ase.channel_count=%u", ase.channel_count);
+                ALOGV("ase.sample_size=%u", ntohs(ase.sample_size));
+                ALOGV("ase.sample_rate=%u", ase.sample_rate);
+
+                off_t stop_offset = *offset + chunk_size;
+                *offset = *offset + sizeof(AudioSampleEntry);
+                while (*offset < stop_offset) {
+                    status_t err = parseChunk(offset, depth + 1);
+                    if (err != OK) {
+                        return err;
+                    }
+                }
+
+                if (*offset != stop_offset) {
+                    return ERROR_MALFORMED;
+                }
+            }
+            else
+            {
+                *offset += chunk_size;
+            }
+            break;
+        }
+        case FOURCC('f', 'r', 'm', 'a'):
+            ALOGV("Legacy ALAC magic cookie format found.");
+            *offset += chunk_size;
+            break;
+
         case FOURCC('s', 't', 's', 'd'):
         {
             if (chunk_data_size < 8) {
diff --git a/media/libstagefright/MediaDefs.cpp b/media/libstagefright/MediaDefs.cpp
index be65806..f5f31e9 100644
--- a/media/libstagefright/MediaDefs.cpp
+++ b/media/libstagefright/MediaDefs.cpp
@@ -40,6 +40,7 @@ const char *MEDIA_MIMETYPE_AUDIO_G711_MLAW = "audio/g711-mlaw";
 const char *MEDIA_MIMETYPE_AUDIO_RAW = "audio/raw";
 const char *MEDIA_MIMETYPE_AUDIO_FLAC = "audio/flac";
 const char *MEDIA_MIMETYPE_AUDIO_AAC_ADTS = "audio/aac-adts";
+const char *MEDIA_MIMETYPE_AUDIO_ALAC = "audio/alac";
 
 const char *MEDIA_MIMETYPE_CONTAINER_MPEG4 = "video/mp4";
 const char *MEDIA_MIMETYPE_CONTAINER_WAV = "audio/x-wav";
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index becfc2a..1b2e36a 100755
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -19,6 +19,7 @@
 #include <utils/Log.h>
 
 #include "include/AACEncoder.h"
+#include "include/ALACDecoder.h"
 
 #include "include/ESDS.h"
 
@@ -41,6 +42,7 @@
 
 #include <OMX_Audio.h>
 #include <OMX_Component.h>
+#include <OMX_Ext_Intel.h>
 
 #include "include/avc_utils.h"
 
@@ -49,6 +51,7 @@
 #include "include/ThreadedSource.h"
 #endif
 
+
 #ifdef USE_INTEL_ASF_EXTRACTOR
 #include "MetaDataExt.h"
 #endif
@@ -593,6 +596,13 @@ status_t OMXCodec::configureCodec(const sp<MetaData> &meta) {
         CHECK(meta->findInt32(kKeyChannelCount, &numChannels));
 
         setG711Format(numChannels);
+    } else if (!strcasecmp(MEDIA_MIMETYPE_AUDIO_ALAC, mMIME)) {
+        ALOGV("configureCodec: case ALAC\n");
+        uint32_t type;
+        const void *data;
+        size_t size;
+        CHECK(meta->findData(kKeyAlacMagicCookie, &type, &data, &size));
+        setALACFormat( (void *) data );
     } else if (!strcasecmp(MEDIA_MIMETYPE_AUDIO_RAW, mMIME)) {
         CHECK(!mIsEncoder);
 
@@ -1549,6 +1559,10 @@ void OMXCodec::setComponentRole(
 #endif
         { MEDIA_MIMETYPE_VIDEO_VPX,
             "video_decoder.vpx", "video_encoder.vpx" },
+#ifdef USE_FEATURE_ALAC
+        { MEDIA_MIMETYPE_AUDIO_ALAC,
+            "audio_decoder.alac", "audio_encoder.alac" },
+#endif
         { MEDIA_MIMETYPE_AUDIO_RAW,
             "audio_decoder.raw", "audio_encoder.raw" },
         { MEDIA_MIMETYPE_AUDIO_FLAC,
@@ -3688,7 +3702,35 @@ status_t OMXCodec::setAACFormat(
 
     return OK;
 }
-
+status_t OMXCodec::setALACFormat( void *pConfig ) {
+    ALOGV("ENTER setALACFormat\n");
+    ALACSpecificConfig *pConfigALAC = (ALACSpecificConfig *)pConfig;
+
+    // Set format parameters on input port
+    OMX_AUDIO_PARAM_ALACTYPE_EXT_INTEL alacParams;
+    InitOMXParams(&alacParams);
+    alacParams.nPortIndex = kPortIndexInput;
+    status_t err = mOMX->getParameter( mNode, (OMX_INDEXTYPE)OMX_IndexParamAudioAlac, &alacParams, sizeof(alacParams) );
+    CHECK_EQ( err, (status_t)OK );
+    alacParams.nFrameLength = pConfigALAC->frameLength;
+    alacParams.nCompatibleVersion = pConfigALAC->compatibleVersion;
+    alacParams.nBitDepth = pConfigALAC->bitDepth;
+    alacParams.nPb = pConfigALAC->pb;
+    alacParams.nMb = pConfigALAC->mb;
+    alacParams.nKb = pConfigALAC->kb;
+    alacParams.nChannels = pConfigALAC->numChannels;
+    alacParams.nMaxRun = pConfigALAC->maxRun;
+    alacParams.nMaxFrameBytes = pConfigALAC->maxFrameBytes;
+    alacParams.nAvgBitRate = pConfigALAC->avgBitRate;
+    alacParams.nSampleRate = pConfigALAC->sampleRate;
+    err = mOMX->setParameter( mNode, (OMX_INDEXTYPE)OMX_IndexParamAudioAlac, &alacParams, sizeof(alacParams) );
+    if (err != OK) {
+            CODEC_LOGE("setParameter('OMX_IndexParamAudioAlac') failed (err = %d)", err);
+            return err;
+    }
+    ALOGV("EXIT setALACFormat\n");
+    return OK;
+}
 void OMXCodec::setG711Format(int32_t numChannels) {
     CHECK(!mIsEncoder);
     setRawAudioFormat(kPortIndexInput, 8000, numChannels);
diff --git a/media/libstagefright/include/ALACDecoder.h b/media/libstagefright/include/ALACDecoder.h
new file mode 100644
index 0000000..87d2e97
--- /dev/null
+++ b/media/libstagefright/include/ALACDecoder.h
@@ -0,0 +1,101 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+namespace android {
+
+// Box and chunck definitions per MPEG4 spec.
+
+class Box {
+    // sizeof Box = 8
+    public:
+    uint32_t size;
+    uint32_t type;
+};
+
+class FullBox : public Box {
+    // size of FullBox = 4 + sizeof(Box) = 12
+    public:
+    uint32_t version_flags; // 8bit msb as version, 24bit lsb as flags
+};
+
+class SampleEntry : public Box {
+    // sizeof(SampleEntry) == 8 + sizeof(Box) = 16
+    public:
+    uint8_t box_reserved[6];
+    uint16_t data_reference_index;
+};
+
+class AudioSampleEntry : public SampleEntry {
+    // sizeof(AudioSampleEntry)= 20 + sizeof(SampleEntry) = 36
+    public:
+    uint32_t reserved[2];
+    uint16_t channel_count;
+    uint16_t sample_size;
+    uint16_t predefined;
+    uint16_t _reserved;
+    uint32_t sample_rate;
+};
+
+class ALACSpecificConfig
+{
+    // sizeof(ALACSpecificConfg) = 24
+public:
+    uint32_t    frameLength;
+    uint8_t        compatibleVersion;
+    uint8_t        bitDepth;
+    uint8_t        pb;
+    uint8_t        mb;
+    uint8_t        kb;
+    uint8_t        numChannels;
+    uint16_t    maxRun;
+    uint32_t    maxFrameBytes;
+    uint32_t    avgBitRate;
+    uint32_t    sampleRate;
+};
+
+class ALACChannelLayoutInfo
+{
+    // sizeof(ALACChannelLayoutInfo) = 24
+public:
+    uint32_t    channelLayoutInfoSize;
+    uint32_t    channelLayoutInfoID;
+    uint32_t    versionFlags;
+    uint32_t    channelLayoutTag;
+    uint32_t    reserved1;
+    uint32_t    reserved2;
+};
+
+// For compatibility purpose
+class FormatAtom
+{
+    // sizeof(FormatAtom) = 12
+public:
+    uint32_t    size;   // == 12
+    uint32_t    channel_layout_info_id;
+    uint32_t    format_type;
+};
+
+class TerminatorAtom
+{
+    // sizeof(TerminatorAtom) = 8
+public:
+    uint32_t    channel_layout_info_size;   // == 8
+    uint32_t    channel_layout_info_id;
+};
+
+}
+
+
diff --git a/media/libstagefright/omx/OMX_Ext_Intel.h b/media/libstagefright/omx/OMX_Ext_Intel.h
new file mode 100644
index 0000000..1e06a83
--- /dev/null
+++ b/media/libstagefright/omx/OMX_Ext_Intel.h
@@ -0,0 +1,105 @@
+/*
+ * Copyright (c) 2008 The Khronos Group Inc.
+ *
+ * Portions contributed by Intel Corporation
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ * The above copyright notice and this permission notice shall be included
+ * in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ */
+
+/** @file OMX_Audio_Ext_Intel.h - OpenMax IL version 1.1.2
+ *  The OMX_Ext_Intel header file contains Intel vendor-specific
+ *  extensions in order to support the Apple Lossless Audio Codec (ALAC).
+ */
+
+
+#ifndef OMX_Ext_Intel_h
+#define OMX_Ext_Intel_h
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+
+/* Each OMX header must include all required header files to allow the
+ *  header to compile without errors.  The includes below are required
+ *  for this header file to compile successfully
+ */
+#include <OMX_Types.h>
+
+
+/** The OMX_INDEXTYPE enumeration is used to select a structure when either
+ *  getting or setting parameters and/or configuration data.  Each entry in
+ *  this enumeration maps to an OMX specified structure.  When the
+ *  OMX_GetParameter, OMX_SetParameter, OMX_GetConfig or OMX_SetConfig methods
+ *  are used, the second parameter will always be an entry from this enumeration
+ *  and the third entry will be the structure shown in the comments for the entry.
+ *  For example, if the application is initializing a cropping function, the
+ *  OMX_SetConfig command would have OMX_IndexConfigCommonInputCrop as the second parameter
+ *  and would send a pointer to an initialized OMX_RECTTYPE structure as the
+ *  third parameter.
+ *
+ *  The enumeration entries named with the OMX_Config prefix are sent using
+ *  the OMX_SetConfig command and the enumeration entries named with the
+ *  OMX_PARAM_ prefix are sent using the OMX_SetParameter command.
+ */
+typedef enum OMX_INDEXTYPE_EXT_INTEL {
+    OMX_IndexComponentStartIntel = OMX_IndexVendorStartUnused,
+    OMX_IndexParamAudioAlac           /**< reference: OMX_AUDIO_PARAM_ALACTYPE */
+} OMX_INDEXTYPE_EXT_INTEL;
+
+/** Enumeration used to define the possible audio codings.
+ *  If "OMX_AUDIO_CodingUnused" is selected, the coding selection must
+ *  be done in a vendor specific way.  Since this is for an audio
+ *  processing element this enum is relevant.  However, for another
+ *  type of component other enums would be in this area.
+ */
+typedef enum OMX_AUDIO_CODINGTYPE_EXT_INTEL {
+    OMX_AUDIO_CodingIntelStart = OMX_AUDIO_CodingVendorStartUnused,  /**< Placeholder value when coding is N/A  */
+    OMX_AUDIO_CodingALAC           /**< Any variant of ALAC encoded data */
+} OMX_AUDIO_CODINGTYPE_EXT_INTEL;
+
+/** ALAC params */
+typedef struct OMX_AUDIO_PARAM_ALACTYPE_EXT_INTEL {
+    OMX_U32 nSize;                 /**< Size of this structure, in Bytes */
+    OMX_VERSIONTYPE nVersion;      /**< OMX specification version information */
+    OMX_U32 nPortIndex;            /**< Port that this structure applies to */
+    OMX_U32 nChannels;             /**< Number of channels */
+    OMX_U32 nSampleRate;           /**< Sampling rate of the source data.  Use 0 for
+                                        variable or unknown sampling rate. */
+    OMX_U32 nFrameLength;          /**< Frame length (in audio samples per channel) of the codec.
+                                        ALAC-encoded streams typically use 4096. */
+    OMX_U8 nCompatibleVersion;
+    OMX_U8 nBitDepth;              /**< Bits per decoded sample, any of these are valid: 16, 20, 24, or 32 */
+    OMX_U8 nPb;                    /**< 0 <= pb <= 255 */
+    OMX_U8 nMb;
+    OMX_U8 nKb;
+    OMX_U16 nMaxRun;
+    OMX_U32 nMaxFrameBytes;
+    OMX_U32 nAvgBitRate;
+} OMX_AUDIO_PARAM_ALACTYPE_EXT_INTEL;
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
+
+#endif
+/* File EOF */
+
+
diff --git a/media/libstagefright/omx/SoftOMXPlugin.cpp b/media/libstagefright/omx/SoftOMXPlugin.cpp
index 3747b3b..63881bb 100644
--- a/media/libstagefright/omx/SoftOMXPlugin.cpp
+++ b/media/libstagefright/omx/SoftOMXPlugin.cpp
@@ -51,6 +51,7 @@ static const struct {
     { "OMX.google.mp3.decoder", "mp3dec", "audio_decoder.mp3" },
     { "OMX.google.vorbis.decoder", "vorbisdec", "audio_decoder.vorbis" },
     { "OMX.google.vpx.decoder", "vpxdec", "video_decoder.vpx" },
+    { "OMX.Intel.alac.decoder", "alacdec", "audio_decoder.alac" },
     { "OMX.google.raw.decoder", "rawdec", "audio_decoder.raw" },
     { "OMX.google.flac.encoder", "flacenc", "audio_encoder.flac" },
 };
-- 
1.7.9

