From 5d13c39e86cd803808d7b6106ab10a1be18e01ee Mon Sep 17 00:00:00 2001
From: Jeevaka Badrappan <jeevaka.badrappan@intel.com>
Date: Mon, 26 Nov 2012 09:25:20 +0200
Subject: [PATCH 135/277] [PORT FROM MAIN] telephony: Add IOemTelephony and Oem specific constants

BZ: 25540

Currently, IOemTelephony.aidl resides
inside the device/intel/apps/OemTelephony folder.
Due to this, applications and frameworks are
not able to import this.

There is a requirement for IOemTelephony
to be used in both framework and applications.

With this patch, IOemTelephony interface file and
also OEM specific constants are moved from device
specific folders to the frameworks folder.

Change-Id: Ifa9808304535892dee674e4b2ad33656c057c9f4
Orig-Change-Id: I1894dda20e2becf7f8c82023f9cf7f675f56f5c1
Signed-off-by: Jeevaka Badrappan <jeevaka.badrappan@intel.com>
Reviewed-on: http://android.intel.com:8080/78820
Reviewed-by: Yao, Yong <yong.yao@intel.com>
Reviewed-by: Ravindran, Arun <arun.ravindran@intel.com>
Reviewed-by: Lebsir, SamiX <samix.lebsir@intel.com>
Tested-by: Lebsir, SamiX <samix.lebsir@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 Android.mk                                         |    1 +
 .../telephony/OemTelephony/IOemTelephony.aidl      |  129 ++++++++++++++++++++
 .../OemTelephony/OemTelephonyConstants.java        |  114 +++++++++++++++++
 3 files changed, 244 insertions(+), 0 deletions(-)
 create mode 100644 telephony/java/com/intel/internal/telephony/OemTelephony/IOemTelephony.aidl
 create mode 100644 telephony/java/com/intel/internal/telephony/OemTelephony/OemTelephonyConstants.java

diff --git a/Android.mk b/Android.mk
index 73a5bf8..cd80639 100644
--- a/Android.mk
+++ b/Android.mk
@@ -224,6 +224,7 @@ LOCAL_SRC_FILES += \
 	telephony/java/com/android/internal/telephony/ITelephonyRegistry.aidl \
 	telephony/java/com/android/internal/telephony/IWapPushManager.aidl \
 	telephony/java/com/android/internal/telephony/IExtendedNetworkService.aidl \
+	telephony/java/com/intel/internal/telephony/OemTelephony/IOemTelephony.aidl \
 	wifi/java/android/net/wifi/IWifiManager.aidl \
 	wifi/java/android/net/wifi/p2p/IWifiP2pManager.aidl \
 	voip/java/android/net/sip/ISipSession.aidl \
diff --git a/telephony/java/com/intel/internal/telephony/OemTelephony/IOemTelephony.aidl b/telephony/java/com/intel/internal/telephony/OemTelephony/IOemTelephony.aidl
new file mode 100644
index 0000000..26b6937
--- /dev/null
+++ b/telephony/java/com/intel/internal/telephony/OemTelephony/IOemTelephony.aidl
@@ -0,0 +1,129 @@
+/*
+ * Copyright (C) 2012 Intel Corporation, All rights Reserved
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.intel.internal.telephony.OemTelephony;
+
+/**
+ * Interface used to interact with the OEM Hook.
+ *
+ * {@hide}
+ */
+interface IOemTelephony {
+
+
+    /**
+     * On Success returns the Answer to Reset of the current active SIM card.
+     * On Failure, returns an empty string.
+     *
+     * {@hide}
+     */
+    String getATR();
+
+    /**
+     * Retrieves the temperature of the selected modem sensor.
+     * @param sensorId: Sensor id
+     *          {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#MODEM_SENSOR_ID_RF},
+     *          {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#MODEM_SENSOR_ID_BASEBAND_CHIP},
+     *          or {@link com.intel.internal.telephony.OemTelephony.
+     *                   OemTelephonyConstants#MODEM_SENSOR_ID_PCB}
+     *
+     * @return On Success, String containg the temperatures separated by space
+     *         "Filtered temperature Raw Temperature". Both temperature
+     *          are formated as a 4 digits number: "2300" = 23.00 celcius
+     *          degrees  (two digits after dot).
+     *         On Failure, returns an empty string.
+     * {@hide}
+     */
+    String getThermalSensorValue(int sensorId);
+
+    /**
+     * Gets a dump of the GPRS cell environment.
+     *
+     * @return On Success, returns a string containing a dump of GPRS Cell Environment
+     *         On Failure, returns an empty string.
+     * {@hide}
+     */
+    String getGprsCell();
+
+    /**
+     * Retrieves Cell Environment
+     * @param page: page_nr
+     * @return On Success, string containing a dump of the cell environment
+     *         On Failure, returns an empty string.
+     * {@hide}
+     */
+    String getDumpScreen(int page);
+
+    /**
+     * Activates the modem sensor alarm notification when the selected
+     * sensor temperature is below the minimal threshold or above the
+     * maximal threshold value.
+     *
+     * @param activate: activate the threshold notification when true,
+     *                  else deactivates the notification.
+     * @param sensorId: Sensor id
+     *          {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#MODEM_SENSOR_ID_RF},
+     *          {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#MODEM_SENSOR_ID_BASEBAND_CHIP},
+     *          or {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#MODEM_SENSOR_ID_PCB}
+     *
+     * @param minThresholdValue: temperature are formated as a 4 digits number:
+     *                  "2300" = 23.00 celcius degrees  (two digits after dot)
+     * @param maxThresholdValue: temperature are formated as a 4 digits number:
+     *                  "2300" = 23.00 celcius degrees  (two digits after dot)
+     * {@hide}
+     */
+    oneway void ActivateThermalSensorNotification(boolean activate, int sensorId,
+                            int minThresholdValue, int maxThresholdValue);
+
+    /**
+     * Retrieves the SMS Transport Mode.
+     * @return On Success, int representing the SMS Transport Mode,
+     *          {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#SMS_TRANSPORT_MODE_PACKET_DOMAIN},
+     *          {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#SMS_TRANSPORT_MODE_CIRCUIT_SWITCHED},
+     *          {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#SMS_TRANSPORT_MODE_PACKET_DOMAIN_PREFERRED},
+     *          or {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#SMS_TRANSPORT_MODE_CIRCUIT_SWITCHED_PREFERRED}
+     *         On Failure, returns {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#SMS_TRANSPORT_MODE_INVALID}
+     *
+     * {@hide}
+     */
+    int getSMSTransportMode();
+
+    /**
+     * Sets the SMS Transport Mode.
+     * @param transportMode: SMS Transport Mode,
+     *          {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#SMS_TRANSPORT_MODE_PACKET_DOMAIN},
+     *          {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#SMS_TRANSPORT_MODE_CIRCUIT_SWITCHED},
+     *          {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#SMS_TRANSPORT_MODE_PACKET_DOMAIN_PREFERRED},
+     *          or {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#SMS_TRANSPORT_MODE_CIRCUIT_SWITCHED_PREFERRED}
+     * {@hide}
+     */
+    oneway void setSMSTransportMode(int transportMode);
+}
+
diff --git a/telephony/java/com/intel/internal/telephony/OemTelephony/OemTelephonyConstants.java b/telephony/java/com/intel/internal/telephony/OemTelephony/OemTelephonyConstants.java
new file mode 100644
index 0000000..792b848
--- /dev/null
+++ b/telephony/java/com/intel/internal/telephony/OemTelephony/OemTelephonyConstants.java
@@ -0,0 +1,114 @@
+/*
+ * Copyright (C) 2012 Intel Corporation, All Rights Reserved
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.intel.internal.telephony.OemTelephony;
+
+public interface OemTelephonyConstants {
+
+    /* SMS Transport Mode - See 3GPP 27.007 */
+    public static final int SMS_TRANSPORT_MODE_INVALID = -1;
+    public static final int SMS_TRANSPORT_MODE_PACKET_DOMAIN = 0;
+    public static final int SMS_TRANSPORT_MODE_CIRCUIT_SWITCHED = 1;
+    public static final int SMS_TRANSPORT_MODE_PACKET_DOMAIN_PREFERRED = 2;
+    public static final int SMS_TRANSPORT_MODE_CIRCUIT_SWITCHED_PREFERRED = 3;
+
+    /* TX Power Offset Table Index */
+    public static final int OFFSET_TABLE_INDEX_0 = 0;
+    public static final int OFFSET_TABLE_INDEX_1 = 1;
+    public static final int OFFSET_TABLE_INDEX_2 = 2;
+
+    public static final int MODEM_SENSOR_ID_RF              = 0;
+    public static final int MODEM_SENSOR_ID_BASEBAND_CHIP   = 1;
+    public static final int MODEM_SENSOR_ID_PCB             = 3;
+
+    public static final String MODEM_SENSOR_ID_KEY = "sensorId";
+    public static final String MODEM_SENSOR_TEMPERATURE_KEY = "temperature";
+
+    /**
+     * Broadcast Action: Modem sensor has reached the set threshold temperature.
+     * The intent will have the following extra values:</p>
+     * <ul>
+     *   <li><em>sensor Id</em> -  - An int with one of the following values:
+     *          {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#MODEM_SENSOR_ID_RF},
+     *          {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#MODEM_SENSOR_ID_BASEBAND_CHIP},
+     *          or {@link com.intel.internal.telephony.OemTelephony.
+     *                  OemTelephonyConstants#MODEM_SENSOR_ID_PCB}</li>
+     *   <li><em>temperature</em> - Integer containing the temperature formatted as a
+     *              4 digits number: 2300 = 23.00 celcius degrees (two digits after dot).</li>
+     * </ul>
+     *
+     * <p class="note">
+     * Requires the READ_PHONE_STATE permission.
+     *
+     * <p class="note">This is a protected intent that can only be sent
+     * by the system.
+     */
+    public static final String ACTION_MODEM_SENSOR_THRESHOLD_REACHED =
+                                    "intel.intent.action.MODEM_SENSOR_THRESHOLD_REACHED";
+
+    // These enumerations should be in sync with what is used in
+    // ril adaptation
+
+    /**
+     * This enum details the additional requests (OEM) to pass to the RIL
+     * via the RIL_REQUEST_OEM_HOOK_RAW API
+     * The command id allocation is the following:
+     * 0x00000001 -> 0x0000009F : Product Specific
+     * 0x000000A0 -> 0x000000CF : Platform Requests
+     * 0x000000D0 -> 0x000000FF : Platform Unsolicited
+     */
+
+    /* OEM hook to request modem to trigger Fast Dormancy. */
+    public static final int RIL_OEM_HOOK_RAW_TRIGGER_FAST_DORMANCY = 0x000000A0;
+    /* OEM hook to set value of Fast Dormancy SCRI inhibition timer */
+    public static final int RIL_OEM_HOOK_RAW_SET_FAST_DORMANCY_TIMER = 0x000000A1;
+    /* OEM hook to get the value of sensor id */
+    public static final int RIL_OEM_HOOK_STRING_THERMAL_GET_SENSOR = 0x000000A2;
+    /* OEM hook to set the min and max threhold of the sensor id */
+    public static final int RIL_OEM_HOOK_STRING_ACTIVATE_THERMAL_SENSOR_NOTIFICATION = 0x000000A3;
+    /*  OEM HOOK to set the Autonomous Fast Dormancy Mode */
+    public static final int RIL_OEM_HOOK_RAW_SET_MODEM_AUTO_FAST_DORMANCY = 0x000000A4;
+    /* OEM hook to Get the Answer to reset of the current SIM card */
+    public static final int RIL_OEM_HOOK_STRING_GET_ATR = 0x000000A5;
+    /* OEM hook to get GPRS cell environment */
+    public static final int RIL_OEM_HOOK_STRING_GET_GPRS_CELL_ENV = 0x000000A6;
+    /* OEM hook to dump the cell environment */
+    public static final int RIL_OEM_HOOK_STRING_DEBUG_SCREEN_COMMAND = 0x000000A7;
+    /* OEM hook to release all the calls */
+    public static final int RIL_OEM_HOOK_STRING_RELEASE_ALL_CALLS = 0x000000A8;
+    /* OEM hook to get the SMS Transport Mode */
+    public static final int RIL_OEM_HOOK_STRING_GET_SMS_TRANSPORT_MODE = 0x000000A9;
+    /* OEM hook to set the SMS Transport Mode */
+    public static final int RIL_OEM_HOOK_STRING_SET_SMS_TRANSPORT_MODE = 0x000000AA;
+    /* OEM hook to set the RF Power table */
+    public static final int RIL_OEM_HOOK_STRING_GET_RF_POWER_CUTBACK_TABLE = 0x000000AB;
+    /* OEM hook to set the RF Power table */
+    public static final int RIL_OEM_HOOK_STRING_SET_RF_POWER_CUTBACK_TABLE = 0x000000AC;
+    /* OEM hook specific to DSDS for swapping protocol stacks configs */
+    public static final int RIL_OEM_HOOK_STRING_SWAP_PS = 0x000000B2;
+    /* OEM hook to get the thermal alarm indication */
+    public static final int RIL_OEM_HOOK_RAW_UNSOL_THERMAL_ALARM_IND = 0x000000D0;
+    /* OEM hook specific to DSDS for catching out of service URC */
+    public static final int RIL_OEM_HOOK_RAW_UNSOL_FAST_OOS_IND = 0x000000D1;
+    /* OEM hook specific to DSDS for catching in service URC */
+    public static final int RIL_OEM_HOOK_RAW_UNSOL_IN_SERVICE_IND = 0x000000D2;
+    /* OEM hook specific to indicate data suspended/resume status */
+    public static final int RIL_OEM_HOOK_RAW_UNSOL_DATA_STATUS_IND = 0x000000D3;
+    /* OEM hook specific to indicate MT class */
+    public static final int RIL_OEM_HOOK_RAW_UNSOL_MT_CLASS_IND = 0x000000D4;
+}
-- 
1.7.4.1

