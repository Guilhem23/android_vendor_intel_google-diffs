From c45daa32018d19a375c3a810132b009d0765d97d Mon Sep 17 00:00:00 2001
From: Arun Ravindran <arun.ravindran@intel.com>
Date: Wed, 5 Dec 2012 14:55:36 +0200
Subject: [PATCH 19/25] [PORT FROM MAIN] Phone: Adding support for
 OemTelephony

BZ: 25540 37760

With this patch Phone app conditionally compiles the
OemTelephony library and uses it to initialise OEM Interface.
The config items define the usage of the OemTelephony library.

Change-Id: I7ff4c46ef55dbdf026b76159cb35760318a69cfa
Orig-Change-Id: I74d44d62afba7c048c474fb40e2ce3b9137d88ae
Signed-off-by: Arun Ravindran <arun.ravindran@intel.com>
Reviewed-on: http://android.intel.com:8080/79186
Reviewed-by: Fremaux, Pascal <pascal.fremaux@intel.com>
Reviewed-by: Yao, Yong <yong.yao@intel.com>
Reviewed-by: Lucas, Guillaume <guillaume.lucas@intel.com>
Reviewed-by: Lebsir, SamiX <samix.lebsir@intel.com>
Tested-by: Lebsir, SamiX <samix.lebsir@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 Android.mk                              |    5 +++++
 res/values/config.xml                   |    7 +++++++
 src/com/android/phone/PhoneGlobals.java |   29 +++++++++++++++++++++++++++++
 3 files changed, 41 insertions(+), 0 deletions(-)

diff --git a/Android.mk b/Android.mk
index e36adad..8f716a4 100644
--- a/Android.mk
+++ b/Android.mk
@@ -17,6 +17,11 @@ include $(BUILD_STATIC_JAVA_LIBRARY)
 include $(CLEAR_VARS)
 
 LOCAL_JAVA_LIBRARIES := telephony-common
+
+ifeq ($(strip $(TARGET_PHONE_HAS_OEM_LIBRARY)), true)
+LOCAL_JAVA_LIBRARIES += com.intel.internal.telephony.OemTelephony
+endif
+
 LOCAL_SRC_FILES := $(call all-java-files-under, src)
 LOCAL_SRC_FILES += \
         src/com/android/phone/EventLogTags.logtags \
diff --git a/res/values/config.xml b/res/values/config.xml
index eb9de4c..851fa7e 100644
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -112,4 +112,11 @@
 
     <!-- If true, removes the Voice Privacy option from Call Settings -->
     <bool name="config_voice_privacy_disable">false</bool>
+
+    <!-- Flag indicating the usage of OEM Hooks for telephony -->
+    <bool name="config_usage_oem_hooks_supported">false</bool>
+    <!-- The oem hook jar file name -->
+    <string name="config_oem_hook_jar_file" translatable="false"></string>
+    <!-- The oem hook class name -->
+    <string name="config_oem_hook_class_name" translatable="false"></string>
 </resources>
diff --git a/src/com/android/phone/PhoneGlobals.java b/src/com/android/phone/PhoneGlobals.java
index acfdd7e..2d8d78a 100644
--- a/src/com/android/phone/PhoneGlobals.java
+++ b/src/com/android/phone/PhoneGlobals.java
@@ -34,6 +34,7 @@ import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.ServiceConnection;
 import android.content.res.Configuration;
+import android.content.res.Resources;
 import android.media.AudioManager;
 import android.net.Uri;
 import android.os.AsyncResult;
@@ -71,6 +72,9 @@ import com.android.internal.telephony.cdma.TtyIntent;
 import com.android.phone.OtaUtils.CdmaOtaScreenState;
 import com.android.server.sip.SipService;
 
+import dalvik.system.DexClassLoader;
+import java.lang.reflect.Constructor;
+
 /**
  * Global state for the telephony subsystem when running in the primary
  * phone process.
@@ -460,6 +464,31 @@ public class PhoneGlobals extends ContextWrapper
 
             phoneMgr = PhoneInterfaceManager.init(this, phone);
 
+            try {
+                if (getResources().getBoolean(R.bool.config_usage_oem_hooks_supported)) {
+                    if (DBG) {
+                        Log.d(LOG_TAG, "**********************************"
+                                + " OEMHookInterfaceCreator loading *****************"
+                                + "*********************************************");
+                    }
+                    DexClassLoader classLoader = new DexClassLoader(
+                            getResources().getString(R.string.config_oem_hook_jar_file),
+                            new ContextWrapper(phone.getContext()).getCacheDir().getAbsolutePath(),
+                            null, ClassLoader.getSystemClassLoader());
+                    classLoader.loadClass( getResources().getString(
+                            R.string.config_oem_hook_class_name)).getConstructor().newInstance();
+                } else {
+                    if (DBG) Log.d(LOG_TAG, "#######################################"
+                            + " NO OEM Hooks ############################################");
+                }
+            } catch (Resources.NotFoundException ex) {
+                Log.e(LOG_TAG, "Resource reading Failed!");
+            } catch (ClassNotFoundException ex) {
+                Log.e(LOG_TAG, "OEM Hook class loading failed");
+            } catch (Exception ex) {
+                Log.e(LOG_TAG, "OEM Hook class creation Failed!");
+            }
+
             mHandler.sendEmptyMessage(EVENT_START_SIP_SERVICE);
 
             int phoneType = phone.getPhoneType();
-- 
1.7.9

