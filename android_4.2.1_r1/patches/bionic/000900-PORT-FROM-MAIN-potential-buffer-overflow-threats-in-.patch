From 40bef994c927d7c53eeae1276990c376f5844b7e Mon Sep 17 00:00:00 2001
From: Jin Wei <wei.a.jin@intel.com>
Date: Fri, 9 Nov 2012 17:32:57 +0800
Subject: [PATCH 09/47] [PORT FROM MAIN] potential buffer overflow threats in signal related functions

BZ: 67270

potential buffer overflow threats in signal related functions:
sigismember, sigaddset, sigdelset.

Change-Id: I3d73091e1b859ec38cd5f2c5db2f940d05da0584
Signed-off-by: Jin Wei <wei.a.jin@intel.com>
Reviewed-on: http://android.intel.com:8080/73308
Reviewed-by: lab_cactus <lab_cactus@intel.com>
Reviewed-by: Yin, Fengwei <fengwei.yin@intel.com>
Reviewed-by: Shi, Qiming <qiming.shi@intel.com>
Reviewed-by: Li, XiaojingX <xiaojingx.li@intel.com>
Tested-by: Li, XiaojingX <xiaojingx.li@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Reviewed-on: http://android.intel.com:8080/75117
Reviewed-by: Du, Chenyang <chenyang.du@intel.com>
Reviewed-by: Yao, Yong <yong.yao@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 libc/include/signal.h |   26 ++++++++++++++++++++++++++
 1 files changed, 26 insertions(+), 0 deletions(-)

diff --git a/libc/include/signal.h b/libc/include/signal.h
index 6432c18..3c569e4 100644
--- a/libc/include/signal.h
+++ b/libc/include/signal.h
@@ -33,6 +33,7 @@
 #include <string.h>		/* For memset() */
 #include <sys/types.h>
 #include <asm/signal.h>
+#include <errno.h>
 
 #define __ARCH_SI_UID_T __kernel_uid32_t
 #include <asm/siginfo.h>
@@ -58,6 +59,11 @@ extern const char * const sys_signame[];
 
 static __inline__ int sigismember(sigset_t *set, int signum)
 {
+    if (set == NULL || signum <= 0 || signum >= NSIG) {
+        __set_errno(EINVAL);
+        return -1;
+    }
+
     unsigned long *local_set = (unsigned long *)set;
     signum--;
     return (int)((local_set[signum/LONG_BIT] >> (signum%LONG_BIT)) & 1);
@@ -66,6 +72,11 @@ static __inline__ int sigismember(sigset_t *set, int signum)
 
 static __inline__ int sigaddset(sigset_t *set, int signum)
 {
+    if (set == NULL || signum <= 0 || signum >= NSIG) {
+        __set_errno(EINVAL);
+        return -1;
+    }
+
     unsigned long *local_set = (unsigned long *)set;
     signum--;
     local_set[signum/LONG_BIT] |= 1UL << (signum%LONG_BIT);
@@ -75,6 +86,11 @@ static __inline__ int sigaddset(sigset_t *set, int signum)
 
 static __inline__ int sigdelset(sigset_t *set, int signum)
 {
+    if (set == NULL || signum <= 0 || signum >= NSIG) {
+        __set_errno(EINVAL);
+        return -1;
+    }
+
     unsigned long *local_set = (unsigned long *)set;
     signum--;
     local_set[signum/LONG_BIT] &= ~(1UL << (signum%LONG_BIT));
@@ -84,12 +100,22 @@ static __inline__ int sigdelset(sigset_t *set, int signum)
 
 static __inline__ int sigemptyset(sigset_t *set)
 {
+    if (set == NULL) {
+        __set_errno(EINVAL);
+        return -1;
+    }
+
     memset(set, 0, sizeof *set);
     return 0;
 }
 
 static __inline__ int sigfillset(sigset_t *set)
 {
+    if (set == NULL) {
+        __set_errno(EINVAL);
+        return -1;
+    }
+
     memset(set, ~0, sizeof *set);
     return 0;
 }
-- 
1.7.4.1

