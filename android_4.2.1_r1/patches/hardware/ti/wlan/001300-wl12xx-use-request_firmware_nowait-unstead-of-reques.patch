From 6f8d2f90f3c0e1eb6fb85705e3bb1033db3510d2 Mon Sep 17 00:00:00 2001
From: Aymen Zayet <aymen.zayet@intel.com>
Date: Mon, 6 Aug 2012 18:50:29 +0200
Subject: [PATCH 13/78] wl12xx: use request_firmware_nowait unstead of
 request_firmware on init.

BZ: 49785

request_firmware() add a new device attached to wl12xx of class firmware,
then send an uevent to notify to the user space about the action to perform.

At boot time, this uevent may be dropped by kobject_uevent due to uevent_suppress.
As a consequence, the parent device "wl12xx" remains blocked, waiting for the
firmware to be loaded. After 60 secs of timeout, wl12xx_probe is released and
the boot sequence continues.

Using request_firmware_nowait() unstead of request_firmware() avoid such deadlock
situation at boot time.

Change-Id: I71a2a542eb692161839acf96ab090747be1b0294
Signed-off-by: Aymen Zayet <aymen.zayet@intel.com>
Reviewed-on: http://android.intel.com:8080/60744
Reviewed-by: Pince, Jean-christophe <jean-christophe.pince@intel.com>
Reviewed-by: De Cesco, Jonathan <jonathan.de.cesco@intel.com>
Reviewed-by: Tricot, HonoreX <honorex.tricot@intel.com>
Reviewed-by: Regairaz, Julie <julie.regairaz@intel.com>
Tested-by: Champciaux, Nicolas <nicolas.champciaux@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Reviewed-on: http://android.intel.com:8080/77970
Reviewed-by: Li, XiaojingX <xiaojingx.li@intel.com>
Tested-by: Li, XiaojingX <xiaojingx.li@intel.com>
---
 wl12xx-compat/drivers/net/wireless/wl12xx/main.c |   43 ++++++++++++++++++++--
 1 files changed, 40 insertions(+), 3 deletions(-)

diff --git a/wl12xx-compat/drivers/net/wireless/wl12xx/main.c b/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
index 937ef40..2afb0a8 100644
--- a/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
+++ b/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
@@ -403,6 +403,7 @@ static bool bug_on_recovery;
 static char *fref_param;
 static char *tcxo_param;
 
+static int wl1271_register_hw(struct wl1271 *wl);
 static void __wl1271_op_remove_interface(struct wl1271 *wl,
 					 struct ieee80211_vif *vif,
 					 bool reset_tx_queues);
@@ -1157,6 +1158,43 @@ out:
 	return ret;
 }
 
+static void wl1271_nvs_complete(const struct firmware *fw, void *context)
+{
+	int ret;
+	struct wl1271 *wl = (struct wl1271 *)context;
+
+	if (fw && fw->size) {
+		wl->nvs = kmemdup(fw->data, fw->size, GFP_KERNEL);
+
+		if (!wl->nvs) {
+			wl1271_error("could not allocate memory for the nvs");
+			wl->nvs_len = 0;
+		} else
+			wl->nvs_len = fw->size;
+
+		release_firmware(fw);
+	} else
+		wl1271_error("could not open nvs file  %s", WL12XX_NVS_NAME);
+
+	ret = wl1271_register_hw(wl);
+	if (ret)
+		wl1271_error("%s returns %d", __func__, ret);
+}
+
+static int wl1271_fetch_nvs_nowait(struct wl1271 *wl)
+{
+	int ret;
+
+	ret = request_firmware_nowait(THIS_MODULE, FW_ACTION_HOTPLUG,
+				      WL12XX_NVS_NAME, wl->dev, GFP_KERNEL,
+				      wl, wl1271_nvs_complete);
+	if (ret < 0)
+		wl1271_error("could not get nvs file %s: %d", WL12XX_NVS_NAME,
+			     ret);
+
+	return ret;
+}
+
 void wl12xx_queue_recovery_work(struct wl1271 *wl)
 {
 	if (!test_bit(WL1271_FLAG_RECOVERY_IN_PROGRESS, &wl->flags)) {
@@ -5674,8 +5712,7 @@ static int wl1271_register_hw(struct wl1271 *wl)
 		goto out;
 	}
 
-	ret = wl1271_fetch_nvs(wl);
-	if (ret == 0) {
+	if (wl->nvs && (wl->nvs_len > 11)) {
 		/* NOTE: The wl->nvs->nvs element must be first, in
 		 * order to simplify the casting, we assume it is at
 		 * the beginning of the wl->nvs structure.
@@ -6096,7 +6133,7 @@ static int __devinit wl12xx_probe(struct platform_device *pdev)
 	if (ret)
 		goto out_irq;
 
-	ret = wl1271_register_hw(wl);
+	ret = wl1271_fetch_nvs_nowait(wl);
 	if (ret)
 		goto out_irq;
 
-- 
1.7.9

