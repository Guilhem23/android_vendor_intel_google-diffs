From 612b7ddb19b16592d9fc79a03524c7fbfcea1675 Mon Sep 17 00:00:00 2001
From: Aymen Zayet <aymen.zayet@intel.com>
Date: Fri, 16 Nov 2012 11:21:44 +0100
Subject: [PATCH 76/78] [PORT FROM JBMR0]wl12xx: remove useless wakelock

BZ: 70447

wl->wake_lock is used to avoid S3 between the hardirq and the thread
irq handler. This change is not needed anymore since interrupts are
synchronized on suspend.

NB: This change is mandatory on the kernel 3.4 because wakesource are
considered as a wake event. So even if the wakelock is released during
suspend, the system  will reject S3 and wakes up.

Change-Id: I08ea7f8d4aa0ebba6cdd2f345023c68931a6cd6a
Orig-Change-Id: I599978048b594df35277d2485c2fc95493ede90c
Signed-off-by: Aymen Zayet <aymen.zayet@intel.com>
Signed-off-by: Axel Haslam <axelx.haslam@intel.com>
Reviewed-on: http://android.intel.com:8080/85622
Reviewed-by: Fiat, Christophe <christophe.fiat@intel.com>
Reviewed-by: Casasnovas, QuentinX <quentinx.casasnovas@intel.com>
Reviewed-by: De Cesco, Jonathan <jonathan.de.cesco@intel.com>
Reviewed-by: Yang, Fei <fei.yang@intel.com>
Tested-by: Zurmely, PierreX <pierrex.zurmely@intel.com>
Reviewed-by: Kuppuswamy, Sathyanarayanan <sathyanarayanan.kuppuswamy@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 wl12xx-compat/drivers/net/wireless/wl12xx/main.c   |   20 --------------------
 wl12xx-compat/drivers/net/wireless/wl12xx/wl12xx.h |    1 -
 2 files changed, 0 insertions(+), 21 deletions(-)

diff --git a/wl12xx-compat/drivers/net/wireless/wl12xx/main.c b/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
index 1e5f79c..3c1768a 100644
--- a/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
+++ b/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
@@ -1168,10 +1168,6 @@ static irqreturn_t wl12xx_irq(int irq, void *cookie)
 	    wl1271_tx_total_queue_count(wl) > 0)
 		ieee80211_queue_work(wl->hw, &wl->tx_work);
 
-#ifdef CONFIG_HAS_WAKELOCK
-	if (test_and_clear_bit(WL1271_FLAG_WAKE_LOCK, &wl->flags))
-		wake_unlock(&wl->wake_lock);
-#endif
 	spin_unlock_irqrestore(&wl->wl_lock, flags);
 
 	mutex_unlock(&wl->mutex);
@@ -2990,12 +2986,6 @@ unlock:
 	cancel_work_sync(&wlvif->rx_streaming_disable_work);
 
 	mutex_lock(&wl->mutex);
-
-#ifdef CONFIG_HAS_WAKELOCK
-	if (test_and_clear_bit(WL1271_FLAG_WAKE_LOCK, &wl->flags))
-			wake_unlock(&wl->wake_lock);
-#endif
-
 }
 
 static void wl1271_op_remove_interface(struct ieee80211_hw *hw,
@@ -6306,7 +6296,6 @@ static struct ieee80211_hw *wl1271_alloc_hw(void)
 
 	spin_lock_init(&wl->wl_lock);
 #ifdef CONFIG_HAS_WAKELOCK
-	wake_lock_init(&wl->wake_lock, WAKE_LOCK_SUSPEND, "wl1271_wake");
 	wake_lock_init(&wl->rx_wake, WAKE_LOCK_SUSPEND, "rx_wake");
 	wake_lock_init(&wl->recovery_wake, WAKE_LOCK_SUSPEND, "recovery_wake");
 #endif
@@ -6390,7 +6379,6 @@ err_hw_alloc:
 static int wl1271_free_hw(struct wl1271 *wl)
 {
 #ifdef CONFIG_HAS_WAKELOCK
-	wake_lock_destroy(&wl->wake_lock);
 	wake_lock_destroy(&wl->rx_wake);
 	wake_lock_destroy(&wl->recovery_wake);
 #endif
@@ -6451,17 +6439,9 @@ static irqreturn_t wl12xx_hardirq(int irq, void *cookie)
 		wl1271_debug(DEBUG_IRQ, "should not enqueue work");
 		disable_irq_nosync(wl->irq);
 		pm_wakeup_event(wl->dev, 0);
-#ifdef CONFIG_HAS_WAKELOCK
-		if (!test_and_set_bit(WL1271_FLAG_WAKE_LOCK, &wl->flags))
-			wake_lock(&wl->wake_lock);
-#endif
 		spin_unlock_irqrestore(&wl->wl_lock, flags);
 		return IRQ_HANDLED;
 	}
-#ifdef CONFIG_HAS_WAKELOCK
-	if (!test_and_set_bit(WL1271_FLAG_WAKE_LOCK, &wl->flags))
-		wake_lock(&wl->wake_lock);
-#endif
 	spin_unlock_irqrestore(&wl->wl_lock, flags);
 
 	return IRQ_WAKE_THREAD;
diff --git a/wl12xx-compat/drivers/net/wireless/wl12xx/wl12xx.h b/wl12xx-compat/drivers/net/wireless/wl12xx/wl12xx.h
index 355c746..71293fa 100644
--- a/wl12xx-compat/drivers/net/wireless/wl12xx/wl12xx.h
+++ b/wl12xx-compat/drivers/net/wireless/wl12xx/wl12xx.h
@@ -489,7 +489,6 @@ struct wl1271 {
 	int power_level;
 
 #ifdef CONFIG_HAS_WAKELOCK
-	struct wake_lock wake_lock;
 	struct wake_lock rx_wake;
 	struct wake_lock recovery_wake;
 #endif
-- 
1.7.9

