From 9f33821c824b43e4e71dd27d7b5d18345574082a Mon Sep 17 00:00:00 2001
From: Jonathan DE CESCO <jonathan.de.cesco@intel.com>
Date: Fri, 21 Sep 2012 14:28:52 +0200
Subject: [PATCH 32/78] wifi: failed to scan if recovery during scan happens

BZ: 56763

mac80211 layer can be stuck in scan busy state if a scan
command is issued while recovery is in progress but driver
state is not off. Fix it by rejecting scan command if this state is detected.
More generally, add more robustness to avoid being locked in this scan busy
state, and fix it also at scan cancel operation.

Orig-Change-Id: Ie02da408e846ad3e3fd9cc4c3a20f359cf62750a
Change-Id: If99bd199f88ec622aea458998080377a3bcd588c
Signed-off-by: Jonathan DE CESCO <jonathan.de.cesco@intel.com>
Reviewed-on: http://android.intel.com:8080/68319
Reviewed-by: Trivelly, Jean <jean.trivelly@intel.com>
Tested-by: Champciaux, Nicolas <nicolas.champciaux@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Reviewed-on: http://android.intel.com:8080/77989
Reviewed-by: Li, XiaojingX <xiaojingx.li@intel.com>
Tested-by: Li, XiaojingX <xiaojingx.li@intel.com>
---
 wl12xx-compat/drivers/net/wireless/wl12xx/main.c |   22 +++++++++++++++++++---
 1 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/wl12xx-compat/drivers/net/wireless/wl12xx/main.c b/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
index 3a58f35..72003e0 100644
--- a/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
+++ b/wl12xx-compat/drivers/net/wireless/wl12xx/main.c
@@ -3878,12 +3878,23 @@ static int wl1271_op_hw_scan(struct ieee80211_hw *hw,
 
 	mutex_lock(&wl->mutex);
 
-	if (!test_bit(WLVIF_FLAG_INITIALIZED, &wlvif->flags)) {
+	if (!test_bit(WLVIF_FLAG_INITIALIZED, &wlvif->flags) ||
+		test_bit(WL1271_FLAG_RECOVERY_IN_PROGRESS, &wl->flags)) {
+
 		/*
+		 * When fw recovery is in progress, before recovery work
+		 * call wl1271_op_stop() to set wl->state to WL1271_STATE_OFF,
+		 * wl1271_op_hw_scan() may be scheduled, it will set scan state
+		 * not idle. Then ieee80211_restart_hw() will cancel scan, but
+		 * wl->state has changed to WL1271_STATE_OFF, cancel work will
+		 * directly return. Because scan state is not idle, new scan
+		 * request will always return failed.
+		 * We check recovery flag to prevent scan and recovery competition.
 		 * We cannot return -EBUSY here because cfg80211 will expect
 		 * a call to ieee80211_scan_completed if we do - in this case
 		 * there won't be any call.
 		 */
+		wl1271_warning("rejecting hw scan while state is off\n");
 		ret = -EAGAIN;
 		goto out;
 	}
@@ -3934,12 +3945,17 @@ static void wl1271_op_cancel_hw_scan(struct ieee80211_hw *hw,
 	if (wl->state == WL1271_STATE_OFF) {
 		/*
 		If we get here, it means we have a FW recovery with a pending scan
-		Alert the mac layer that scan is complete, as required in
-		ieee80211_scan_cancel()
+		Clean internal scan states and alert the mac layer that scan is complete,
+		as required in ieee80211_scan_cancel()
 		*/
+		wl1271_warning("Scan issued while recovery, aborting it");
+		wl->scan.state = WL1271_SCAN_STATE_IDLE;
+		memset(wl->scan.scanned_ch, 0, sizeof(wl->scan.scanned_ch));
+		wl->scan.req = NULL;
 		ieee80211_scan_completed(wl->hw, true);
 		goto out;
 	}
+
 	if (wl->scan.state == WL1271_SCAN_STATE_IDLE)
 		goto out;
 
-- 
1.7.9

