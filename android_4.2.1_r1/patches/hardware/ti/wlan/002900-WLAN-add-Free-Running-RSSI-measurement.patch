From 707511b7a64fd1710fd7920ae25f8588d6e6990f Mon Sep 17 00:00:00 2001
From: Honore Tricot <honorex.tricot@intel.com>
Date: Wed, 1 Aug 2012 14:50:09 +0200
Subject: [PATCH 29/78] WLAN: add Free Running RSSI measurement

BZ: 50019

TI proposed patch:
Add new calibrator command cw_rssi to get free running RSSI

Change-Id: I16d044337a8c13c4a96a5fc5ba1a9bfcb47a19b8
Signed-off-by: Honore Tricot <honorex.tricot@intel.com>
Reviewed-on: http://android.intel.com:8080/59981
Reviewed-by: Garcia, JeremieX <jeremiex.garcia@intel.com>
Reviewed-by: De Cesco, Jonathan <jonathan.de.cesco@intel.com>
Tested-by: Zurmely, PierreX <pierrex.zurmely@intel.com>
Reviewed-by: buildbot <buildbot@intel.com>
Tested-by: buildbot <buildbot@intel.com>
Reviewed-on: http://android.intel.com:8080/77986
Reviewed-by: Li, XiaojingX <xiaojingx.li@intel.com>
Tested-by: Li, XiaojingX <xiaojingx.li@intel.com>
---
 calibrator/plt.c |   63 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 calibrator/plt.h |    9 +++++++
 2 files changed, 72 insertions(+), 0 deletions(-)

diff --git a/calibrator/plt.c b/calibrator/plt.c
index 704819b..27ff9ce 100644
--- a/calibrator/plt.c
+++ b/calibrator/plt.c
@@ -569,6 +569,69 @@ static int convert_rate_to_num(char *string)
 	return result;
 }
 
+static int display_rssi(struct nl_msg *msg, void *arg)
+{
+	struct nlattr *tb[NL80211_ATTR_MAX + 1];
+	struct genlmsghdr *gnlh = nlmsg_data(nlmsg_hdr(msg));
+	struct nlattr *td[WL1271_TM_ATTR_MAX + 1];
+	struct wl1271_cmd_rssi_params *prms;
+
+	nla_parse(tb, NL80211_ATTR_MAX, genlmsg_attrdata(gnlh, 0),
+		genlmsg_attrlen(gnlh, 0), NULL);
+
+	if (!tb[NL80211_ATTR_TESTDATA]) {
+		fprintf(stderr, "no data!\n");
+		return NL_SKIP;
+	}
+
+	nla_parse(td, WL1271_TM_ATTR_MAX, nla_data(tb[NL80211_ATTR_TESTDATA]),
+		nla_len(tb[NL80211_ATTR_TESTDATA]), NULL);
+
+	prms = (struct wl1271_cmd_rssi_params *)nla_data(td[WL1271_TM_ATTR_DATA]);
+
+	printf("\n\tRSSI val \t- %d\n",(signed short)prms->rssi_val/8);
+
+	return NL_SKIP;
+}
+
+
+
+static int plt_cw_rssi(struct nl80211_state *state, struct nl_cb *cb,
+			struct nl_msg *msg, int argc, char **argv)
+{
+	struct nlattr *key;
+	struct wl1271_cmd_rssi_params prms;
+
+	memset((void *)&prms, 0, sizeof(struct wl1271_cmd_rssi_params));
+
+	prms.test.id = TEST_CMD_FREE_RUN_RSSI;
+
+	key = nla_nest_start(msg, NL80211_ATTR_TESTDATA);
+	if (!key) {
+		fprintf(stderr, "fail to nla_nest_start()\n");
+		return 1;
+	}
+
+	NLA_PUT_U32(msg, WL1271_TM_ATTR_CMD_ID, WL1271_TM_CMD_TEST);
+	NLA_PUT(msg, WL1271_TM_ATTR_DATA, sizeof(prms), &prms);
+	NLA_PUT_U8(msg, WL1271_TM_ATTR_ANSWER, 1);
+
+	nla_nest_end(msg, key);
+
+	nl_cb_set(cb, NL_CB_VALID, NL_CB_CUSTOM, display_rssi , NULL);
+
+	return 0;
+
+nla_put_failure:
+	fprintf(stderr, "%s> building message failed\n", __func__);
+	return 2;
+}
+
+COMMAND(plt, cw_rssi,NULL,
+	NL80211_CMD_TESTMODE, 0, CIB_NETDEV, plt_cw_rssi,
+	"get free running rssi\n");
+
+
 static int plt_tx_cont(struct nl80211_state *state, struct nl_cb *cb,
 			struct nl_msg *msg, int argc, char **argv)
 {
diff --git a/calibrator/plt.h b/calibrator/plt.h
index 0a4d14a..ced293b 100644
--- a/calibrator/plt.h
+++ b/calibrator/plt.h
@@ -262,6 +262,15 @@ struct wl1271_cmd_cal_p2g {
 	unsigned char  padding2;
 } __attribute__((packed));
 
+struct wl1271_cmd_rssi_params {
+	struct wl1271_cmd_header header;
+
+	struct wl1271_cmd_test_header test;
+
+	__le16 rssi_val;
+	__le16 radio_status;
+}__attribute__((packed));
+
 #define MAC_ADDR_LEN  6
 
 struct wl1271_cmd_pkt_params {
-- 
1.7.9

