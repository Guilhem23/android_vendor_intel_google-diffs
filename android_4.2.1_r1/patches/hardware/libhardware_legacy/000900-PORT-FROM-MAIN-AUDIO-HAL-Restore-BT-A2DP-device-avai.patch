From 1fad678596736d22fcdd6571f2e0f006067bea8b Mon Sep 17 00:00:00 2001
From: Thierry Quervel <thierry.quervel@intel.com>
Date: Fri, 28 Sep 2012 10:32:54 +0200
Subject: [PATCH 09/49] [PORT FROM MAIN] [AUDIO HAL] Restore BT A2DP device
 availability as soon as possible

BZ: 50998

This patch resets the FORCE_NO_BT_A2DP flag to FORCE_NONE
when wired headset or headphone is unplugged (if no WIDI
device available).
This allows to swap directly on BT A2DP without transient
playback on speaker.

This patch also integrate a correction related to
patch 66563 merging error, in getDeviceForStrategy() for
WIDI.

Change-Id: Ib7c016c1c27aed8dc1a5b44702bf012e3c1c77b7
Origin-Change-Id: Ie8ce92b97ca18f494cf72df08f35805348819cd3
Signed-off-by: Thierry Quervel <thierry.quervel@intel.com>
Reviewed-on: http://android.intel.com:8080/76873
Reviewed-by: Barthes, FabienX <fabienx.barthes@intel.com>
Tested-by: Barthes, FabienX <fabienx.barthes@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 audio/AudioPolicyManagerBase.cpp |  109 ++++++++------------------------------
 1 files changed, 23 insertions(+), 86 deletions(-)

diff --git a/audio/AudioPolicyManagerBase.cpp b/audio/AudioPolicyManagerBase.cpp
index 3482b9f..78a7791 100644
--- a/audio/AudioPolicyManagerBase.cpp
+++ b/audio/AudioPolicyManagerBase.cpp
@@ -132,6 +132,23 @@ status_t AudioPolicyManagerBase::setDeviceConnectionState(audio_devices_t device
             // remove device from available output devices
             mAvailableOutputDevices = (audio_devices_t)(mAvailableOutputDevices & ~device);
 
+            // Change policy in the case of wsHS unplugging with BT A2DP connected:
+            // at that moment, the FORCE_NO_BT_A2DP flag is set; that unfortunately leads to select
+            // temporarily the speaker as output until setForceUse(FORCE_NONE) is called
+            // by AudioService.
+            // Check that BT A2DP connection is available, and that there is no WIDI
+            // device, otherwise keep the flag to prioritize WIDI over BT A2DP
+            if ((device == AudioSystem::DEVICE_OUT_WIRED_HEADSET) ||
+                (device == AudioSystem::DEVICE_OUT_WIRED_HEADPHONE)){
+                if (!isInCall() &&
+                    (mForceUse[AudioSystem::FOR_MEDIA] == AudioSystem::FORCE_NO_BT_A2DP) &&
+                    (getA2dpOutput() != 0) && !mA2dpSuspended &&
+                    !(mAvailableOutputDevices & AudioSystem::DEVICE_OUT_WIDI)) {
+                    ALOGD("Disabling priority over BT A2DP for MEDIA streams");
+                    mForceUse[AudioSystem::FOR_MEDIA] = AudioSystem::FORCE_NONE;
+                }
+            }
+
             checkOutputsForDevice(device, state, outputs);
             if (mHasA2dp && audio_is_a2dp_device(device)) {
                 // handle A2DP device disconnection
@@ -1285,81 +1302,6 @@ status_t AudioPolicyManagerBase::dump(int fd)
     return NO_ERROR;
 }
 
-bool AudioPolicyManagerBase::isOffloadSupported(uint32_t format,
-                                    AudioSystem::stream_type stream,
-                                    uint32_t samplingRate,
-                                    uint32_t bitRate,
-                                    int64_t duration,
-                                    bool isVideo,
-                                    bool isStreaming)
-{
-    ALOGV("isOffloadSupported: format=%d,"
-         "stream=%x, sampRate %d, bitRate %d,"
-         "durt %lld, isVideo %d, isStreaming %d",
-         format, stream, samplingRate, bitRate, duration, (int)isVideo, (int)isStreaming);
-    // lpa.tunnelling.enable is used for testing. Should be 1 for normal operation
-    bool useLPA = false;
-    char value[PROPERTY_VALUE_MAX];
-    if (property_get("lpa.tunnelling.enable", value, "0")) {
-        useLPA = (bool)atoi(value);
-    }
-
-    ALOGV("useLPA %i", useLPA);
-    if (!useLPA) {
-        return false;
-    }
-
-    // If stream is not music or one of offload supported format, return false
-    if (stream != AudioSystem::MUSIC ) {
-        ALOGV("isOffloadSupported: return false as stream!=Music");
-        return false;
-    }
-    // The LPE Music offload output is not free, return PCM
-    if (mMusicOffloadOutput == true) {
-        ALOGV("isOffloadSupported: mMusicOffloadOutput = %d", mMusicOffloadOutput);
-        ALOGV("isOffloadSupported: Already offload in progress, use non offload decoding");
-        return false;
-    }
-
-    //If duration is less than minimum value defined in property, return false
-    char durValue[PROPERTY_VALUE_MAX];
-    if (property_get("offload.min.file.duration.secs", durValue, "0")) {
-        if (duration < (atoi(durValue) * 1000000 )) {
-            ALOGV("Property set to %s and it is too short for offload", durValue);
-            return false;
-        }
-    } else if (duration < (OFFLOAD_MIN_FILE_DURATION * 1000000 )) {
-        ALOGV("isOffloadSupported: File duration is too short for offload");
-        return false;
-    }
-
-    if ((isVideo) || (isStreaming)) {
-        ALOGV("isOffloadSupported: Video or stream is enabled, returning false");
-        return false;
-    }
-
-    // If format is not supported by LPE Music offload output, return PCM (IA-Decode)
-    switch (format){
-        case AUDIO_FORMAT_MP3:
-        case AUDIO_FORMAT_AAC:
-            break;
-        default:
-            ALOGV("isOffloadSupported: return false as unsupported format= %x", format);
-            return false;
-    }
-
-    // If output device != SPEAKER or HEADSET/HEADPHONE, make it as IA-decoding option
-    routing_strategy strategy = getStrategy((AudioSystem::stream_type)stream);
-    uint32_t device = getDeviceForStrategy(strategy, true /* from cache */);
-
-    if ((device & AUDIO_DEVICE_OUT_NON_OFFLOAD) ||
-        (AudioSystem::DEVICE_OUT_NON_OFFLOAD & mAvailableOutputDevices)) {
-        ALOGV("isOffloadSupported: Output not compatible for offload - use IA decode");
-        return false;
-    }
-    ALOGD("isOffloadSupported: Return true with supported format=%x", format);
-    return true;
-}
 // ----------------------------------------------------------------------------
 // AudioPolicyManagerBase
 // ----------------------------------------------------------------------------
@@ -2308,17 +2250,12 @@ audio_devices_t AudioPolicyManagerBase::getDeviceForStrategy(routing_strategy st
 	if(mForceUse[AudioSystem::FOR_MEDIA] == AudioSystem::FORCE_SPEAKER) {
             LOGV("getDeviceForStrategy() Out. strategy: MEDIA, device: SPEAKER for forceuse.");
             return AUDIO_DEVICE_OUT_SPEAKER;
-	}
-        // Widi device is to be selected before any other device as its
-        // connection is power-consuming
-        if (strategy != STRATEGY_SONIFICATION_LOCAL) {
-            device2 = mAvailableOutputDevices & AudioSystem::DEVICE_OUT_WIDI;
-		}
-	if (mHasA2dp && (mForceUse[AudioSystem::FOR_MEDIA] != AudioSystem::FORCE_NO_BT_A2DP) &&
-                (getA2dpOutput() != 0) && !mA2dpSuspended) {
-            device2 = mAvailableOutputDevices & AUDIO_DEVICE_OUT_BLUETOOTH_A2DP;
-            if (device2 == AUDIO_DEVICE_NONE) {
-                device2 = mAvailableOutputDevices & AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES;
+        }
+        if (mHasA2dp && (mForceUse[AudioSystem::FOR_MEDIA] != AudioSystem::FORCE_NO_BT_A2DP) &&
+            (getA2dpOutput() != 0) && !mA2dpSuspended) {
+            device2 = mAvailableOutputDevices & AudioSystem::DEVICE_OUT_BLUETOOTH_A2DP;
+            if (device2 == 0) {
+                device2 = mAvailableOutputDevices & AudioSystem::DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES;
             }
             if (device2 == AUDIO_DEVICE_NONE) {
                 device2 = mAvailableOutputDevices & AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER;
-- 
1.7.9

