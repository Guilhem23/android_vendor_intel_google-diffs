From 5864f260e93bd8de3a71d4fa37b3d2d33f04ae8f Mon Sep 17 00:00:00 2001
From: Vincent Becker <vincentx.becker@intel.com>
Date: Fri, 2 Nov 2012 18:03:13 +0100
Subject: [PATCH 17/49] [PORT FROM MAIN] [AUDIO] Add a new strategy
 STRATEGY_FM_RADIO in audio policy

BZ: 61911

To have a better control on the FM_RX stream that has specific
audio policies, it is becoming necessary to create a new strategy.

Change-Id: I5f297ae14f186efb388e9e6126fc1ad3325e82ff
Origin-Change-Id: I9aad3fb815418d4e40ecc59d3126df6c3f075cf7
Signed-off-by: Vincent Becker <vincentx.becker@intel.com>
Reviewed-on: http://android.intel.com:8080/78833
Reviewed-by: Yao, Yong <yong.yao@intel.com>
Tested-by: Barthes, FabienX <fabienx.barthes@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 audio/AudioPolicyManagerBase.cpp                 |   60 ++++++++++++++++++---
 include/hardware_legacy/AudioPolicyManagerBase.h |    1 +
 2 files changed, 52 insertions(+), 9 deletions(-)

diff --git a/audio/AudioPolicyManagerBase.cpp b/audio/AudioPolicyManagerBase.cpp
index 7b9fb96..ddbc3a1 100644
--- a/audio/AudioPolicyManagerBase.cpp
+++ b/audio/AudioPolicyManagerBase.cpp
@@ -406,6 +406,16 @@ void AudioPolicyManagerBase::setFmMode(uint32_t mode)
 {
     LOGV("setFmMode() mode %x", mode);
     mFmMode = mode;
+    AudioOutputDescriptor *outputDesc = mOutputs.valueFor(mPrimaryOutput);
+    if (mFmMode == MODE_FM_ON) {
+        LOGV("FM mode is on, increment FM_RX stream count");
+        outputDesc->changeRefCount(AudioSystem::FM_RX, 1);
+    }
+    else {
+        LOGV("FM mode is off, decrement FM_RX stream count");
+        outputDesc->changeRefCount(AudioSystem::FM_RX, -1);
+    }
+
     setOutputDevice(mPrimaryOutput, getNewDevice(mPrimaryOutput, true /*fromCache*/), true);
 }
 
@@ -1896,7 +1906,7 @@ void AudioPolicyManagerBase::checkOutputForStrategy(routing_strategy strategy)
         }
 
         // Move effects associated to this strategy from previous output to new output
-        if (strategy == STRATEGY_MEDIA) {
+        if ((strategy == STRATEGY_MEDIA) || (strategy == STRATEGY_FM_RADIO)) {
             int outIdx = 0;
             for (size_t i = 0; i < dstOutputs.size(); i++) {
                 AudioOutputDescriptor *desc = mOutputs.valueFor(dstOutputs[i]);
@@ -1939,6 +1949,7 @@ void AudioPolicyManagerBase::checkOutputForAllStrategies()
     checkOutputForStrategy(STRATEGY_SONIFICATION_RESPECTFUL);
     checkOutputForStrategy(STRATEGY_SONIFICATION_LOCAL);
     checkOutputForStrategy(STRATEGY_MEDIA);
+    checkOutputForStrategy(STRATEGY_FM_RADIO);
     checkOutputForStrategy(STRATEGY_DTMF);
 }
 
@@ -2034,10 +2045,12 @@ audio_devices_t AudioPolicyManagerBase::getNewDevice(audio_io_handle_t output, b
         device = getDeviceForStrategy(STRATEGY_SONIFICATION, fromCache);
     } else if (outputDesc->isUsedByStrategy(STRATEGY_SONIFICATION_RESPECTFUL)) {
         device = getDeviceForStrategy(STRATEGY_SONIFICATION_RESPECTFUL, fromCache);
-    } else if (outputDesc->isUsedByStrategy(STRATEGY_MEDIA) || (mFmMode == MODE_FM_ON)) {
+    } else if (outputDesc->isUsedByStrategy(STRATEGY_MEDIA)) {
         device = getDeviceForStrategy(STRATEGY_MEDIA, fromCache);
     } else if (outputDesc->isUsedByStrategy(STRATEGY_DTMF)) {
         device = getDeviceForStrategy(STRATEGY_DTMF, fromCache);
+    } else if (outputDesc->isUsedByStrategy(STRATEGY_FM_RADIO)) {
+        device = getDeviceForStrategy(STRATEGY_FM_RADIO, fromCache);
     }
 
     ALOGV("getNewDevice() selected device %x", device);
@@ -2084,10 +2097,11 @@ AudioPolicyManagerBase::routing_strategy AudioPolicyManagerBase::getStrategy(
         // while key clicks are played produces a poor result
     case AudioSystem::TTS:
     case AudioSystem::MUSIC:
-    case AudioSystem::FM_RX:
         return STRATEGY_MEDIA;
     case AudioSystem::ENFORCED_AUDIBLE:
         return STRATEGY_ENFORCED_AUDIBLE;
+    case AudioSystem::FM_RX:
+        return STRATEGY_FM_RADIO;
     }
 }
 
@@ -2130,6 +2144,12 @@ audio_devices_t AudioPolicyManagerBase::getDeviceForStrategy(routing_strategy st
 
     case STRATEGY_DTMF:
         if (!isInCall()) {
+            // If FM is on, follow the FM_RADIO strategy policy
+            if (mFmMode == MODE_FM_ON) {
+                device = getDeviceForStrategy(STRATEGY_FM_RADIO, false /*fromCache*/);
+                break;
+            }
+
             // when off call, DTMF strategy follows the same rules as MEDIA strategy
             device = getDeviceForStrategy(STRATEGY_MEDIA, false /*fromCache*/);
             break;
@@ -2248,10 +2268,10 @@ audio_devices_t AudioPolicyManagerBase::getDeviceForStrategy(routing_strategy st
 
         uint32_t device2 = 0;
 
-                if(mForceUse[AudioSystem::FOR_MEDIA] == AudioSystem::FORCE_SPEAKER) {
-            LOGV("getDeviceForStrategy() Out. strategy: MEDIA, device: SPEAKER for forceuse.");
-            return AUDIO_DEVICE_OUT_SPEAKER;
+        if (mFmMode == MODE_FM_ON) {
+            device2 = getDeviceForStrategy(STRATEGY_FM_RADIO, false /*fromCache*/);
         }
+
         if (mHasA2dp && (mForceUse[AudioSystem::FOR_MEDIA] != AudioSystem::FORCE_NO_BT_A2DP) &&
                 (getA2dpOutput() != 0) && !mA2dpSuspended) {
             device2 = mAvailableOutputDevices & AudioSystem::DEVICE_OUT_BLUETOOTH_A2DP;
@@ -2301,6 +2321,31 @@ audio_devices_t AudioPolicyManagerBase::getDeviceForStrategy(routing_strategy st
         }
         } break;
 
+
+    case STRATEGY_FM_RADIO: {
+
+        uint32_t device2 = 0;
+
+        if(mForceUse[AudioSystem::FOR_MEDIA] == AudioSystem::FORCE_SPEAKER) {
+            LOGV("getDeviceForStrategy():Force use of SPEAKER for STRATEGY_FM_RADIO.");
+            device2 = mAvailableOutputDevices & AudioSystem::DEVICE_OUT_SPEAKER;
+        }
+        if (device2 == 0) {
+            device2 = mAvailableOutputDevices & AudioSystem::DEVICE_OUT_WIRED_HEADPHONE;
+        }
+        if (device2 == 0) {
+            device2 = mAvailableOutputDevices & AudioSystem::DEVICE_OUT_WIRED_HEADSET;
+        }
+
+        device |= device2;
+        if (device) break;
+        device = mDefaultOutputDevice;
+        if (device == 0) {
+            ALOGE("getDeviceForStrategy() no device found for STRATEGY_FM_RADIO");
+        }
+        }
+        break;
+
     default:
         ALOGW("getDeviceForStrategy() unknown strategy: %d", strategy);
         break;
@@ -2432,9 +2477,6 @@ uint32_t AudioPolicyManagerBase::setOutputDevice(audio_io_handle_t output,
 
     muteWaitMs = checkDeviceMuteStrategies(outputDesc, prevDevice, delayMs);
 
-
-    // force output device routing if fm radio is on and output device is changed.
-    if((mFmMode == MODE_FM_ON) && (device != prevDevice)) force = true;
     // Do not change the routing if:
     //  - the requested device is AUDIO_DEVICE_NONE
     //  - the requested device is the same as current device and force is not specified.
diff --git a/include/hardware_legacy/AudioPolicyManagerBase.h b/include/hardware_legacy/AudioPolicyManagerBase.h
index 2053776..da17d0c 100644
--- a/include/hardware_legacy/AudioPolicyManagerBase.h
+++ b/include/hardware_legacy/AudioPolicyManagerBase.h
@@ -148,6 +148,7 @@ protected:
             STRATEGY_SONIFICATION_LOCAL,
             STRATEGY_DTMF,
             STRATEGY_ENFORCED_AUDIBLE,
+	    STRATEGY_FM_RADIO,
             NUM_STRATEGIES
         };
 
-- 
1.7.9

