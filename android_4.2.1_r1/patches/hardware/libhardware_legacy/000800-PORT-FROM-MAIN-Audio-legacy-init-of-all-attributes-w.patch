From 6bc752a12ae276a57d13ac1a2768721c5539555a Mon Sep 17 00:00:00 2001
From: "Andrei V. FOMITCHEV" <andreix.fomitchev@intel.com>
Date: Wed, 10 Oct 2012 17:22:51 +0200
Subject: [PATCH 08/49] [PORT FROM MAIN] [Audio legacy] init of all
 attributes&warning fix

BZ: 61519

Because in constructor, all attributes of a class have not been
initialized, the behaviour can be unpredictable. So, the purpose
of this patch is addition of appropriate initialization of
attributes.
The patch set fixes also compilation warnings.

The "error" has been found by valgrind.

Change-Id: Ib81f9868efc2a8614ea4395f7722c09775d2b9d3
Origin-Change-Id: I9ba288b3e27a46c5764b642a6eca663d1c6af752
Signed-off-by: Andrei V. FOMITCHEV <andreix.fomitchev@intel.com>
Reviewed-on: http://android.intel.com:8080/76871
Reviewed-by: Barthes, FabienX <fabienx.barthes@intel.com>
Tested-by: Barthes, FabienX <fabienx.barthes@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 audio/AudioPolicyManagerBase.cpp |  109 ++++++++++++++++++++++++++++++++++----
 1 files changed, 98 insertions(+), 11 deletions(-)

diff --git a/audio/AudioPolicyManagerBase.cpp b/audio/AudioPolicyManagerBase.cpp
index bb65d99..3482b9f 100644
--- a/audio/AudioPolicyManagerBase.cpp
+++ b/audio/AudioPolicyManagerBase.cpp
@@ -1285,6 +1285,81 @@ status_t AudioPolicyManagerBase::dump(int fd)
     return NO_ERROR;
 }
 
+bool AudioPolicyManagerBase::isOffloadSupported(uint32_t format,
+                                    AudioSystem::stream_type stream,
+                                    uint32_t samplingRate,
+                                    uint32_t bitRate,
+                                    int64_t duration,
+                                    bool isVideo,
+                                    bool isStreaming)
+{
+    ALOGV("isOffloadSupported: format=%d,"
+         "stream=%x, sampRate %d, bitRate %d,"
+         "durt %lld, isVideo %d, isStreaming %d",
+         format, stream, samplingRate, bitRate, duration, (int)isVideo, (int)isStreaming);
+    // lpa.tunnelling.enable is used for testing. Should be 1 for normal operation
+    bool useLPA = false;
+    char value[PROPERTY_VALUE_MAX];
+    if (property_get("lpa.tunnelling.enable", value, "0")) {
+        useLPA = (bool)atoi(value);
+    }
+
+    ALOGV("useLPA %i", useLPA);
+    if (!useLPA) {
+        return false;
+    }
+
+    // If stream is not music or one of offload supported format, return false
+    if (stream != AudioSystem::MUSIC ) {
+        ALOGV("isOffloadSupported: return false as stream!=Music");
+        return false;
+    }
+    // The LPE Music offload output is not free, return PCM
+    if (mMusicOffloadOutput == true) {
+        ALOGV("isOffloadSupported: mMusicOffloadOutput = %d", mMusicOffloadOutput);
+        ALOGV("isOffloadSupported: Already offload in progress, use non offload decoding");
+        return false;
+    }
+
+    //If duration is less than minimum value defined in property, return false
+    char durValue[PROPERTY_VALUE_MAX];
+    if (property_get("offload.min.file.duration.secs", durValue, "0")) {
+        if (duration < (atoi(durValue) * 1000000 )) {
+            ALOGV("Property set to %s and it is too short for offload", durValue);
+            return false;
+        }
+    } else if (duration < (OFFLOAD_MIN_FILE_DURATION * 1000000 )) {
+        ALOGV("isOffloadSupported: File duration is too short for offload");
+        return false;
+    }
+
+    if ((isVideo) || (isStreaming)) {
+        ALOGV("isOffloadSupported: Video or stream is enabled, returning false");
+        return false;
+    }
+
+    // If format is not supported by LPE Music offload output, return PCM (IA-Decode)
+    switch (format){
+        case AUDIO_FORMAT_MP3:
+        case AUDIO_FORMAT_AAC:
+            break;
+        default:
+            ALOGV("isOffloadSupported: return false as unsupported format= %x", format);
+            return false;
+    }
+
+    // If output device != SPEAKER or HEADSET/HEADPHONE, make it as IA-decoding option
+    routing_strategy strategy = getStrategy((AudioSystem::stream_type)stream);
+    uint32_t device = getDeviceForStrategy(strategy, true /* from cache */);
+
+    if ((device & AUDIO_DEVICE_OUT_NON_OFFLOAD) ||
+        (AudioSystem::DEVICE_OUT_NON_OFFLOAD & mAvailableOutputDevices)) {
+        ALOGV("isOffloadSupported: Output not compatible for offload - use IA decode");
+        return false;
+    }
+    ALOGD("isOffloadSupported: Return true with supported format=%x", format);
+    return true;
+}
 // ----------------------------------------------------------------------------
 // AudioPolicyManagerBase
 // ----------------------------------------------------------------------------
@@ -1292,14 +1367,19 @@ status_t AudioPolicyManagerBase::dump(int fd)
 AudioPolicyManagerBase::AudioPolicyManagerBase(AudioPolicyClientInterface *clientInterface)
     :
 #ifdef AUDIO_POLICY_TEST
-    Thread(false),
+      Thread(false),
 #endif //AUDIO_POLICY_TEST
-    mPrimaryOutput((audio_io_handle_t)0),
-    mAvailableOutputDevices(AUDIO_DEVICE_NONE),
-    mPhoneState(AudioSystem::MODE_NORMAL),
-    mLimitRingtoneVolume(false), mLastVoiceVolume(-1.0f),
-    mTotalEffectsCpuLoad(0), mTotalEffectsMemory(0),
-    mA2dpSuspended(false), mHasA2dp(false), mHasUsb(false), mHasRemoteSubmix(false), mFmMode(0)
+      mPrimaryOutput((audio_io_handle_t)0),
+      mAvailableOutputDevices(AUDIO_DEVICE_NONE),
+      mPhoneState(AudioSystem::MODE_NORMAL),
+      mFmMode(0),
+      mLimitRingtoneVolume(false),
+      mLastVoiceVolume(-1.0f),
+      mTotalEffectsCpuLoad(0),
+      mTotalEffectsMemory(0),
+      mA2dpSuspended(false),
+      mHasA2dp(false),
+      mHasUsb(false)
 {
     mpClientInterface = clientInterface;
 
@@ -3009,10 +3089,17 @@ uint32_t AudioPolicyManagerBase::getMaxEffectsMemory()
 
 AudioPolicyManagerBase::AudioOutputDescriptor::AudioOutputDescriptor(
         const IOProfile *profile)
-    : mId(0), mSamplingRate(0), mFormat((audio_format_t)0),
-      mChannelMask((audio_channel_mask_t)0), mLatency(0),
-    mFlags((audio_output_flags_t)0), mDevice(AUDIO_DEVICE_NONE),
-    mOutput1(0), mOutput2(0), mProfile(profile)
+    : mId(0),
+      mSamplingRate(0),
+      mFormat((audio_format_t)0),
+      mChannelMask((audio_channel_mask_t)0),
+      mLatency(0),
+      mFlags((audio_output_flags_t)0),
+      mDevice((audio_devices_t)0),
+      mOutput1(0),
+      mOutput2(0),
+      mProfile(profile),
+      mForceRouting(false)
 {
     // clear usage count for all stream types
     for (int i = 0; i < AudioSystem::NUM_STREAM_TYPES; i++) {
-- 
1.7.9

