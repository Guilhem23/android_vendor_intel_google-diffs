From 93c5313b9039990006ff6dedbb12c9fff6241e8c Mon Sep 17 00:00:00 2001
From: b461 <b461@borqs.com>
Date: Thu, 23 Aug 2012 13:33:34 +0800
Subject: [PATCH 02/49] [PORT FROM MAIN] [PORT FROM R3]FM support on IHF
 (Borqs)

BZ: 56091

This patch combines 3 contribs from Borqs
See detail below

fmradio: Integration of Borqs contribution (Date: Sep 4, 2012).

BZ: 55486

Original commit message:

Sun Liang: enable fm radio through speaker

borqsbtx:0034955
rootcause: FM radio app enable/disable speaker through native setForceUse
interface, then switch FM output device to speaker based on FM mode in
audio policy manager.

Orig-Change-Id: Ic243f8fcdf1640d9859268baf4eaf2376364b9ac
Reviewed-on: https://bkbgerrit.borqs.com/gerrit/7871
Tested-by: svnadmin <svnadmin@borqs.com>
Reviewed-by: b169 <b169@borqs.com>

fmradio: Integration of Borqs contribution (Date: Sep 10, 2012).

BZ: 56509

Original commit message:

Sun Liang: cancel unnecessary output device switch in FM mode

borqsbtx:0036497
rootcause: If output device is not changed in FM mode, audio policy should not
force HAL reopen the same alsa device again.

Orig-Change-Id: I8d1bd790774664f3ff0482b788570568a6e4df4e
Reviewed-on: https://bkbgerrit.borqs.com/gerrit/8897
Tested-by: svnadmin <svnadmin@borqs.com>
Reviewed-by: b448 <b448@borqs.com>
Reviewed-by: b169 <b169@borqs.com>

fmradio: Integration of Borqs contribution (Date: Sep 10, 2012).

BZ: 56509

Original commit message:

Sun Liang: mFmMode member is not initialized

Change-Id: Ibe823cd72b032f19494c7b03e0dbfe092c5cd0a7
Orig-Change-Id: Ie6020957043fefe673076689b505a6652ee6e91c
Orig-Change-Id: I13c130b20c00ba6e23d32c0408a24edb8f1bf079
borqsbtx:0036847
rootcause: mFmMode member is not initialized
Reviewed-on: https://bkbgerrit.borqs.com/gerrit/9210
Tested-by: svnadmin <svnadmin@borqs.com>
Reviewed-by: b461 <b461@borqs.com>
Reviewed-on: http://android.intel.com:8080/75590
Reviewed-by: Barthes, FabienX <fabienx.barthes@intel.com>
Tested-by: Barthes, FabienX <fabienx.barthes@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 audio/AudioPolicyManagerBase.cpp                 |   42 ++++++++++++++++------
 audio/audio_policy_hal.cpp                       |    8 ++++
 include/hardware_legacy/AudioPolicyInterface.h   |    4 ++
 include/hardware_legacy/AudioPolicyManagerBase.h |    8 ++++
 4 files changed, 51 insertions(+), 11 deletions(-)

diff --git a/audio/AudioPolicyManagerBase.cpp b/audio/AudioPolicyManagerBase.cpp
index b4f4778..2c8ca7d 100644
--- a/audio/AudioPolicyManagerBase.cpp
+++ b/audio/AudioPolicyManagerBase.cpp
@@ -383,6 +383,15 @@ void AudioPolicyManagerBase::setPhoneState(int state)
     }
 }
 
+
+void AudioPolicyManagerBase::setFmMode(uint32_t mode)
+{
+    LOGV("setFmMode() mode %x", mode);
+    mFmMode = mode;
+    setOutputDevice(mPrimaryOutput, getNewDevice(mPrimaryOutput, true /*fromCache*/), true);
+}
+
+
 void AudioPolicyManagerBase::setForceUse(AudioSystem::force_use usage, AudioSystem::forced_config config)
 {
     ALOGV("setForceUse() usage %d, config %d, mPhoneState %d", usage, config, mPhoneState);
@@ -403,7 +412,9 @@ void AudioPolicyManagerBase::setForceUse(AudioSystem::force_use usage, AudioSyst
             config != AudioSystem::FORCE_WIRED_ACCESSORY &&
             config != AudioSystem::FORCE_ANALOG_DOCK &&
             config != AudioSystem::FORCE_DIGITAL_DOCK && config != AudioSystem::FORCE_NONE &&
-            config != AudioSystem::FORCE_NO_BT_A2DP) {
+            config != AudioSystem::FORCE_NO_BT_A2DP &&
+            config != AudioSystem::FORCE_SPEAKER &&
+            config != AudioSystem::FORCE_WIDI) {
             ALOGW("setForceUse() invalid config %d for FOR_MEDIA", config);
             return;
         }
@@ -1289,7 +1300,7 @@ AudioPolicyManagerBase::AudioPolicyManagerBase(AudioPolicyClientInterface *clien
     mPhoneState(AudioSystem::MODE_NORMAL),
     mLimitRingtoneVolume(false), mLastVoiceVolume(-1.0f),
     mTotalEffectsCpuLoad(0), mTotalEffectsMemory(0),
-    mA2dpSuspended(false), mHasA2dp(false), mHasUsb(false), mHasRemoteSubmix(false)
+    mA2dpSuspended(false), mHasA2dp(false), mHasUsb(false), mHasRemoteSubmix(false), mFmMode(0)
 {
     mpClientInterface = clientInterface;
 
@@ -1984,7 +1995,7 @@ audio_devices_t AudioPolicyManagerBase::getNewDevice(audio_io_handle_t output, b
     // 4: the strategy "respectful" sonification is active on the output:
     //      use device for strategy "respectful" sonification
     // 5: the strategy media is active on the output:
-    //      use device for strategy media
+    //      use device for strategy media or fm radio is on
     // 6: the strategy DTMF is active on the output:
     //      use device for strategy DTMF
     if (outputDesc->isUsedByStrategy(STRATEGY_ENFORCED_AUDIBLE)) {
@@ -1996,7 +2007,7 @@ audio_devices_t AudioPolicyManagerBase::getNewDevice(audio_io_handle_t output, b
         device = getDeviceForStrategy(STRATEGY_SONIFICATION, fromCache);
     } else if (outputDesc->isUsedByStrategy(STRATEGY_SONIFICATION_RESPECTFUL)) {
         device = getDeviceForStrategy(STRATEGY_SONIFICATION_RESPECTFUL, fromCache);
-    } else if (outputDesc->isUsedByStrategy(STRATEGY_MEDIA)) {
+    } else if (outputDesc->isUsedByStrategy(STRATEGY_MEDIA) || (mFmMode == MODE_FM_ON)) {
         device = getDeviceForStrategy(STRATEGY_MEDIA, fromCache);
     } else if (outputDesc->isUsedByStrategy(STRATEGY_DTMF)) {
         device = getDeviceForStrategy(STRATEGY_DTMF, fromCache);
@@ -2205,13 +2216,19 @@ audio_devices_t AudioPolicyManagerBase::getDeviceForStrategy(routing_strategy st
         // FALL THROUGH
 
     case STRATEGY_MEDIA: {
-        uint32_t device2 = AUDIO_DEVICE_NONE;
-        if (strategy != STRATEGY_SONIFICATION) {
-            // no sonification on remote submix (e.g. WFD)
-            device2 = mAvailableOutputDevices & AUDIO_DEVICE_OUT_REMOTE_SUBMIX;
-        }
-        if ((device2 == AUDIO_DEVICE_NONE) &&
-                mHasA2dp && (mForceUse[AudioSystem::FOR_MEDIA] != AudioSystem::FORCE_NO_BT_A2DP) &&
+
+        uint32_t device2 = 0;
+
+	if(mForceUse[AudioSystem::FOR_MEDIA] == AudioSystem::FORCE_SPEAKER) {
+            LOGV("getDeviceForStrategy() Out. strategy: MEDIA, device: SPEAKER for forceuse.");
+            return AUDIO_DEVICE_OUT_SPEAKER;
+	}
+        // Widi device is to be selected before any other device as its
+        // connection is power-consuming
+        if (strategy != STRATEGY_SONIFICATION_LOCAL) {
+            device2 = mAvailableOutputDevices & AudioSystem::DEVICE_OUT_WIDI;
+		}
+	if (mHasA2dp && (mForceUse[AudioSystem::FOR_MEDIA] != AudioSystem::FORCE_NO_BT_A2DP) &&
                 (getA2dpOutput() != 0) && !mA2dpSuspended) {
             device2 = mAvailableOutputDevices & AUDIO_DEVICE_OUT_BLUETOOTH_A2DP;
             if (device2 == AUDIO_DEVICE_NONE) {
@@ -2374,6 +2391,9 @@ uint32_t AudioPolicyManagerBase::setOutputDevice(audio_io_handle_t output,
     }
     muteWaitMs = checkDeviceMuteStrategies(outputDesc, prevDevice, delayMs);
 
+
+    // force output device routing if fm radio is on and output device is changed.
+    if((mFmMode == MODE_FM_ON) && (device != prevDevice)) force = true;
     // Do not change the routing if:
     //  - the requested device is AUDIO_DEVICE_NONE
     //  - the requested device is the same as current device and force is not specified.
diff --git a/audio/audio_policy_hal.cpp b/audio/audio_policy_hal.cpp
index bff6b74..59f03cc 100644
--- a/audio/audio_policy_hal.cpp
+++ b/audio/audio_policy_hal.cpp
@@ -98,6 +98,13 @@ static void ap_set_ringer_mode(struct audio_policy *pol, uint32_t mode,
     // deprecated, never called
 }
 
+    /* indicate a change in fm radio mode */
+static void ap_set_fm_mode(struct audio_policy *pol, uint32_t mode)
+{
+    struct legacy_audio_policy *lap = to_lap(pol);
+    lap->apm->setFmMode(mode);
+}
+
     /* force using a specific device category for the specified usage */
 static void ap_set_force_use(struct audio_policy *pol,
                           audio_policy_force_use_t usage,
@@ -333,6 +340,7 @@ static int create_legacy_ap(const struct audio_policy_device *device,
     lap->policy.get_device_connection_state = ap_get_device_connection_state;
     lap->policy.set_phone_state = ap_set_phone_state;
     lap->policy.set_ringer_mode = ap_set_ringer_mode;
+    lap->policy.set_fm_mode = ap_set_fm_mode;
     lap->policy.set_force_use = ap_set_force_use;
     lap->policy.get_force_use = ap_get_force_use;
     lap->policy.set_can_mute_enforced_audible =
diff --git a/include/hardware_legacy/AudioPolicyInterface.h b/include/hardware_legacy/AudioPolicyInterface.h
index 51f4822..d63979b 100644
--- a/include/hardware_legacy/AudioPolicyInterface.h
+++ b/include/hardware_legacy/AudioPolicyInterface.h
@@ -74,6 +74,10 @@ public:
                                                                           const char *device_address) = 0;
     // indicate a change in phone state. Valid phones states are defined by AudioSystem::audio_mode
     virtual void setPhoneState(int state) = 0;
+
+    // indicate a change in fm radio mode
+    virtual void setFmMode(uint32_t mode) = 0;
+
     // force using a specific device category for the specified usage
     virtual void setForceUse(AudioSystem::force_use usage, AudioSystem::forced_config config) = 0;
     // retrieve current device category forced for a given usage
diff --git a/include/hardware_legacy/AudioPolicyManagerBase.h b/include/hardware_legacy/AudioPolicyManagerBase.h
index 451fe8a..65a81b6 100644
--- a/include/hardware_legacy/AudioPolicyManagerBase.h
+++ b/include/hardware_legacy/AudioPolicyManagerBase.h
@@ -78,6 +78,7 @@ public:
         virtual AudioSystem::device_connection_state getDeviceConnectionState(audio_devices_t device,
                                                                               const char *device_address);
         virtual void setPhoneState(int state);
+        virtual void setFmMode(uint32_t mode);
         virtual void setForceUse(AudioSystem::force_use usage, AudioSystem::forced_config config);
         virtual AudioSystem::forced_config getForceUse(AudioSystem::force_use usage);
         virtual void setSystemProperty(const char* property, const char* value);
@@ -149,6 +150,12 @@ protected:
             NUM_STRATEGIES
         };
 
+        enum fm_mode {
+            MODE_FM_OFF,
+            MODE_FM_ON,
+            MODE_FM_NUM
+        };
+
         // 4 points to define the volume attenuation curve, each characterized by the volume
         // index (from 0 to 100) at which they apply, and the attenuation in dB at that index.
         // we use 100 steps to avoid rounding errors when computing the volume in volIndexToAmpl()
@@ -515,6 +522,7 @@ protected:
                                                 // without AUDIO_DEVICE_BIT_IN to allow direct bit
                                                 // field comparisons
         int mPhoneState;                                                    // current phone state
+        uint32_t                 mFmMode;                                   // current fm radio mode
         AudioSystem::forced_config mForceUse[AudioSystem::NUM_FORCE_USE];   // current forced use configuration
 
         StreamDescriptor mStreams[AudioSystem::NUM_STREAM_TYPES];           // stream descriptors for volume control
-- 
1.7.9

