From 6df0db151aa4cd2bfc154e24099159dafa0911f8 Mon Sep 17 00:00:00 2001
From: Xuefeng Deng <xuefeng.deng@intel.com>
Date: Wed, 25 Jul 2012 09:46:54 +0800
Subject: Chromium_net: decrease the net log frequency by caching the read length

BZ: 35737

When reading bytes from network, chromium will generate a log
for each read operation. Each read length is about 1k~4k.
Reading a 10Mbps 1080P video clip will generate many log
events per second, which will increase CPU utilization. This
patch will decrease the net log frequency, so that CPU
utilization will be decreased.

Category: AOSP Improvement
Domain: AOSP.Optimization-Browser
Oigin: Internal
Upstream-Candidate: no, key fix

Issue: http://shilc211.sh.intel.com:41006/show_bug.cgi?id=35737
Change-Id: Ia96f1209e03dd4f17b4bf7b75ea2f8d9073fb2b3
Orig-MCG-Change-Id: I0084f7e6671a50803c7f34ffc3cdb7828d9f188f
Signed-off-by: Junchao Han <junchao.han@intel.com>
Author: Xuefeng Deng <xuefeng.deng@intel.com>
---
 net/socket/tcp_client_socket_libevent.cc |   35 +++++++++++++++++++++++++++--
 net/socket/tcp_client_socket_libevent.h  |    3 ++
 2 files changed, 35 insertions(+), 3 deletions(-)

diff --git a/net/socket/tcp_client_socket_libevent.cc b/net/socket/tcp_client_socket_libevent.cc
index f820955..e293f13 100644
--- a/net/socket/tcp_client_socket_libevent.cc
+++ b/net/socket/tcp_client_socket_libevent.cc
@@ -35,6 +35,8 @@
 #include <cutils/qtaguid.h>
 #endif
 
+#define NETLOG_CACHE_SIZE   65536
+
 namespace net {
 
 namespace {
@@ -118,6 +120,7 @@ TCPClientSocketLibevent::TCPClientSocketLibevent(
       net_log_(BoundNetLog::Make(net_log, NetLog::SOURCE_SOCKET)),
       previously_disconnected_(false),
       use_tcp_fastopen_(false),
+      nread_cached_(0),
       tcp_fastopen_connected_(false)
 #ifdef ANDROID
       , wait_for_connect_(false)
@@ -326,6 +329,14 @@ void TCPClientSocketLibevent::DoDisconnect() {
   if (socket_ == kInvalidSocket)
     return;
 
+  if (!net_log_.IsLoggingBytes()) {
+    if (nread_cached_ > 0) {
+      LogByteTransfer(
+        net_log_, NetLog::TYPE_SOCKET_BYTES_RECEIVED, nread_cached_, NULL);
+      nread_cached_ = 0;
+    }
+  }
+
   bool ok = read_socket_watcher_.StopWatchingFileDescriptor();
   DCHECK(ok);
   ok = write_socket_watcher_.StopWatchingFileDescriptor();
@@ -394,8 +405,17 @@ int TCPClientSocketLibevent::Read(IOBuffer* buf,
     read_bytes.Add(nread);
     if (nread > 0)
       use_history_.set_was_used_to_convey_data();
-    LogByteTransfer(
+    if (!net_log_.IsLoggingBytes()) {
+      nread_cached_ += nread;
+        if (nread_cached_ >= NETLOG_CACHE_SIZE) {
+          LogByteTransfer(
+            net_log_, NetLog::TYPE_SOCKET_BYTES_RECEIVED, nread_cached_, NULL);
+          nread_cached_ = 0;
+        }
+    } else {
+      LogByteTransfer(
         net_log_, NetLog::TYPE_SOCKET_BYTES_RECEIVED, nread, buf->data());
+    }
     return nread;
   }
   if (errno != EAGAIN && errno != EWOULDBLOCK) {
@@ -628,8 +648,17 @@ void TCPClientSocketLibevent::DidCompleteRead() {
     read_bytes.Add(bytes_transferred);
     if (bytes_transferred > 0)
       use_history_.set_was_used_to_convey_data();
-    LogByteTransfer(net_log_, NetLog::TYPE_SOCKET_BYTES_RECEIVED, result,
-                    read_buf_->data());
+    if (!net_log_.IsLoggingBytes()) {
+      nread_cached_ += result;
+      if (nread_cached_ >= NETLOG_CACHE_SIZE) {
+        LogByteTransfer(
+                net_log_, NetLog::TYPE_SOCKET_BYTES_RECEIVED, nread_cached_, NULL);
+        nread_cached_ = 0;
+      }
+    } else {
+      LogByteTransfer(net_log_, NetLog::TYPE_SOCKET_BYTES_RECEIVED, result,
+              read_buf_->data());
+    }
   } else {
     result = MapSystemError(errno);
   }
diff --git a/net/socket/tcp_client_socket_libevent.h b/net/socket/tcp_client_socket_libevent.h
index 15fc378..d71bc9a 100644
--- a/net/socket/tcp_client_socket_libevent.h
+++ b/net/socket/tcp_client_socket_libevent.h
@@ -172,6 +172,9 @@ class TCPClientSocketLibevent : public ClientSocket, base::NonThreadSafe {
   scoped_refptr<IOBuffer> write_buf_;
   int write_buf_len_;
 
+  // Cache the read bytes for logging
+  int nread_cached_;
+
   // External callback; called when read is complete.
   CompletionCallback* read_callback_;
 
-- 
1.7.4.1

