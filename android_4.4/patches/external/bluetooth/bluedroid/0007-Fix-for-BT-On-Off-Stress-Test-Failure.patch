From e3335b8e8ba6b18b85671b1b9dc1311663eebac4 Mon Sep 17 00:00:00 2001
From: Paritosh <paritosh.debnath@intel.com>
Date: Thu, 19 Sep 2013 14:36:48 +0530
Subject: Fix for BT On Off Stress Test Failure

In some cases, between HCI Reset command send and command complete,
BT Stack was receiving some events from the Controller whose command
was sent before making last BT Off. Due to that Stack was going to
bad state. This fix will make sure that such events get ignored.

Issue: AXIA-4197

Change-Id: Ief3202c12b86eec9508a37d8a5428f20f1464c56
Signed-off-by: Paritosh <paritosh.debnath@intel.com>
---
 hci/src/hci_h4.c |   34 +++++++++++++++++++++++++++++++++-
 1 files changed, 33 insertions(+), 1 deletions(-)

diff --git a/hci/src/hci_h4.c b/hci/src/hci_h4.c
index 89c7696..cf141b5 100644
--- a/hci/src/hci_h4.c
+++ b/hci/src/hci_h4.c
@@ -106,6 +106,7 @@ static const uint16_t msg_evt_table[] =
 #define HCI_INTEL_DEBUG_EVT         0xFF
 #define HCI_READ_BUFFER_SIZE        0x1005
 #define HCI_LE_READ_BUFFER_SIZE     0x2002
+#define HCI_RESET                   0x0C03
 
 #define IGNORE_EVENT                3
 
@@ -176,6 +177,7 @@ volatile int num_hci_cmd_pkts = 1;
 ******************************************************************************/
 
 static tHCI_H4_CB       h4_cb;
+static int hci_reset_ongoing = FALSE;
 
 /******************************************************************************
 **  Static functions
@@ -274,6 +276,10 @@ uint8_t internal_event_intercept(void)
         {
             STREAM_TO_UINT16(opcode, p)
 
+            /* Reset the flag as HCI Reset sent from vendor lib is completed */
+            if(opcode == HCI_RESET)
+                hci_reset_ongoing = FALSE;
+
             if (opcode == p_cb->int_cmd[p_cb->int_cmd_rd_idx].opcode)
             {
                 HCIDBG( \
@@ -590,6 +596,7 @@ void hci_h4_init(void)
     memset(&h4_cb, 0, sizeof(tHCI_H4_CB));
     utils_queue_init(&(h4_cb.acl_rx_q));
 
+    hci_reset_ongoing = FALSE;
     /* Per HCI spec., always starts with 1 */
     num_hci_cmd_pkts = 1;
 
@@ -999,7 +1006,29 @@ uint16_t hci_h4_receive_msg(void)
             if (p_cb->p_rcv_msg->event == MSG_HC_TO_STACK_HCI_EVT)
                 intercepted = internal_event_intercept();
 
-            if ((bt_hc_cbacks) && (intercepted == FALSE))
+            if(hci_reset_ongoing == TRUE)
+            {
+                uint8_t     *p;
+                uint8_t     event_code, num_packets, len;
+                uint16_t    opcode;
+
+                p = (uint8_t *)(p_cb->p_rcv_msg + 1);
+                event_code = *p++;
+                len = *p++;
+                num_packets = *p++;
+
+                STREAM_TO_UINT16(opcode, p);
+
+                ALOGE("Received while HCI Reset from BT vendor lib is ongoing, discarding, \
+                       Event: %02X, Len: %02X, Packet Count: %02X, Opcode: %04X", event_code, len, num_packets, opcode);
+
+                if (bt_hc_cbacks)
+                {
+                    bt_hc_cbacks->dealloc((TRANSAC) p_cb->p_rcv_msg, \
+                                          (char *) (p_cb->p_rcv_msg + 1));
+                }
+            }
+            else if ((bt_hc_cbacks) && (intercepted == FALSE))
             {
                 bt_hc_cbacks->data_ind((TRANSAC) p_cb->p_rcv_msg, \
                                        (char *) (p_cb->p_rcv_msg + 1), \
@@ -1034,6 +1063,9 @@ uint8_t hci_h4_send_int_cmd(uint16_t opcode, HC_BT_HDR *p_buf, \
         return FALSE;
     }
 
+    if(opcode == HCI_RESET)
+        hci_reset_ongoing = TRUE;
+
     h4_cb.int_cmd_rsp_pending++;
     h4_cb.int_cmd[h4_cb.int_cmd_wrt_idx].opcode = opcode;
     h4_cb.int_cmd[h4_cb.int_cmd_wrt_idx].cback = p_cback;
-- 
1.7.4.1

