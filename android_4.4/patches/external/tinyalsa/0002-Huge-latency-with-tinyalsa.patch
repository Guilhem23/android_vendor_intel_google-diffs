From 3a44351e52654243946669bfcccc85f92f890d3c Mon Sep 17 00:00:00 2001
From: David.Coutherut <davidx.coutherut@intel.com>
Date: Mon, 3 Jun 2013 13:45:51 +0200
Subject: Huge latency with tinyalsa

BZ: 113043
[CLEAN]

Setting or Listing mixer with tinymix take a long time
especialy on ctpscale ht : 0.24 sec each mixer.
In mixer_open there is an introspection of each mixer
For ENUM mixer there is a nested loop of ioctl, wich take
a long time: For wm5102 we have 17000 ioctl call

Reduce the amount of ioctl called by libtinyalsa.so in case of
enum mixer by only introspecting the mixer element we need to
set or get

Category: aosp improvement
Domain: AudioComms-Tinyalsa
Origin: internal
Upstream-Candidate: yes
Change-Id: Iae70271d40e2291745af3f38f037b2bbdc047f6b
Orig-Change-Id: Ief5d6a8eb6236b2967b28e5c1651834ca9508ce9
Signed-off-by: David Coutherut <davidx.coutherut@intel.com>
---
 mixer.c |   61 +++++++++++++++++++++++++++++++++++++++++++------------------
 1 files changed, 43 insertions(+), 18 deletions(-)

diff --git a/mixer.c b/mixer.c
index 4568cca..ef34afb 100644
--- a/mixer.c
+++ b/mixer.c
@@ -137,22 +137,6 @@ struct mixer *mixer_open(unsigned int card)
             goto fail;
         mixer->ctl[n].info = ei;
         mixer->ctl[n].mixer = mixer;
-        if (ei->type == SNDRV_CTL_ELEM_TYPE_ENUMERATED) {
-            char **enames = calloc(ei->value.enumerated.items, sizeof(char*));
-            if (!enames)
-                goto fail;
-            mixer->ctl[n].ename = enames;
-            for (m = 0; m < ei->value.enumerated.items; m++) {
-                memset(&tmp, 0, sizeof(tmp));
-                tmp.id.numid = ei->id.numid;
-                tmp.value.enumerated.item = m;
-                if (ioctl(fd, SNDRV_CTL_IOCTL_ELEM_INFO, &tmp) < 0)
-                    goto fail;
-                enames[m] = strdup(tmp.value.enumerated.name);
-                if (!enames[m])
-                    goto fail;
-            }
-        }
     }
 
     free(eid);
@@ -460,11 +444,51 @@ unsigned int mixer_ctl_get_num_enums(struct mixer_ctl *ctl)
     return ctl->info->value.enumerated.items;
 }
 
+char **mixer_ctl_fill_enum_string(struct mixer_ctl *ctl)
+{
+    struct snd_ctl_elem_info tmp;
+    unsigned int m;
+    char **enames;
+
+    if (ctl->ename) {
+        return ctl->ename;
+    }
+
+    enames = calloc(ctl->info->value.enumerated.items, sizeof(char*));
+    if (!enames)
+        goto fail;
+    ctl->ename = enames;
+    for (m = 0; m < ctl->info->value.enumerated.items; m++) {
+        memset(&tmp, 0, sizeof(tmp));
+        tmp.id.numid = ctl->info->id.numid;
+        tmp.value.enumerated.item = m;
+        if (ioctl(ctl->mixer->fd, SNDRV_CTL_IOCTL_ELEM_INFO, &tmp) < 0)
+            goto fail;
+        enames[m] = strdup(tmp.value.enumerated.name);
+        if (!enames[m])
+            goto fail;
+    }
+    return enames;
+
+fail:
+    if (enames) {
+        for (m = 0; m < ctl->info->value.enumerated.items; m++) {
+            if (enames[m]) {
+                free(enames[m]);
+            }
+        }
+        free(enames);
+        ctl->ename = NULL;
+    }
+    return NULL;
+}
+
 const char *mixer_ctl_get_enum_string(struct mixer_ctl *ctl,
                                       unsigned int enum_id)
 {
     if (!ctl || (ctl->info->type != SNDRV_CTL_ELEM_TYPE_ENUMERATED) ||
-        (enum_id >= ctl->info->value.enumerated.items))
+        (enum_id >= ctl->info->value.enumerated.items) ||
+        !mixer_ctl_fill_enum_string(ctl))
         return NULL;
 
     return (const char *)ctl->ename[enum_id];
@@ -476,7 +500,8 @@ int mixer_ctl_set_enum_by_string(struct mixer_ctl *ctl, const char *string)
     struct snd_ctl_elem_value ev;
     int ret;
 
-    if (!ctl || (ctl->info->type != SNDRV_CTL_ELEM_TYPE_ENUMERATED))
+    if (!ctl || (ctl->info->type != SNDRV_CTL_ELEM_TYPE_ENUMERATED) ||
+        !mixer_ctl_fill_enum_string(ctl))
         return -EINVAL;
 
     num_enums = ctl->info->value.enumerated.items;
-- 
1.7.4.1

