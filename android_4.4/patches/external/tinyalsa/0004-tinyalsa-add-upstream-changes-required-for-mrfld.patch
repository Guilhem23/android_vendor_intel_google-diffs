From c18db9963e2085b8f7ce22263f348588e8800e20 Mon Sep 17 00:00:00 2001
From: Vinod Koul <vinod.koul@linux.intel.com>
Date: Thu, 21 Jul 2011 18:55:21 +0100
Subject: tinyalsa: add upstream changes required for mrfld

BZ: 66195

This adds two patches one for asound.h addition and second for ctl

1.
include: Add a local asound.h to allow build with current public releases

Bionic does not ship a copy of asound.h and it should do no harm to have
a local copy here.

upstream commit-id: 648e14a421f1795006f770de8c57602366b20c24

2.
Add mixer_ctl_{set,get}_data()

For binary controls we don't want to go through
mixer_ctl_{set,get}_value() as that will trigger many calls to our
get()/put() callback in the kernel.  Set the entire payload at once
and trigger the get()/put() callback once.

This also updated mixer array size to 1024

Category: asop improvement
Domain: AUDIO_MEDIA-EXTERNAL
Origin: internal
Upstream-Candidate: no, proprietary

Change-Id: I6b0815aee114194279100ac9f0cb2ea5968a08ac
Orig-Change-Id: Ic94333ab794299058d149d493d384c301e5d5f25
Signed-off-by: Vinod Koul <vinod.koul@linux.intel.com>
Signed-off-by: Omair Mohammed Abdullah <omair.m.abdullah@linux.intel.com>
Reviewed-on: http://android.intel.com:8080/82296
Reviewed-by: Centelles, Sylvain <sylvain.centelles@intel.com>
Reviewed-by: M, Arulselvan <arulselvan.m@intel.com>
Tested-by: M, Arulselvan <arulselvan.m@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 include/tinyalsa/asoundlib.h |    2 +
 mixer.c                      |   48 ++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 50 insertions(+), 0 deletions(-)

diff --git a/include/tinyalsa/asoundlib.h b/include/tinyalsa/asoundlib.h
index ba8a087..d9e6c61 100644
--- a/include/tinyalsa/asoundlib.h
+++ b/include/tinyalsa/asoundlib.h
@@ -255,8 +255,10 @@ int mixer_ctl_set_percent(struct mixer_ctl *ctl, unsigned int id, int percent);
 
 int mixer_ctl_get_value(struct mixer_ctl *ctl, unsigned int id);
 int mixer_ctl_get_array(struct mixer_ctl *ctl, void *array, size_t count);
+int mixer_ctl_get_data(struct mixer_ctl *ctl, void *data, size_t len);
 int mixer_ctl_set_value(struct mixer_ctl *ctl, unsigned int id, int value);
 int mixer_ctl_set_array(struct mixer_ctl *ctl, const void *array, size_t count);
+int mixer_ctl_set_data(struct mixer_ctl *ctl, const void *data, size_t len);
 int mixer_ctl_set_enum_by_string(struct mixer_ctl *ctl, const char *string);
 
 /* Determe range of integer mixer controls */
diff --git a/mixer.c b/mixer.c
index b17b5b7..5b9d3df 100644
--- a/mixer.c
+++ b/mixer.c
@@ -361,6 +361,32 @@ int mixer_ctl_get_array(struct mixer_ctl *ctl, void *array, size_t count)
     return 0;
 }
 
+int mixer_ctl_get_data(struct mixer_ctl *ctl, void *data, size_t len)
+{
+    struct snd_ctl_elem_value ev; 
+    int ret;
+
+    if (!ctl || (len > ctl->info->count) || !data)
+        return -EINVAL;
+
+    memset(&ev, 0, sizeof(ev));
+    ev.id.numid = ctl->info->id.numid;
+    ret = ioctl(ctl->mixer->fd, SNDRV_CTL_IOCTL_ELEM_READ, &ev);
+    if (ret < 0)
+        return ret;
+
+    switch (ctl->info->type) {
+    case SNDRV_CTL_ELEM_TYPE_BYTES:
+        memcpy(data, ev.value.bytes.data, len);
+        break;
+
+    default:
+        return -EINVAL;
+    }   
+
+    return 0;
+}
+
 int mixer_ctl_set_value(struct mixer_ctl *ctl, unsigned int id, int value)
 {
     struct snd_ctl_elem_value ev;
@@ -428,6 +454,28 @@ int mixer_ctl_set_array(struct mixer_ctl *ctl, const void *array, size_t count)
     return ioctl(ctl->mixer->fd, SNDRV_CTL_IOCTL_ELEM_WRITE, &ev);
 }
 
+int mixer_ctl_set_data(struct mixer_ctl *ctl, const void *data, size_t len)
+{
+    struct snd_ctl_elem_value ev;
+
+    if (!ctl || (len > ctl->info->count) || !len || !data)
+        return -EINVAL;
+
+    memset(&ev, 0, sizeof(ev));
+    ev.id.numid = ctl->info->id.numid;
+
+    switch (ctl->info->type) {
+    case SNDRV_CTL_ELEM_TYPE_BYTES:
+        memcpy(ev.value.bytes.data, data, len);
+        break;
+
+    default:
+        return -EINVAL;
+    }
+
+    return ioctl(ctl->mixer->fd, SNDRV_CTL_IOCTL_ELEM_WRITE, &ev);
+}
+
 int mixer_ctl_get_range_min(struct mixer_ctl *ctl)
 {
     if (!ctl || (ctl->info->type != SNDRV_CTL_ELEM_TYPE_INTEGER))
-- 
1.7.4.1

