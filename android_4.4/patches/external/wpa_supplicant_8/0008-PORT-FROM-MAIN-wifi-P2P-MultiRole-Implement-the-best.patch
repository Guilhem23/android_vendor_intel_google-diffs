From 17df25b2afbf96d6c6c401f237303c94851f0ec6 Mon Sep 17 00:00:00 2001
From: Paul Naoumenko <paulx.naoumenko@intel.com>
Date: Fri, 11 Oct 2013 16:29:15 +0200
Subject: [PORT FROM MAIN] wifi/P2P/MultiRole : Implement the best channel algorithm

BZ: 85543

Add new module named bestchannel used to select the p2p
operating channel when becoming GO.
It contains an algoritm allowing to provide
the best channel based on the number of BSSs per channel.
Only channels marked as not disabled are taken into account.

Manage the no common channels error case upon group persistent
re-invocation from a GO. If peer answers with invitation result=7
(no common channels), then disable the best channel selection on the
next 10 scans results. It avoids to select an unsupported channel as
operating channel for next invitation attempt from upper layer.

Patch contains followings patches that are fixes of best channel algoritm
wifi: fix klockwork issue (BZ 95155)
wifi: best channel algo - update "wpa_s->hw" before processing it (BZ 97452)
wifi: modify best channel algorithm weights (BZ 98215)
WIFI: Don't authorize DFS channel in best channel algorithm (BZ 102958)
P2P: Forbid 5825 MHz frequency as operating channel (BZ 104644)
WiFi Display: Use same channel as STA when creating a P2P Group (BZ 110115)
P2P: Use same channel in case of no P2P negotiation and connected to an AP (BZ 102406 87030)

Change-Id: I28d90608c1d530cbdb1562b96bb6d103735df652
Orig-Change-Id: I4a4b8ca185298384fa45556f6d947bf651f253eb
Category: device enablement
Domain: CWS.WIFI-Common
Origin: upstream
Upstream-Candidate: yes
Signed-off-by: Jean-Michel Bachot <jean-michel.bachot@intel.com>
---
 src/utils/common.c                |   69 +++++++
 src/utils/common.h                |    2 +
 wpa_supplicant/Android.mk         |    5 +
 wpa_supplicant/android.config     |    4 +-
 wpa_supplicant/bestchannel.c      |  371 +++++++++++++++++++++++++++++++++++++
 wpa_supplicant/bestchannel.h      |   86 +++++++++
 wpa_supplicant/events.c           |   25 +++
 wpa_supplicant/p2p_supplicant.c   |   27 +++-
 wpa_supplicant/wpa_supplicant.c   |   13 ++-
 wpa_supplicant/wpa_supplicant_i.h |    5 +
 10 files changed, 604 insertions(+), 3 deletions(-)
 create mode 100644 wpa_supplicant/bestchannel.c
 create mode 100644 wpa_supplicant/bestchannel.h

diff --git a/src/utils/common.c b/src/utils/common.c
index bf326cd..d983764 100644
--- a/src/utils/common.c
+++ b/src/utils/common.c
@@ -622,3 +622,72 @@ char * dup_binstr(const void *src, size_t len)
 
 	return res;
 }
+
+/**
+ * freq_to_channel - Convert frequency into channel info
+ * @channel: Buffer for returning channel number
+ * Returns:  channel on success, -1 on failure
+ */
+int frequency_to_channel(int freq)
+{
+	int chan = 0;
+
+	if (freq >= 2412 && freq <= 2472) {
+		chan = (freq - 2407) / 5;
+		return chan;
+	} else if (freq == 2484) {
+		chan = 14;
+		return chan;
+	} else if (freq >= 5180 && freq <= 5805) {
+		chan = (freq - 5000) / 5;
+		return chan;
+	} else
+		return -1;
+}
+
+/**
+ * channel_to_freq - Convert channel into frequency info
+ * @channel: Input Channel
+ * Returns: the returning frequency if success
+ *          -1 on failure  (if the specified channel is unknown)
+ */
+int channel_to_freq( int channel)
+{
+    int freq;
+    if ( channel >= 1 && channel <= 13)
+    {
+        /* 2.4 GHz */
+        freq = channel * 5 + 2407 ;
+        return freq;
+    }
+
+    else if (channel == 14)
+    {
+        freq = 2484;
+        return freq;
+    }
+
+    else if (channel >= 36 && channel <= 64)
+    {
+        /* 5 GHz, channels 36..64 */
+        freq = channel * 5 + 5000;
+        return freq;
+    }
+
+    else if (channel >= 100 && channel <= 140)
+    {
+        /* 5 GHz, channels 100..140 */
+        freq = channel * 5 + 5000;
+        return freq;
+    }
+
+    else if (channel >= 149 && channel <= 165)
+    {
+        /* 5 GHz, channels 149..165 */
+        freq = channel * 5 + 5000;
+        return freq;
+    }
+
+    else
+        return -1;
+}
diff --git a/src/utils/common.h b/src/utils/common.h
index 29f0b95..20824bd 100644
--- a/src/utils/common.h
+++ b/src/utils/common.h
@@ -489,6 +489,8 @@ size_t merge_byte_arrays(u8 *res, size_t res_len,
 			 const u8 *src1, size_t src1_len,
 			 const u8 *src2, size_t src2_len);
 char * dup_binstr(const void *src, size_t len);
+int frequency_to_channel(int freq);
+int channel_to_freq( int channel);
 
 static inline int is_zero_ether_addr(const u8 *a)
 {
diff --git a/wpa_supplicant/Android.mk b/wpa_supplicant/Android.mk
index 350ec96..a910d74 100644
--- a/wpa_supplicant/Android.mk
+++ b/wpa_supplicant/Android.mk
@@ -1435,6 +1435,11 @@ L_CFLAGS += -DCONFIG_AUTOSCAN
 OBJS += autoscan.c
 endif
 
+ifdef CONFIG_BESTCHANNEL
+L_CFLAGS += -DCONFIG_BESTCHANNEL
+OBJS += bestchannel.c
+endif
+
 ifdef CONFIG_EXT_PASSWORD_TEST
 OBJS += src/utils/ext_password_test.c
 L_CFLAGS += -DCONFIG_EXT_PASSWORD_TEST
diff --git a/wpa_supplicant/android.config b/wpa_supplicant/android.config
index 8b3d6b4..6b089bc 100644
--- a/wpa_supplicant/android.config
+++ b/wpa_supplicant/android.config
@@ -515,9 +515,11 @@ CONFIG_TDLS=y
 #Enable Wifi Display
 CONFIG_WIFI_DISPLAY=y
 
+#Enable best channel
+CONFIG_BESTCHANNEL=y
 # Autoscan
 # This can be used to enable automatic scan support in wpa_supplicant.
-# See wpa_supplicant.conf for more information on autoscan usage.
+#ï¿½See wpa_supplicant.conf for more information on autoscan usage.
 #
 # Enabling directly a module will enable autoscan support.
 # For exponential module:
diff --git a/wpa_supplicant/bestchannel.c b/wpa_supplicant/bestchannel.c
new file mode 100644
index 0000000..b7e6082
--- /dev/null
+++ b/wpa_supplicant/bestchannel.c
@@ -0,0 +1,371 @@
+/*
+ * WPA Supplicant - best channel module
+ * Copyright (c) 2013, Intel Corporation. All rights reserved.
+ *
+ * This software may be distributed under the terms of the BSD license.
+ * See README for more details.
+ */
+
+#include "bestchannel.h"
+#include "includes.h"
+#include "common.h"
+#include "config.h"
+#include "wpa_supplicant_i.h"
+#include "driver_i.h"
+
+int channel2index(unsigned int channel)
+{
+	int index = -1;
+
+	/* 2.4 GHz channels*/
+	if ((channel >= 1) && (channel <= 13)) {
+			index = channel - 1;
+	}
+
+	/* 5.1 GHz channels*/
+	else if ((channel >= 36) && (channel <= 64)) {
+			if ((channel % 4) == 0)
+				index = (channel / 4) + (NUM_CHANNELS_2_4_GHZ - 9);
+	}
+
+	/* 5.7 GHz channels*/
+	else if ((channel >= 149) && (channel <= 165)) {
+			if (((channel - 1) % 4) == 0)
+				index = ((channel - 1) / 4) - (37 -(NUM_CHANNELS_2_4_GHZ + NUM_CHANNELS_5_1_GHZ));
+	}
+
+	return index;
+}
+
+int index2channel(int index)
+{
+	int channel;
+
+	/* Channel 1..13*/
+	if ((index >= 0) && (index <= (NUM_CHANNELS_2_4_GHZ - 1)))
+		channel = index + 1;
+
+	/* Channel 36..64*/
+	else if ((index >= NUM_CHANNELS_2_4_GHZ) &&
+			(index <= (NUM_CHANNELS_2_4_GHZ + NUM_CHANNELS_5_1_GHZ - 1)))
+		channel = (index - (NUM_CHANNELS_2_4_GHZ - 9)) * 4;
+
+	/* Channel 149..165*/
+	else if ((index >= (NUM_CHANNELS_2_4_GHZ + NUM_CHANNELS_5_1_GHZ)) &&
+			(index <= (NUM_CHANNELS_2_4_GHZ + NUM_CHANNELS_5_1_GHZ +
+					   NUM_CHANNELS_5_7_GHZ - 1)))
+		channel = ((index + (37 -
+				   (NUM_CHANNELS_2_4_GHZ + NUM_CHANNELS_5_1_GHZ))) * 4) + 1;
+
+	else
+		channel = -1;
+
+	return channel;
+}
+
+
+/**
+ * bestOper_init - Alloc and Init the algo structure
+ */
+int best_channel_init(struct wpa_global *global)
+{
+	int i;
+
+	global->best_channel_channels = (struct best_op_channel*) malloc(sizeof (struct best_op_channel) *
+									 (NUM_CHANNELS_2_4_GHZ +
+									  NUM_CHANNELS_5_1_GHZ +
+									  NUM_CHANNELS_5_7_GHZ));
+	if(global->best_channel_channels == NULL) {
+		wpa_printf(MSG_ERROR, "best_channel: malloc failed!");
+		return -1;
+	}
+
+	memset(global->best_channel_channels, 0, sizeof (struct best_op_channel) *
+		(NUM_CHANNELS_2_4_GHZ +
+		 NUM_CHANNELS_5_1_GHZ +
+		 NUM_CHANNELS_5_7_GHZ));
+
+	for (i = 0 ; i < (NUM_CHANNELS_2_4_GHZ + NUM_CHANNELS_5_1_GHZ + NUM_CHANNELS_5_7_GHZ); i++)
+		global->best_channel_channels[i].channel_number = index2channel(i);
+
+	global->best_chan_disable = 0;
+	return 0;
+}
+
+/**
+ * bestOper_uninit - Free the algo structure
+ */
+void best_channel_uninit(struct wpa_global *global)
+{
+	if(global->best_channel_channels)
+		free(global->best_channel_channels);
+}
+
+/**
+ * bestOper_resetAcessPoints - Reset the previously applied Access Points
+ */
+void best_channel_reset_ap(struct wpa_supplicant *wpa_s)
+{
+	int i;
+	if (wpa_s->global->best_channel_channels == NULL)
+		return;
+
+	for (i = 0; i < (NUM_CHANNELS_2_4_GHZ + NUM_CHANNELS_5_1_GHZ +
+		 NUM_CHANNELS_5_7_GHZ); i++)
+		wpa_s->global->best_channel_channels[i].nb_of_aps = 0;
+}
+
+/**
+ * best_channel_add_ap - Add a detected Access point to the list
+ *      @channel: Channel number of the access point
+ *      @rssi:    RSSI of the access point
+ *
+ * Returns: 0 on success,
+ *          -1 on error
+ */
+int best_channel_add_ap(struct wpa_supplicant *wpa_s,
+		unsigned int channel)
+{
+	int index = channel2index(channel);
+
+	if (index == -1) {
+		wpa_printf(MSG_ERROR,
+				"Add access point on channel %d [UNSUPPORTED]", channel);
+		return -1;
+	}
+
+	if (wpa_s->global->best_channel_channels == NULL)
+		return -1;
+
+	if (wpa_s->global->best_channel_channels[index].enabled != 1)
+		wpa_printf(MSG_DEBUG,
+				"Add access point on channel %d [BANNED]", channel);
+	else
+		wpa_printf(MSG_DEBUG,"Add access point on channel %d", channel);
+
+	wpa_s->global->best_channel_channels[index].nb_of_aps++;
+
+	return 0;
+}
+
+/**
+ * best_channel_auth_channel - Consider the specified channel as Authorized
+ *      @channel: Channel to authorize
+ *
+ * Returns: 0 on success,
+ *          -1 on error
+ */
+static int best_channel_auth_channel(struct wpa_supplicant *wpa_s,
+		unsigned int channel)
+{
+	int index = channel2index(channel);
+
+	if (index == -1)
+		return -1;
+
+	if (wpa_s->global->best_channel_channels == NULL)
+		return -1;
+
+	wpa_printf(MSG_DEBUG, "Authorize channel %d", channel);
+	wpa_s->global->best_channel_channels[index].enabled = 1;
+
+	return 0;
+}
+
+/**
+ *  best_channel_get_freq_list - Get the supported frequencies for best channel
+ *
+ * Returns:  0 on success
+ *           -1 if failure
+ */
+int best_channel_get_freq_list(struct wpa_supplicant *wpa_s)
+{
+	struct hostapd_hw_modes *modes;
+	int i, j;
+
+	/*
+	 * "wpa_s->hw" is not dynamically updated on a country code update.
+	 * So, refresh it before processing it in case country code has changed.
+	 */
+	wpa_s->hw.modes = wpa_drv_get_hw_feature_data(wpa_s,
+						      &wpa_s->hw.num_modes,
+						      &wpa_s->hw.flags);
+
+	modes = wpa_s->hw.modes;
+	if (modes == NULL)
+		return -1;
+
+	for (i = 0; i < wpa_s->hw.num_modes; i++) {
+		for (j = 0; j < modes[i].num_channels; j++) {
+			if (modes[i].channels[j].flag &  (HOSTAPD_CHAN_DISABLED |
+											  HOSTAPD_CHAN_PASSIVE_SCAN |
+											  HOSTAPD_CHAN_NO_IBSS |
+											  HOSTAPD_CHAN_RADAR)
+					|| (modes[i].channels[j].freq >= 5260
+							&& modes[i].channels[j].freq <= 5700)
+					/* workaround : forbid channel 165 because bcm stack
+					 * does not support it in P2P GO mode
+					 */
+					|| modes[i].channels[j].freq == 5825)
+				continue;
+			best_channel_auth_channel(wpa_s, modes[i].channels[j].chan);
+		}
+	}
+	return 0;
+}
+
+/**
+ *  best_channel_compute - Compute the best channel to connect to
+ *
+ * Returns:  the best channel if success
+ *           -1 if failure
+ */
+int best_channel_compute(struct wpa_supplicant *wpa_s)
+{
+	int i;
+	unsigned char score;
+
+	unsigned int best_2_4_channel = 1;
+	unsigned char best_2_4_score   = 255;
+	/* Best 5GHz channel set to one in case no 5GHz channels are authorized*/
+	unsigned int best_5_channel   = 1;
+	unsigned char best_5_score     = 255;
+
+	unsigned int best_channel     = 1;
+	unsigned int channel_num;
+
+	if (wpa_s->global->best_channel_channels == NULL)
+		return -1;
+	/**
+	 * Compute the best channel on 2.4GHz band
+	 */
+	for (i = 0; i < NUM_CHANNELS_2_4_GHZ; i++) {
+		/* If the channel is not authorized, skip it */
+		if (wpa_s->global->best_channel_channels[i].enabled != 1)
+			continue;
+
+		/* Ponder the scored of current channel with neighboring channels:
+		 * X is the current channel and i is its index
+		 * X[i] = 1*X[i] + 4*(X[i-1] + X[i+1]) + 2*(X[i-2] +X[i+2])
+		 */
+
+		channel_num = wpa_s->global->best_channel_channels[i].channel_number;
+
+		/* Channel 1*/
+		if (channel_num == 1) {
+			score  = W0_CHAN * wpa_s->global->best_channel_channels[i].nb_of_aps +
+					 W1_CHAN * wpa_s->global->best_channel_channels[i + 1].nb_of_aps +
+					 W2_CHAN * wpa_s->global->best_channel_channels[i + 2].nb_of_aps;
+		}
+
+		/* Channel 2*/
+		else if ((i > 0) &&
+				 (channel_num == 2)) {
+			score  = W0_CHAN *  wpa_s->global->best_channel_channels[i].nb_of_aps +
+					 W1_CHAN * (wpa_s->global->best_channel_channels[i - 1].nb_of_aps +
+					 wpa_s->global->best_channel_channels[i + 1].nb_of_aps) +
+					 W2_CHAN *  wpa_s->global->best_channel_channels[i + 2].nb_of_aps;
+		}
+
+		/* Channel 3 to 11*/
+		else if ((i > 1) &&
+				 (channel_num >= 3) &&
+				 (channel_num <= 11)) {
+			score  = W0_CHAN *  wpa_s->global->best_channel_channels[i].nb_of_aps +
+					 W1_CHAN * (wpa_s->global->best_channel_channels[i - 1].nb_of_aps +
+					 wpa_s->global->best_channel_channels[i + 1].nb_of_aps) +
+					 W2_CHAN * (wpa_s->global->best_channel_channels[i - 2].nb_of_aps +
+					 wpa_s->global->best_channel_channels[i + 2].nb_of_aps);
+		}
+
+		/* Channel 12*/
+		else if ((i > 1) &&
+				 (channel_num == 12)) {
+			score  = W0_CHAN *  wpa_s->global->best_channel_channels[i].nb_of_aps +
+					 W1_CHAN * (wpa_s->global->best_channel_channels[i - 1].nb_of_aps +
+					 wpa_s->global->best_channel_channels[i + 1].nb_of_aps) +
+					 W2_CHAN *  wpa_s->global->best_channel_channels[i - 2].nb_of_aps;
+		}
+
+		/* Channel 13*/
+		else if ((i > 1) &&
+				(channel_num == 13)) {
+			score  = W0_CHAN * wpa_s->global->best_channel_channels[i].nb_of_aps +
+					 W1_CHAN * wpa_s->global->best_channel_channels[i - 1].nb_of_aps +
+					 W2_CHAN * wpa_s->global->best_channel_channels[i - 2].nb_of_aps;
+		} else {
+			wpa_printf(MSG_ERROR, "best_channel: Internal error");
+			score = 255;
+		}
+
+		if (score < best_2_4_score) {
+			best_2_4_channel = channel_num;
+			best_2_4_score   = score;
+		}
+	}
+
+	/**
+	 * Compute the best channel on 5GHz band
+	 */
+	for ( ; i < NUM_CHANNELS_2_4_GHZ +
+	NUM_CHANNELS_5_1_GHZ +
+	NUM_CHANNELS_5_7_GHZ ; i++) {
+		/* If the channel is not authorized, skip it*/
+		if (wpa_s->global->best_channel_channels[i].enabled != 1)
+			continue;
+
+		channel_num = wpa_s->global->best_channel_channels[i].channel_number;
+
+		/* Ponder the scored of current channel with neighboring channels:
+		 * X is the current channel and i is its index
+		 * X[i] = 1*X[i] + 4*(X[i-1] +X[i+1])
+		 */
+		if ((i < ( NUM_CHANNELS_2_4_GHZ +  NUM_CHANNELS_5_1_GHZ +
+				   NUM_CHANNELS_5_7_GHZ - 1)) &&
+			((channel_num == 36)  ||
+			 (channel_num == 149))) {
+				score  = W0_CHAN * wpa_s->global->best_channel_channels[i].nb_of_aps +
+						 W2_CHAN * wpa_s->global->best_channel_channels[i + 1].nb_of_aps;
+		}
+
+		else if ((i < ( NUM_CHANNELS_2_4_GHZ +  NUM_CHANNELS_5_1_GHZ +
+						NUM_CHANNELS_5_7_GHZ - 1)) &&
+				(((channel_num >= 40)  &&
+				  (channel_num <= 60)) ||
+				 ((channel_num >= 153) &&
+				  (channel_num <= 161)))) {
+			score  = W0_CHAN *  wpa_s->global->best_channel_channels[i].nb_of_aps +
+					 W2_CHAN * (wpa_s->global->best_channel_channels[i - 1].nb_of_aps +
+					 wpa_s->global->best_channel_channels[i + 1].nb_of_aps);
+		}
+
+		else if ((channel_num == 64 ) ||
+				 (channel_num == 165)) {
+			score  = W0_CHAN *  wpa_s->global->best_channel_channels[i].nb_of_aps +
+					 W2_CHAN *  wpa_s->global->best_channel_channels[i - 1].nb_of_aps;
+		} else {
+			wpa_printf(MSG_ERROR, "best_channel: Internal error");
+			score = 255;
+		}
+
+		if (score < best_5_score) {
+			best_5_channel = channel_num;
+			best_5_score   = score;
+		}
+	}
+
+	/**
+	 * Now it is time to choose the frequency band : 5 GHz or 2.4 GHz ?
+	 * 5 Ghz is really less used than 2.4 GHz , hence prefer 5 GHz
+	 * For that, add 2 points to the best 2.4Ghz channels
+	 */
+	if (best_5_score <= (best_2_4_score + 2))
+		best_channel = best_5_channel;
+	else
+		best_channel = best_2_4_channel;
+
+	wpa_printf(MSG_DEBUG, "Best Operating channel is = %d\n", best_channel);
+
+	return best_channel;
+
+}
diff --git a/wpa_supplicant/bestchannel.h b/wpa_supplicant/bestchannel.h
new file mode 100644
index 0000000..8380990
--- /dev/null
+++ b/wpa_supplicant/bestchannel.h
@@ -0,0 +1,86 @@
+/*
+ * WPA Supplicant - best channel module
+ * Copyright (c) 2013, Intel Corporation. All rights reserved.
+ *
+ * This software may be distributed under the terms of the BSD license.
+ * See README for more details.
+ */
+
+#ifndef __BEST_CHANNEL_H__
+#define __BEST_CHANNEL_H__
+
+/* Channels from 1 to 13 per step of 1*/
+#define NUM_CHANNELS_2_4_GHZ  13
+
+/* Channels from 36 to 64 per step of 4*/
+#define NUM_CHANNELS_5_1_GHZ  8
+
+/* Channels from 149 to 165 per step of 4*/
+#define NUM_CHANNELS_5_7_GHZ  5
+
+/* Weight of handled channel N */
+#define W0_CHAN 1
+
+/* Weight of channel N-1 and N+1  */
+#define W1_CHAN 4
+
+/* Weight of channel N-2 and N+2  */
+#define W2_CHAN 2
+
+/**
+ * Structure defining a channel
+ */
+struct best_op_channel {
+	unsigned int nb_of_aps;
+	unsigned int channel_number;
+	unsigned char enabled;
+
+};
+
+struct wpa_supplicant;
+struct wpa_global;
+
+#ifdef CONFIG_BESTCHANNEL
+
+int best_channel_init(struct wpa_global *global);
+void best_channel_uninit(struct wpa_global *global);
+void best_channel_reset_ap(struct wpa_supplicant *wpa_s);
+int best_channel_add_ap(struct wpa_supplicant *wpa_s, unsigned int channel);
+int best_channel_get_freq_list(struct wpa_supplicant *wpa_s);
+int best_channel_compute(struct wpa_supplicant *wpa_s);
+
+
+#else /* CONFIG_BESTCHANNEL */
+
+static inline int best_channel_init(struct wpa_global *global)
+{
+	return 0;
+}
+
+static inline void best_channel_uninit(struct wpa_global *global)
+{
+}
+
+static inline void best_channel_reset_ap(struct wpa_supplicant *wpa_s)
+{
+}
+
+static inline int best_channel_add_ap(struct wpa_supplicant *wpa_s,
+										unsigned int channel)
+{
+	return 0;
+}
+
+static inline int best_channel_get_freq_list(struct wpa_supplicant *wpa_s)
+{
+	return 0;
+}
+
+static inline int best_channel_compute(struct wpa_supplicant *wpa_s)
+{
+	return 0;
+}
+
+#endif /* CONFIG_BESTCHANNEL */
+
+#endif
diff --git a/wpa_supplicant/events.c b/wpa_supplicant/events.c
index 58c15c4..1141509 100644
--- a/wpa_supplicant/events.c
+++ b/wpa_supplicant/events.c
@@ -42,6 +42,7 @@
 #include "scan.h"
 #include "offchannel.h"
 #include "interworking.h"
+#include "bestchannel.h"
 
 
 #ifndef CONFIG_NO_SCAN_PROCESSING
@@ -1153,6 +1154,10 @@ static int _wpa_supplicant_event_scan_results(struct wpa_supplicant *wpa_s,
 #ifndef CONFIG_NO_RANDOM_POOL
 	size_t i, num;
 #endif /* CONFIG_NO_RANDOM_POOL */
+#ifdef CONFIG_BESTCHANNEL
+	struct wpa_bss *bss;
+	static unsigned int best_chan_scan_cnt = 0;
+#endif
 
 #ifdef CONFIG_AP
 	if (wpa_s->ap_iface)
@@ -1237,6 +1242,26 @@ static int _wpa_supplicant_event_scan_results(struct wpa_supplicant *wpa_s,
 
 	wpas_notify_scan_done(wpa_s, 1);
 
+#ifdef CONFIG_BESTCHANNEL
+	if (!wpa_s->global->best_chan_disable)
+	{
+		if (best_channel_get_freq_list(wpa_s) < 0)
+			wpa_printf( MSG_ERROR, "Failed to get supported Frequencies for "
+						"best channel");
+		best_channel_reset_ap(wpa_s);
+		dl_list_for_each(bss, &wpa_s->bss_id, struct wpa_bss, list_id) {
+		best_channel_add_ap(wpa_s, frequency_to_channel(bss->freq));
+		}
+		wpa_s->global->best_freq = channel_to_freq(best_channel_compute(wpa_s));
+	} else if (best_chan_scan_cnt < 10) {
+		best_chan_scan_cnt++;
+		wpa_printf( MSG_ERROR, "Best channel disabled for 10 scans, scan "
+				"occurence is %d , remaining scans before re-enabling "
+				"%d", best_chan_scan_cnt, 10 - best_chan_scan_cnt);
+	} else
+		wpa_s->global->best_chan_disable = 0;
+#endif
+
 	if (sme_proc_obss_scan(wpa_s) > 0) {
 		wpa_scan_results_free(scan_res);
 		return 0;
diff --git a/wpa_supplicant/p2p_supplicant.c b/wpa_supplicant/p2p_supplicant.c
index d7b3189..48aafee 100644
--- a/wpa_supplicant/p2p_supplicant.c
+++ b/wpa_supplicant/p2p_supplicant.c
@@ -33,6 +33,7 @@
 #include "offchannel.h"
 #include "wps_supplicant.h"
 #include "p2p_supplicant.h"
+#include "bestchannel.h"
 
 
 /*
@@ -2849,6 +2850,17 @@ static void wpas_invitation_result(void *ctx, int status, const u8 *bssid,
 			wpas_remove_persistent_peer(wpa_s, ssid, peer, 1);
 		}
 		wpas_p2p_remove_pending_group_interface(wpa_s);
+#ifdef CONFIG_BESTCHANNEL
+		if (status == P2P_SC_FAIL_NO_COMMON_CHANNELS) {
+			/* reset the best channel for next invitation attempt from upper
+			 * layer */
+			wpa_dbg(wpa_s, MSG_DEBUG,
+					"P2P: Best channel selected as operating channel not "
+					"supported by peer");
+			wpa_s->global->best_freq = 0;
+			wpa_s->global->best_chan_disable = 1;
+		}
+#endif
 		return;
 	}
 
@@ -4047,6 +4059,13 @@ static int wpas_p2p_setup_freqs(struct wpa_supplicant *wpa_s, int freq,
 			goto exit_free;
 		}
 	}
+#ifdef CONFIG_BESTCHANNEL
+	else {
+		wpa_printf(MSG_DEBUG, "P2P: Trying to prefer the best computed channel"
+						  " (%u MHz)", wpa_s->global->best_freq);
+		wpas_p2p_update_best_channels(wpa_s, 0, 0, wpa_s->global->best_freq);
+	}
+#endif
 
 exit_ok:
 	res = 0;
@@ -4376,10 +4395,16 @@ static int wpas_p2p_init_go_params(struct wpa_supplicant *wpa_s,
 	int res, *freqs;
 	unsigned int pref_freq;
 	unsigned int num, i;
-
 	os_memset(params, 0, sizeof(*params));
 	params->role_go = 1;
 	params->ht40 = ht40;
+#ifdef CONFIG_BESTCHANNEL
+	/* Assign best freqency computed to best_overall_freq  because it is used
+	 * in case user creates a GO autonomous (p2p_group_add)
+	 */
+	if (wpa_s->global->best_freq > 0)
+		wpa_s->best_overall_freq = wpa_s->global->best_freq;
+#endif
 	if (freq) {
 		if (!freq_included(channels, freq)) {
 			wpa_printf(MSG_DEBUG, "P2P: Forced GO freq %d MHz not "
diff --git a/wpa_supplicant/wpa_supplicant.c b/wpa_supplicant/wpa_supplicant.c
index b431662..0b5bc34 100644
--- a/wpa_supplicant/wpa_supplicant.c
+++ b/wpa_supplicant/wpa_supplicant.c
@@ -51,6 +51,7 @@
 #include "offchannel.h"
 #include "hs20_supplicant.h"
 #include "wnm_sta.h"
+#include "bestchannel.h"
 
 const char *wpa_supplicant_version =
 "wpa_supplicant v" VERSION_STR "\n"
@@ -3413,6 +3414,14 @@ struct wpa_global * wpa_supplicant_init(struct wpa_params *params)
 		return NULL;
 	}
 #endif /* CONFIG_WIFI_DISPLAY */
+#ifdef CONFIG_BESTCHANNEL
+	global->best_freq = 0;
+	if (best_channel_init(global) < 0) {
+		wpa_printf(MSG_ERROR, "Failed to initialize Best channel");
+		wpa_supplicant_deinit(global);
+		return NULL;
+	}
+#endif
 
 	return global;
 }
@@ -3468,7 +3477,9 @@ void wpa_supplicant_deinit(struct wpa_global *global)
 #ifdef CONFIG_WIFI_DISPLAY
 	wifi_display_deinit(global);
 #endif /* CONFIG_WIFI_DISPLAY */
-
+#ifdef CONFIG_BESTCHANNEL
+	best_channel_uninit(global);
+#endif
 	while (global->ifaces)
 		wpa_supplicant_remove_iface(global, global->ifaces, 1);
 
diff --git a/wpa_supplicant/wpa_supplicant_i.h b/wpa_supplicant/wpa_supplicant_i.h
index d69cd61..615702d 100644
--- a/wpa_supplicant/wpa_supplicant_i.h
+++ b/wpa_supplicant/wpa_supplicant_i.h
@@ -274,6 +274,11 @@ struct wpa_global {
 #endif /* CONFIG_WIFI_DISPLAY */
 
 	struct psk_list_entry *add_psk; /* From group formation */
+#ifdef CONFIG_BESTCHANNEL
+	int best_freq;
+	struct best_op_channel *best_channel_channels;
+	unsigned int best_chan_disable;
+#endif
 };
 
 
-- 
1.7.4.1

