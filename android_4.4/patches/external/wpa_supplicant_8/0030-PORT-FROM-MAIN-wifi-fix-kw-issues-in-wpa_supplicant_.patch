From 163fda3a244c631a09496ed8d82888530046807b Mon Sep 17 00:00:00 2001
From: Paul Naoumenko <paulx.naoumenko@intel.com>
Date: Mon, 14 Oct 2013 20:27:08 +0200
Subject: [PORT FROM MAIN] wifi: fix kw issues in wpa_supplicant_8

BZ: 133259 134580 136737

- 110317: 'freq' might be used uninitialized in this function.
- 110793: Pointer 'global' checked for NULL at line 97 will be
dereferenced at line 104.
- 113225: Pointer returned by eap_get_name may be NULL and will
be dereferenced in snprintf.
- 97447: Array 'selected_aid' of size 35 may use index value(s) 0..253
- 97448: Array 'aid' of size 35 may use index value(s) 0..253
- 101013: Array 'ext_capab' of size 10 may use index value(s) 0..256

And fixes a warning:
assignment from incompatible pointer type (selected_app, line 522)

Change-Id: Ieb9619c73b01c90e788e4a53bf165d85076a9175
Orig-Change-Id: Ib25b60f4e4d910fa2d92a25bf43e900ba36ca0f5
Category: device enablement
Domain: CWS.WIFI-Common
Origin: upstream
Upstream-Candidate: nonproprietary
Orig-Change-Id: If075c64bf822ff29eb6dcdd40c166ec7d977e856
Orig-Change-Id: I8f9d46c3d23c8242832f317c3d456085b9134f83
Signed-off-by: Loic Poulain <loicx.poulain@intel.com>
---
 src/utils/pcsc_funcs.c          |    6 ++++--
 wpa_supplicant/bestchannel.c    |    5 ++++-
 wpa_supplicant/interworking.c   |   18 ++++++++++--------
 wpa_supplicant/p2p_supplicant.c |    2 +-
 wpa_supplicant/sme.c            |    7 ++++++-
 5 files changed, 25 insertions(+), 13 deletions(-)

diff --git a/src/utils/pcsc_funcs.c b/src/utils/pcsc_funcs.c
index 860c1c8..fa6a4be 100644
--- a/src/utils/pcsc_funcs.c
+++ b/src/utils/pcsc_funcs.c
@@ -16,6 +16,7 @@
 #include "common.h"
 #include "pcsc_funcs.h"
 
+#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
 
 /* See ETSI GSM 11.11 and ETSI TS 102 221 for details.
  * SIM commands:
@@ -519,7 +520,7 @@ static int scard_get_selected_aid(struct scard_data *scard, unsigned char *aid,
 	cmd[3] = 0x01; // P2 -> get AID of selected application.
 	cmdlen=5;
 
-	selected_app = (struct selected_app *) buf;
+	selected_app = (struct selected_app_t *) buf;
 	len = sizeof(buf);
 	ret = scard_transmit(scard, cmd, cmdlen, buf, &len);
 	if (ret != SCARD_S_SUCCESS) {
@@ -790,7 +791,8 @@ struct scard_data * scard_init(scard_sim_type sim_type, const char *reader)
 			}
 
 			if( aid_len == selected_aid_len ){
-				if( os_memcmp( aid, selected_aid, aid_len ) == 0 ){
+				unsigned int cmp_len = MIN((unsigned int)aid_len, sizeof(selected_aid));
+				if( os_memcmp(aid, selected_aid, cmp_len) == 0 ){
 					wpa_printf(MSG_INFO, "SCARD: The right AID is selected.");
 
 					if (scard_select_file(scard, SCARD_FILE_GSM_DF, buf, &blen)) {
diff --git a/wpa_supplicant/bestchannel.c b/wpa_supplicant/bestchannel.c
index 68ff7c0..0024c62 100644
--- a/wpa_supplicant/bestchannel.c
+++ b/wpa_supplicant/bestchannel.c
@@ -94,7 +94,10 @@ int best_channel_init(struct wpa_global *global)
 {
 	int i;
 
-	if (global && global->best_safe_channel_init != 1) {
+	if (!global)
+		return -1;
+
+	if (global->best_safe_channel_init != 1) {
 		/*
 		 * default enable all
 		*/
diff --git a/wpa_supplicant/interworking.c b/wpa_supplicant/interworking.c
index 36f75a1..23722da 100644
--- a/wpa_supplicant/interworking.c
+++ b/wpa_supplicant/interworking.c
@@ -1311,14 +1311,16 @@ int interworking_connect(struct wpa_supplicant *wpa_s, struct wpa_bss *bss)
 		}
 		break;
 	case EAP_TYPE_PEAP:
-		os_snprintf(buf, sizeof(buf), "\"auth=%s\"",
-			    eap_get_name(EAP_VENDOR_IETF,
-					 eap->inner_method ?
-					 eap->inner_method :
-					 EAP_TYPE_MSCHAPV2));
-		if (wpa_config_set(ssid, "phase2", buf, 0) < 0)
-			goto fail;
-		break;
+		{
+			const char *name = eap_get_name(EAP_VENDOR_IETF,
+					eap->inner_method ?
+							eap->inner_method :
+							EAP_TYPE_MSCHAPV2);
+			os_snprintf(buf, sizeof(buf), "\"auth=%s\"", name?name:"UNDEF");
+			if (wpa_config_set(ssid, "phase2", buf, 0) < 0)
+				goto fail;
+			break;
+		}
 	case EAP_TYPE_TLS:
 		break;
 	}
diff --git a/wpa_supplicant/p2p_supplicant.c b/wpa_supplicant/p2p_supplicant.c
index b214488..d1afb3f 100644
--- a/wpa_supplicant/p2p_supplicant.c
+++ b/wpa_supplicant/p2p_supplicant.c
@@ -5297,7 +5297,7 @@ void wpas_p2p_completed(struct wpa_supplicant *wpa_s)
 	u8 go_dev_addr[ETH_ALEN];
 	int network_id = -1;
 	int persistent;
-	int freq;
+	int freq = 0;
 
 	if (ssid == NULL || ssid->mode != WPAS_MODE_P2P_GROUP_FORMATION) {
 		eloop_cancel_timeout(wpas_p2p_group_formation_timeout,
diff --git a/wpa_supplicant/sme.c b/wpa_supplicant/sme.c
index 925d132..3836ad5 100644
--- a/wpa_supplicant/sme.c
+++ b/wpa_supplicant/sme.c
@@ -32,6 +32,10 @@
 #define SME_AUTH_TIMEOUT 5
 #define SME_ASSOC_TIMEOUT 5
 
+#ifndef MIN
+#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 static void sme_auth_timer(void *eloop_ctx, void *timeout_ctx);
 static void sme_assoc_timer(void *eloop_ctx, void *timeout_ctx);
 static void sme_obss_scan_timeout(void *eloop_ctx, void *timeout_ctx);
@@ -376,7 +380,8 @@ static void sme_send_authentication(struct wpa_supplicant *wpa_s,
 			   wpa_s->sme.assoc_req_ie_len -
 			   (pos - wpa_s->sme.assoc_req_ie));
 		wpa_s->sme.assoc_req_ie_len += ext_capab_len;
-		os_memcpy(pos, ext_capab, ext_capab_len);
+		os_memcpy(pos, ext_capab,
+			    MIN((unsigned int)ext_capab_len, sizeof(ext_capab)));
 	}
 
 #ifdef CONFIG_SAE
-- 
1.7.4.1

