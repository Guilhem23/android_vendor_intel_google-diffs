From 331ea9a6cb470c656ff2716a6a399527ca6927fa Mon Sep 17 00:00:00 2001
From: aleksey.v.ignatenko <avignate@nstdrl243.ins.intel.com>
Date: Thu, 14 Feb 2013 14:09:45 +0700
Subject: Dalvik: Bug 57890 fix: setting the correct rPC for extended MIRs

BZ: 57890

Incorrect rPC set for a range check leads to SPECjvm2008 scimark LU workload hang.
Hang comes this way. In case of Range check failure trace execution bails to
interpreter (via dvmJitToInterpPunt). Current PC is taken and execution is started.
In case of scimark.lu this is if-ge bytecode. After execution of if-ge interpreter
sets PC to the next bytecode and continues with common_updateProfile which checks
if we're to compile. Then checks if it's already in code cache and continues with
the compiled code. Now we're back to our range check again which bails to interpreter.
The problem of the hang here is inside range check code which exports PC to if-ge
bytecode again. export PC is hardcoded in genHoistedChecksForCountUpLoop to be able
to bail to interpreter in case of failure. Fix: Extended MIRs are processed with an
ENTRY BB so corresponding offsets (entryBlock->startOffset) for these MIRs were adjusted.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: If86ef54c23bedc27c7c422f58bf494ef74154048
Orig-MCG-Change-Id: I36b0bf9132b16d6aecab770fd9f9044fdff44ce1
Signed-off-by: aleksey.v.ignatenko <avignate@nstdrl243.ins.intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/Loop.cpp |   21 +++++++++++++++------
 1 files changed, 15 insertions(+), 6 deletions(-)

diff --git a/vm/compiler/Loop.cpp b/vm/compiler/Loop.cpp
index 0074860..63eb196 100644
--- a/vm/compiler/Loop.cpp
+++ b/vm/compiler/Loop.cpp
@@ -466,8 +466,9 @@ static void genHoistedChecks(CompilationUnit *cUnit)
         rangeCheckMIR->dalvikInsn.arg[0] = arrayAccessInfo->maxC;
         rangeCheckMIR->dalvikInsn.arg[1] = arrayAccessInfo->minC;
         rangeCheckMIR->dalvikInsn.arg[2] = loopAnalysis->loopBranchOpcode;
-        // set offset of the extended MIR to match the loop branch MIR
-        rangeCheckMIR->offset = loopAnalysis->loopBranchMIROffset;
+        // set offset to the start offset of entry block
+        // this will set rPC in case of bail to interpreter
+        rangeCheckMIR->offset = entry->startOffset;
         dvmCompilerAppendMIR(entry, rangeCheckMIR);
         if (arrayAccessInfo->maxC > globalMaxC) {
             globalMaxC = arrayAccessInfo->maxC;
@@ -483,8 +484,9 @@ static void genHoistedChecks(CompilationUnit *cUnit)
             boundCheckMIR->dalvikInsn.opcode = (Opcode)kMirOpLowerBound;
             boundCheckMIR->dalvikInsn.vA = idxReg;
             boundCheckMIR->dalvikInsn.vB = globalMinC;
-            // set offset of the extended MIR to match the loop branch MIR
-            boundCheckMIR->offset = loopAnalysis->loopBranchMIROffset;
+            // set offset to the start offset of entry block
+            // this will set rPC in case of bail to interpreter
+            boundCheckMIR->offset = entry->startOffset;
             dvmCompilerAppendMIR(entry, boundCheckMIR);
         } else {
             if (loopAnalysis->loopBranchOpcode == OP_IF_LT ||
@@ -493,8 +495,9 @@ static void genHoistedChecks(CompilationUnit *cUnit)
                 boundCheckMIR->dalvikInsn.opcode = (Opcode)kMirOpLowerBound;
                 boundCheckMIR->dalvikInsn.vA = loopAnalysis->endConditionReg;
                 boundCheckMIR->dalvikInsn.vB = globalMinC;
-                // set offset of the extended MIR to match the loop branch MIR
-                boundCheckMIR->offset = loopAnalysis->loopBranchMIROffset;
+                // set offset to the start offset of entry block
+                // this will set rPC in case of bail to interpreter
+                boundCheckMIR->offset = entry->startOffset;
                 /*
                  * If the end condition is ">" in the source, the check in the
                  * Dalvik bytecode is OP_IF_LE. In this case add 1 back to the
@@ -511,6 +514,9 @@ static void genHoistedChecks(CompilationUnit *cUnit)
                     MIR *boundCheckMIR = (MIR *)dvmCompilerNew(sizeof(MIR),
                                                                true);
                     boundCheckMIR->dalvikInsn.opcode = (Opcode)kMirOpPunt;
+                    // set offset to the start offset of entry block
+                    // this will set rPC in case of bail to interpreter
+                    boundCheckMIR->offset = entry->startOffset;
                     dvmCompilerAppendMIR(entry, boundCheckMIR);
                 }
             } else if (loopAnalysis->loopBranchOpcode == OP_IF_LEZ) {
@@ -519,6 +525,9 @@ static void genHoistedChecks(CompilationUnit *cUnit)
                     MIR *boundCheckMIR = (MIR *)dvmCompilerNew(sizeof(MIR),
                                                                true);
                     boundCheckMIR->dalvikInsn.opcode = (Opcode)kMirOpPunt;
+                    // set offset to the start offset of entry block
+                    // this will set rPC in case of bail to interpreter
+                    boundCheckMIR->offset = entry->startOffset;
                     dvmCompilerAppendMIR(entry, boundCheckMIR);
                 }
             } else {
-- 
1.7.4.1

