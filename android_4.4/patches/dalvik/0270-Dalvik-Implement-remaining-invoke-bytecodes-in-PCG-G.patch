From 48cce2ce26cf5786e4b445db257dba66c5efe428 Mon Sep 17 00:00:00 2001
From: Tim Hartley <timothy.d.hartley@intel.com>
Date: Tue, 30 Jul 2013 08:52:47 -0700
Subject: Dalvik: Implement remaining invoke bytecodes in PCG GL

BZ: 128588

The PCG GL did not implement INVOKE_VIRTUAL, INVOKE_VIRTUAL_RANGE,
INVOKE_SUPER, and INVOKE_SUPER_RANGE bytecodes. This patch adds them.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I3351da9f27bfe046d7d0f61163b1266fed3d9139
Orig-MCG-Change-Id: I8d2b6dae557a83bad37c32bc60e33cbdb238c19f
Signed-off-by: Tim Hartley <timothy.d.hartley@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Reviewed-on: http://android.intel.com:8080/124380
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/pcg/Analysis.cpp       |    4 ++
 vm/compiler/codegen/x86/pcg/CodeGeneration.cpp |    8 +++-
 vm/compiler/codegen/x86/pcg/LowerCall.cpp      |   58 ++++++++++++++++-------
 vm/compiler/codegen/x86/pcg/LowerCall.h        |    8 ++--
 vm/compiler/codegen/x86/pcg/Utility.cpp        |    4 --
 5 files changed, 54 insertions(+), 28 deletions(-)

diff --git a/vm/compiler/codegen/x86/pcg/Analysis.cpp b/vm/compiler/codegen/x86/pcg/Analysis.cpp
index 4f79eec..24752de 100644
--- a/vm/compiler/codegen/x86/pcg/Analysis.cpp
+++ b/vm/compiler/codegen/x86/pcg/Analysis.cpp
@@ -1162,6 +1162,8 @@ bool dvmCompilerPcgNewRegisterizeVRAnalysis (CompilationUnitPCG *cUnit)
                     }
                     break;
 
+                case OP_INVOKE_VIRTUAL:
+                case OP_INVOKE_VIRTUAL_RANGE:
                 case OP_INVOKE_DIRECT:
                 case OP_INVOKE_DIRECT_RANGE:
                 case OP_INVOKE_VIRTUAL_QUICK:
@@ -1177,6 +1179,8 @@ bool dvmCompilerPcgNewRegisterizeVRAnalysis (CompilationUnitPCG *cUnit)
 
                 case OP_INVOKE_STATIC:
                 case OP_INVOKE_STATIC_RANGE:
+                case OP_INVOKE_SUPER:
+                case OP_INVOKE_SUPER_RANGE:
                 case OP_INVOKE_SUPER_QUICK:
                 case OP_INVOKE_SUPER_QUICK_RANGE:
                     pcgAnalyzeInvokeArgs (cUnit, mir, 0);
diff --git a/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp b/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
index e5ab789..529cf86 100644
--- a/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
+++ b/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
@@ -691,16 +691,20 @@ static bool dvmCompilerPcgTranslateInsn (CompilationUnitPCG *cUnit, MIR *mir)
             dvmCompilerPcgTranslateReturn (cUnit, mir, true);
             break;
 
+        case OP_INVOKE_VIRTUAL:
+        case OP_INVOKE_VIRTUAL_RANGE:
         case OP_INVOKE_VIRTUAL_QUICK:
         case OP_INVOKE_VIRTUAL_QUICK_RANGE:
-            dvmCompilerPcgTranslateInvokeVirtualQuick (cUnit, mir);
+            dvmCompilerPcgTranslateInvokeVirtual (cUnit, mir);
             break;
 
+        case OP_INVOKE_SUPER:
+        case OP_INVOKE_SUPER_RANGE:
         case OP_INVOKE_STATIC:
         case OP_INVOKE_STATIC_RANGE:
         case OP_INVOKE_SUPER_QUICK:
         case OP_INVOKE_SUPER_QUICK_RANGE:
-            dvmCompilerPcgTranslateInvokeStaticSuperQuick (cUnit, mir);
+            dvmCompilerPcgTranslateInvokeStaticSuper (cUnit, mir);
             break;
 
         case OP_INVOKE_INTERFACE:
diff --git a/vm/compiler/codegen/x86/pcg/LowerCall.cpp b/vm/compiler/codegen/x86/pcg/LowerCall.cpp
index 0932a34..99258c8 100644
--- a/vm/compiler/codegen/x86/pcg/LowerCall.cpp
+++ b/vm/compiler/codegen/x86/pcg/LowerCall.cpp
@@ -83,7 +83,7 @@ static void dvmCompilerPcgAddPostInvokeEntryCode (CompilationUnitPCG *cUnit)
     cUnit->setFramePtr (pcgFramePtr);
 }
 
-void dvmCompilerPcgTranslateInvokeVirtualQuick (CompilationUnitPCG *cUnit, MIR *mir)
+void dvmCompilerPcgTranslateInvokeVirtual (CompilationUnitPCG *cUnit, MIR *mir)
 {
     BasicBlockPCG *bb = static_cast<BasicBlockPCG *> (mir->bb);
 
@@ -121,12 +121,25 @@ void dvmCompilerPcgTranslateInvokeVirtualQuick (CompilationUnitPCG *cUnit, MIR *
 
     CGBindLabel (notNull);
 
-    // constVREndOfBB
-    // beforeCall
-    // ZZZ:JIT does the above. I believe these are just internal RA
-    // optimizations. Temporarily writing these down in case we
-    // see problems with this.
-    dvmCompilerPcgGeneratePredictedChain (cUnit, bb, -1, (mir->dalvikInsn.vB * 4), false, C, mir);
+    Opcode dalvikOpCode = mir->dalvikInsn.opcode;
+
+    if (dalvikOpCode == OP_INVOKE_VIRTUAL_QUICK || dalvikOpCode == OP_INVOKE_VIRTUAL_QUICK_RANGE)
+    {
+        // constVREndOfBB
+        // beforeCall
+        // ZZZ:JIT does the above. I believe these are just internal RA
+        // optimizations. Temporarily writing these down in case we
+        // see problems with this.
+        dvmCompilerPcgGeneratePredictedChain (cUnit, bb, -1, (mir->dalvikInsn.vB * 4), false, C, mir);
+    }
+    else
+    {
+        // OP_INVOKE_VIRTUAL and OP_INVOKE_VIRTUAL_RANGE
+
+        int methodIndex =
+                    cUnit->method->clazz->pDvmDex->pResMethods[mir->dalvikInsn.vB]->methodIndex;
+        dvmCompilerPcgGeneratePredictedChain (cUnit, bb, mir->dalvikInsn.vB, (methodIndex * 4), false, C, mir);
+    }
 }
 
 ArgsDoneType dvmCompilerPcgTranslateConvertCalleeToType (const Method* calleeMethod)
@@ -144,7 +157,7 @@ ArgsDoneType dvmCompilerPcgTranslateConvertCalleeToType (const Method* calleeMet
     return ArgsDone_Normal;
 }
 
-void dvmCompilerPcgTranslateInvokeStaticSuperQuick (CompilationUnitPCG *cUnit, MIR *mir)
+void dvmCompilerPcgTranslateInvokeStaticSuper (CompilationUnitPCG *cUnit, MIR *mir)
 {
     BasicBlockPCG *bb = static_cast<BasicBlockPCG *> (mir->bb);
 
@@ -170,16 +183,25 @@ void dvmCompilerPcgTranslateInvokeStaticSuperQuick (CompilationUnitPCG *cUnit, M
     }
     else
     {
-        // ZZZ TODO : hmmm. do you really need this? Original code has this,
-        // but vC is never used.. Leaving it out, for now.
-        //
-        // C = dvmCompilerPcgGetVirtualReg (cUnit, mirVC (mir), "mov", 4);
-        // dvmCompilerPcgGenerateSimpleNullCheck (C);
-
-        // for trace-based JIT, callee is already resolved
-        u2 IMMC = 4 * mir->dalvikInsn.vB;
-        int mIndex = IMMC/4;
-        calleeMethod = cUnit->method->clazz->super->vtable[mIndex];
+        if (dalvikOpCode == OP_INVOKE_SUPER || dalvikOpCode == OP_INVOKE_SUPER_RANGE)
+        {
+            u2 tmp = mir->dalvikInsn.vB;
+
+            // for trace-based JIT, callee is already resolved
+            int mIndex = cUnit->method->clazz->pDvmDex->
+                    pResMethods[tmp]->methodIndex;
+            calleeMethod =
+                    cUnit->method->clazz->super->vtable[mIndex];
+        }
+        else
+        {
+            // OP_INVOKE_SUPER_QUICK and OP_INVOKE_SUPER_QUICK_RANGE
+
+            // for trace-based JIT, callee is already resolved
+            u2 IMMC = 4 * mir->dalvikInsn.vB;
+            int mIndex = IMMC/4;
+            calleeMethod = cUnit->method->clazz->super->vtable[mIndex];
+        }
     }
 
     CGInst methodIl = CGCreateNewInst ("mov", "i", (int) calleeMethod);
diff --git a/vm/compiler/codegen/x86/pcg/LowerCall.h b/vm/compiler/codegen/x86/pcg/LowerCall.h
index 5ad5718..d8bbe60 100644
--- a/vm/compiler/codegen/x86/pcg/LowerCall.h
+++ b/vm/compiler/codegen/x86/pcg/LowerCall.h
@@ -26,11 +26,11 @@ class CompilationUnitPCG;
 struct MIR;
 
 /**
- * @brief Translate the invoke virtual quick opcode
+ * @brief Translate the invoke virtual opcodes
  * @param cUnit the CompilationUnit
  * @param mir the MIR instruction
  */
-void dvmCompilerPcgTranslateInvokeVirtualQuick (CompilationUnitPCG *cUnit, MIR *mir);
+void dvmCompilerPcgTranslateInvokeVirtual (CompilationUnitPCG *cUnit, MIR *mir);
 
 /**
  * @brief Convert callee to a type
@@ -40,11 +40,11 @@ void dvmCompilerPcgTranslateInvokeVirtualQuick (CompilationUnitPCG *cUnit, MIR *
 ArgsDoneType dvmCompilerPcgTranslateConvertCalleeToType (const Method* calleeMethod);
 
 /**
- * @brief Translate the new invoke super quick bytecode
+ * @brief Translate the invoke super bytecodes
  * @param cUnit the CompilationUnit
  * @param mir the MIR instruction
  */
-void dvmCompilerPcgTranslateInvokeStaticSuperQuick (CompilationUnitPCG *cUnit, MIR *mir);
+void dvmCompilerPcgTranslateInvokeStaticSuper (CompilationUnitPCG *cUnit, MIR *mir);
 
 /**
  * @brief Translate the invoke virtual interface
diff --git a/vm/compiler/codegen/x86/pcg/Utility.cpp b/vm/compiler/codegen/x86/pcg/Utility.cpp
index 42ec1b3..0952e96 100644
--- a/vm/compiler/codegen/x86/pcg/Utility.cpp
+++ b/vm/compiler/codegen/x86/pcg/Utility.cpp
@@ -449,10 +449,6 @@ bool dvmCompilerPcgSupportTrace (CompilationUnit *cUnit)
 
             switch (dalvikOpCode)
             {
-                case OP_INVOKE_VIRTUAL:
-                case OP_INVOKE_SUPER:
-                case OP_INVOKE_VIRTUAL_RANGE:
-                case OP_INVOKE_SUPER_RANGE:
                 case OP_FLOAT_TO_LONG:
                 case OP_DOUBLE_TO_LONG:
                 case OP_REM_FLOAT:
-- 
1.7.4.1

