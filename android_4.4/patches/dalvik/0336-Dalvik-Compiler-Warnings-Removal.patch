From 18ba660048454dbddfe76dbe74350d02504517a8 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Fri, 16 Aug 2013 22:12:34 -0700
Subject: Dalvik: Compiler Warnings Removal

BZ: 131471

Removing a few compiler warnings.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Icc5dd1942adb3972f937a091940516704ffef214
Orig-MCG-Change-Id: I5c7c1661757bf9a9cfc7ab3d23d71cd37970c8e5
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Reviewed-on: http://android.intel.com:8080/125970
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Provodin, Vitaly A <vitaly.a.provodin@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/JitProfiling.cpp                       |    4 +-
 vm/compiler/Loop.cpp                               |  158 ++++++++++----------
 vm/compiler/SinkCastOpt.cpp                        |    1 -
 .../codegen/x86/lightcg/CodegenInterface.cpp       |    3 +-
 vm/compiler/codegen/x86/pcg/UtilityPCG.cpp         |    2 +-
 5 files changed, 83 insertions(+), 85 deletions(-)

diff --git a/vm/compiler/JitProfiling.cpp b/vm/compiler/JitProfiling.cpp
index 6b22624..f23f878 100644
--- a/vm/compiler/JitProfiling.cpp
+++ b/vm/compiler/JitProfiling.cpp
@@ -176,7 +176,9 @@ public:
             if (prevIt->end() > newIt->addr) {
                 unsigned newPrevSize = newIt->addr - prevIt->addr;
                 if (prevIt->end() > newIt->end()) {
-                    MethodCode rightPart = {prevIt->id, newIt->end(), prevIt->end() - newIt->end()};
+                    MethodCode rightPart = {prevIt->id, 
+                                            newIt->end(), 
+                                            static_cast<unsigned int> (prevIt->end() - newIt->end())};
                     prevIt = table.insert(newIt+1, rightPart) - 2;
                 }
                 if (newPrevSize == 0) {
diff --git a/vm/compiler/Loop.cpp b/vm/compiler/Loop.cpp
index c9f8559..6d58720 100644
--- a/vm/compiler/Loop.cpp
+++ b/vm/compiler/Loop.cpp
@@ -23,78 +23,6 @@
 #include "LoopOpt.h"
 #endif
 
-#define DEBUG_LOOP(X)
-
-#if 0
-/* Debugging routines */
-static void dumpConstants(CompilationUnit *cUnit)
-{
-    int i;
-    ALOGE("LOOP starting offset: %x", cUnit->entryBlock->startOffset);
-    for (i = 0; i < cUnit->numSSARegs; i++) {
-        if (dvmIsBitSet(cUnit->isConstantV, i)) {
-            int subNReg = dvmConvertSSARegToDalvik(cUnit, i);
-            ALOGE("CONST: s%d(v%d_%d) has %d", i,
-                 DECODE_REG(subNReg), DECODE_SUB(subNReg),
-                 cUnit->constantValues[i]);
-        }
-    }
-}
-
-static void dumpIVList(CompilationUnit *cUnit)
-{
-    unsigned int i;
-    GrowableList *ivList = cUnit->loopAnalysis->ivList;
-
-    for (i = 0; i < ivList->numUsed; i++) {
-        InductionVariableInfo *ivInfo =
-            (InductionVariableInfo *) ivList->elemList[i];
-        int iv = dvmConvertSSARegToDalvik(cUnit, ivInfo->ssaReg);
-        /* Basic IV */
-        if (ivInfo->ssaReg == ivInfo->basicSSAReg) {
-            ALOGE("BIV %d: s%d(v%d_%d) + %d", i,
-                 ivInfo->ssaReg,
-                 DECODE_REG(iv), DECODE_SUB(iv),
-                 ivInfo->inc);
-        /* Dependent IV */
-        } else {
-            int biv = dvmConvertSSARegToDalvik(cUnit, ivInfo->basicSSAReg);
-
-            ALOGE("DIV %d: s%d(v%d_%d) = %d * s%d(v%d_%d) + %d", i,
-                 ivInfo->ssaReg,
-                 DECODE_REG(iv), DECODE_SUB(iv),
-                 ivInfo->m,
-                 ivInfo->basicSSAReg,
-                 DECODE_REG(biv), DECODE_SUB(biv),
-                 ivInfo->c);
-        }
-    }
-}
-
-static void dumpHoistedChecks(CompilationUnit *cUnit)
-{
-    LoopAnalysis *loopAnalysis = cUnit->loopAnalysis;
-    unsigned int i;
-
-    for (i = 0; i < loopAnalysis->arrayAccessInfo->numUsed; i++) {
-        ArrayAccessInfo *arrayAccessInfo =
-            GET_ELEM_N(loopAnalysis->arrayAccessInfo,
-                       ArrayAccessInfo*, i);
-        int arrayReg = DECODE_REG(
-            dvmConvertSSARegToDalvik(cUnit, arrayAccessInfo->arrayReg));
-        int idxReg = DECODE_REG(
-            dvmConvertSSARegToDalvik(cUnit, arrayAccessInfo->ivReg));
-        ALOGE("Array access %d", i);
-        ALOGE("  arrayReg %d", arrayReg);
-        ALOGE("  idxReg %d", idxReg);
-        ALOGE("  endReg %d", loopAnalysis->endConditionReg);
-        ALOGE("  maxC %d", arrayAccessInfo->maxC);
-        ALOGE("  minC %d", arrayAccessInfo->minC);
-        ALOGE("  opcode %d", loopAnalysis->loopBranchOpcode);
-    }
-}
-
-#endif
 
 #ifndef ARCH_IA32
 /**
@@ -841,12 +769,10 @@ static void updateRangeCheckInfo(CompilationUnit *cUnit, int arrayReg,
     }
 }
 
-/* Returns true if the loop body cannot throw any exceptions */
 void dvmCompilerBodyCodeMotion (CompilationUnit *cUnit, Pass *currentPass)
 {
     //Get the BasicBlock vector for this loop
     BitVector *blocks = const_cast<BitVector *> (cUnit->loopInformation->getBasicBlocks ());
-    BasicBlock *loopBody = NULL;
     MIR *mir;
     //Iterate through basic blocks
     BitVectorIterator bvIterator;
@@ -976,16 +902,16 @@ static void dvmDumpHoistedRangeCheckInfo(CompilationUnit* cUnit)
     unsigned int i;
 
     /* dump IV info */
-    ALOGE("BASIC_IV_NUMBER_INFO: number of basic IV: %d", loopInfo->getNumBasicIV(cUnit));
+    ALOGD("BASIC_IV_NUMBER_INFO: number of basic IV: %d", loopInfo->getNumBasicIV(cUnit));
     for (i = 0; i < ivList->numUsed; i++) {
         ivInfo = GET_ELEM_N(ivList, InductionVariableInfo*, i);
         if (ivInfo->ssaReg == ivInfo->basicSSAReg) {
             /* Basic IV */
-            ALOGE("BASIC_IV_INFO: ssaReg: %d, basicSSAReg: %d, inc: %d, VR: %d_%dn", ivInfo->ssaReg, ivInfo->basicSSAReg, ivInfo->inc,
+            ALOGD("BASIC_IV_INFO: ssaReg: %d, basicSSAReg: %d, inc: %d, VR: %d_%dn", ivInfo->ssaReg, ivInfo->basicSSAReg, ivInfo->inc,
                                dvmExtractSSARegister (cUnit, ivInfo->ssaReg), dvmExtractSSASubscript (cUnit, ivInfo->ssaReg));
         } else {
             /* Dependent IV */
-            ALOGE("DEPENDENT_IV_INFO: ssaReg: %d, depSSAReg: %d, inc: %d, VR: %d_%d c=%d\n", ivInfo->ssaReg, ivInfo->basicSSAReg, ivInfo->inc,
+            ALOGD("DEPENDENT_IV_INFO: ssaReg: %d, depSSAReg: %d, inc: %d, VR: %d_%d c=%d\n", ivInfo->ssaReg, ivInfo->basicSSAReg, ivInfo->inc,
                                dvmExtractSSARegister (cUnit, ivInfo->ssaReg), dvmExtractSSASubscript (cUnit, ivInfo->ssaReg), ivInfo->c);
         }
     }
@@ -995,11 +921,12 @@ static void dvmDumpHoistedRangeCheckInfo(CompilationUnit* cUnit)
         ArrayAccessInfo *arrayAccessInfo =
             GET_ELEM_N(loopInfo->getArrayAccessInfo(),
                        ArrayAccessInfo*, i);
-        ALOGE("ARRAYACCESS_INFO: arrayReg: %d, idxReg: %d, endConditionReg: %d, maxC: %d, minC: %d, inc: %d",
+        ALOGE("JIT_INFO: arrayReg: %d, idxReg: %d, endConditionReg: %d, maxC: %d, minC: %d, inc: %d",
                      arrayAccessInfo->arrayReg, arrayAccessInfo->ivReg, loopInfo->getEndConditionReg(),
                          arrayAccessInfo->maxC, arrayAccessInfo->minC, arrayAccessInfo->inc);
     }
 }
+#endif
 
 
 // The main purpose of the function is to transform internal array access info into
@@ -1128,13 +1055,14 @@ void dvmCompilerGenHoistedChecks(CompilationUnit *cUnit, Pass* pass)
         }
     }
 
-    DEBUG_LOOP(dvmDumpHoistedRangeCheckInfo(cUnit);)
+    if (cUnit->printPass == true)
+    {
+        dvmDumpHoistedRangeCheckInfo(cUnit);
+    }
 
     (void) pass;
 }
 
-#endif //IA32
-
 void resetBlockEdges(BasicBlock *bb)
 {
     bb->taken = NULL;
@@ -1839,6 +1767,74 @@ bool dvmCompilerLoopOpt(CompilationUnit *cUnit)
     return true;
 }
 #else
+/* Debugging routines */
+static void dumpConstants(CompilationUnit *cUnit)
+{
+    int i;
+    ALOGE("LOOP starting offset: %x", cUnit->entryBlock->startOffset);
+    for (i = 0; i < cUnit->numSSARegs; i++) {
+        if (dvmIsBitSet(cUnit->isConstantV, i)) {
+            int subNReg = dvmConvertSSARegToDalvik(cUnit, i);
+            ALOGE("CONST: s%d(v%d_%d) has %d", i,
+                 DECODE_REG(subNReg), DECODE_SUB(subNReg),
+                 cUnit->constantValues[i]);
+        }
+    }
+}
+
+static void dumpIVList(CompilationUnit *cUnit)
+{
+    unsigned int i;
+    GrowableList *ivList = cUnit->loopAnalysis->ivList;
+
+    for (i = 0; i < ivList->numUsed; i++) {
+        InductionVariableInfo *ivInfo =
+            (InductionVariableInfo *) ivList->elemList[i];
+        int iv = dvmConvertSSARegToDalvik(cUnit, ivInfo->ssaReg);
+        /* Basic IV */
+        if (ivInfo->ssaReg == ivInfo->basicSSAReg) {
+            ALOGE("BIV %d: s%d(v%d_%d) + %d", i,
+                 ivInfo->ssaReg,
+                 DECODE_REG(iv), DECODE_SUB(iv),
+                 ivInfo->inc);
+        /* Dependent IV */
+        } else {
+            int biv = dvmConvertSSARegToDalvik(cUnit, ivInfo->basicSSAReg);
+
+            ALOGE("DIV %d: s%d(v%d_%d) = %d * s%d(v%d_%d) + %d", i,
+                 ivInfo->ssaReg,
+                 DECODE_REG(iv), DECODE_SUB(iv),
+                 ivInfo->m,
+                 ivInfo->basicSSAReg,
+                 DECODE_REG(biv), DECODE_SUB(biv),
+                 ivInfo->c);
+        }
+    }
+}
+
+static void dumpHoistedChecks(CompilationUnit *cUnit)
+{
+    LoopAnalysis *loopAnalysis = cUnit->loopAnalysis;
+    unsigned int i;
+
+    for (i = 0; i < loopAnalysis->arrayAccessInfo->numUsed; i++) {
+        ArrayAccessInfo *arrayAccessInfo =
+            GET_ELEM_N(loopAnalysis->arrayAccessInfo,
+                       ArrayAccessInfo*, i);
+        int arrayReg = DECODE_REG(
+            dvmConvertSSARegToDalvik(cUnit, arrayAccessInfo->arrayReg));
+        int idxReg = DECODE_REG(
+            dvmConvertSSARegToDalvik(cUnit, arrayAccessInfo->ivReg));
+        ALOGE("Array access %d", i);
+        ALOGE("  arrayReg %d", arrayReg);
+        ALOGE("  idxReg %d", idxReg);
+        ALOGE("  endReg %d", loopAnalysis->endConditionReg);
+        ALOGE("  maxC %d", arrayAccessInfo->maxC);
+        ALOGE("  minC %d", arrayAccessInfo->minC);
+        ALOGE("  opcode %d", loopAnalysis->loopBranchOpcode);
+    }
+}
+
 /*
  * Main entry point to do loop optimization.
  * Return false if sanity checks for loop formation/optimization failed.
diff --git a/vm/compiler/SinkCastOpt.cpp b/vm/compiler/SinkCastOpt.cpp
index 761e507..9181197 100644
--- a/vm/compiler/SinkCastOpt.cpp
+++ b/vm/compiler/SinkCastOpt.cpp
@@ -456,7 +456,6 @@ static void sinkCastByteCodes (CompilationUnit *cUnit, LoopInformation *info, MI
         //Walk the def-use chain
         for (; usedChain != 0; usedChain = usedChain->nextUse)
         {
-
             //Get the MIR
             MIR *next = usedChain->mir;
 
diff --git a/vm/compiler/codegen/x86/lightcg/CodegenInterface.cpp b/vm/compiler/codegen/x86/lightcg/CodegenInterface.cpp
index baaeafe..f563417 100644
--- a/vm/compiler/codegen/x86/lightcg/CodegenInterface.cpp
+++ b/vm/compiler/codegen/x86/lightcg/CodegenInterface.cpp
@@ -1730,6 +1730,7 @@ static void printTrace(CompilationUnit_O1 *cUnit, std::vector<CodeBlockElem> &co
     char *code_ptr, *next_code_ptr = 0;
     BBType blk_type;
     int k;
+    int max = code_block_table.size () - 1;
 
     ALOGD("-------- Emit trace for [%s%s@%#x] binary code starts at %p (cache start %p)",
           cUnit->method->clazz->descriptor, cUnit->method->name,
@@ -1740,7 +1741,7 @@ static void printTrace(CompilationUnit_O1 *cUnit, std::vector<CodeBlockElem> &co
 
     code_ptr = NULL;
     next_code_ptr = NULL;
-    for (k = 0; k < (code_block_table.size() - 1); k++) {
+    for (k = 0; k < max; k++) {
         blk_type = code_block_table[k].first;
         code_ptr = code_block_table[k].second;
         next_code_ptr = code_block_table[k+1].second;
diff --git a/vm/compiler/codegen/x86/pcg/UtilityPCG.cpp b/vm/compiler/codegen/x86/pcg/UtilityPCG.cpp
index b25d3e3..bc5192d 100644
--- a/vm/compiler/codegen/x86/pcg/UtilityPCG.cpp
+++ b/vm/compiler/codegen/x86/pcg/UtilityPCG.cpp
@@ -625,7 +625,7 @@ CGInst dvmCompilerPcgGenerateX86Call (CompilationUnitPCG *cUnit, const char *tar
     CGSymbol target = singletonPtr<PersistentInfo> ()->getCallBack (targetName);
     const char *rreg;
     const char *callOpc = getCallOpcodeAndRreg (resultDtype, &rreg);
-    const char *copyOpc;
+    const char *copyOpc = 0;
     int32_t stackSize, offset, i;
     va_list args;
     CGInst spIl;
-- 
1.7.4.1

