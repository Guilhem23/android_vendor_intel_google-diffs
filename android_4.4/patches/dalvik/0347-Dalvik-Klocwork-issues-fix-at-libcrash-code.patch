From 7accd803203e08a3b3d6b6d7371111dae759d202 Mon Sep 17 00:00:00 2001
From: vladimir.a.ivanov <vladimir.a.ivanov@intel.com>
Date: Mon, 23 Sep 2013 13:52:14 +0700
Subject: Dalvik: Klocwork issues fix at libcrash code

BZ: 140161

Fixing of Klocwork issues at libcrash code.

Category: device-enablement
Domain: AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I3643a649862a758da932574e4155c25e6f48b4f0
Orig-MCG-Change-Id: I9d4eb0510c389039659ca0151324da5cc3fa793e
Signed-off-by: vladimir.a.ivanov <vladimir.a.ivanov@intel.com>
Reviewed-on: http://android.intel.com:8080/133573
Reviewed-by: Zavjalov, Alexei <alexei.zavjalov@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Popov, Ivan G <ivan.g.popov@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 libcrash/DbgBridge.cpp  |   22 ++++++++++++----------
 libcrash/ThreadInfo.cpp |   11 +++++++----
 2 files changed, 19 insertions(+), 14 deletions(-)

diff --git a/libcrash/DbgBridge.cpp b/libcrash/DbgBridge.cpp
index 3592581..2836254 100644
--- a/libcrash/DbgBridge.cpp
+++ b/libcrash/DbgBridge.cpp
@@ -49,18 +49,20 @@ static void logToTombstone(log_t *log, bool inTombstoneOnly, const char *fmt, ..
      * The output string size is limited by buffer size.
      * Than formatted string is stored to tombstone file.
      */
-    if (log != 0 && log->tfd >= 0) {
-        char buff[MAX_PRINT_STR_SIZE];
-        memset(buff, 0, sizeof(buff));
-        int len = vsnprintf(buff, sizeof(buff), fmt, ap);
-        if (len > 0) {
-            write(log->tfd, buff, len);
-            fsync(log->tfd);
+    if (log != 0) {
+        if (log->tfd >= 0) {
+            char buff[MAX_PRINT_STR_SIZE];
+            memset(buff, 0, sizeof(buff));
+            int len = vsnprintf(buff, sizeof(buff), fmt, ap);
+            if (len > 0) {
+                write(log->tfd, buff, len);
+                fsync(log->tfd);
+            }
         }
-    }
 
-    if (inTombstoneOnly == false && (log != 0 || log->quiet == false)) {
-        vprintf(fmt, ap);
+        if (inTombstoneOnly == false && log->quiet == false) {
+            vprintf(fmt, ap);
+        }
     }
 
     va_end(ap);
diff --git a/libcrash/ThreadInfo.cpp b/libcrash/ThreadInfo.cpp
index bccd025..14db2fe 100644
--- a/libcrash/ThreadInfo.cpp
+++ b/libcrash/ThreadInfo.cpp
@@ -85,9 +85,12 @@ static bool extractMonitorEnterObject(Thread *thread, Object **pLockObj,
      * unless we're dumping while threads are running, in which case there's
      * a good chance of stuff blowing up anyway.)
      */
-    *pOwner = dvmGetObjectLockHolder(obj);
+    if (obj != 0) {
+        *pOwner = dvmGetObjectLockHolder(obj);
+        return true;
+    }
 
-    return true;
+    return false;
 }
 
 /*
@@ -168,8 +171,8 @@ static void dumpFrames(ts_buf *buff, void *framePtr, Thread *thread)
                         writeDebugMessage(buff, "on", obj, joinThread);
                     }
                 } else if (thread->status == THREAD_MONITOR) {
-                    Object *obj;
-                    Thread *owner;
+                    Object *obj = 0;
+                    Thread *owner = 0;
                     if (extractMonitorEnterObject(thread, &obj, &owner) == true) {
                         writeDebugMessage(buff, "to lock", obj, owner);
                     }
-- 
1.7.4.1

