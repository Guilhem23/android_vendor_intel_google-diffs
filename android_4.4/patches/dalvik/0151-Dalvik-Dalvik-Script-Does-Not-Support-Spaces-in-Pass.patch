From b17a4e143114407e2b73b512aed86922546aa0a2 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Fri, 19 Apr 2013 15:49:03 -0700
Subject: Dalvik: Dalvik Script Does Not Support Spaces in Pass Names

BZ: 102186

The Dalvik script does not support spaces when using the -Xjitignorepasses
  option.

This patch renames the passes using underscores.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I41f45fe182f0f208156b012836daccd025c09a79
Orig-MCG-Change-Id: I93df2b932ef518b0076c6ed61592b0235572525f
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/LoopOpt.cpp |   32 ++++++++++++++++----------------
 1 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/vm/compiler/LoopOpt.cpp b/vm/compiler/LoopOpt.cpp
index fe2e801..75af557 100644
--- a/vm/compiler/LoopOpt.cpp
+++ b/vm/compiler/LoopOpt.cpp
@@ -49,49 +49,49 @@ static void clearPHIInformation (CompilationUnit *cUnit);
 
 START_PASSES
     //This loop formation is used when the new loop filtering is active
-    NEW_PASS ("Form Loop", kAllNodesAndNew, 0, dvmCompilerTraceIsLoopNewSystem,
+    NEW_PASS ("Form_Loop", kAllNodesAndNew, 0, dvmCompilerTraceIsLoopNewSystem,
                 0, dvmCompilerTestLoop, dvmCompilerFormLoop, 0, kOptimizationBasicBlockChange),
     //Check if the formed loops are like we want right now (nested or not, branches or not)
-    NEW_PASS ("Reject Loops", kAllNodes, 0, dvmCompilerCheckLoops,
+    NEW_PASS ("Reject_Loops", kAllNodes, 0, dvmCompilerCheckLoops,
                             0, 0, 0, 0, 0),
     //This loop formation is used when the old loop filtering is active
-    NEW_PASS ("Old Loop Formation", kAllNodesAndNew, 0, dvmCompilerTraceIsLoopOldSystem,
+    NEW_PASS ("Old_Loop_Formation", kAllNodesAndNew, 0, dvmCompilerTraceIsLoopOldSystem,
                 dvmCompilerFormOldLoop, 0, 0, 0, kOptimizationBasicBlockChange),
-    NEW_PASS ("Check Removal", kAllNodes, 0, 0,
+    NEW_PASS ("Check_Removal", kAllNodes, 0, 0,
                 dvmCompilerStartCheckRemoval, dvmCompilerEndCheckRemoval, dvmCompilerCheckRemoval, 0, 0),
     //The 2addr pass should come before any pass that need register rewriting.
-    NEW_PASS ("Convert 2addr to normal", kAllNodes, 0, 0,
+    NEW_PASS ("Convert_2addr_to_normal", kAllNodes, 0, 0,
                 0, 0, dvmCompilerConvert2addr, 0, kOptimizationBasicBlockChange),
     //Memory Aliasing only works on one basic block so let's try to merge first
     //For the moment, no pass will create new blocks, etc. so this is fine up here
     //Otherwise, we might want to duplicate the merge or make the gate for memory aliasing smarter
-    NEW_PASS ("Merge Blocks", kAllNodes, 0, 0,
+    NEW_PASS ("Merge_Blocks", kAllNodes, 0, 0,
                 0, 0, dvmCompilerMergeBasicBlocks, 0, kOptimizationBasicBlockChange),
-    NEW_PASS ("Memory Aliasing", kAllNodes, 0, dvmCompilerVerySimpleLoopGate,
+    NEW_PASS ("Memory_Aliasing", kAllNodes, 0, dvmCompilerVerySimpleLoopGate,
               0, 0, dvmCompilerMemoryAliasing, 0, 0),
-    NEW_PASS ("Local Value Numbering", kAllNodes, 0, dvmCompilerVerySimpleLoopGate,
+    NEW_PASS ("Local_Value_Numbering", kAllNodes, 0, dvmCompilerVerySimpleLoopGate,
               0, 0, dvmCompilerLocalValueNumbering, 0, 0),
     NEW_PASS ("Variant", kAllNodes, 0, dvmCompilerVerySimpleLoopGate,
               0, 0, dvmCompilerVariant, 0, 0),
     NEW_PASS ("Peel", kAllNodes, 0, dvmCompilerPeelGate,
               dvmCompilerPeel, 0, 0, 0, kOptimizationBasicBlockChange),
-    NEW_PASS ("Invariant Removal", kAllNodes, 0, dvmCompilerInvariantRemovalGate,
+    NEW_PASS ("Invariant_Removal", kAllNodes, 0, dvmCompilerInvariantRemovalGate,
               dvmCompilerInvariantRemoval, 0, 0, 0, kOptimizationBasicBlockChange),
-    NEW_PASS ("Iget-Iput Removal", kAllNodes, 0, dvmCompilerInvariantRemovalGate,
+    NEW_PASS ("Iget_Iput_Removal", kAllNodes, 0, dvmCompilerInvariantRemovalGate,
               dvmCompilerIgetIputRemoval, 0, 0, 0, kOptimizationBasicBlockChange),
-    NEW_PASS ("Accumulation Sinking", kAllNodes, 0, dvmCompilerSinkAccumulationsGate,
+    NEW_PASS ("Accumulation_Sinking", kAllNodes, 0, dvmCompilerSinkAccumulationsGate,
             0, dvmCompilerAccumulationSinking, 0, 0, kOptimizationBasicBlockChange),
     //This should be after the last optimization that changes instruction sequence or BB logic
     //Note: reorder is safe and should be after
     //We do registerization for all traces to provide spill information to the BE
-    NEW_PASS ("Write Back Registers", kAllNodes, 0, 0, 0, 0, dvmCompilerWriteBackAll, 0, 0),
-    NEW_PASS ("Registerization ME", kAllNodes, 0, dvmCompilerRegisterizeGate,
+    NEW_PASS ("Write_Back_Registers", kAllNodes, 0, 0, 0, 0, dvmCompilerWriteBackAll, 0, 0),
+    NEW_PASS ("Registerization_ME", kAllNodes, 0, dvmCompilerRegisterizeGate,
                 0, dvmCompilerRegisterize, 0, 0, 0),
-    NEW_PASS ("Fix Chaining Cells", kAllNodes, 0, 0,
+    NEW_PASS ("Fix_Chaining_Cells", kAllNodes, 0, 0,
                 0, 0, dvmCompilerFixChainingCellPredecessors, 0, kOptimizationBasicBlockChange),
-    NEW_PASS ("Insert Prebackward Block", kAllNodesAndNew, 0, 0,
+    NEW_PASS ("Insert_Prebackward_Block", kAllNodesAndNew, 0, 0,
                     0, dvmCompilerInsertPreBackward, 0, 0, kOptimizationBasicBlockChange),
-    NEW_PASS ("Reorder Blocks", kBreadthFirstTraversal, 0, dvmCompilerTraceIsLoop,
+    NEW_PASS ("Reorder_Blocks", kBreadthFirstTraversal, 0, dvmCompilerTraceIsLoop,
                 dvmCompilerReorder, 0, 0, 0, kOptimizationBasicBlockChange),
 
     /* Last element must have and be the only one to have a NULL name, it's our ending check */
-- 
1.7.4.1

