From 79aab60822dcf6a3adfcde9d483c6ea7f2b79049 Mon Sep 17 00:00:00 2001
From: Dmitry Petrochenko <dmitry.petrochenko@intel.com>
Date: Fri, 22 Feb 2013 14:07:28 +0700
Subject: Dalvik: Fix DF_NULL_OBJECT_CHECK_0 flag in invoke-static/range, invoke-super

BZ: 86988

The handleNullCheck should not be called for invoke-static/range, since it
has no "this", thus we are removing DF_NULL_OBJECT_CHECK_0 flag. In order
to keep dvmCompilerDataFlowAttributes consistent, the flag also removed
from invoke-super (invoke-super/range already had no that flag).
Also arguments validation added to handleNullCheck/handleBoundCheck. If args
are invalid, error will be logged.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I30a0ab7bcbdebb7923250c9907f7d154409467c8
Orig-MCG-Change-Id: I4893193c652c6b301ef408d9ca751df25cfe6bef
Signed-off-by: Dmitry Petrochenko <dmitry.petrochenko@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/Checks.cpp   |   50 ++++++++++++++++++++++++++++++++++++++++++---
 vm/compiler/Dataflow.cpp |    4 +-
 2 files changed, 48 insertions(+), 6 deletions(-)

diff --git a/vm/compiler/Checks.cpp b/vm/compiler/Checks.cpp
index fc6e706..97b2f0c 100644
--- a/vm/compiler/Checks.cpp
+++ b/vm/compiler/Checks.cpp
@@ -460,8 +460,8 @@ void initializeData (CompilationUnit *cUnit, SRemoveData **ptrRemoveData, BasicB
 //NEXT COUPLE OF FUNCTIONS HANDLE THE WALKING THROUGH A BASIC BLOCK
 void handleNullCheck (CompilationUnit *cUnit, SRemoveData *removeData, int nullCheck, MIR *mir, STrackers &tracker)
 {
-    //Do we have an index?
-    if (nullCheck >= 0)
+    // Do we have an index? Skip this MIR and log error if arguments are invalid
+    if (nullCheck >= 0 && mir->ssaRep->uses != 0 && nullCheck < mir->ssaRep->numUses)
     {
         int reg = mir->ssaRep->uses[nullCheck];
 
@@ -537,14 +537,32 @@ void handleNullCheck (CompilationUnit *cUnit, SRemoveData *removeData, int nullC
                 dvmSetBit (tempNullCheck, other);
             }
         }
+    } else {
+        if (nullCheck >= 0)
+        {
+            // Report about invalid agruments
+            if (mir->ssaRep->uses == 0)
+                ALOGE ("JIT_ERROR: handleNullCheck (0x%x): ssaRep->uses is null",
+                    mir->dalvikInsn.opcode);
+
+            if (nullCheck >= mir->ssaRep->numUses)
+                ALOGE ("JIT_ERROR: handleNullCheck (0x%x): nullCheck (%i) >= numUses (%i)",
+                    mir->dalvikInsn.opcode, nullCheck, mir->ssaRep->numUses);
+
+            assert(mir->ssaRep->uses != 0);
+            assert(nullCheck < mir->ssaRep->numUses);
+        }
     }
 }
 
 void handleBoundCheck (CompilationUnit *cUnit, SRemoveData *removeData, int nullCheck, int boundCheck,
                               MIR *mir, STrackers &tracker)
 {
-    //Check the bound check via indexToArrayChecks
-    if (boundCheck >= 0)
+    // Check the bound check via indexToArrayChecks, skip this MIR and log error if agruments are invalid
+    if (boundCheck >= 0
+        && mir->ssaRep->uses != 0
+        && boundCheck < mir->ssaRep->numUses
+        && nullCheck < mir->ssaRep->numUses && nullCheck >= 0)
     {
         //Get local values
         int array = mir->ssaRep->uses[nullCheck];
@@ -640,6 +658,30 @@ void handleBoundCheck (CompilationUnit *cUnit, SRemoveData *removeData, int null
                 dvmSetBit (bv, other);
             }
         }
+    } else {
+        if (boundCheck >= 0)
+        {
+            // Report about invalid arguments
+            if (mir->ssaRep->uses == 0)
+                ALOGE ("JIT_ERROR: handleBoundCheck (0x%x): ssaRep->uses is null",
+                    mir->dalvikInsn.opcode);
+
+            if (boundCheck >= mir->ssaRep->numUses)
+                ALOGE ("JIT_ERROR: handleBoundCheck (0x%x): boundCheck (%i) >= ssaRep->numUses (%i)",
+                    mir->dalvikInsn.opcode, boundCheck, mir->ssaRep->numUses);
+
+            if (nullCheck >= 0 && nullCheck >= mir->ssaRep->numUses)
+                ALOGE ("JIT_ERROR: handleBoundCheck (0x%x): nullCheck (%i) >= ssaRep->numUses (%i)",
+                    mir->dalvikInsn.opcode, nullCheck, mir->ssaRep->numUses);
+
+            if (nullCheck < 0)
+                ALOGE ("JIT_ERROR: handleBoundCheck (0x%x): nullCheck (%i) < 0, but boundCheck is %i",
+                    mir->dalvikInsn.opcode, nullCheck, boundCheck);
+
+            assert(mir->ssaRep->uses != 0);
+            assert(boundCheck < mir->ssaRep->numUses);
+            assert(nullCheck >= 0 && nullCheck < mir->ssaRep->numUses);
+        }
     }
 }
 
diff --git a/vm/compiler/Dataflow.cpp b/vm/compiler/Dataflow.cpp
index 251f361..b197de1 100644
--- a/vm/compiler/Dataflow.cpp
+++ b/vm/compiler/Dataflow.cpp
@@ -366,7 +366,7 @@ int dvmCompilerDataFlowAttributes[kMirOpLast] = {
     DF_FORMAT_35C | DF_NULL_OBJECT_CHECK_0 | DF_IS_CALL,
 
     // 6F OP_INVOKE_SUPER {vD, vE, vF, vG, vA}
-    DF_FORMAT_35C | DF_NULL_OBJECT_CHECK_0 | DF_IS_CALL,
+    DF_FORMAT_35C | DF_IS_CALL,
 
     // 70 OP_INVOKE_DIRECT {vD, vE, vF, vG, vA}
     DF_FORMAT_35C | DF_NULL_OBJECT_CHECK_0 | DF_IS_CALL,
@@ -390,7 +390,7 @@ int dvmCompilerDataFlowAttributes[kMirOpLast] = {
     DF_FORMAT_3RC | DF_NULL_OBJECT_CHECK_0 | DF_IS_CALL,
 
     // 77 OP_INVOKE_STATIC_RANGE {vCCCC .. vNNNN}
-    DF_FORMAT_3RC | DF_NULL_OBJECT_CHECK_0 | DF_IS_CALL,
+    DF_FORMAT_3RC | DF_IS_CALL,
 
     // 78 OP_INVOKE_INTERFACE_RANGE {vCCCC .. vNNNN}
     DF_FORMAT_3RC | DF_NULL_OBJECT_CHECK_0 | DF_IS_CALL,
-- 
1.7.4.1

