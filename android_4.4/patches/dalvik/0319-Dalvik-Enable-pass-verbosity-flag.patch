From ab2bc7efc0a3c58d0dd9744480ba6a0f39c40a7d Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Mon, 26 Aug 2013 18:30:54 -0700
Subject: Dalvik: Enable pass verbosity flag

BZ: 133648

A flag has been added to the CompilationUnit to determine if applying a
compiler pass should be verbose. The passes individually may use this flag
in order to print information about the decisions on why a pass is rejected
or accepted. This is useful for debugging for functionality and for
understanding limitations of the optimization passes. The flag is a cUnit
property because in some cases we need fine tuned control on the verbose
information we are seeking. For example, a use scenario is inserting a new pass
via the plugin system that enables the printPass flag solely for a specific
trace. Another use scenario is globally printing pass verbose information.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I3b44770866029e8161f683c9e6dc108f950b50ab
Orig-MCG-Change-Id: Id5faf2b2d5e0d8d207dcee0258340fdb676a4a46
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Reviewed-on: http://android.intel.com:8080/127819
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/Globals.h             |    6 ++++++
 vm/Init.cpp              |   35 +++++++++++++++++++++++++++++++----
 vm/compiler/CompilerIR.h |    1 +
 vm/compiler/LoopOpt.cpp  |   17 +++++++++++++++++
 4 files changed, 55 insertions(+), 4 deletions(-)

diff --git a/vm/Globals.h b/vm/Globals.h
index 3b8e391..7b3f4f2 100644
--- a/vm/Globals.h
+++ b/vm/Globals.h
@@ -1048,6 +1048,12 @@ struct DvmJitGlobals {
     /* Flag to control the loop passes executed */
     char *ignorePasses;
 
+    /* Used to control verbosity of pass actions. Contains names of passes to be verbose for */
+    char *debugPasses;
+
+    /* Used to control verbosity for all passes */
+    bool debugAllPasses;
+
     /* Per-process debug flag toggled when receiving a SIGUSR2 */
     bool receivedSIGUSR2;
 
diff --git a/vm/Init.cpp b/vm/Init.cpp
index 69728c6..7bdbd2a 100644
--- a/vm/Init.cpp
+++ b/vm/Init.cpp
@@ -170,7 +170,11 @@ static void usage(const char* progName)
     dvmFprintf(stderr, "  -Xjitbranchloops (Allows branches in loops, only tested if nestedloops is also off)\n");
     dvmFprintf(stderr, "  -Xjitextraoptsfile:<file> handling extra options via a process filtering file\n");
     dvmFprintf(stderr, "  -Xjitoldloops (Only accept the old loop detection system)\n");
-    dvmFprintf(stderr, "  -Xjitignorepasses:<value> (Ignore certain loop passes, the full name of the pass must be included, see -Xjitlooppasses to get a list)\n");
+    dvmFprintf(stderr, "  -Xjitignorepasses:<value> (Used to ignore loop passes. The full name of the pass must be included "
+            "and each pass separated by comma, see -Xjitlooppasses to get a list)\n");
+    dvmFprintf(stderr, "  -Xjitdebugpasses:<value> (Enable verbosity for optimization passes. The full name of the pass must "
+            "be included with each pass name separated by comma so use -Xjitlooppasses to get a list)\n");
+    dvmFprintf(stderr, "  -Xjitdebugallpasses (Used to enable verbosity for all optimization passes)\n");
     dvmFprintf(stderr, "  -Xjitlooppasses (Prints the loop passes available)\n");
     dvmFprintf(stderr, "  -Xjitregisterization:<value> Request a maximum of registerization requests\n");
     dvmFprintf(stderr, "  -Xjitdisableinlining Disable method inlining\n");
@@ -1597,16 +1601,18 @@ int processOptions(int argc, const char* const argv[], bool ignoreUnrecognized)
             gDvmJit.disableOpt |= 1 << kMethodInlining;
         } else if (strncmp(argv[i], "-Xjitoldloops", 13) == 0) {
             gDvmJit.oldLoopDetection = true;
-        } else if (strncmp(argv[i], "-Xjitignorepasses:", 18) == 0) {
+        } else if (strncmp(argv[i], "-Xjitignorepasses:", strlen ("-Xjitignorepasses:")) == 0) {
+            const unsigned int sizeOfOption = strlen ("-Xjitignorepasses:");
             const unsigned int max = 64;
+
             //Get a copy of the names
-            gDvmJit.ignorePasses = strndup (argv[i] + 18, max);
+            gDvmJit.ignorePasses = strndup (argv[i] + sizeOfOption, max);
 
             //Paranoid for memory issues
             if (gDvmJit.ignorePasses != 0)
             {
                 //Paranoid: let's not let people do anything they want
-                if (strlen (gDvmJit.ignorePasses) >= max)
+                if (strlen (gDvmJit.ignorePasses) < strnlen (argv[i] + sizeOfOption, max + 1))
                 {
                     ALOGD ("Warning: -Xjitignorepasses' parameter was too long, are you sure it was wanted? Only part was accepted");
                 }
@@ -1614,6 +1620,25 @@ int processOptions(int argc, const char* const argv[], bool ignoreUnrecognized)
                 //Print what we will be ignoring
                 dvmCompilerPrintIgnorePasses ();
             }
+        } else if (strncmp (argv[i], "-Xjitdebugpasses:", strlen ("-Xjitdebugpasses:")) == 0) {
+            const unsigned int sizeOfOption = strlen ("-Xjitdebugpasses:");
+            const unsigned int max = 64;
+
+            //Get a copy of the names of the passes to debug
+            gDvmJit.debugPasses = strndup (argv[i] + sizeOfOption, max);
+
+            //Paranoid for memory issues
+            if (gDvmJit.debugPasses != 0)
+            {
+                //Paranoid: let's not let people do anything they want
+                if (strlen (gDvmJit.debugPasses) < strnlen (argv[i] + sizeOfOption, max + 1))
+                {
+                    ALOGD ("Warning: The parameter for -Xjitdebugpasses was too long. Only part was accepted.");
+                }
+            }
+        } else if (strncmp (argv[i], "-Xjitdebugallpasses", sizeof ("-Xjitdebugallpasses")) == 0) {
+            //Set the flag to true for debugging all
+            gDvmJit.debugAllPasses = true;
         } else if (strncmp(argv[i], "-Xjitlooppasses", 15) == 0) {
             //Simply call the loop pass printer
             dvmCompilerPrintPassNames ();
@@ -1890,6 +1915,8 @@ static void setCommandLineDefaults()
     gDvmJit.minVectorizedIterations = 3;
 
     gDvmJit.ignorePasses = 0;
+    gDvmJit.debugPasses = 0;
+    gDvmJit.debugAllPasses = false;
 #if defined(ARCH_IA32)
     //Set the jit framework in place
     setJitFramework ();
diff --git a/vm/compiler/CompilerIR.h b/vm/compiler/CompilerIR.h
index 11b3343..a24bd3d 100644
--- a/vm/compiler/CompilerIR.h
+++ b/vm/compiler/CompilerIR.h
@@ -377,6 +377,7 @@ typedef struct CompilationUnit {
 #endif
     unsigned int maximumRegisterization;    /**< @brief Maximum registerization to be accepted */
     void *passData;                         /**< @brief Pass data is used to transfer data throughout a Pass */
+    bool printPass;                         /**< @brief Whether pass verbosity should be enabled. Useful for understanding pass decisions */
     void *walkData;                         /**< @brief Walk data when using the dispatcher */
     struct sUsedChain* globalDefUseChain;   /**< @brief The global def-use chain, this contains all def-use chains for reuse when recalculating */
     const JitTraceDescription *traceDesc;
diff --git a/vm/compiler/LoopOpt.cpp b/vm/compiler/LoopOpt.cpp
index 12ceaaa..2f8c300 100644
--- a/vm/compiler/LoopOpt.cpp
+++ b/vm/compiler/LoopOpt.cpp
@@ -266,6 +266,20 @@ void dvmCompilerLoopOptimizationDriver (CompilationUnit *cUnit)
             continue;
         }
 
+        //Save the print pass flag because we may be updating it.
+        //At end of pass, we always restore the printPass flag because it is a compilation unit property and we
+        //don't want to leave it permanently changed. For example, someone may enable verbosity by creating a plugin
+        //that changes the printPass flag for just a single trace and not globally.
+        bool oldPrintPass = cUnit->printPass;
+
+        //Now check if this pass is requested for debug. First we check if all passes should be debugged.
+        //Then we check whether just this particular pass should be debugged.
+        if (gDvmJit.debugAllPasses == true
+                || (gDvmJit.debugPasses != 0 && strstr (gDvmJit.debugPasses, curPass->getName ().c_str ()) != 0))
+        {
+            cUnit->printPass = true;
+        }
+
         //Do we have a general gate defined?
         bool (*generalGate) (const CompilationUnit *, Pass *) = gDvmJit.jitFramework.generalGate;
 
@@ -285,6 +299,9 @@ void dvmCompilerLoopOptimizationDriver (CompilationUnit *cUnit)
             dvmCompilerRunPass (cUnit, curPass);
         }
 
+        //Now restore the printPass flag. For explanation why we restore it, please see description of when we save.
+        cUnit->printPass = oldPrintPass;
+
         //Go to next pass
         curPass = curPass->getNext ();
     }
-- 
1.7.4.1

