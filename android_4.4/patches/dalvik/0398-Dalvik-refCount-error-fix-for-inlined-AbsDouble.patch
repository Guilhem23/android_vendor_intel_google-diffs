From f29e413b97329d9b0e4e10b0ccd3cebfecf16082 Mon Sep 17 00:00:00 2001
From: Yixin Shou <yixin.shou@intel.com>
Date: Thu, 7 Nov 2013 08:59:30 -0800
Subject: Dalvik: refCount error fix for inlined AbsDouble

BZ: 149660

This patch fixed the refCount error observed for inlined AbsDouble optimization.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Iadadafc41498a7013dad81d808c91f7bcf1da99c
Orig-MCG-Change-Id: I7930b315844ef254d185093855b0b54bab3b794f
Signed-off-by: Yixin Shou <yixin.shou@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 .../codegen/x86/lightcg/BytecodeVisitor.cpp        |   45 ++++++++++++++++----
 1 files changed, 37 insertions(+), 8 deletions(-)

diff --git a/vm/compiler/codegen/x86/lightcg/BytecodeVisitor.cpp b/vm/compiler/codegen/x86/lightcg/BytecodeVisitor.cpp
index e71e1fe..85ef544 100644
--- a/vm/compiler/codegen/x86/lightcg/BytecodeVisitor.cpp
+++ b/vm/compiler/codegen/x86/lightcg/BytecodeVisitor.cpp
@@ -1492,6 +1492,12 @@ int getVirtualRegInfo (VirtualRegInfo* infoArray, const MIR * currentMIR, bool u
         return 0;
     }
 
+    // For bytecode optimized away, no need to update virtual register usage
+    if (currentMIR->OptimizationFlags & MIR_OPTIMIZED_AWAY)
+    {
+        return 0;
+    }
+
     bool isExtended = false;
 
     // Check if we need to handle an extended MIR
@@ -3345,6 +3351,16 @@ int getVirtualRegInfo (VirtualRegInfo* infoArray, const MIR * currentMIR, bool u
             infoArray[0].accessType = REGACCESS_U;
             if (inlineMethodId == INLINE_MATH_ABS_DOUBLE) {
                 infoArray[0].physicalType = LowOpndRegType_xmm;
+                MIR* mirNext = currentMIR->next;
+                if (mirNext != 0 && mirNext->dalvikInsn.opcode == OP_MOVE_RESULT_WIDE)
+                {
+                    infoArray[1].regNum = mirNext->dalvikInsn.vA;
+                    infoArray[1].refCount = 1;
+                    infoArray[1].accessType = REGACCESS_D;
+                    infoArray[1].physicalType = LowOpndRegType_xmm;
+                    num_regs_per_bytecode = 2;
+                    break;
+                }
             }
             else {
                 infoArray[0].physicalType = LowOpndRegType_gp;
@@ -3691,6 +3707,12 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR, const u2* dal
     if (currentMIR->OptimizationFlags & MIR_INLINED)
         return 0; // No temporaries accessed
 
+    // For bytecode which is optimized away, no need to update temporaries infoArray
+    if (currentMIR->OptimizationFlags & MIR_OPTIMIZED_AWAY)
+    {
+        return 0;
+    }
+
     // Check if we need to handle an extended MIR
     if (currentMIR->dalvikInsn.opcode >= static_cast<Opcode> (kMirOpFirst)) {
         switch (static_cast<ExtendedMIROpcode>(currentMIR->dalvikInsn.opcode)) {
@@ -6381,14 +6403,21 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR, const u2* dal
                 infoArray[1].physicalType = LowOpndRegType_gp;
                 return 2;
             case INLINE_MATH_ABS_DOUBLE:
-                infoArray[0].regNum = 1;
-                infoArray[0].refCount = 3;
-                infoArray[0].physicalType = LowOpndRegType_xmm;
-                infoArray[0].shareWithVR = false;
-                infoArray[1].regNum = 2;
-                infoArray[1].refCount = 2;
-                infoArray[1].physicalType = LowOpndRegType_gp;
-                return 2;
+                {
+                    infoArray[0].regNum = 1;
+                    infoArray[0].refCount = 3;
+                    infoArray[0].physicalType = LowOpndRegType_xmm;
+                    infoArray[0].shareWithVR = false;
+                    MIR* mirNext = currentMIR->next;
+                    if (mirNext != 0 && mirNext->dalvikInsn.opcode == OP_MOVE_RESULT_WIDE)
+                    {
+                        return 1;
+                    }
+                    infoArray[1].regNum = 2;
+                    infoArray[1].refCount = 2;
+                    infoArray[1].physicalType = LowOpndRegType_gp;
+                    return 2;
+                }
             case INLINE_FLOAT_TO_RAW_INT_BITS:
                 infoArray[0].regNum = 1;
                 infoArray[0].refCount = 2;
-- 
1.7.4.1

