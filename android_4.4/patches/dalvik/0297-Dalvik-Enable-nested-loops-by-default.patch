From e18af931ce9a458ec5cc5ae2b963601020426056 Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Fri, 16 Aug 2013 16:28:25 -0700
Subject: Dalvik: Enable nested loops by default

BZ: 132509

Nested loops are now enabled by default. However, registerization is gated
to not handle loops with branches.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I3bb01629381329d5a245364dac9ce977eebc1853
Orig-MCG-Change-Id: Iea8426a107efd568f55ed323b8c9a39aced04a49
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Reviewed-on: http://android.intel.com:8080/125639
Reviewed-by: Provodin, Vitaly A <vitaly.a.provodin@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/Init.cpp                       |    7 ++-----
 vm/compiler/RegisterizationME.cpp |   19 +++++++++++++++++++
 vm/compiler/SinkCastOpt.cpp       |    2 +-
 3 files changed, 22 insertions(+), 6 deletions(-)

diff --git a/vm/Init.cpp b/vm/Init.cpp
index c97e1e0..17fb7b1 100644
--- a/vm/Init.cpp
+++ b/vm/Init.cpp
@@ -1541,9 +1541,6 @@ int processOptions(int argc, const char* const argv[], bool ignoreUnrecognized)
             gDvmJit.testLoops = true;
         } else if (strncmp(argv[i], "-Xjitbranchloops", 16) == 0) {
             gDvmJit.branchLoops = true;
-            //For the moment turn off registerization in the back-end in the case of nested loops
-            gDvmJit.backEndRegisterization = false;
-            gDvmJit.maximumRegisterization = 0;
         } else if (strncmp(argv[i], "-Xjitnobackendregisterization", 29) == 0) {
             gDvmJit.backEndRegisterization = false;
             gDvmJit.maximumRegisterization = 0;
@@ -1877,8 +1874,8 @@ static void setCommandLineDefaults()
 #if defined(WITH_JIT)
     gDvm.executionMode = kExecutionModeJit;
 
-    gDvmJit.nestedLoops = false;
-    gDvmJit.branchLoops = false;
+    gDvmJit.nestedLoops = true;
+    gDvmJit.branchLoops = true;
     gDvmJit.testLoops = false;
     gDvmJit.oldLoopDetection = false;
     gDvmJit.backEndRegisterization = true;
diff --git a/vm/compiler/RegisterizationME.cpp b/vm/compiler/RegisterizationME.cpp
index d954dba..3e9b46d 100644
--- a/vm/compiler/RegisterizationME.cpp
+++ b/vm/compiler/RegisterizationME.cpp
@@ -406,6 +406,19 @@ class RegisterSorter
  */
 static bool parseBlock (BasicBlock *bb, bool verbose)
 {
+    //We want to disable registerization when we have control flow in inner loop
+    if (bb->taken != 0 && bb->fallThrough != 0)
+    {
+        //We have two branches so check if we loop back
+        if (bb->taken->blockType != kPreBackwardBlock && bb->taken->blockType != kChainingCellBackwardBranch
+                && bb->fallThrough->blockType != kPreBackwardBlock
+                && bb->fallThrough->blockType != kChainingCellBackwardBranch)
+        {
+            //We are not looping back so disable registerization
+            return false;
+        }
+    }
+
     //Go through the instructions
     for (MIR *mir = bb->firstMIRInsn; mir != 0; mir = mir->next)
     {
@@ -681,6 +694,12 @@ static bool registerizeLoop (CompilationUnit *cUnit, LoopInformation *info, void
         return true;
     }
 
+    //For now refuse to registerize inner loops that have branches
+    if (dvmCountSetBits (info->getExitLoops ()) > 1 || dvmCountSetBits (info->getBackwardBranches ()) > 1)
+    {
+        return true;
+    }
+
     RegisterSorter sorter;
     std::vector<std::pair<int, RegisterClass> > registers;
     std::map<int, int> &registerCounts = sorter.getRegisterCounts ();
diff --git a/vm/compiler/SinkCastOpt.cpp b/vm/compiler/SinkCastOpt.cpp
index 7f89a79..b4fab54 100644
--- a/vm/compiler/SinkCastOpt.cpp
+++ b/vm/compiler/SinkCastOpt.cpp
@@ -37,7 +37,7 @@ static bool checkValidCastingForIV(CompilationUnit *cUnit, LoopInformation *info
         MIR *ifMir, const MIR *const castMir)
 {
     // check if induction variable is a count-up
-    if (info->isCountUpLoop () == false)
+    if (info->getCountUpLoop () == false)
     {
         return false;
     }
-- 
1.7.4.1

