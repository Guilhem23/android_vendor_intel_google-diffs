From ea88a687e0e1312215ac3d38743d4d43b064c1dd Mon Sep 17 00:00:00 2001
From: Shou, Yixin <yixin.shou@intel.com>
Date: Thu, 24 Jan 2013 14:55:04 +0530
Subject: Dalvik: Optimized cmp-long bytecode handling in JIT.

BZ: 61782

This patch eliminates the need for conditional moves in cmp-long
JIT implementation and generates a better code sequence by changing
the control flow. This patch gives 8.4% improvement in Quadrant-long.
Currently cmp-long is implemented by moving {-1,0,1} depending on the
comparison resulting in {<,=,>} respectively. This is inefficient as only
one path will be taken at any time.This patch improves performance by using
control flow instead of cmoves to move {-1,0,1}. We sequence the control flo
so that the most taken path goes through the fewest number of branches( "="
for higher 32 bits and "<" for lower 32 bits).

We are not showing the code for cmp-long with and w/o this patch as they are
too large.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I3bb23405dfbc3d7c23baa21be7e28475adfc26bd
Orig-MCG-Change-Id: I4b8e34df335cd61819fab99faa6a0799fb738665
Signed-off-by: Binusha B <b.binusha@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 tests/intel-003-cmplong_controlflow/expected.txt   |   10 ++
 tests/intel-003-cmplong_controlflow/info.txt       |    8 ++
 .../src/testcmplong.java                           |   71 +++++++++++++++
 vm/compiler/codegen/x86/BytecodeVisitor.cpp        |   16 +---
 vm/compiler/codegen/x86/LowerAlu.cpp               |   93 ++++++++++----------
 5 files changed, 137 insertions(+), 61 deletions(-)
 create mode 100644 tests/intel-003-cmplong_controlflow/expected.txt
 create mode 100644 tests/intel-003-cmplong_controlflow/info.txt
 create mode 100644 tests/intel-003-cmplong_controlflow/src/testcmplong.java

diff --git a/tests/intel-003-cmplong_controlflow/expected.txt b/tests/intel-003-cmplong_controlflow/expected.txt
new file mode 100644
index 0000000..f0e1ef2
--- /dev/null
+++ b/tests/intel-003-cmplong_controlflow/expected.txt
@@ -0,0 +1,10 @@
+c1 = 35000000
+
+c2 = 35000000
+
+c3 = 35000000
+
+c4 = 35000000
+
+c5 = 35000000
+
diff --git a/tests/intel-003-cmplong_controlflow/info.txt b/tests/intel-003-cmplong_controlflow/info.txt
new file mode 100644
index 0000000..5033859
--- /dev/null
+++ b/tests/intel-003-cmplong_controlflow/info.txt
@@ -0,0 +1,8 @@
+This test does the comparison of "a" and "b" in the following cases:
+1.Higher 32 bits of a < Higher 32 bits of b
+2.Higher 32 bits of a > Higher 32 bits of b
+3.Lower 32 bits of a < Lower 32 bits of b
+4.a = b
+5.Lower 32 bits of a > Lower 32 bits of b
+
+Output : Prints to standard O/P stream only if expected value of "d" (20/21/22 for <,>,= respectively) is not found while comparison inside the for loops.
diff --git a/tests/intel-003-cmplong_controlflow/src/testcmplong.java b/tests/intel-003-cmplong_controlflow/src/testcmplong.java
new file mode 100644
index 0000000..31da0a9
--- /dev/null
+++ b/tests/intel-003-cmplong_controlflow/src/testcmplong.java
@@ -0,0 +1,71 @@
+import java.io.*;
+class testcmplong{
+static int cmplong(long a, long b){
+ if (a<b)
+   return 20;
+ else if(a>b)
+   return 21;
+ else
+   return 22;
+}
+public static void main (String[] args)
+{
+ long a=0,b=0,c1=0,c2=0,c3=0,c4=0,c5=0;
+ int d=0;
+ a=1<<50;
+ b=1<<51;
+ for (int i=0;i<70000;i++)
+ {
+ d=cmplong(a,b);
+   if (d != 20)
+      System.out.println("error in less than" +"\n" );
+   else
+      c1=c1+500;
+ }
+ System.out.println("c1 = " + c1 + "\n" );
+ a=1<<51;
+ b=1<<50;
+ for (int i=0;i<70000;i++)
+ {
+ d=cmplong(a,b);
+   if (d!=21)
+      System.out.println("error in greater than" +"\n" );
+   else
+      c2=c2+500;
+ }
+ System.out.println("c2 = " + c2 + "\n" );
+ a=30;
+ b=40;
+ for (int i=0;i<70000;i++)
+ {
+ d=cmplong(a,b);
+   if (d!=20)
+      System.out.println("error in less than w/o shift" +"\n" );
+   else
+      c3=c3+500;
+ }
+ System.out.println("c3 = " + c3 + "\n" );
+ a=40;
+ b=40;
+ for (int i=0;i<70000;i++)
+ {
+ d=cmplong(a,b);
+   if (d!=22)
+      System.out.println("equal error" +"\n" );
+   else
+      c4=c4+500;
+ }
+ System.out.println("c4 = " + c4 + "\n" );
+ a=40;
+ b=30;
+ for (int i=0;i<70000;i++)
+ {
+ d=cmplong(a,b);
+   if (d!=21)
+      System.out.println("greater than w/o shift error" +"\n" );
+   else
+      c5=c5+500;
+ }
+ System.out.println("c5 = " + c5 + "\n" );
+}
+}
diff --git a/vm/compiler/codegen/x86/BytecodeVisitor.cpp b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
index 4c4888d..2a61086 100644
--- a/vm/compiler/codegen/x86/BytecodeVisitor.cpp
+++ b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
@@ -1782,7 +1782,7 @@ int getVirtualRegInfo(VirtualRegInfo* infoArray, const MIR * currentMIR) {
             num_regs_per_bytecode = 5;
             num_entry = 4;
             infoArray[num_entry].regNum = vA; //define
-            infoArray[num_entry].refCount = 2;
+            infoArray[num_entry].refCount = 5;
             infoArray[num_entry].accessType = REGACCESS_D;
             infoArray[num_entry].physicalType = LowOpndRegType_gp;
         }
@@ -5110,19 +5110,7 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
         infoArray[1].regNum = 2;
         infoArray[1].refCount = 2;
         infoArray[1].physicalType = LowOpndRegType_gp;
-        infoArray[2].regNum = 3;
-        infoArray[2].refCount = 3;
-        infoArray[2].physicalType = LowOpndRegType_gp;
-        infoArray[3].regNum = 4;
-        infoArray[3].refCount = 3;
-        infoArray[3].physicalType = LowOpndRegType_gp;
-        infoArray[4].regNum = 5;
-        infoArray[4].refCount = 2;
-        infoArray[4].physicalType = LowOpndRegType_gp;
-        infoArray[5].regNum = 6;
-        infoArray[5].refCount = 7;
-        infoArray[5].physicalType = LowOpndRegType_gp;
-        return 6;
+        return 2;
 
     case OP_EXECUTE_INLINE:
     case OP_EXECUTE_INLINE_RANGE:
diff --git a/vm/compiler/codegen/x86/LowerAlu.cpp b/vm/compiler/codegen/x86/LowerAlu.cpp
index f7fd3b7..c8e7614 100644
--- a/vm/compiler/codegen/x86/LowerAlu.cpp
+++ b/vm/compiler/codegen/x86/LowerAlu.cpp
@@ -2290,12 +2290,12 @@ int op_cmpg_double(const MIR * mir) {
     set_virtual_reg(vA, OpndSize_32, 3, false);
     return 0;
 }
+
 #define P_GPR_1 PhysicalReg_EBX
 #define P_GPR_2 PhysicalReg_ECX
 #define P_GPR_3 PhysicalReg_ESI
 #define P_SCRATCH_1 PhysicalReg_EDX
 #define P_SCRATCH_2 PhysicalReg_EAX
-#define OPTION_OLD //for simpler cfg
 
 /**
  * @brief Generate native code for bytecode cmp-long
@@ -2308,60 +2308,59 @@ int op_cmp_long(const MIR * mir) {
     u4 v1 = mir->dalvikInsn.vB;
     u4 v2 = mir->dalvikInsn.vC;
     get_virtual_reg(v1+1, OpndSize_32, 2, false);
-#ifdef OPTION_OLD
-    move_imm_to_reg(OpndSize_32, 0xffffffff, 3, false);
-    move_imm_to_reg(OpndSize_32, 1, 4, false);
-    move_imm_to_reg(OpndSize_32, 0, 5, false);
-#endif
-    compare_VR_reg(OpndSize_32,
-                                v2+1, 2, false);
-#ifndef OPTION_OLD
-    conditional_jump(Condition_L, ".cmp_long_less", true);
-    conditional_jump(Condition_G, ".cmp_long_greater", true);
-#else
-    conditional_jump(Condition_E, ".cmp_long_equal", true);
+
+    //Compare higher 32 bits
+    compare_VR_reg(OpndSize_32,v2+1, 2, false);
     rememberState(1);
-    conditional_move_reg_to_reg(OpndSize_32, Condition_L, //below vs less
-                                             3, false, 6, false);
-    conditional_move_reg_to_reg(OpndSize_32, Condition_G, //above vs greater
-                                             4, false, 6, false);
-    set_virtual_reg(vA, OpndSize_32, 6, false);
+    //If equal on higher 32 bits, goto compare of lower 32 bits
+    conditional_jump(Condition_E, ".cmp_long_higher_32b_equal", true);
+    //If less on higher 32 bits, it is less on 64 bits
+    conditional_jump(Condition_L, ".cmp_long_higher_32b_less", true);
+    //If greater on higher 32 bits, it is greater on 64 bits
+    set_VR_to_imm(vA, OpndSize_32, 1);
     rememberState(2);
-    unconditional_jump(".cmp_long_okay", true);
-    if (insertLabel(".cmp_long_equal", true) == -1)
-        return -1;
-    goToState(1);
-#endif
+    unconditional_jump(".cmp_long_done", true);
 
+    //If higher 32 bits are equal, compare lower 32 bits
+    if (insertLabel(".cmp_long_higher_32b_equal",true) == -1)
+       return -1;
+    goToState(1);
     get_virtual_reg(v1, OpndSize_32, 1, false);
-    compare_VR_reg(OpndSize_32,
-                                v2, 1, false);
-#ifdef OPTION_OLD
-    conditional_move_reg_to_reg(OpndSize_32, Condition_E,
-                                             5, false, 6, false);
-    conditional_move_reg_to_reg(OpndSize_32, Condition_B, //below vs less
-                                             3, false, 6, false);
-    conditional_move_reg_to_reg(OpndSize_32, Condition_A, //above vs greater
-                                             4, false, 6, false);
-    set_virtual_reg(vA, OpndSize_32, 6, false);
+
+    //Compare lower 32 bits
+    compare_VR_reg(OpndSize_32, v2, 1, false);
+    rememberState(3);
+    //Less on lower 32 bits
+    conditional_jump(Condition_B, ".cmp_long_lower_32b_less", true);
+    //Equal on lower 32 bits
+    conditional_jump(Condition_E, ".cmp_long_lower_32b_equal", true);
+    //Greater on lower 32 bits
+    set_VR_to_imm(vA, OpndSize_32, 1);
     transferToState(2);
-#else
-    conditional_jump(Condition_A, ".cmp_long_greater", true);
-    conditional_jump(Condition_NE, ".cmp_long_less", true);
-    set_VR_to_imm(vA, OpndSize_32, 0);
-    unconditional_jump(".cmp_long_okay", true);
+    unconditional_jump(".cmp_long_done", true);
 
-    if (insertLabel(".cmp_long_less", true) == -1)
-        return -1;
+    if (insertLabel(".cmp_long_higher_32b_less", true) == -1)
+       return -1;
+    goToState(1);
     set_VR_to_imm(vA, OpndSize_32, 0xffffffff);
-    unconditional_jump(".cmp_long_okay", true);
+    transferToState(2);
+    unconditional_jump(".cmp_long_done", true);
 
-    if (insertLabel(".cmp_long_greater", true) == -1)
-        return -1;
-    set_VR_to_imm(vA, OpndSize_32, 1);
-#endif
-    if (insertLabel(".cmp_long_okay", true) == -1)
-        return -1;
+    if (insertLabel(".cmp_long_lower_32b_less", true) == -1)
+       return -1;
+    goToState(3);
+    set_VR_to_imm(vA, OpndSize_32, 0xffffffff);
+    transferToState(2);
+    unconditional_jump(".cmp_long_done", true);
+
+    if (insertLabel(".cmp_long_lower_32b_equal", true) == -1)
+       return -1;
+    goToState(3);
+    set_VR_to_imm(vA, OpndSize_32, 0);
+    transferToState(2);
+
+    if (insertLabel(".cmp_long_done", true) == -1)
+       return -1;
     return 0;
 }
 #undef P_GPR_1
-- 
1.7.4.1

