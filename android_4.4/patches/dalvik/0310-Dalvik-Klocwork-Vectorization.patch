From 408a5f43ea838bd787ed605dbe8971fd1ab6d6f6 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Wed, 28 Aug 2013 08:51:57 -0700
Subject: Dalvik: Klocwork: Vectorization

BZ: 134287

Fixing klocwork issues for the Vectorization patch.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I3e81723074ac7a63b34922b048094c6fac887ede
Orig-MCG-Change-Id: Iffd76b060b9958b5dc2bb7dd019fcb44057fc758
Signed-off-by: Jean Christophe Beyler
Reviewed-on: http://android.intel.com:8080/128334
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: Jose, Bijoy A <bijoy.a.jose@intel.com>
Reviewed-by: Katkov, Serguei I <serguei.i.katkov@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/IntermediateRep.cpp |   15 +++++++++++++--
 vm/compiler/LoopInformation.cpp |    2 +-
 vm/compiler/Vectorization.cpp   |   22 ++++++++++++++++++++--
 3 files changed, 34 insertions(+), 5 deletions(-)

diff --git a/vm/compiler/IntermediateRep.cpp b/vm/compiler/IntermediateRep.cpp
index 011a48b..a5fe463 100644
--- a/vm/compiler/IntermediateRep.cpp
+++ b/vm/compiler/IntermediateRep.cpp
@@ -1349,7 +1349,13 @@ const char* dvmCompilerGetOpcodeName (int opcode)
         "kMirOpCheckInlinePrediction",
         "kMirOpNullCheck",
         "kMirOpBoundCheck",
-        "kMirOpRegisterize"
+        "kMirOpRegisterize",
+        "kOpConst128b",
+        "kMirOpMove128b",
+        "kMirOpPackedMultiply",
+        "kMirOpPackedAddition",
+        "kMirOpPackedAddReduce",
+        "kMirOpPackedSet"
     };
     assert (sizeof (ExtendedMIROpNames) / sizeof (char *) == kMirOpLast - kMirOpFirst);
 
@@ -1357,7 +1363,12 @@ const char* dvmCompilerGetOpcodeName (int opcode)
     {
         return dexGetOpcodeName (static_cast<Opcode> (opcode));
     }
-    if (opcode < static_cast<int> (kMirOpLast))
+
+    //Check for overflow
+    unsigned int idx = opcode - static_cast<int> (kMirOpFirst);
+    unsigned int max = sizeof (ExtendedMIROpNames) / sizeof (char *);
+
+    if (idx < max)
     {
         return ExtendedMIROpNames[opcode - static_cast<int> (kMirOpFirst)];
     }
diff --git a/vm/compiler/LoopInformation.cpp b/vm/compiler/LoopInformation.cpp
index fcca39b..9cbb0b6 100644
--- a/vm/compiler/LoopInformation.cpp
+++ b/vm/compiler/LoopInformation.cpp
@@ -701,7 +701,7 @@ BasicBlock *LoopInformation::getBackwardBranchBlock (const CompilationUnit *cUni
     BasicBlock *bb = dvmCompilerGetNextBasicBlockViaBitVector (bvIterator, cUnit->blockList);
 
     //Make sure it is a backward branch (Paranoid)
-    if (bb->blockType != kChainingCellBackwardBranch)
+    if (bb == 0 || bb->blockType != kChainingCellBackwardBranch)
     {
         return 0;
     }
diff --git a/vm/compiler/Vectorization.cpp b/vm/compiler/Vectorization.cpp
index 5a83aa2..0ee64ce 100644
--- a/vm/compiler/Vectorization.cpp
+++ b/vm/compiler/Vectorization.cpp
@@ -661,6 +661,10 @@ void handleInductionVariable (CompilationUnit *cUnit, LoopInformation *loopInfo,
     int size = convertTypeToSize (info->type);
     int current = 0;
     char args[16];
+
+    //Memset args to 0
+    memset (args, 0, sizeof (args));
+
     char *ptr = args;
 
     assert (size * max == sizeof (args));
@@ -1319,7 +1323,10 @@ static BasicBlock *createVectorizedTest (CompilationUnit *cUnit, LoopInformation
     BasicBlock *bb = createMainTest (cUnit, loopInfo, info);
 
     //Paranoid
-    assert (bb != 0);
+    if (bb == 0)
+    {
+        return 0;
+    }
 
     //Now just get the opcode for the const
     MIR *first = bb->firstMIRInsn;
@@ -1822,11 +1829,22 @@ static bool vectorizeHelper (CompilationUnit *cUnit, LoopInformation *loopInform
     BasicBlock *bwcc = loopInformation->getBackwardBranchBlock (cUnit);
 
     //Huge paranoid
-    assert (bb != 0 && preheader != 0 && exit != 0 && postExit != 0);
+    if (bb == 0 || preheader == 0 || exit == 0 || postExit == 0 || bwcc == 0)
+    {
+        //We let it continue to the next loop
+        return true;
+    }
 
     //Get info for the vectorization
     VectorizationInfo *info = static_cast<VectorizationInfo *> (pass->getData ());
 
+    //If info is 0, we are done, it should never happen
+    if (info == 0)
+    {
+        //We let it continue to the next loop
+        return true;
+    }
+
     //We want a copy of all of these
     BasicBlock *copyBasicBlock = dvmCompilerCopyBasicBlock (cUnit, bb);
     BasicBlock *copyPreHeader = dvmCompilerCopyBasicBlock (cUnit, preheader);
-- 
1.7.4.1

