From e37302ccae2339d061318b4c43d9cb72fcc93059 Mon Sep 17 00:00:00 2001
From: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Date: Tue, 9 Jul 2013 15:26:38 +0700
Subject: Dalvik: The high parts of 64-bit operands might not be tracked by memory table

BZ: 120140

When register is loaded by child's request (via 'loadVirtualRegistersForChild'
function), it is possible to get high part of wide operands untracked by memory
table. The reason for this is that only low parts are added to memory table.
This patch adds high parts of 64-bit registers into memory table.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ieab45ca47057ae28a4b5d0d504d08a2a5dd2124b
Orig-MCG-Change-Id: I16ad8da561ca1da8c7cd670c3a690740873708e5
Signed-off-by: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/RegisterizationBE.cpp |    6 ++++++
 1 files changed, 6 insertions(+), 0 deletions(-)

diff --git a/vm/compiler/codegen/x86/RegisterizationBE.cpp b/vm/compiler/codegen/x86/RegisterizationBE.cpp
index 7f8d8b8..77f86e1 100644
--- a/vm/compiler/codegen/x86/RegisterizationBE.cpp
+++ b/vm/compiler/codegen/x86/RegisterizationBE.cpp
@@ -1307,6 +1307,12 @@ static bool loadVirtualRegistersForChild (const std::set<int> &virtualRegistersT
             //Since we just loaded it from memory, we keep it marked as being in memory and add it to the
             //memory table in order to keep track of it.
             addToMemVRTable (newEntry.regNum, true);
+
+            //If it is a 64-bit wide operand, we also need to add its high part to the memory table.
+            if (newEntry.getSize() == OpndSize_64)
+            {
+                addToMemVRTable (newEntry.regNum + 1, true);
+            }
         }
     }
 
-- 
1.7.4.1

