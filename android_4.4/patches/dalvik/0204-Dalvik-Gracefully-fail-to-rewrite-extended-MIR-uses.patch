From 5858eed85131fe96df98483954e345d6007a82de Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Mon, 17 Jun 2013 13:25:36 -0700
Subject: Dalvik: Gracefully fail to rewrite extended MIR uses

BZ: 116693

Rewriting the virtual registers of extended MIRs technically fails because the
code does not contain the appropriate logic. However, the function returns
success because it believe it had no work to do. Now, for extended MIRs the
rewriting fails gracefully.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I5b2d5d18be94a745f7bd59e2da39815351206286
Orig-MCG-Change-Id: I884691d16dcab551f39824ccf2b3bf27a6444a40
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/IntermediateRep.cpp |   13 +++++++++++++
 1 files changed, 13 insertions(+), 0 deletions(-)

diff --git a/vm/compiler/IntermediateRep.cpp b/vm/compiler/IntermediateRep.cpp
index ce80859..7a98595 100644
--- a/vm/compiler/IntermediateRep.cpp
+++ b/vm/compiler/IntermediateRep.cpp
@@ -638,6 +638,13 @@ bool dvmCompilerCheckVariant (MIR *elem, BitVector *variants, int skipUses)
 bool dvmCompilerRewriteMirUses (DecodedInstruction &dalvikInsn, int oldVR,
         int newVR)
 {
+    //Phi nodes get recomputed automatically and thus we don't need to rewrite the uses.
+    if (static_cast<ExtendedMIROpcode> (dalvikInsn.opcode) == kMirOpPhi)
+    {
+        //We return true because there's nothing we need to in terms of rewriting
+        return true;
+    }
+
     //Get dataflow flags
     int dfAttributes = dvmCompilerDataFlowAttributes[dalvikInsn.opcode];
 
@@ -651,6 +658,12 @@ bool dvmCompilerRewriteMirUses (DecodedInstruction &dalvikInsn, int oldVR,
         return false;
     }
 
+    //If we have an extended MIR then reject because rewriting support has not been added
+    if ((dfAttributes & DF_FORMAT_EXT_OP) != 0)
+    {
+        return false;
+    }
+
     //Check if the first use overlaps the def for this MIR. If it does
     //and the VR we are rewriting is this operand, we should reject.
     if ((dfAttributes & (DF_UA | DF_UA_WIDE)) != 0
-- 
1.7.4.1

