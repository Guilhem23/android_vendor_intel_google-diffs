From a964312aea31f12a161160f73b3d13c980b5408c Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Thu, 30 May 2013 11:11:45 +0700
Subject: Dalvik: Removal optimizations should take out code from loop in correct order

BZ: 111548

The loop's code take out optimization should put the code at the end
of pre-header and at the beggining of post loop.
It is required to avoid mixup the code from different optimizations.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ib322589a2732808657bd45a3554f51b9547cda8a
Orig-MCG-Change-Id: Idd2750c16d41a94bf347f8a06e60b18a46757ceb
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/AccumulationSinking.cpp |    4 +-
 vm/compiler/CompilerIR.h            |    3 ++
 vm/compiler/IntermediateRep.cpp     |   59 +++++++++++++++++++++++++++++++++--
 vm/compiler/LoopInformation.cpp     |    4 +-
 4 files changed, 63 insertions(+), 7 deletions(-)

diff --git a/vm/compiler/AccumulationSinking.cpp b/vm/compiler/AccumulationSinking.cpp
index b1e2967..85bb0c2 100644
--- a/vm/compiler/AccumulationSinking.cpp
+++ b/vm/compiler/AccumulationSinking.cpp
@@ -636,13 +636,13 @@ static void sinkAccumulations (CompilationUnit *cUnit, LoopInformation *info, co
     BitVector *bv = const_cast<BitVector *> (info->getExitLoops ());
 
     //Add the instructions to the basic blocks defined by the vector
-    dvmCompilerAddInstructionsToBasicBlocks (cUnit, bv, toSink);
+    dvmCompilerPrependInstructionsToBasicBlocks (cUnit, bv, toSink);
 
     //Now get the backward chaining cells
     bv = const_cast<BitVector *> (info->getBackwardBranches ());
 
     //Add the instructions to the basic blocks defined by the vector
-    dvmCompilerAddInstructionsToBasicBlocks (cUnit, bv, toSink);
+    dvmCompilerPrependInstructionsToBasicBlocks (cUnit, bv, toSink);
 }
 
 /**
diff --git a/vm/compiler/CompilerIR.h b/vm/compiler/CompilerIR.h
index 5446991..dfe9d0a 100644
--- a/vm/compiler/CompilerIR.h
+++ b/vm/compiler/CompilerIR.h
@@ -474,9 +474,12 @@ bool dvmCompilerRemoveMIR (BasicBlock *bb, MIR *mir);
 bool dvmCompilerRemoveMIR (MIR *mir);
 
 void dvmCompilerAddInstructionsToBasicBlock (BasicBlock *bb, const std::vector<MIR *> &toAdd);
+void dvmCompilerPrependInstructionsToBasicBlock (BasicBlock *bb, const std::vector<MIR *> &toAdd);
 
 void dvmCompilerAddInstructionsToBasicBlocks (CompilationUnit *cUnit, BitVector *basicBlocks,
         const std::vector<MIR *> &toAdd);
+void dvmCompilerPrependInstructionsToBasicBlocks (CompilationUnit *cUnit, BitVector *basicBlocks,
+        const std::vector<MIR *> &toAdd);
 
 /* Insert a BasicBlock between a parent and child */
 bool dvmCompilerInsertBasicBlockBetween (BasicBlock *newBlock, BasicBlock *parent, BasicBlock *child);
diff --git a/vm/compiler/IntermediateRep.cpp b/vm/compiler/IntermediateRep.cpp
index 86c8983..ce80859 100644
--- a/vm/compiler/IntermediateRep.cpp
+++ b/vm/compiler/IntermediateRep.cpp
@@ -269,7 +269,7 @@ bool dvmCompilerRemoveMIR (BasicBlock *bb, MIR *mir)
 }
 
 /**
- * @brief Add instructions to the BasicBlock
+ * @brief Add instructions to the end of BasicBlock
  * @param bb the BasicBlock
  * @param toAdd a vector of Instructions to add to bb
  */
@@ -281,17 +281,39 @@ void dvmCompilerAddInstructionsToBasicBlock (BasicBlock *bb, const std::vector<M
         return;
     }
 
-    //Add a copy of each MIR
     for (std::vector<MIR *>::const_iterator it = toAdd.begin (); it != toAdd.end (); it++)
     {
         MIR *newMIR = dvmCompilerCopyMIR (*it);
 
+        //Add a copy of each MIR
         dvmCompilerAppendMIR (bb, newMIR);
     }
 }
 
 /**
- * @brief Add instructions to the BasicBlock in a BitVector
+ * @brief Insert instructions at the start of BasicBlock
+ * @param bb the BasicBlock
+ * @param toAdd a vector of Instructions to add to bb
+ */
+void dvmCompilerPrependInstructionsToBasicBlock (BasicBlock *bb, const std::vector<MIR *> &toAdd)
+{
+    //If it is nil, we don't do anything
+    if (bb == 0)
+    {
+        return;
+    }
+
+    for (std::vector<MIR *>::const_reverse_iterator it = toAdd.rbegin (); it != toAdd.rend (); it++)
+    {
+        MIR *newMIR = dvmCompilerCopyMIR (*it);
+
+        //Add a copy of each MIR
+        dvmCompilerPrependMIR (bb, newMIR);
+    }
+}
+
+/**
+ * @brief Add instructions to the end of BasicBlock in a BitVector
  * @param cUnit the CompilationUnit
  * @param basicBlocks a BitVector containing the BasicBlocks
  * @param toAdd a vector of Instructions to add to bb
@@ -321,6 +343,37 @@ void dvmCompilerAddInstructionsToBasicBlocks (CompilationUnit *cUnit, BitVector
     }
 }
 
+/**
+ * @brief Insert instructions at the start of BasicBlock in a BitVector
+ * @param cUnit the CompilationUnit
+ * @param basicBlocks a BitVector containing the BasicBlocks
+ * @param toAdd a vector of Instructions to add to bb
+ */
+void dvmCompilerPrependInstructionsToBasicBlocks (CompilationUnit *cUnit, BitVector *basicBlocks,
+        const std::vector<MIR *> &toAdd)
+{
+    //Iterate on the exit blocks
+    BitVectorIterator bvIterator;
+    dvmBitVectorIteratorInit (basicBlocks, &bvIterator);
+
+    while (true)
+    {
+        //Get the block index
+        int blockIdx = dvmBitVectorIteratorNext (&bvIterator);
+
+        //If we are done
+        if (blockIdx == -1)
+        {
+            break;
+        }
+
+        BasicBlock *bb = (BasicBlock *) dvmGrowableListGetElement(&cUnit->blockList, blockIdx);
+
+        //Now add to the basic block
+        dvmCompilerPrependInstructionsToBasicBlock (bb, toAdd);
+    }
+}
+
 bool dvmCompilerInsertBasicBlockBetween (BasicBlock *newBlock, BasicBlock *parent, BasicBlock *child)
 {
     //Paranoid
diff --git a/vm/compiler/LoopInformation.cpp b/vm/compiler/LoopInformation.cpp
index e951db3..d0cd2c6 100644
--- a/vm/compiler/LoopInformation.cpp
+++ b/vm/compiler/LoopInformation.cpp
@@ -985,13 +985,13 @@ void LoopInformation::sinkInstructions (CompilationUnit *cUnit, std::vector<MIR
     BitVector *bv = const_cast<BitVector *> (getExitLoops ());
 
     //Add the instructions to the basic blocks defined by the vector
-    dvmCompilerAddInstructionsToBasicBlocks (cUnit, bv, insns);
+    dvmCompilerPrependInstructionsToBasicBlocks (cUnit, bv, insns);
 
     //Now get the backward chaining cells
     bv = const_cast<BitVector *> (getBackwardBranches ());
 
     //Add the instructions to the basic blocks defined by the vector
-    dvmCompilerAddInstructionsToBasicBlocks (cUnit, bv, insns);
+    dvmCompilerPrependInstructionsToBasicBlocks (cUnit, bv, insns);
 }
 
 //Sink an instruction
-- 
1.7.4.1

