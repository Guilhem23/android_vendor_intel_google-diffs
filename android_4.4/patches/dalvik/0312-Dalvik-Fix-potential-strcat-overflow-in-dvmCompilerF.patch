From 4fcbe5771048e0357722d42aef7a9e92df83f3a5 Mon Sep 17 00:00:00 2001
From: Dmitry Petrochenko <dmitry.petrochenko@intel.com>
Date: Fri, 16 Aug 2013 16:50:14 +0700
Subject: Dalvik: Fix potential strcat overflow in dvmCompilerFullDisassembler

BZ: 131334

The dvmCompilerFullDisassembler checks the output buffer length in
almost all cases by snprintf, but in several places strcat was used, which
does not take into account the size of output buffer.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I800f685ce69507fc9757b990d684e237e17acd05
Orig-MCG-Change-Id: Ib022f62b489c07088fb149ffb0a4e449ee68c821
Signed-off-by: Dmitry Petrochenko <dmitry.petrochenko@intel.com>
Reviewed-on: http://android.intel.com:8080/127701
Reviewed-by: Katkov, Serguei I <serguei.i.katkov@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Semukhina, Elena V <elena.v.semukhina@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Dmitry Petrochenko <dmitry.petrochenko@intel.com>
Reviewed-on: http://android.intel.com:8080/128456
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/Dataflow.cpp |   26 ++++++++++++++++----------
 1 files changed, 16 insertions(+), 10 deletions(-)

diff --git a/vm/compiler/Dataflow.cpp b/vm/compiler/Dataflow.cpp
index d7fcb94..89499d3 100644
--- a/vm/compiler/Dataflow.cpp
+++ b/vm/compiler/Dataflow.cpp
@@ -912,13 +912,16 @@ char *dvmCompilerGetDalvikDisassembly(const DecodedInstruction *insn,
         flags = dexGetFlagsFromOpcode(insn->opcode);
     }
 
-    if (note)
-        strcat(buffer, note);
-
     /* For branches, decode the instructions to print out the branch targets */
     int len = strlen (buffer);
     int left = sizeof (buffer) - len;
 
+    if (note) {
+        strncat(buffer, note, left);
+        len = strlen (buffer);
+        left = sizeof (buffer) - len;
+    }
+
     if (flags & kInstrCanBranch) {
         InstructionFormat dalvikFormat = dexGetFormatFromOpcode(insn->opcode);
         int offset = 0;
@@ -952,11 +955,11 @@ char *dvmCompilerGetDalvikDisassembly(const DecodedInstruction *insn,
     } else if (dfAttributes & DF_FORMAT_35C) {
         unsigned int i;
         for (i = 0; i < insn->vA; i++) {
-            if (i != 0) strcat(buffer, ",");
+            const char* sep = (i == 0) ? "" : ",";
 
             len = strlen (buffer);
             left = sizeof (buffer) - len;
-            snprintf(buffer + len, left, " v%d", insn->arg[i]);
+            snprintf(buffer + len, left, "%s v%d", sep, insn->arg[i]);
         }
     }
     else if (dfAttributes & DF_FORMAT_3RC) {
@@ -1331,10 +1334,11 @@ char *dvmCompilerFullDisassembler(const CompilationUnit *cUnit,
     } else if (dfAttributes & (DF_FORMAT_35C | DF_FORMAT_3RC)) {
         unsigned int i;
         for (i = 0; i < insn->vA; i++) {
-            if (i != 0) strcat(buffer, ",");
+            const char* sep = (i == 0) ? " " : ", ";
+
             offset = strlen (buffer);
             left = sizeof (buffer) - offset;
-            snprintf(buffer + offset, left, " %s",
+            snprintf(buffer + offset, left, "%s%s", sep,
                      getSSAName(cUnit, mir->ssaRep->uses[i], operand0));
         }
     } else {
@@ -1347,7 +1351,9 @@ char *dvmCompilerFullDisassembler(const CompilationUnit *cUnit,
                 snprintf(buffer + offset, left, " %s",
                          getSSAName(cUnit, mir->ssaRep->defs[udIdx], operand0));
             }
-            strcat(buffer, ",");
+            offset = strlen (buffer);
+            left = sizeof (buffer) - offset;
+            strncat(buffer, ",", left);
         }
         if (mir->ssaRep->numUses) {
             /* No leading ',' for the first use */
@@ -1422,7 +1428,7 @@ char *dvmCompilerGetSSAString(CompilationUnit *cUnit, SSARepresentation *ssaRep)
     }
 
     if (ssaRep->numDefs) {
-        strcat(buffer, "<- ");
+        strncat(buffer, "<- ", sizeof(buffer) - strlen(buffer));
     }
 
     for (i = 0; i < ssaRep->numUses; i++) {
@@ -1432,7 +1438,7 @@ char *dvmCompilerGetSSAString(CompilationUnit *cUnit, SSARepresentation *ssaRep)
         if (snprintf(buffer + len, 250 - len, "s%d(v%d_%d) ",
                      ssaRep->uses[i], DECODE_REG(ssa2DalvikValue),
                      DECODE_SUB(ssa2DalvikValue)) >= (250 - len)) {
-            strcat(buffer, "...");
+            strncat(buffer, "...", sizeof(buffer) - strlen(buffer));
             break;
         }
     }
-- 
1.7.4.1

