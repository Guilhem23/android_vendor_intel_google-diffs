From 938e363f20a454f76c465ddb8004da9e71405f7d Mon Sep 17 00:00:00 2001
From: David L Kreitzer <david.l.kreitzer@intel.com>
Date: Tue, 3 Sep 2013 12:48:46 -0700
Subject: Dalvik: Missing entry VR load for the upper half of an 8-byte object

BZ: 135705

Be sure to generate an entry load for the upper half of an 8-byte object
when it is registerized and live.  Previously, we assumed that if the upper
half is live, so is the lower half, but that isn't always the case.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I1334c08050adb1105bd909f2030665d4a3d7928e
Orig-MCG-Change-Id: I55701063693880bade8cbc4a93ec4d129e1317f0
Signed-off-by: Kreitzer, David L <david.l.kreitzer@intel.com>
Reviewed-on: http://android.intel.com:8080/129617
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Provodin, Vitaly A <vitaly.a.provodin@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/pcg/UtilityPCG.cpp |   18 +++++++++++++-----
 1 files changed, 13 insertions(+), 5 deletions(-)

diff --git a/vm/compiler/codegen/x86/pcg/UtilityPCG.cpp b/vm/compiler/codegen/x86/pcg/UtilityPCG.cpp
index 89306cd..486f3e3 100644
--- a/vm/compiler/codegen/x86/pcg/UtilityPCG.cpp
+++ b/vm/compiler/codegen/x86/pcg/UtilityPCG.cpp
@@ -710,16 +710,21 @@ void dvmCompilerPcgCreateEntryStub (CompilationUnitPCG *cUnit)
 
 void dvmCompilerPcgHandleInitialLoad (CompilationUnitPCG *cUnit, BasicBlock *bb, int ssaNum, bool considerSpeculative)
 {
-    //Get virtual register
-    u2 virtualReg = dvmExtractSSARegister (cUnit, ssaNum);
-
     //Get type
     pcgDtype dtype = dvmCompilerPcgGetDtypeForSSANum (cUnit, ssaNum);
 
-    // Ignore the high halves of 64-bit objects
+    // In most cases, we can ignore ssaNum's that are the high half of a 64-bit
+    // object.  The entire object will be loaded when processing the low half.
+    // However, there are some cases where only the high half of the object is
+    // needed.  So go ahead and generate a load here too (using the ssaNum of
+    // the low half).  In many cases, this means we will generate two loads of
+    // the same object, but PCG will detect this and delete the extra load.
+    //
     if (dvmCompilerPcgIsHighDtype (dtype) == true)
     {
-        return;
+        SSANumInfo &info = cUnit->getRootSSANumInformation (ssaNum);
+        ssaNum = info.pairSSANum;
+        dtype = dvmCompilerPcgGetDtypeForSSANum (cUnit, ssaNum);
     }
 
     //Get information
@@ -730,6 +735,9 @@ void dvmCompilerPcgHandleInitialLoad (CompilationUnitPCG *cUnit, BasicBlock *bb,
         return;
     }
 
+    //Get virtual register
+    u2 virtualReg = dvmExtractSSARegister (cUnit, ssaNum);
+
     if (considerSpeculative == true)
     {
         if (info.checkedForNull == true)
-- 
1.7.4.1

