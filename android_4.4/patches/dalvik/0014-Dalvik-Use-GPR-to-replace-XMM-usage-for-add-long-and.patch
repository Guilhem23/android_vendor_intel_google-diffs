From 780b536dc0f65f020bd8b819d5f7d5f8dc1a35cc Mon Sep 17 00:00:00 2001
From: Yixin Shou <yixin.shou@intel.com>
Date: Thu, 16 Aug 2012 04:31:15 -0700
Subject: Dalvik: Use GPR to replace XMM usage for add-long and add-long/2addr bytecode

BZ: 75820

Use general purpose register to replace XMM register for the implementation
of add-long and add-long/2addr bytecode. Quadrant CPU score is improved by
4%-5% with this patch.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I15b869da8c1f9a65d7f89de2822c9bb4ccbc2d33
Orig-MCG-Change-Id: I669a4cd2bfb39a048973529b86faca9e55447770
Signed-off-by: Yixin Shou <yixin.shou@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/BytecodeVisitor.cpp |   64 ++++++++++++++++++++++++++-
 vm/compiler/codegen/x86/LowerAlu.cpp        |   20 +++++++--
 2 files changed, 79 insertions(+), 5 deletions(-)

diff --git a/vm/compiler/codegen/x86/BytecodeVisitor.cpp b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
index 1d3c70e..dd81f16 100644
--- a/vm/compiler/codegen/x86/BytecodeVisitor.cpp
+++ b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
@@ -2331,6 +2331,36 @@ int getVirtualRegInfo(VirtualRegInfo* infoArray) {
         num_regs_per_bytecode = 3;
         break;
     case OP_ADD_LONG:
+        vA = INST_AA(inst);
+        v1 = *((u1*)rPC + 2);
+        v2 = *((u1*)rPC + 3);
+        codeSize = 2;
+        infoArray[0].regNum = v1;
+        infoArray[0].refCount = 1;
+        infoArray[0].accessType = REGACCESS_U;
+        infoArray[0].physicalType = LowOpndRegType_gp;
+        infoArray[1].regNum = v1+1;
+        infoArray[1].refCount = 1;
+        infoArray[1].accessType = REGACCESS_U;
+        infoArray[1].physicalType = LowOpndRegType_gp;
+        infoArray[2].regNum = v2;
+        infoArray[2].refCount = 1;
+        infoArray[2].accessType = REGACCESS_U;
+        infoArray[2].physicalType = LowOpndRegType_gp;
+        infoArray[3].regNum = v2+1;
+        infoArray[3].refCount = 1;
+        infoArray[3].accessType = REGACCESS_U;
+        infoArray[3].physicalType = LowOpndRegType_gp;
+        infoArray[4].regNum = vA;
+        infoArray[4].refCount = 1;
+        infoArray[4].accessType = REGACCESS_D;
+        infoArray[4].physicalType = LowOpndRegType_gp;
+        infoArray[5].regNum = vA+1;
+        infoArray[5].refCount = 1;
+        infoArray[5].accessType = REGACCESS_D;
+        infoArray[5].physicalType = LowOpndRegType_gp;
+        num_regs_per_bytecode = 6;
+        break;
     case OP_SUB_LONG:
     case OP_AND_LONG:
     case OP_OR_LONG:
@@ -2616,6 +2646,27 @@ int getVirtualRegInfo(VirtualRegInfo* infoArray) {
         num_regs_per_bytecode = 2;
         break;
     case OP_ADD_LONG_2ADDR:
+        vA = INST_A(inst);
+        v2 = INST_B(inst);
+        codeSize = 1;
+        infoArray[1].regNum = vA;
+        infoArray[1].refCount = 2;
+        infoArray[1].accessType = REGACCESS_UD;
+        infoArray[1].physicalType = LowOpndRegType_gp;
+        infoArray[3].regNum = vA+1;
+        infoArray[3].refCount = 2;
+        infoArray[3].accessType = REGACCESS_UD;
+        infoArray[3].physicalType = LowOpndRegType_gp;
+        infoArray[0].regNum = v2;
+        infoArray[0].refCount = 1;
+        infoArray[0].accessType = REGACCESS_U;
+        infoArray[0].physicalType = LowOpndRegType_gp;
+        infoArray[2].regNum = v2+1;
+        infoArray[2].refCount = 1;
+        infoArray[2].accessType = REGACCESS_U;
+        infoArray[2].physicalType = LowOpndRegType_gp;
+        num_regs_per_bytecode = 4;
+        break;
     case OP_SUB_LONG_2ADDR:
     case OP_AND_LONG_2ADDR:
     case OP_OR_LONG_2ADDR:
@@ -4758,11 +4809,22 @@ int getTempRegInfo(TempRegInfo* infoArray) { //returns an array of TempRegInfo
         return 3;
 
     case OP_ADD_LONG:
+    case OP_ADD_LONG_2ADDR:
+        infoArray[0].regNum = 1;
+        infoArray[0].refCount = 3; //define, update, use
+        infoArray[0].physicalType = LowOpndRegType_gp;
+        if (inst_op == OP_ADD_LONG)
+            infoArray[0].shareWithVR = false;
+        infoArray[1].regNum = 2;
+        infoArray[1].refCount = 3; //define, use
+        infoArray[1].physicalType = LowOpndRegType_gp;
+        if (inst_op == OP_ADD_LONG)
+            infoArray[1].shareWithVR = false;
+        return 2;
     case OP_SUB_LONG:
     case OP_AND_LONG:
     case OP_OR_LONG:
     case OP_XOR_LONG:
-    case OP_ADD_LONG_2ADDR:
     case OP_SUB_LONG_2ADDR:
     case OP_AND_LONG_2ADDR:
     case OP_OR_LONG_2ADDR:
diff --git a/vm/compiler/codegen/x86/LowerAlu.cpp b/vm/compiler/codegen/x86/LowerAlu.cpp
index c8c4d66..473f489 100644
--- a/vm/compiler/codegen/x86/LowerAlu.cpp
+++ b/vm/compiler/codegen/x86/LowerAlu.cpp
@@ -1137,14 +1137,26 @@ int common_alu_long(ALU_Opcode opc, u2 vA, u2 v1, u2 v2) { //except div and rem
     set_virtual_reg(vA, OpndSize_64, 1, false);
     return 0;
 }
-//! lower bytecode ADD_LONG by calling common_alu_long
+
+//! Use general purpose registers during the lowering for add-long and add-long/2addr
+int common_add_long(u2 vA, u2 v1, u2 v2) {
+    get_virtual_reg(v1, OpndSize_32, 1, false);
+    get_virtual_reg(v1+1, OpndSize_32, 2, false);
+    alu_binary_VR_reg(OpndSize_32, add_opc, v2, 1, false);
+    alu_binary_VR_reg(OpndSize_32, adc_opc, (v2+1), 2, false);
+    set_virtual_reg(vA, OpndSize_32, 1, false);
+    set_virtual_reg(vA+1, OpndSize_32, 2, false);
+    return 0;
+}
+
+//! lower bytecode ADD_LONG by calling common_add_long
 
 //!
 int op_add_long() {
     u2 vA = INST_AA(inst);
     u2 v1 = *((u1*)rPC + 2);
     u2 v2 = *((u1*)rPC + 3);
-    int retval = common_alu_long(add_opc, vA, v1, v2);
+    int retval = common_add_long(vA, v1, v2);
     rPC += 2;
     return retval;
 }
@@ -1192,14 +1204,14 @@ int op_xor_long() {
     rPC += 2;
     return retval;
 }
-//! lower bytecode ADD_LONG_2ADDR by calling common_alu_long
+//! lower bytecode ADD_LONG_2ADDR by calling common_add_long
 
 //!
 int op_add_long_2addr() {
     u2 vA = INST_A(inst);
     u2 v1 = vA;
     u2 v2 = INST_B(inst);
-    int retval = common_alu_long(add_opc, vA, v1, v2);
+    int retval = common_add_long(vA, v1, v2);
     rPC += 1;
     return retval;
 }
-- 
1.7.4.1

