From 02a9e07a072cdd1d0a3aef33a96e0821e364604a Mon Sep 17 00:00:00 2001
From: Udayan Banerji <udayan.banerji@intel.com>
Date: Tue, 7 May 2013 20:49:04 -0700
Subject: Dalvik: Error framework clean-up

BZ: 102963

Recent patches have missed certain guidelines for error reporting and thus
have introduced wrong messages in the log. This patch fixes those. Also
fixed is a wrong error setting at lowerByteCodeJit.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Iab10192c5a1ee17bc5d11616674d8979ebb2350e
Orig-MCG-Change-Id: Ide5641accd56e87c19ae66abf224ca1f28cf71cf
Signed-off-by: Udayan Banerji <udayan.banerji@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/AnalysisO1.cpp            |   26 +++++++++++++--------
 vm/compiler/codegen/x86/BytecodeVisitor.cpp       |   14 +++++-----
 vm/compiler/codegen/x86/CodegenErrors.cpp         |   15 ++++++-----
 vm/compiler/codegen/x86/CodegenInterface.cpp      |   25 +++++++++-----------
 vm/compiler/codegen/x86/InstructionGeneration.cpp |    2 +-
 vm/compiler/codegen/x86/Lower.cpp                 |    6 +++++
 vm/compiler/codegen/x86/LowerJump.cpp             |    8 ++++++
 vm/compiler/codegen/x86/RegisterizationBE.cpp     |    2 +-
 8 files changed, 58 insertions(+), 40 deletions(-)

diff --git a/vm/compiler/codegen/x86/AnalysisO1.cpp b/vm/compiler/codegen/x86/AnalysisO1.cpp
index e37c61d..fb73eec 100644
--- a/vm/compiler/codegen/x86/AnalysisO1.cpp
+++ b/vm/compiler/codegen/x86/AnalysisO1.cpp
@@ -968,15 +968,18 @@ int preprocessingBB(CompilationUnit *cUnit, BasicBlock* bb) {
     // We should have already created the x86 specific BB
     currentBB = reinterpret_cast<BasicBlock_O1 *> (bb);
 
-    if (currentBB == NULL)
+    if (currentBB == NULL) {
+        ALOGI("JIT_INFO: BB null at preprocessingBB");
+        SET_JIT_ERROR(kJitErrorTraceFormation);
         return -1;
+    }
 
     // Keep track of this newly created BB_O1
     method_bbs_sorted[num_bbs_for_method] = currentBB;
     num_bbs_for_method++;
 
     if (num_bbs_for_method >= MAX_NUM_BBS_PER_METHOD) {
-        ALOGE("JIT_ERROR: Exceeded maximum number of basic blocks\n");
+        ALOGI("JIT_INFO: Exceeded maximum number of basic blocks\n");
         SET_JIT_ERROR(kJitErrorTraceFormation);
         return -1;
     }
@@ -1433,8 +1436,7 @@ int codeGenBasicBlock(const Method* method, BasicBlock_O1* bb)
             }
 
             if (notHandled){
-                SET_JIT_ERROR(kJitErrorUnsupportedBytecode);
-                ALOGI("JIT_INFO: Unsupported bytecode %s\n", dexGetOpcodeName(mir->dalvikInsn.opcode));
+                SET_JIT_ERROR(kJitErrorCodegen);
                 return -1;
             }
 
@@ -3004,7 +3006,7 @@ int updateVirtualReg(int reg, LowOpndRegType pType) {
             }
         }
     }
-    return -1;
+    return 0;
 }
 ////////////////////////////////////////////////////////////////
 //REGISTER ALLOCATION
@@ -4091,7 +4093,7 @@ int searchMemTable(int regNum) {
             return k;
         }
     }
-    ALOGW("in searchMemTable can't find VR %d num_memory_vr %d", regNum, num_memory_vr);
+    ALOGI("JIT_INFO: Can't find VR %d num_memory_vr %d at searchMemTable", regNum, num_memory_vr);
     return -1;
 }
 /////////////////////////////////////////////////////////////////////////
@@ -4333,7 +4335,8 @@ int requestVRFreeDelay(int regNum, u4 reason) {
 #endif
             memVRTable[indexL].delayFreeCounters[reason]++;
         } else {
-            ALOGE("JIT_ERROR: At requestVRFreeDelay: reason %i is unknown (VR=%d)", reason, regNum);
+            ALOGI("JIT_INFO: At requestVRFreeDelay: reason %i is unknown (VR=%d)", reason, regNum);
+            SET_JIT_ERROR(kJitErrorRegAllocFailed);
             return -1;
         }
     } else {
@@ -4376,7 +4379,8 @@ int cancelVRFreeDelayRequest(int regNum, u4 reason) {
                 return -1;
             }
         } else {
-            ALOGE("JIT_ERROR: At cancelVRFreeDelay: reason %i is unknown (VR: %d)", reason, regNum);
+            ALOGI("JIT_INFO: At cancelVRFreeDelay: reason %i is unknown (VR: %d)", reason, regNum);
+            SET_JIT_ERROR(kJitErrorRegAllocFailed);
             return -1;
         }
     }
@@ -4454,7 +4458,7 @@ int searchVirtualInfoOfBB(LowOpndRegType type, int regNum, BasicBlock_O1* bb) {
         }
     }
 
-    //Report failure
+    //Not found is not always an error, so don't set any
     return -1;
 }
 //! return the index to compileTable for a given virtual register
@@ -4466,6 +4470,8 @@ int searchCompileTable(int type, int regNum) { //returns the index
         if(compileTable[k].physicalType == type && compileTable[k].regNum == regNum)
             return k;
     }
+
+    //Returning -1 might not always be an error, so we don't set any
     return -1;
 }
 
@@ -6293,7 +6299,7 @@ void transferToState(int stateNum) {
                 }
             }
             if(!doneXfer) {
-                ALOGE("JIT_INFO: Can't match inMemory state of v%d in "
+                ALOGI("JIT_INFO: Can't match inMemory state of v%d in "
                         "transferToState.", targetReg);
                 SET_JIT_ERROR(kJitErrorStateTransfer);
                 return;
diff --git a/vm/compiler/codegen/x86/BytecodeVisitor.cpp b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
index 6ac3738..f8adde4 100644
--- a/vm/compiler/codegen/x86/BytecodeVisitor.cpp
+++ b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
@@ -1469,7 +1469,7 @@ int getVirtualRegInfo(VirtualRegInfo* infoArray, const MIR * currentMIR) {
                             infoArray[0].physicalType = LowOpndRegType_xmm;
                             break;
                         default:
-                            ALOGE("JIT_ERROR: kMirOpRegisterize does not support regClass %d", regClass);
+                            ALOGI("JIT_INFO: kMirOpRegisterize does not support regClass %d", regClass);
                             SET_JIT_ERROR(kJitErrorUnsupportedBytecode);
                             break;
                     }
@@ -1477,9 +1477,9 @@ int getVirtualRegInfo(VirtualRegInfo* infoArray, const MIR * currentMIR) {
                 }
                 return currentMIR->width;
             default:
-                ALOGE("JIT ERROR! Extended MIR not supported in getVirtualRegInfo");
-                dvmAbort();
-                break;
+                ALOGI("JIT_INFO: Extended MIR not supported in getVirtualRegInfo");
+                SET_JIT_ERROR(kJitErrorUnsupportedBytecode);
+                return -1;
         }
     }
 
@@ -3577,9 +3577,9 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
                 }
                 return 1;
             default:
-                ALOGE("JIT ERROR! Extended MIR not supported in getTempRegInfo");
-                dvmAbort();
-                break;
+                ALOGI("JIT_INFO: Extended MIR not supported in getTempRegInfo");
+                SET_JIT_ERROR(kJitErrorUnsupportedBytecode);
+                return -1;
         }
     }
 
diff --git a/vm/compiler/codegen/x86/CodegenErrors.cpp b/vm/compiler/codegen/x86/CodegenErrors.cpp
index 97cd9c8..c8e8668 100644
--- a/vm/compiler/codegen/x86/CodegenErrors.cpp
+++ b/vm/compiler/codegen/x86/CodegenErrors.cpp
@@ -104,7 +104,7 @@ bool dvmCanFixErrorsAndRetry(CompilationUnit *cUnit){
                 CLEAR_JIT_ERROR(kJitErrorCodegen);
 
                 isError = true;
-                ALOGE("The following issues were seen:");
+                ALOGI("The following issues were seen:");
             }
 
             if (jitErrorMessages[i] == '\0')
@@ -150,8 +150,6 @@ bool dvmCanFixErrorsAndRetry(CompilationUnit *cUnit){
     if (IS_JIT_ERROR_SET(kJitErrorBERegisterization)) {
         //If registerization in the Backend is on
         if (gDvmJit.backEndRegisterization == true) {
-            //Clear the error:
-            CLEAR_JIT_ERROR(kJitErrorBERegisterization);
 
             //Turn off registerization
             gDvmJit.backEndRegisterization = false;
@@ -160,11 +158,14 @@ bool dvmCanFixErrorsAndRetry(CompilationUnit *cUnit){
             //since we disabled registerization
             cUnit->maximumRegisterization = 0;
 
-            ALOGE("Trying to turn backend registerization off");
-            ALOGE("++++++++++++++++++++++++++++++++++++++++++++");
+            //Clear the error.
+            //Registerization can cause other errors
+            //Let's clear all errors for now, and see if they
+            //re-occur without registerization.
+            CLEAR_ALL_JIT_ERRORS();
 
-            //Return true to try again
-            return true;
+            //Notify about this special action
+            ALOGI("Ignoring other issues and retrying without backend registerization");
         }
     }
 
diff --git a/vm/compiler/codegen/x86/CodegenInterface.cpp b/vm/compiler/codegen/x86/CodegenInterface.cpp
index 4340eae..828118a 100644
--- a/vm/compiler/codegen/x86/CodegenInterface.cpp
+++ b/vm/compiler/codegen/x86/CodegenInterface.cpp
@@ -1810,6 +1810,8 @@ int patchConstToStream(struct ConstInfo *constListTemp, CompilationUnit *cUnit)
                     constListTemp->streamAddr, constListTemp->offsetAddr, constListTemp->constAddr);
 #endif
             ALOGI("JIT_INFO: Constant init opt could not patch all required locations");
+            SET_JIT_ERROR(kJitErrorConstInitFail);
+            cUnit->constListHead = NULL;
             return -1;              /* incorrect data found at patch location, reject trace */
         }
         constListTemp = constListTemp->next;
@@ -1850,7 +1852,6 @@ static bool generateCode (CompilationUnit *cUnit, BasicBlock *bb, BasicBlock **n
                     cUnit->traceDesc->trace[0].info.frag.startOffset);
             SET_JIT_ERROR(kJitErrorCodegen);
             endOfTrace(true/*freeOnly*/);
-            cUnit->baseAddr = NULL;
             PROTECT_CODE_CACHE(stream, unprotected_code_cache_bytes);
             return false;
         }
@@ -1909,7 +1910,6 @@ static bool generateCode (CompilationUnit *cUnit, BasicBlock *bb, BasicBlock **n
                     ALOGI("JIT_INFO: Code cache full after lowerByteCodeJit (trace uses %uB)", (stream - streamStart));
                     SET_JIT_ERROR(kJitErrorCodeCacheFull);
                     gDvmJit.codeCacheFull = true;
-                    cUnit->baseAddr = NULL;
                     endOfTrace(true/*freeOnly*/);
                     PROTECT_CODE_CACHE(stream, unprotected_code_cache_bytes);
                     return false;
@@ -1923,7 +1923,6 @@ static bool generateCode (CompilationUnit *cUnit, BasicBlock *bb, BasicBlock **n
                 //Lowering could have failed due to various reasons.
                 //Set a generic error flag
                 SET_JIT_ERROR(kJitErrorCodegen);
-                cUnit->baseAddr = NULL;
                 endOfTrace(true); /* need to free structures */
                 return false;
             }
@@ -1965,6 +1964,9 @@ static void compilerMIR2LIRJit(CompilationUnit_O1 *cUnit, JitTranslationInfo *in
 
     traceMode = cUnit->jitMode;
 
+    //Initialize the base address to null
+    cUnit->baseAddr = NULL;
+
     /*
      * Initialize various types chaining lists.
      */
@@ -2019,7 +2021,6 @@ static void compilerMIR2LIRJit(CompilationUnit_O1 *cUnit, JitTranslationInfo *in
 
             if (retCode < 0) {
                 endOfTrace(true/*freeOnly*/);
-                cUnit->baseAddr = NULL;
                 SET_JIT_ERROR(kJitErrorCodegen);
                 return;
             }
@@ -2027,7 +2028,6 @@ static void compilerMIR2LIRJit(CompilationUnit_O1 *cUnit, JitTranslationInfo *in
 
         if (preprocessingTrace() == -1) {
             endOfTrace(true/*freeOnly*/);
-            cUnit->baseAddr = NULL;
             SET_JIT_ERROR(kJitErrorCodegen);
             return;
         }
@@ -2215,7 +2215,6 @@ static void compilerMIR2LIRJit(CompilationUnit_O1 *cUnit, JitTranslationInfo *in
                 default:
                     ALOGI("JIT_INFO: Bad blocktype %d", chainingBlock->blockType);
                     SET_JIT_ERROR(kJitErrorTraceFormation);
-                    cUnit->baseAddr = NULL;
                     endOfTrace(true); /* need to free structures */
                     code_block_table.clear();
                     return;
@@ -2225,7 +2224,6 @@ static void compilerMIR2LIRJit(CompilationUnit_O1 *cUnit, JitTranslationInfo *in
             {
                 SET_JIT_ERROR(kJitErrorChainingCell);
                 endOfTrace (true/*freeOnly*/);
-                cUnit->baseAddr = NULL;
                 return;
             }
 
@@ -2240,7 +2238,6 @@ static void compilerMIR2LIRJit(CompilationUnit_O1 *cUnit, JitTranslationInfo *in
                 ALOGI("JIT_INFO: Code cache full after ChainingCell (trace uses %uB)", (stream - streamStart));
                 SET_JIT_ERROR(kJitErrorCodeCacheFull);
                 gDvmJit.codeCacheFull = true;
-                cUnit->baseAddr = NULL;
                 endOfTrace(true); /* need to free structures */
                 PROTECT_CODE_CACHE(stream, unprotected_code_cache_bytes);
                 code_block_table.clear();
@@ -2270,7 +2267,6 @@ static void compilerMIR2LIRJit(CompilationUnit_O1 *cUnit, JitTranslationInfo *in
         // state or after calling endOfTrace. Bail out for this trace!
         ALOGI("JIT_INFO: Code cache full after endOfTrace (trace uses %uB)", (stream - streamStart));
         SET_JIT_ERROR(kJitErrorCodeCacheFull);
-        cUnit->baseAddr = NULL;
         PROTECT_CODE_CACHE(stream, unprotected_code_cache_bytes);
         code_block_table.clear();
         return;
@@ -2288,13 +2284,11 @@ static void compilerMIR2LIRJit(CompilationUnit_O1 *cUnit, JitTranslationInfo *in
     memcpy((char*)stream, &chainCellCounts, sizeof(chainCellCounts));
     stream += sizeof(chainCellCounts);
 
-    cUnit->baseAddr = streamMethodStart;
     cUnit->totalSize = (stream - streamStart);
     if(gDvmJit.codeCacheByteUsed + cUnit->totalSize + CODE_CACHE_PADDING > gDvmJit.codeCacheSize) {
         ALOGI("JIT_INFO: Code cache full after ChainingCellCounts (trace uses %uB)", (stream - streamStart));
         SET_JIT_ERROR(kJitErrorCodeCacheFull);
         gDvmJit.codeCacheFull = true;
-        cUnit->baseAddr = NULL;
         PROTECT_CODE_CACHE(stream, unprotected_code_cache_bytes);
         code_block_table.clear();
         return;
@@ -2324,7 +2318,7 @@ static void compilerMIR2LIRJit(CompilationUnit_O1 *cUnit, JitTranslationInfo *in
 
         //  Sum of bytes used in code cache, constant data section should be lower than code cache size
         if((gDvmJit.codeCacheByteUsed + (streamEnd - streamStart)) > gDvmJit.codeCacheSize) {
-            ALOGE("JIT_ERROR: Code cache full after ChainingCellCounts and constant data section");
+            ALOGI("JIT_INFO: Code cache full after ChainingCellCounts and constant data section");
             SET_JIT_ERROR(kJitErrorCodeCacheFull);
             gDvmJit.codeCacheFull = true;
             cUnit->baseAddr = NULL;
@@ -2362,12 +2356,15 @@ static void compilerMIR2LIRJit(CompilationUnit_O1 *cUnit, JitTranslationInfo *in
         printTrace(cUnit, code_block_table, chainCellCounts, patchCount, pOffset);
     }
     code_block_table.clear();
-    ALOGV("JIT CODE after trace %p to %p size %x START %p", cUnit->baseAddr,
+    ALOGV("JIT CODE after trace %p to %p size %x START %p", streamMethodStart,
           (char *) gDvmJit.codeCache + gDvmJit.codeCacheByteUsed,
           cUnit->totalSize, gDvmJit.codeCache);
 
     gDvmJit.numCompilations++;
 
+    //Update the base addr
+    cUnit->baseAddr = streamMethodStart;
+
     info->codeAddress = (char*)cUnit->baseAddr;// + cUnit->headerSize;
 }
 
@@ -2515,7 +2512,7 @@ bool dvmCompilerDoWork(CompilerWorkOrder *work)
             isCompile = false;
             ALOGI("JIT_INFO: Unknown work order type");
             assert(0);  // Bail if debug build, discard otherwise
-            ALOGE("\tError ignored");
+            ALOGI("\tError ignored");
     }
     if (!success)
         work->result.codeAddress = NULL;
diff --git a/vm/compiler/codegen/x86/InstructionGeneration.cpp b/vm/compiler/codegen/x86/InstructionGeneration.cpp
index 9638faf..0b3cd0e 100644
--- a/vm/compiler/codegen/x86/InstructionGeneration.cpp
+++ b/vm/compiler/codegen/x86/InstructionGeneration.cpp
@@ -231,7 +231,7 @@ void genRegisterize (CompilationUnit *cUnit, MIR *mir)
             set_VR_sd (vA, 1, false);
             break;
         default:
-            ALOGE("JIT_ERROR: genRegisterize is requesting an unsupported regClass %d", regClass);
+            ALOGI("JIT_INFO: genRegisterize is requesting an unsupported regClass %d", regClass);
             SET_JIT_ERROR(kJitErrorUnsupportedBytecode);
             break;
     }
diff --git a/vm/compiler/codegen/x86/Lower.cpp b/vm/compiler/codegen/x86/Lower.cpp
index 0de3c8d..a765efd 100644
--- a/vm/compiler/codegen/x86/Lower.cpp
+++ b/vm/compiler/codegen/x86/Lower.cpp
@@ -1157,6 +1157,9 @@ void sendLabelInfoToVTune(int startStreamPtr, int endStreamPtr, const char* labe
 int getLabelOffset (unsigned int blockId) {
     //Paranoid
     if (gCompilationUnit == 0) {
+        //We can't do much except reporting an error
+        ALOGI("JIT_INFO: getLabelOffset has  null gCompilationUnit");
+        SET_JIT_ERROR(kJitErrorTraceFormation);
         return -1;
     }
 
@@ -1168,6 +1171,9 @@ int getLabelOffset (unsigned int blockId) {
 
     //Paranoid
     if (bbO1 == 0 || bbO1->label == 0) {
+        //We can't do much except reporting an error
+        ALOGI("JIT_INFO: getLabelOffset has invalid basic block");
+        SET_JIT_ERROR(kJitErrorInvalidBBId);
         return -1;
     }
 
diff --git a/vm/compiler/codegen/x86/LowerJump.cpp b/vm/compiler/codegen/x86/LowerJump.cpp
index 218a253..398ef5b 100644
--- a/vm/compiler/codegen/x86/LowerJump.cpp
+++ b/vm/compiler/codegen/x86/LowerJump.cpp
@@ -1215,17 +1215,23 @@ int common_if(s4 tmp, ConditionCode cc_next, ConditionCode cc) {
     // so we can assert that here.
     if (takenBB->blockType == kChainingCellBackwardBranch)
     {
+        ALOGI("JIT_INFO: No pre-backward on taken branch");
+        SET_JIT_ERROR(kJitErrorTraceFormation);
         return -1;
     }
 
     if (fallThroughBB->blockType == kChainingCellBackwardBranch)
     {
+        ALOGI("JIT_INFO: No pre-backward on fallThrough branch");
+        SET_JIT_ERROR(kJitErrorTraceFormation);
         return -1;
     }
 
     // The prebackward block should always be the taken branch
     if (fallThroughBB->blockType == kPreBackwardBlock)
     {
+        ALOGI("JIT_INFO: Pre-backward branch is fallThrough");
+        SET_JIT_ERROR(kJitErrorTraceFormation);
         return -1;
     }
 
@@ -1254,6 +1260,8 @@ int common_if(s4 tmp, ConditionCode cc_next, ConditionCode cc) {
         //already handled.
         if (loopEntry->associationTable.hasBeenFinalized() == false)
         {
+            ALOGI("JIT_INFO: Loop entry still not finalized at common_if");
+            SET_JIT_ERROR(kJitErrorTraceFormation);
             return -1;
         }
 
diff --git a/vm/compiler/codegen/x86/RegisterizationBE.cpp b/vm/compiler/codegen/x86/RegisterizationBE.cpp
index 44b8907..6a6eb1f 100644
--- a/vm/compiler/codegen/x86/RegisterizationBE.cpp
+++ b/vm/compiler/codegen/x86/RegisterizationBE.cpp
@@ -1306,7 +1306,7 @@ static bool loadVirtualRegistersForChild (const AssociationTable &associationsTo
         if (entry == num_compile_entries) {
             ALOGI ("JIT_INFO: We are not handling properly when we don't have "
                     "entry in compile table");
-            SET_JIT_ERROR(kJitErrorBERegisterization);
+            SET_JIT_ERROR(kJitErrorRegAllocFailed);
             return false;
         }
     }
-- 
1.7.4.1

