From e0717d90148d4939975a5334511c3cffb71d9d58 Mon Sep 17 00:00:00 2001
From: Dong-Yuan Chen <dong-yuan.chen@intel.com>
Date: Sat, 17 Aug 2013 22:19:35 -0700
Subject: Dalvik: PCG OP_REM_FLOAT/DOUBLE implementation

BZ: 128808

Implemented OP_REM_FLOAT/DOUBLE in Dalvik over PCG backend

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Id2d7dcf131a9074ffb796322687f8df7025e3a64
Orig-MCG-Change-Id: I95a0268b03de2c32c18b6e99a3c08512ff1c998f
Signed-off-by: aleksey.v.ignatenko <avignate@lab-dyn-116-248.ins.intel.com>
Reviewed-on: http://android.intel.com:8080/123858
Reviewed-by: Ignatenko, Aleksey V <aleksey.v.ignatenko@intel.com>
Reviewed-by: Kreitzer, David L <david.l.kreitzer@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Semukhina, Elena V <elena.v.semukhina@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Dittert, Eric <eric.dittert@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Reviewed-on: http://android.intel.com:8080/125996
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/pcg/Analysis.cpp       |    4 +++
 vm/compiler/codegen/x86/pcg/CodeGeneration.cpp |   10 ++++++++
 vm/compiler/codegen/x86/pcg/DataStructures.h   |    2 +
 vm/compiler/codegen/x86/pcg/LowerALU.cpp       |   28 ++++++++++++++++++++++++
 vm/compiler/codegen/x86/pcg/LowerALU.h         |   15 ++++++++++++
 vm/compiler/codegen/x86/pcg/Utility.cpp        |   22 +++++++++++++++---
 6 files changed, 77 insertions(+), 4 deletions(-)

diff --git a/vm/compiler/codegen/x86/pcg/Analysis.cpp b/vm/compiler/codegen/x86/pcg/Analysis.cpp
index ef77f8d..44286b7 100644
--- a/vm/compiler/codegen/x86/pcg/Analysis.cpp
+++ b/vm/compiler/codegen/x86/pcg/Analysis.cpp
@@ -1015,10 +1015,12 @@ bool dvmCompilerPcgNewRegisterizeVRAnalysis (CompilationUnitPCG *cUnit)
                 case OP_SUB_FLOAT:
                 case OP_MUL_FLOAT:
                 case OP_DIV_FLOAT:
+                case OP_REM_FLOAT:
                 case OP_ADD_FLOAT_2ADDR:
                 case OP_SUB_FLOAT_2ADDR:
                 case OP_MUL_FLOAT_2ADDR:
                 case OP_DIV_FLOAT_2ADDR:
+                case OP_REM_FLOAT_2ADDR:
                     pcgRef (cUnit, ssaRep->uses[0], VXreg32);
                     pcgRef (cUnit, ssaRep->uses[1], VXreg32);
                     pcgDefRef (cUnit, ssaRep->defs[0], VXreg32);
@@ -1028,10 +1030,12 @@ bool dvmCompilerPcgNewRegisterizeVRAnalysis (CompilationUnitPCG *cUnit)
                 case OP_SUB_DOUBLE:
                 case OP_MUL_DOUBLE:
                 case OP_DIV_DOUBLE:
+                case OP_REM_DOUBLE:
                 case OP_ADD_DOUBLE_2ADDR:
                 case OP_SUB_DOUBLE_2ADDR:
                 case OP_MUL_DOUBLE_2ADDR:
                 case OP_DIV_DOUBLE_2ADDR:
+                case OP_REM_DOUBLE_2ADDR:
                     pcgRef (cUnit, ssaRep->uses[0], DPVXreg64);
                     pcgRef (cUnit, ssaRep->uses[1], DPVXreg64);
                     pcgRef (cUnit, ssaRep->uses[2], DPVXreg64);
diff --git a/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp b/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
index 70e1541..8b98ce1 100644
--- a/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
+++ b/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
@@ -438,6 +438,16 @@ static bool dvmCompilerPcgTranslateInsn (CompilationUnitPCG *cUnit, MIR *mir)
             dvmCompilerPcgTranslateFloat (cUnit, mir, "divss1");
             break;
 
+        case OP_REM_FLOAT:
+        case OP_REM_FLOAT_2ADDR:
+            dvmCompilerPcgTranslateRemFloat (cUnit, mir);
+            break;
+
+        case OP_REM_DOUBLE:
+        case OP_REM_DOUBLE_2ADDR:
+            dvmCompilerPcgTranslateRemDouble (cUnit, mir);
+            break;
+
         case OP_ADD_DOUBLE:
         case OP_ADD_DOUBLE_2ADDR:
             dvmCompilerPcgTranslateDouble (cUnit, mir, "addsd1");
diff --git a/vm/compiler/codegen/x86/pcg/DataStructures.h b/vm/compiler/codegen/x86/pcg/DataStructures.h
index d3c69af..7317449 100644
--- a/vm/compiler/codegen/x86/pcg/DataStructures.h
+++ b/vm/compiler/codegen/x86/pcg/DataStructures.h
@@ -31,6 +31,8 @@ typedef enum pcgDtype
     LLreg,      /**< @brief Long type */
     VXreg32,    /**< @brief Vectorial 32-bit type */
     DPVXreg64,  /**< @brief Vectorial 64-bit type */
+    FPreg32,    /**< @brief x87 32-bit type */
+    FPreg64,    /**< @brief x87 64-bit type */
     Any,        /**< @brief Any is fine */
     Any4,       /**< @brief Any 4-byte */
     Any8,       /**< @brief Any 8-byte */
diff --git a/vm/compiler/codegen/x86/pcg/LowerALU.cpp b/vm/compiler/codegen/x86/pcg/LowerALU.cpp
index e0cd95c..7dc5251 100644
--- a/vm/compiler/codegen/x86/pcg/LowerALU.cpp
+++ b/vm/compiler/codegen/x86/pcg/LowerALU.cpp
@@ -277,6 +277,34 @@ void dvmCompilerPcgTranslateFloat (CompilationUnitPCG *cUnit, MIR *mir, const ch
     dvmCompilerPcgSetVirtualReg (cUnit, ssaRep->defs[0], "movss1", 4, op);
 }
 
+void dvmCompilerPcgTranslateRemFloat (CompilationUnitPCG *cUnit, MIR *mir)
+{
+    //Get the SSARepresentation
+    SSARepresentation *ssaRep = mir->ssaRep;
+
+    assert (ssaRep != 0);
+
+    CGInst A = dvmCompilerPcgGetVirtualReg (cUnit, ssaRep->uses[0], "movss1", 4);
+    CGInst B = dvmCompilerPcgGetVirtualReg (cUnit, ssaRep->uses[1], "movss1", 4);
+    CGInst ret = dvmCompilerPcgGenerateX86Call(cUnit, "fmodf", FPreg32, 2, VXreg32, A, VXreg32, B);
+    ret = CGCreateNewInst ("movf2ss1", "r", ret);
+    dvmCompilerPcgSetVirtualReg (cUnit, ssaRep->defs[0], "movss1", 4, ret);
+}
+
+void dvmCompilerPcgTranslateRemDouble (CompilationUnitPCG *cUnit, MIR *mir)
+{
+    //Get the SSARepresentation
+    SSARepresentation *ssaRep = mir->ssaRep;
+
+    assert (ssaRep != 0);
+
+    CGInst A = dvmCompilerPcgGetVirtualReg (cUnit, ssaRep->uses[0], "movsd1", 8);
+    CGInst B = dvmCompilerPcgGetVirtualReg (cUnit, ssaRep->uses[2], "movsd1", 8);
+    CGInst ret = dvmCompilerPcgGenerateX86Call(cUnit, "fmod", FPreg64, 2, DPVXreg64, A, DPVXreg64, B);
+    ret = CGCreateNewInst ("movf2sd1", "r", ret);
+    dvmCompilerPcgSetVirtualReg (cUnit, ssaRep->defs[0], "movsd1", 8, ret);
+}
+
 void dvmCompilerPcgTranslateDouble (CompilationUnitPCG *cUnit, MIR *mir, const char *opcode)
 {
     //Get the SSARepresentation
diff --git a/vm/compiler/codegen/x86/pcg/LowerALU.h b/vm/compiler/codegen/x86/pcg/LowerALU.h
index aa9ddf4..26e4b35 100644
--- a/vm/compiler/codegen/x86/pcg/LowerALU.h
+++ b/vm/compiler/codegen/x86/pcg/LowerALU.h
@@ -105,6 +105,21 @@ void dvmCompilerPcgTranslateLLregShift (CompilationUnitPCG *cUnit, MIR *mir, con
 void dvmCompilerPcgTranslateFloat (CompilationUnitPCG *cUnit, MIR *mir, const char *opcode);
 
 /**
+ * @brief Translate OP_REM_FLOAT
+ * @param cUnit the CompilationUnitPCG
+ * @param mir the MIR instruction
+ * @return the result
+ */
+void dvmCompilerPcgTranslateRemFloat (CompilationUnitPCG *cUnit, MIR *mir);
+
+/**
+ * @brief Translate OP_REM_DOUBLE
+ * @param cUnit the CompilationUnitPCG
+ * @param mir the MIR instruction
+ * @return the result
+ */
+void dvmCompilerPcgTranslateRemDouble (CompilationUnitPCG *cUnit, MIR *mir);
+/**
  * @brief Translate a 2addr or 3addr double
  * @param cUnit the CompilationUnitPCG
  * @param mir the MIR instruction
diff --git a/vm/compiler/codegen/x86/pcg/Utility.cpp b/vm/compiler/codegen/x86/pcg/Utility.cpp
index 1be446f..9034b60 100644
--- a/vm/compiler/codegen/x86/pcg/Utility.cpp
+++ b/vm/compiler/codegen/x86/pcg/Utility.cpp
@@ -48,6 +48,14 @@ static const char *getCallOpcodeAndRreg (pcgDtype dtype, const char **rregPtr)
             *rregPtr = "";
             return "call";
 
+        case FPreg32:
+            *rregPtr = "st";
+            return "f32call";
+
+        case FPreg64:
+            *rregPtr = "st";
+            return "f64call";
+
         default:
             break;
     }
@@ -87,6 +95,16 @@ int32_t dvmCompilerPcgGetOpcodeAndSizeForDtype (pcgDtype dtype, const char **opc
             size = 8;
             break;
 
+        case FPreg32:
+            pcgOpcode = "f32mov";
+            size = 4;
+            break;
+
+        case FPreg64:
+            pcgOpcode = "f64mov";
+            size = 8;
+            break;
+
         default:
             ALOGE ("\n+++ PCG ERROR +++ Unexpected data type seen : %d.",
                   dtype);
@@ -449,10 +467,6 @@ bool dvmCompilerPcgSupportTrace (CompilationUnit *cUnit)
 
             switch (dalvikOpCode)
             {
-                case OP_REM_FLOAT:
-                case OP_REM_DOUBLE:
-                case OP_REM_FLOAT_2ADDR:
-                case OP_REM_DOUBLE_2ADDR:
                 case OP_BREAKPOINT:
                 case OP_THROW_VERIFICATION_ERROR:
                 case OP_INVOKE_OBJECT_INIT_RANGE:
-- 
1.7.4.1

