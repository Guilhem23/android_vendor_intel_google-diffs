From ee417e8a9991dddb298e43be9a013e9aeb4b8f4b Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Wed, 12 Jun 2013 18:35:30 -0700
Subject: Dalvik: Reordering BasicBlocks for Traces

BZ: 115733

The patch augments reordering for traces instead of only handling loops.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I665f42114789ee3a0f507d621e03411da865640a
Orig-MCG-Change-Id: Ic9f74a12a49e5931e257b611cf260e1809ad694a
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/BBOptimization.cpp |   63 ++++++++++++++++++++++++++++++++++++++--
 vm/compiler/LoopOpt.cpp        |    2 +-
 2 files changed, 61 insertions(+), 4 deletions(-)

diff --git a/vm/compiler/BBOptimization.cpp b/vm/compiler/BBOptimization.cpp
index 957e763..5751d05 100644
--- a/vm/compiler/BBOptimization.cpp
+++ b/vm/compiler/BBOptimization.cpp
@@ -1093,21 +1093,78 @@ static void reorderHelper (CompilationUnit *cUnit, BasicBlock *bb)
     //Recursive
     reorderHelper (cUnit, childFirst);
     reorderHelper (cUnit, childSecond);
+
+    //If ever there are successor blocks, handle them now
+    if (bb->successorBlockList.blockListType != kNotUsed)
+    {
+        //Iterator on the successor blocks
+        GrowableListIterator iterator;
+        dvmGrowableListIteratorInit(&bb->successorBlockList.blocks, &iterator);
+
+        while (true)
+        {
+            //Get the next successor
+            SuccessorBlockInfo *successorBlockInfo = (SuccessorBlockInfo *) dvmGrowableListIteratorNext(&iterator);
+
+            if (successorBlockInfo == NULL)
+            {
+                break;
+            }
+
+            //Get the destination block
+            BasicBlock *destBlock = successorBlockInfo->block;
+
+            //Recursive on this successor
+            reorderHelper (cUnit, destBlock);
+        }
+    }
 }
 
 void dvmCompilerReorder (CompilationUnit *cUnit, Pass *pass)
 {
+    BasicBlock *start = 0;
+
+    //Iterate through them
+    GrowableListIterator bbiterator;
+    dvmGrowableListIteratorInit (&cUnit->blockList, &bbiterator);
+
+    while (true)
+    {
+        //Get next element
+        BasicBlock *bbscan = (BasicBlock *) dvmGrowableListIteratorNext (&bbiterator);
+        if (bbscan == NULL)
+        {
+            break;
+        }
+
+        //If we found the entry block
+        if (bbscan->blockType == kEntryBlock)
+        {
+            start = bbscan;
+            break;
+        }
+    }
+
+    //If no start, bail
+    if (start == 0)
+    {
+        return;
+    }
+
     //First let us reset the block list
     dvmClearGrowableList (& (cUnit->blockList));
 
-    //Paranoid
-    assert (cUnit->tempBlockV != 0);
+    //If we don't have a tempBlockV, create it now
+    if (cUnit->tempBlockV == 0)
+    {
+        cUnit->tempBlockV = dvmCompilerAllocBitVector (1, true);
+    }
 
     //Clear tempBlockV
     dvmClearAllBits (cUnit->tempBlockV);
 
     //Now go through the BasicBlocks DFS with a twist for the loops
-    reorderHelper (cUnit, cUnit->entryBlock);
+    reorderHelper (cUnit, start);
 
     //Finally, if we have the puntBlock add it
     if (cUnit->puntBlock != 0)
diff --git a/vm/compiler/LoopOpt.cpp b/vm/compiler/LoopOpt.cpp
index 487e776..43b2374 100644
--- a/vm/compiler/LoopOpt.cpp
+++ b/vm/compiler/LoopOpt.cpp
@@ -93,7 +93,7 @@ START_PASSES
                 0, 0, dvmCompilerFixChainingCellPredecessors, 0, kOptimizationBasicBlockChange),
     NEW_PASS ("Insert_Prebackward_Block", kAllNodesAndNew, 0, 0,
                     0, dvmCompilerInsertPreBackward, 0, 0, kOptimizationBasicBlockChange),
-    NEW_PASS ("Reorder_Blocks", kBreadthFirstTraversal, 0, dvmCompilerTraceIsLoop,
+    NEW_PASS ("Reorder_Blocks", kBreadthFirstTraversal, 0, 0,
                 dvmCompilerReorder, 0, 0, 0, kOptimizationBasicBlockChange),
 
     /* Last element must have and be the only one to have a NULL name, it's our ending check */
-- 
1.7.4.1

