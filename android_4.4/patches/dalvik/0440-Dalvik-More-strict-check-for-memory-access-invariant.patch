From cd0a4562769a3df8fd9529420ffa62547df208f6 Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Thu, 9 Jan 2014 17:02:13 +0700
Subject: Dalvik: More strict check for memory access invariant

BZ: 160411

Current implementation of detection invariant for removal checks that if
setter is candidate for removal then all previous memory accessors should
be invariants as well. However it is not enough.

If in the loop we do
    a[5]=1
    ...
    a[i]=y
then we cannot sink a[5]=1 out of the loop because on iteration when i == 6
a[5]=1 should re-write the value y assigned to a[5] on previous iteration
while if we sink such invariant we will not re-write the array element.

to fix the issue we reject invariant removal if there are other accesses to
the similar element in the loop.

Change-Id: Iea12326b588858edb1f194bad07b21cccbe541fe
Category: device enablement
Domain: AOSP.Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, need rework
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/InvariantRemoval.cpp |   17 +++++++----------
 1 files changed, 7 insertions(+), 10 deletions(-)

diff --git a/vm/compiler/InvariantRemoval.cpp b/vm/compiler/InvariantRemoval.cpp
index 1fce6ad..1dcecfa 100644
--- a/vm/compiler/InvariantRemoval.cpp
+++ b/vm/compiler/InvariantRemoval.cpp
@@ -67,19 +67,16 @@ static bool usesAreInChosen (CompilationUnit *cUnit, std::map<MIR *, bool> &chos
         }
     }
 
-    //If it is a setter we need to ensure that all previous accesses (in reality setters)
-    //to the same memory location are also chosen. We do it by iterating previous MIRs with
-    //the same color (instructions potentially working with the same area).
+    //If it is a setter we need to ensure that there is no other accesses to the same area in the loop
+    //Our coloring is not perfect and it will detect that access to the same array has the same color
+    //As a result two aput bytecodes where the first one is invariant but the second one is not
+    //can have the same color but the first one can update array element after it is updated by second one
+    //so it cannot be sinked
     if (isSetter == true)
     {
-        for (MIR *prev = mir->color.prev; prev != 0; prev = prev->color.prev)
+        if (mir->color.prev != 0 || mir->color.next != 0)
         {
-            //It must be in the chosen
-            if (chosen.find (prev) == chosen.end ())
-            {
-                //Wasn't there when we looked for it
-                return false;
-            }
+            return false;
         }
     }
 
-- 
1.7.4.1

