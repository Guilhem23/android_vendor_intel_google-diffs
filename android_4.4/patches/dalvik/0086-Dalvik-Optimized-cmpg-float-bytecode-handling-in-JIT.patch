From 0d8ebcde7caf8f22c85b76d6d7b75b9832e0878a Mon Sep 17 00:00:00 2001
From: Binusha B <b.binusha@intel.com>
Date: Mon, 25 Feb 2013 14:59:19 +0530
Subject: Dalvik: Optimized cmpg-float bytecode handling in JIT.

BZ: 61782

This patch eliminates the need for conditional moves in cmpg-float JIT implementation
and generates a better code sequence by changing the control flow. Currently cmpg-float
is implemented by moving {-1,0,1} depending on the comparison resulting in {<,=,>} respectively
and it also returns a +1 if one of the parameters is NaN. This is inefficient as only one path
will be taken at any time.This patch uses control flow instead of cmoves to move {-1,0,1}.

Added the same change for cmpg-double bytecode JIT implementation in this patch.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I48d352ee85d81350e8250461511e4467c14e3bc7
Orig-MCG-Change-Id: I01265ff1c530f7f2be41778bc4c6e3b4ecf87d19
Signed-off-by: Binusha B <b.binusha@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 tests/intel-005-cmpg-float-controflow/expected.txt |   10 ++
 tests/intel-005-cmpg-float-controflow/info.txt     |    7 ++
 .../intel-005-cmpg-float-controflow/src/Main.java  |   71 ++++++++++++++++
 vm/compiler/codegen/x86/BytecodeVisitor.cpp        |   15 +---
 vm/compiler/codegen/x86/LowerAlu.cpp               |   88 ++++++++++++--------
 5 files changed, 145 insertions(+), 46 deletions(-)
 create mode 100644 tests/intel-005-cmpg-float-controflow/expected.txt
 create mode 100644 tests/intel-005-cmpg-float-controflow/info.txt
 create mode 100644 tests/intel-005-cmpg-float-controflow/src/Main.java

diff --git a/tests/intel-005-cmpg-float-controflow/expected.txt b/tests/intel-005-cmpg-float-controflow/expected.txt
new file mode 100644
index 0000000..85b678c
--- /dev/null
+++ b/tests/intel-005-cmpg-float-controflow/expected.txt
@@ -0,0 +1,10 @@
+c1 = 3.5758948E9
+
+c2 = 3.5758948E9
+
+c3 = 3.5758948E9
+
+c4 = 3.5758948E9
+
+c5 = 3.5758948E9
+
diff --git a/tests/intel-005-cmpg-float-controflow/info.txt b/tests/intel-005-cmpg-float-controflow/info.txt
new file mode 100644
index 0000000..ff03564
--- /dev/null
+++ b/tests/intel-005-cmpg-float-controflow/info.txt
@@ -0,0 +1,7 @@
+This test does the comparison of "a" and "b" of type 'float' in the following cases:
+1.a < b
+2.a = b
+3.a > b
+4.a is NaN
+5.b is NaN
+Output : Prints error message to standard O/P stream if expected value of "d" (20/21/22/23 for <,>,=,NaN respectively)is not found while comparison inside the for loops, else it will print the values of c1, c2, c3, c4 and c5 as in expected.txt
diff --git a/tests/intel-005-cmpg-float-controflow/src/Main.java b/tests/intel-005-cmpg-float-controflow/src/Main.java
new file mode 100644
index 0000000..6ec89f5
--- /dev/null
+++ b/tests/intel-005-cmpg-float-controflow/src/Main.java
@@ -0,0 +1,71 @@
+class Main{
+    static int cmpgfloat(float a, float b){
+        if (a<b)
+            return 20;
+        else if(a>b)
+            return 21;
+        else if (a==b)
+            return 22;
+        else
+            return 23;
+    }
+    public static void main (String[] args){
+        float a=0.0F,b=0.0F,c1=0.0F,c2=0.0F,c3=0.0F,c4=0.0F,c5=0.0F;
+        int d=0;
+        a=30.0F;
+        b=40.0F;
+            for (int i=0;i<7000000;i++){
+                d=cmpgfloat(a,b);
+                if (d!=20)
+                    System.out.println("error in less" +"\n" );
+                else
+                    c1=c1+500.0F;
+            }
+        System.out.println("c1 = " + c1+ "\n" );
+
+        a=40.0F;
+        b=40.0F;
+            for (int i=0;i<7000000;i++){
+                d=cmpgfloat(a,b);
+                if (d!=22)
+                    System.out.println("equal error" +"\n" );
+                else
+                    c2=c2+500.0F;
+            }
+        System.out.println("c2 = " + c2 + "\n" );
+
+        a=40.0F;
+        b=30.0F;
+            for (int i=0;i<7000000;i++){
+                d=cmpgfloat(a,b);
+                if (d!=21)
+                    System.out.println("greater than error" +"\n" );
+                else
+                    c3=c3+500.0F;
+            }
+        System.out.println("c3 = " + c3+ "\n" );
+
+        a=0.0F/0.0F;
+        b=30.0F;
+            for (int i=0;i<7000000;i++){
+                d=cmpgfloat(a,b);
+                if (d!=23)
+                    System.out.println("NaN error" +"\n" );
+                else
+                    c4=c4+500.0F;
+            }
+        System.out.println("c4 = " + c4+ "\n" );
+
+        b=0.0F/0.0F;
+        a=30.0F;
+            for (int i=0;i<7000000;i++){
+                d=cmpgfloat(a,b);
+                if (d!=23)
+                    System.out.println("NaN error" +"\n" );
+                else
+                    c5=c5+500.0F;
+            }
+        System.out.println("c5 = " + c5+ "\n" );
+
+    }
+}
diff --git a/vm/compiler/codegen/x86/BytecodeVisitor.cpp b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
index feea9ee..a241654 100644
--- a/vm/compiler/codegen/x86/BytecodeVisitor.cpp
+++ b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
@@ -1750,7 +1750,7 @@ int getVirtualRegInfo(VirtualRegInfo* infoArray, const MIR * currentMIR) {
         num_regs_per_bytecode = 3;
         num_entry = 2;
         infoArray[num_entry].regNum = vA; //define
-        infoArray[num_entry].refCount = 1;
+        infoArray[num_entry].refCount = 3;
         infoArray[num_entry].accessType = REGACCESS_D;
         infoArray[num_entry].physicalType = LowOpndRegType_gp;
         break;
@@ -5525,17 +5525,8 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
         infoArray[0].regNum = 1;
         infoArray[0].refCount = 2;
         infoArray[0].physicalType = LowOpndRegType_xmm;
-        infoArray[1].regNum = 1;
-        infoArray[1].refCount = 2;
-        infoArray[1].physicalType = LowOpndRegType_gp;
-        infoArray[2].regNum = 2;
-        infoArray[2].refCount = 3;
-        infoArray[2].physicalType = LowOpndRegType_gp;
-        infoArray[3].regNum = 3;
-        infoArray[3].refCount = 5;
-        infoArray[3].physicalType = LowOpndRegType_gp;
-        return 4;
-        break;
+        return 1;
+
     case OP_CMPG_DOUBLE:
         infoArray[0].regNum = 1;
         infoArray[0].refCount = 2;
diff --git a/vm/compiler/codegen/x86/LowerAlu.cpp b/vm/compiler/codegen/x86/LowerAlu.cpp
index 9a2f5aa..6834759 100644
--- a/vm/compiler/codegen/x86/LowerAlu.cpp
+++ b/vm/compiler/codegen/x86/LowerAlu.cpp
@@ -2246,7 +2246,7 @@ int op_cmpl_float(const MIR * mir) {
 }
 
 /**
- * @brief Generate native code for bytecode cmpg-float
+ * @brief Generate native code for bytecode "cmpg-float vAA, vBB, vCC
  * @param mir bytecode representation
  * @return value >= 0 when handled
  */
@@ -2255,20 +2255,43 @@ int op_cmpg_float(const MIR * mir) {
     u2 vA = mir->dalvikInsn.vA;
     u4 v1 = mir->dalvikInsn.vB;
     u4 v2 = mir->dalvikInsn.vC;
-    get_VR_ss(v1, 1, false);
-    compare_VR_ss_reg(v2, 1, false);
-    move_imm_to_reg(OpndSize_32, 0, 1, false);
-    move_imm_to_reg(OpndSize_32, 1, 2, false);
-    //default: 0xffffffff??
-    move_imm_to_reg(OpndSize_32, 0xffffffff, 3, false);
-    conditional_move_reg_to_reg(OpndSize_32, Condition_Z,
-                                1, false, 3, false);
-    //finalNaN: unordered
-    conditional_move_reg_to_reg(OpndSize_32, Condition_P,
-                                2, false, 3, false);
-    conditional_move_reg_to_reg(OpndSize_32, Condition_A,
-                                2, false, 3, false);
-    set_virtual_reg(vA, OpndSize_32, 3, false);
+
+    //Operands are reversed here. Comparing vCC and vBB
+    get_VR_ss(v2, 1, false);
+    compare_VR_ss_reg(v1, 1, false);
+
+    rememberState(1);
+
+    //if vCC > vBB, jump to label ".cmp_float_less"
+    conditional_jump(Condition_A, ".cmp_float_less", true);
+
+    //if vCC < vBB, jump to label ".cmp_float_greater". Handles < and NaN
+    conditional_jump(Condition_B, ".cmp_float_greater", true);
+
+    //if vCC = vBB, move 0 to vAA
+    set_VR_to_imm(vA, OpndSize_32, 0);
+
+    rememberState(2);
+    unconditional_jump(".cmp_float_done", true);
+
+    // if vCC < vBB, i.e (if vBB > vCC) or if one of the operand is a NaN,  move +1 to vAA
+    if (insertLabel(".cmp_float_greater", true) == -1)
+       return -1;
+    goToState(1);
+    set_VR_to_imm(vA, OpndSize_32, 1);
+    transferToState(2);
+    unconditional_jump(".cmp_float_done", true);
+
+    // if vCC > vBB, i.e (if vBB < vCC), move -1 to vAA
+    if (insertLabel(".cmp_float_less", true) == -1)
+       return -1;
+    goToState(1);
+    set_VR_to_imm(vA, OpndSize_32, 0xffffffff);
+    transferToState(2);
+
+    //cmpg_float handling over
+    if (insertLabel(".cmp_float_done", true) == -1)
+       return -1;
     return 0;
 }
 
@@ -2301,7 +2324,7 @@ int op_cmpl_double(const MIR * mir) {
 }
 
 /**
- * @brief Generate native code for bytecode "cmpg-double vAA, vBB, vCC"
+ * @brief Generate native code for bytecode cmpg-double vAA, vBB, vCC
  * @param mir bytecode representation
  * @return value >= 0 when handled
  */
@@ -2310,45 +2333,42 @@ int op_cmpg_double(const MIR * mir) {
     u2 vA = mir->dalvikInsn.vA;
     u4 v1 = mir->dalvikInsn.vB;
     u4 v2 = mir->dalvikInsn.vC;
-    get_VR_sd(v1, 1, false);
 
-    //compare vBB and vCC
-    compare_VR_sd_reg(v2, 1, false);
+    //Operands are reversed here. Comparing vCC and vBB
+    get_VR_sd(v2, 1, false);
+    compare_VR_sd_reg(v1, 1, false);
 
     rememberState(1);
 
-    //if vBB == vCC or any of the operand is a NaN, jump to label ".cmp_double_equal_or_NaN"
-    conditional_jump(Condition_Z,".cmp_double_equal_or_NaN",true);
+    //if vCC > vBB, jump to label ".cmp_double_less"
+    conditional_jump(Condition_A, ".cmp_double_less", true);
 
-    //if vBB < vCC, jump to label ".cmp_double_less"
-    conditional_jump(Condition_B,".cmp_double_less",true);
+    //if vCC < vBB, jump to label ".cmp_double_greater". Handles < and NaN
+    conditional_jump(Condition_B, ".cmp_double_greater", true);
 
-    if (insertLabel(".cmp_double_NaN_or_greater",true) == -1)
-       return -1;
-    //sets vAA to +1 for all the other cases (including NaN)
-    set_VR_to_imm(vA, OpndSize_32, 1);
+    //if vCC = vBB, move 0 to vAA
+    set_VR_to_imm(vA, OpndSize_32, 0);
 
     rememberState(2);
     unconditional_jump(".cmp_double_done", true);
 
-    //if equal, move 0 to vAA. if NaN, jump to label ".cmp_double_NaN_or_greater"
-    if (insertLabel(".cmp_double_equal_or_NaN",true) == -1)
+    // if vCC < vBB, i.e (if vBB > vCC) or if one of the operand is a NaN, move +1 to vAA
+    if (insertLabel(".cmp_double_greater", true) == -1)
        return -1;
-    conditional_jump(Condition_P,".cmp_double_NaN_or_greater",true);
     goToState(1);
-    set_VR_to_imm(vA, OpndSize_32, 0);
+    set_VR_to_imm(vA, OpndSize_32, 1);
     transferToState(2);
     unconditional_jump(".cmp_double_done", true);
 
-    //if less than, move -1 to vAA
-    if (insertLabel(".cmp_double_less",true) == -1)
+    // if vCC > vBB, i.e (if vBB < vCC), move -1 to vAA
+    if (insertLabel(".cmp_double_less", true) == -1)
        return -1;
     goToState(1);
     set_VR_to_imm(vA, OpndSize_32, 0xffffffff);
     transferToState(2);
 
     //cmpg_double handling over
-    if (insertLabel(".cmp_double_done",true) == -1)
+    if (insertLabel(".cmp_double_done", true) == -1)
        return -1;
     return 0;
 }
-- 
1.7.4.1

