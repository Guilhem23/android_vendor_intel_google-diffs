From d9127c56617318638c081bbe4cb7e96ba701d3b0 Mon Sep 17 00:00:00 2001
From: wangzuo <zuo.wang@intel.com>
Date: Thu, 10 Oct 2013 20:21:00 -0400
Subject: Dalvik: Fix the klocwork issue for the TLA patch

BZ: 145112

1. Fix the two klocwork issues (#121385 and #121386) for TLA patch (129136)
in which there is potential risk to use NULL pointer.
2. Change "THREADLOCALALLOCATOR_H_" to "DALVIK_ALLOC_THREADLOCALALLOCATOR_H_"
to confirm with the dalvik convention

Category: device-enablement
Domain: AOSP-Dalvik-GC
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ieaccc8beb1dd536bec30791b08dcc71a29e28afd
Orig-MCG-Change-Id: Iabc0edbf74f3191c6ea982eb62de1937e90fc088
Signed-off-by: Wang Zuo <zuo.wang@intel.com>
Reviewed-on: http://android.intel.com:8080/137843
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: He, Yunan <yunan.he@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Popov, Ivan G <ivan.g.popov@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/alloc/HeapSource.cpp         |   48 ++++++++++++++++++++++-----------------
 vm/alloc/ThreadLocalAllocator.h |    4 +-
 2 files changed, 29 insertions(+), 23 deletions(-)

diff --git a/vm/alloc/HeapSource.cpp b/vm/alloc/HeapSource.cpp
index 9807907..9743045 100644
--- a/vm/alloc/HeapSource.cpp
+++ b/vm/alloc/HeapSource.cpp
@@ -382,26 +382,29 @@ void dvmCountFreeForSmallObject(void* ptr, u4 objectNum, u4 delta)
     //Get the heap
     Heap* heap = ptr2heap(gHs, ptr);
 
-    //If we have enough space, we can reduce its allocated bytes
-    if (delta < heap->bytesAllocated)
+    if (heap != 0)
     {
-        heap->bytesAllocated -= delta;
-    }
-    else
-    {
-        //Otherwise set it to 0
-        heap->bytesAllocated = 0;
-    }
+        //If we have enough space, we can reduce its allocated bytes
+        if (heap->bytesAllocated > delta)
+        {
+            heap->bytesAllocated -= delta;
+        }
+        else
+        {
+            //Otherwise set it to 0
+            heap->bytesAllocated = 0;
+        }
 
-    //If we still have enough objects, reduce it
-    if (heap->objectsAllocated > objectNum)
-    {
-        heap->objectsAllocated -= objectNum;
-    }
-    else
-    {
-        //Otherwise set it to 0
-        heap->objectsAllocated = 0;
+        //If we still have enough objects, reduce it
+        if (heap->objectsAllocated > objectNum)
+        {
+            heap->objectsAllocated -= objectNum;
+        }
+        else
+        {
+            //Otherwise set it to 0
+            heap->objectsAllocated = 0;
+        }
     }
 }
 
@@ -413,9 +416,12 @@ void dvmCountAllocationForSmallObject(void * ptr, u4 objectNum, u4 delta)
     //Now get the heap
     Heap* heap = ptr2heap(gHs, ptr);
 
-    //Add bytes and objects for it
-    heap->bytesAllocated += delta;
-    heap->objectsAllocated += objectNum;
+    if (heap != 0)
+    {
+        //Add bytes and objects for it
+        heap->bytesAllocated += delta;
+        heap->objectsAllocated += objectNum;
+    }
 
     //Unock mutex for the heap
     dvmUnlockHeap();
diff --git a/vm/alloc/ThreadLocalAllocator.h b/vm/alloc/ThreadLocalAllocator.h
index 8200762..bd5fa23 100644
--- a/vm/alloc/ThreadLocalAllocator.h
+++ b/vm/alloc/ThreadLocalAllocator.h
@@ -14,8 +14,8 @@
  * limitations under the License.
  */
 
-#ifndef THREADLOCALALLOCATOR_H_
-#define THREADLOCALALLOCATOR_H_
+#ifndef DALVIK_ALLOC_THREADLOCALALLOCATOR_H_
+#define DALVIK_ALLOC_THREADLOCALALLOCATOR_H_
 
 #include "alloc/DlMalloc.h"
 
-- 
1.7.4.1

