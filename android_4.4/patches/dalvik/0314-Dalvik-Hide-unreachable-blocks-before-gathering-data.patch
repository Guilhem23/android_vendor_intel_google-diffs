From 3e07fb2524f7b79f731fe473b954ccc28874874e Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Tue, 13 Aug 2013 17:43:03 +0700
Subject: Dalvik: Hide unreachable blocks before gathering dataflow

BZ: 130429

Dataflow analysis is very sensitive to unreachable blocks because
it uses dataflow dispatcher to iterate over basic blocks.

So unreachable blocks should be hidden before data flow analysis.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I4fcfb641cdf6b110681d9bade019f731b1733b29
Orig-MCG-Change-Id: I3ee27e868cc14c2d856f5d3db1f9a43c9af77572
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Reviewed-on: http://android.intel.com:8080/125228
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 vm/compiler/LoopOpt.cpp           |    2 --
 vm/compiler/SSATransformation.cpp |    5 +++++
 2 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/vm/compiler/LoopOpt.cpp b/vm/compiler/LoopOpt.cpp
index 4b51505..3ef15fd 100644
--- a/vm/compiler/LoopOpt.cpp
+++ b/vm/compiler/LoopOpt.cpp
@@ -74,8 +74,6 @@ START_PASSES
     NEW_PASS ("Merge_Blocks", kAllNodes, 0, 0,
                 0, 0, dvmCompilerMergeBasicBlocks, 0,
                 kOptimizationBasicBlockChange | kLoopStructureChange | kOptimizationNeedIterative),
-    NEW_PASS ("Remove_unreachable_blocks", kAllNodes, 0, 0,
-                0, 0, dvmCompilerRemoveUnreachableBlocks, 0, kOptimizationBasicBlockChange | kOptimizationNeedIterative),
     NEW_PASS ("Memory_Aliasing", kAllNodes, 0, dvmCompilerVerySimpleLoopGate,
               0, 0, dvmCompilerMemoryAliasing, 0, 0),
     NEW_PASS ("Local_Value_Numbering", kAllNodes, 0, dvmCompilerVerySimpleLoopGate,
diff --git a/vm/compiler/SSATransformation.cpp b/vm/compiler/SSATransformation.cpp
index 5a09ab9..e9b4834 100644
--- a/vm/compiler/SSATransformation.cpp
+++ b/vm/compiler/SSATransformation.cpp
@@ -23,6 +23,7 @@
 #include "Loop.h"
 #include "libdex/DexOpcodes.h"
 #include "SSAWalkData.h"
+#include "BBOptimization.h"
 
 /* Enter the node to the dfsOrder list then visit its successors */
 static void recordDFSPreOrder(CompilationUnit *cUnit, BasicBlock *block)
@@ -1007,6 +1008,10 @@ bool dvmCompilerCalculateBasicBlockInformation (CompilationUnit *cUnit, bool fil
     //Calculate Predecessors
     dvmCompilerCalculatePredecessors (cUnit);
 
+    // Hide all unreachable blocks
+    dvmCompilerDataFlowAnalysisDispatcher (cUnit,
+            dvmCompilerRemoveUnreachableBlocks, kAllNodes, true);
+
     //Get the used elements
     //First allocate if necessary
     if (cUnit->usedVRs == 0)
-- 
1.7.4.1

