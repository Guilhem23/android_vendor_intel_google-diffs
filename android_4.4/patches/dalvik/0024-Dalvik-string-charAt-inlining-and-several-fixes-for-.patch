From f9b3691a728d358047ba037b6c08918712a1d549 Mon Sep 17 00:00:00 2001
From: Yixin Shou <yixin.shou@intel.com>
Date: Fri, 12 Oct 2012 03:36:26 -0700
Subject: Dalvik: string charAt inlining and several fixes for other inlining

BZ: 75820

This patch added charAt inlining implementation and the fix for
several other inlining implementation where register for virtual
register is wrongly modified in some scenarios.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I6c59114f07721088f8a101b53884632b98b42dbc
Orig-MCG-Change-Id: I397afb91c13a4c8d4a390c0c43db2cd7299aa6bc
Signed-off-by: Yixin Shou <yixin.shou@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/BytecodeVisitor.cpp |   19 ++++++++++++++
 vm/compiler/codegen/x86/Lower.h             |    2 +-
 vm/compiler/codegen/x86/LowerInvoke.cpp     |   35 ++++++++++++++++++++++++++-
 vm/compiler/codegen/x86/LowerJump.cpp       |    8 +++---
 4 files changed, 58 insertions(+), 6 deletions(-)

diff --git a/vm/compiler/codegen/x86/BytecodeVisitor.cpp b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
index 03601b4..d733278 100644
--- a/vm/compiler/codegen/x86/BytecodeVisitor.cpp
+++ b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
@@ -5131,6 +5131,19 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
                 infoArray[2].refCount = 2;
                 infoArray[2].physicalType = LowOpndRegType_scratch;
                 return 3;
+            case INLINE_STRING_CHARAT:
+                infoArray[0].regNum = 1;
+                infoArray[0].refCount = 7;
+                infoArray[0].physicalType = LowOpndRegType_gp;
+                infoArray[0].shareWithVR = false;
+                infoArray[1].regNum = 2;
+                infoArray[1].refCount = 7;
+                infoArray[1].physicalType = LowOpndRegType_gp;
+                infoArray[1].shareWithVR = false;
+                infoArray[2].regNum = 3;
+                infoArray[2].refCount = 2;
+                infoArray[2].physicalType = LowOpndRegType_gp;
+                return 3;
             case INLINE_STRING_FASTINDEXOF_II:
 #if defined(USE_GLOBAL_STRING_DEFS)
                 break;
@@ -5138,12 +5151,14 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
                 infoArray[0].regNum = 1;
                 infoArray[0].refCount = 14 * LOOP_COUNT;
                 infoArray[0].physicalType = LowOpndRegType_gp;
+                infoArray[0].shareWithVR = false;
                 infoArray[1].regNum = 2;
                 infoArray[1].refCount = 3 * LOOP_COUNT;
                 infoArray[1].physicalType = LowOpndRegType_gp;
                 infoArray[2].regNum = 3;
                 infoArray[2].refCount = 11 * LOOP_COUNT;
                 infoArray[2].physicalType = LowOpndRegType_gp;
+                infoArray[2].shareWithVR = false;
                 infoArray[3].regNum = 4;
                 infoArray[3].refCount = 3 * LOOP_COUNT;
                 infoArray[3].physicalType = LowOpndRegType_gp;
@@ -5165,6 +5180,7 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
                 infoArray[0].regNum = 1;
                 infoArray[0].refCount = 7;
                 infoArray[0].physicalType = LowOpndRegType_gp;
+                infoArray[0].shareWithVR = false;
                 infoArray[1].regNum = 2;
                 infoArray[1].refCount = 2;
                 infoArray[1].physicalType = LowOpndRegType_gp;
@@ -5185,6 +5201,7 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
                 infoArray[0].regNum = 1;
                 infoArray[0].refCount = 5;
                 infoArray[0].physicalType = LowOpndRegType_gp;
+                infoArray[0].shareWithVR = false;
                 infoArray[1].regNum = 2;
                 infoArray[1].refCount = 4;
                 infoArray[1].physicalType = LowOpndRegType_gp;
@@ -5220,6 +5237,7 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
                 infoArray[0].regNum = 1;
                 infoArray[0].refCount = 3;
                 infoArray[0].physicalType = LowOpndRegType_gp;
+                infoArray[0].shareWithVR = false;
                 infoArray[1].regNum = 2;
                 infoArray[1].refCount = 2;
                 infoArray[1].physicalType = LowOpndRegType_gp;
@@ -5231,6 +5249,7 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
                 infoArray[1].regNum = 2;
                 infoArray[1].refCount = 3;
                 infoArray[1].physicalType = LowOpndRegType_gp;
+                infoArray[1].shareWithVR = false;
                 infoArray[2].regNum = 3;
                 infoArray[2].refCount = 3;
                 infoArray[2].physicalType = LowOpndRegType_gp;
diff --git a/vm/compiler/codegen/x86/Lower.h b/vm/compiler/codegen/x86/Lower.h
index 9abbfe2..a6bb65a 100644
--- a/vm/compiler/codegen/x86/Lower.h
+++ b/vm/compiler/codegen/x86/Lower.h
@@ -1032,7 +1032,7 @@ int common_periodicChecks_entry();
 int common_periodicChecks4();
 int common_gotoBail();
 int common_gotoBail_0();
-int common_StringIndexOutOfBounds();
+int common_errStringIndexOutOfBounds();
 void goto_invokeArgsDone();
 
 #if defined VTUNE_DALVIK
diff --git a/vm/compiler/codegen/x86/LowerInvoke.cpp b/vm/compiler/codegen/x86/LowerInvoke.cpp
index c23ba20..25830ad 100644
--- a/vm/compiler/codegen/x86/LowerInvoke.cpp
+++ b/vm/compiler/codegen/x86/LowerInvoke.cpp
@@ -1221,6 +1221,39 @@ int op_execute_inline(const MIR * mir, bool isRange) {
             move_reg_to_mem(OpndSize_32, 1, false, offsetof(Thread, interpSave.retval), 3, false);
             move_reg_to_mem(OpndSize_32, 2, false, 4 + offsetof(Thread, interpSave.retval), 3, false);
             return 0;
+        case INLINE_STRING_CHARAT:
+            get_virtual_reg(vC, OpndSize_32, 1, false);
+            compare_imm_reg(OpndSize_32, 0, 1, false);
+            conditional_jump(Condition_NE, ".inlined_string_CharAt_arg_validate_1", true);
+            rememberState(1);
+            constVREndOfBB();
+            beforeCall("exception");
+            unconditional_jump("common_errNullObject", false);
+            goToState(1);
+            insertLabel(".inlined_string_CharAt_arg_validate_1", true);
+            get_virtual_reg(vD, OpndSize_32, 2, false);
+            compare_mem_reg(OpndSize_32, 0x14, 1, false, 2, false);
+            conditional_jump(Condition_L, ".inlined_string_CharAt_arg_validate_2", true);
+            rememberState(2);
+            constVREndOfBB();
+            beforeCall("exception");
+            unconditional_jump("common_errStringIndexOutOfBounds", false);
+            goToState(2);
+            insertLabel(".inlined_string_CharAt_arg_validate_2", true);
+            compare_imm_reg(OpndSize_32, 0, 2, false);
+            conditional_jump(Condition_NS, ".do_inlined_string_CharAt", true);
+            rememberState(3);
+            constVREndOfBB();
+            beforeCall("exception");
+            unconditional_jump("common_errStringIndexOutOfBounds", false);
+            goToState(3);
+            insertLabel(".do_inlined_string_CharAt", true);
+            alu_binary_mem_reg(OpndSize_32, add_opc, 0x10, 1, false, 2, false);
+            move_mem_to_reg(OpndSize_32, 0x8, 1, false, 1, false);
+            movez_mem_disp_scale_to_reg(OpndSize_16, 1, false, offsetof(ArrayObject, contents)/*disp*/, 2, false, 2, 2, false);
+            get_self_pointer(3, false);
+            move_reg_to_mem(OpndSize_32, 2, false, offsetof(Thread, interpSave.retval), 3, false);
+            return 0;
         case INLINE_STRING_FASTINDEXOF_II:
 #if defined(USE_GLOBAL_STRING_DEFS)
             break;
@@ -1248,7 +1281,7 @@ int op_execute_inline(const MIR * mir, bool isRange) {
             compare_reg_reg(4, false, 1, false);
             conditional_jump(Condition_GE,
                              ".do_inlined_string_fastIndexof_exitfalse", true);
-            dump_mem_scale_reg(Mnemonic_LEA, OpndSize_32, 5, false, 0xc/*disp*/,
+            dump_mem_scale_reg(Mnemonic_LEA, OpndSize_32, 5, false, offsetof(ArrayObject, contents)/*disp*/,
                                6, false, 2, 5, false, LowOpndRegType_gp);
             movez_mem_disp_scale_to_reg(OpndSize_16, 5, false, 0, 1, false, 2,
                                         3, false);
diff --git a/vm/compiler/codegen/x86/LowerJump.cpp b/vm/compiler/codegen/x86/LowerJump.cpp
index 18422bc..aeabb0e 100644
--- a/vm/compiler/codegen/x86/LowerJump.cpp
+++ b/vm/compiler/codegen/x86/LowerJump.cpp
@@ -1130,20 +1130,20 @@ int common_errNullObject() {
 \brief helper function to handle string index error
 
 */
-int common_StringIndexOutOfBounds() {
-    insertLabel("common_StringIndexOutOfBounds", false);
+int common_errStringIndexOutOfBounds() {
+    insertLabel("common_errStringIndexOutOfBounds", false);
 
 #if defined VTUNE_DALVIK
     int startStreamPtr = (int)stream;
 #endif
     move_imm_to_reg(OpndSize_32, 0, PhysicalReg_EAX, true);
-    move_imm_to_reg(OpndSize_32, LstrStringIndexOutOfBoundsException, PhysicalReg_ECX, true);
+    move_imm_to_reg(OpndSize_32, (int)gDvm.exStringIndexOutOfBoundsException, PhysicalReg_ECX, true);
     unconditional_jump("common_throw", false);
 
 #if defined VTUNE_DALVIK
     if(gDvmJit.vtuneInfo != kVTuneInfoDisabled) {
         int endStreamPtr = (int)stream;
-        sendLabelInfoToVTune(startStreamPtr, endStreamPtr, "common_StringIndexOutOfBounds");
+        sendLabelInfoToVTune(startStreamPtr, endStreamPtr, "common_errStringIndexOutOfBounds");
     }
 #endif
     return 0;
-- 
1.7.4.1

