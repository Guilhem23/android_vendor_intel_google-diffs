From 3f8617224fbf11dcbe28d12ecdea938c7f9ff184 Mon Sep 17 00:00:00 2001
From: Dong-Yuan Chen <dong-yuan.chen@intel.com>
Date: Sat, 17 Aug 2013 22:17:48 -0700
Subject: Dalvik: The issue with wrongly calculated refCounts for div-by-const

BZ: 126535

The refCounts for EDX and EAX registers were wrongly calculated
for integer div-by-const code. It led to trace rejection due to
errors at registarization (negative refCount). The patch contains
valid refCount values for EAX and EDX registers (rem-int, div-int
btytecodes).

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ic3effdf39dac96a78d7f549bc35dfabcfda8e851
Orig-MCG-Change-Id: I3c034f3b2b668cd7bb0cc4b316ac1bbbcad86b86
Signed-off-by: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Reviewed-on: http://android.intel.com:8080/124913
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Semukhina, Elena V <elena.v.semukhina@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Reviewed-on: http://android.intel.com:8080/125993
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 .../codegen/x86/lightcg/BytecodeVisitor.cpp        |   12 ++++++------
 vm/compiler/codegen/x86/lightcg/LowerAlu.cpp       |   12 +++++-------
 2 files changed, 11 insertions(+), 13 deletions(-)

diff --git a/vm/compiler/codegen/x86/lightcg/BytecodeVisitor.cpp b/vm/compiler/codegen/x86/lightcg/BytecodeVisitor.cpp
index b1bd30e..5b4be5d 100644
--- a/vm/compiler/codegen/x86/lightcg/BytecodeVisitor.cpp
+++ b/vm/compiler/codegen/x86/lightcg/BytecodeVisitor.cpp
@@ -5538,9 +5538,9 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR, const u2* dal
                 infoArray[3].regNum = 1;
                 infoArray[3].physicalType = LowOpndRegType_gp;
                 if (inst_op == OP_REM_INT || inst_op == OP_REM_INT_2ADDR) {
-                    infoArray[0].refCount = 8;
-                    infoArray[1].refCount = 7;
-                    infoArray[2].refCount = 9;
+                    infoArray[0].refCount = 6;
+                    infoArray[1].refCount = 8;
+                    infoArray[2].refCount = 8;
                     infoArray[3].refCount = 3;
                     if ((tmpvalue > 0 && magic < 0) || (tmpvalue < 0 && magic > 0)) {
                         infoArray[3].refCount++;
@@ -5550,9 +5550,9 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR, const u2* dal
                         infoArray[2].refCount++;
                     }
                 }else {
-                    infoArray[0].refCount = 6;
-                    infoArray[1].refCount = 4;
-                    infoArray[2].refCount = 6;
+                    infoArray[0].refCount = 4;
+                    infoArray[1].refCount = 7;
+                    infoArray[2].refCount = 5;
                     infoArray[3].refCount = 1;
                     if ((tmpvalue > 0 && magic < 0) || (tmpvalue < 0 && magic > 0)) {
                         infoArray[3].refCount++;
diff --git a/vm/compiler/codegen/x86/lightcg/LowerAlu.cpp b/vm/compiler/codegen/x86/lightcg/LowerAlu.cpp
index 6955bb0..fca5504 100644
--- a/vm/compiler/codegen/x86/lightcg/LowerAlu.cpp
+++ b/vm/compiler/codegen/x86/lightcg/LowerAlu.cpp
@@ -840,7 +840,7 @@ int common_div_rem_int(bool isRem, int vA, int v1, int v2) {
     int divisor[2];
     int isConst = isVirtualRegConstant(v2, LowOpndRegType_gp, divisor, false);
     // For now we just use the generic code generation for division by -1
-    if (isConst > 0 && divisor[0] != -1) {
+    if (isConst == VR_IS_CONSTANT && divisor[0] != -1) {
         if (divisor[0] == 0) {
             // Division by zero: we don't need to generate the code at all.
             transferToState(2);
@@ -885,20 +885,18 @@ int common_div_rem_int(bool isRem, int vA, int v1, int v2) {
             // sarl shift, %edx
             if (shift != 0)
                 alu_binary_imm_reg(OpndSize_32, sar_opc, shift, PhysicalReg_EDX, true);
-            // mov %edx, %tmp2
+            // mov %edx, %eax
             // shrl 31, %edx
-            // add %tmp2, %edx
-            move_reg_to_reg(OpndSize_32, PhysicalReg_EDX, true, 2, false);
+            // add %edx, %eax
+            move_reg_to_reg(OpndSize_32, PhysicalReg_EDX, true, PhysicalReg_EAX, true);
             alu_binary_imm_reg(OpndSize_32, shr_opc, 31, PhysicalReg_EDX, true);
-            alu_binary_reg_reg(OpndSize_32, add_opc, 2, false, PhysicalReg_EDX, true);
+            alu_binary_reg_reg(OpndSize_32, add_opc, PhysicalReg_EDX, true, PhysicalReg_EAX, true);
 
             if (isRem == true) {
-                 //mov %edx, %eax
                  //mov v2, %tmp2
                  //imul %tmp2
                  //sub %eax, %tmp1
                  //mov %tmp1, edx
-                move_reg_to_reg(OpndSize_32, PhysicalReg_EDX, true, PhysicalReg_EAX, true);
                 move_imm_to_reg(OpndSize_32, divisor[0], 2, false);
                 alu_unary_reg(OpndSize_32, imul_opc, 2, false);
                 alu_binary_reg_reg(OpndSize_32, sub_opc, PhysicalReg_EAX, true, 1, false);
-- 
1.7.4.1

