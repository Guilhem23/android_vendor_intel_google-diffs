From 402b59513ff5385ec7a764024190cc784b1a4886 Mon Sep 17 00:00:00 2001
From: Yixin Shou <yixin.shou@intel.com>
Date: Wed, 17 Oct 2012 10:02:28 -0700
Subject: Dalvik: a fix in register allocation for wrongly modified virtual register

BZ: 75820

This patch fixed a problem in register allocation that caused the register
for virtual register is modified wrongly when two source virtual register
is the same in mul-long bytecode.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I64f39e7fb121d0952efd3f432d13da5c3c63eca1
Orig-MCG-Change-Id: I2c4edbd79ff4c885eff20ad8bb8602ec20a1631d
Signed-off-by: Yixin Shou <yixin.shou@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/AnalysisO1.cpp      |    4 +---
 vm/compiler/codegen/x86/AnalysisO1.h        |    2 ++
 vm/compiler/codegen/x86/BytecodeVisitor.cpp |   17 ++++++++++++++++-
 3 files changed, 19 insertions(+), 4 deletions(-)

diff --git a/vm/compiler/codegen/x86/AnalysisO1.cpp b/vm/compiler/codegen/x86/AnalysisO1.cpp
index 429cd28..92481b0 100644
--- a/vm/compiler/codegen/x86/AnalysisO1.cpp
+++ b/vm/compiler/codegen/x86/AnalysisO1.cpp
@@ -4500,8 +4500,6 @@ bool checkTempReg2(int reg, int type, bool isPhysical, int physicalRegForVR, u2
         if (isVirtualReg(compileTable[k].physicalType) && compileTable[k].regNum == vB) {
             if (isLastByteCodeOfLiveRange(k) || (reachEndOfBB(k) && isNextToLastAccess(k))) {
                 index = k;
-                if (physicalRegForVR >= PhysicalReg_EAX && physicalRegForVR <= PhysicalReg_EDX)
-                    return true;
             }
             break;
         }
@@ -4518,7 +4516,7 @@ bool checkTempReg2(int reg, int type, bool isPhysical, int physicalRegForVR, u2
                    reg, newType, infoByteCodeTemp[k].shareWithVR, infoByteCodeTemp[k].is8Bit);
 #endif
             if(!infoByteCodeTemp[k].is8Bit || (physicalRegForVR >= PhysicalReg_EAX && physicalRegForVR <= PhysicalReg_EDX)) {
-                if (index >= 0) return true;
+                if (index >= 0 && infoByteCodeTemp[k].shareRegWithLivenessInfo) return true;
                 return infoByteCodeTemp[k].shareWithVR;
             }
             else
diff --git a/vm/compiler/codegen/x86/AnalysisO1.h b/vm/compiler/codegen/x86/AnalysisO1.h
index ff77c07..bfa423f 100644
--- a/vm/compiler/codegen/x86/AnalysisO1.h
+++ b/vm/compiler/codegen/x86/AnalysisO1.h
@@ -229,6 +229,8 @@ typedef struct TempRegInfo {
   int linkageToVR;
   int versionNum;
   bool shareWithVR; //for temp. regs updated by get_virtual_reg
+  //! Set to TRUE to allow using VR liveness information to decide register sharing in regardless of the shareWithVR setting
+  bool shareRegWithLivenessInfo;
   bool is8Bit;
 } TempRegInfo;
 struct BasicBlock_O1;
diff --git a/vm/compiler/codegen/x86/BytecodeVisitor.cpp b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
index d733278..20ca56d 100644
--- a/vm/compiler/codegen/x86/BytecodeVisitor.cpp
+++ b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
@@ -3349,9 +3349,10 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
         infoArray[k].linkageToVR = -1;
         infoArray[k].versionNum = 0;
         infoArray[k].shareWithVR = true;
+        infoArray[k].shareRegWithLivenessInfo = true;
         infoArray[k].is8Bit = false;
     }
-    u2 vA, vB, v1, length, num, tmp;
+    u2 vA, vB, v1, v2, length, num, tmp;
     Opcode inst_op = currentMIR->dalvikInsn.opcode;
     s2 tmp_s2;
 
@@ -4929,10 +4930,24 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
 
     case OP_MUL_LONG: //general purpose register
     case OP_MUL_LONG_2ADDR:
+        if(inst_op == OP_MUL_LONG) {
+            v1 = currentMIR->dalvikInsn.vB;
+            v2 = currentMIR->dalvikInsn.vC;
+        } else {
+            v1 = currentMIR->dalvikInsn.vA;
+            v2 = currentMIR->dalvikInsn.vB;
+        }
         infoArray[0].regNum = 1;
         infoArray[0].refCount = 6;
         infoArray[0].physicalType = LowOpndRegType_gp;
         infoArray[0].shareWithVR = false;
+
+        /* shareRegWithLivenessInfo is set to TRUE only when the two source VRs are not equal for OP_MUL_LONG.
+           This is required to avoid incorrect sharing of the same physical register for virtual registers and
+           temporary registers in OP_MUL_LONG lowering when using the VR liveness information heuristic in
+           register allocation */
+        if(v1 == v2)
+            infoArray[0].shareRegWithLivenessInfo = false;
         infoArray[1].regNum = 2;
         infoArray[1].refCount = 3;
         infoArray[1].physicalType = LowOpndRegType_gp;
-- 
1.7.4.1

