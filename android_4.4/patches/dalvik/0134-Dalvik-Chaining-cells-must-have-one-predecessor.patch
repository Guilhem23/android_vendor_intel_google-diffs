From cac533d0e552244f05d1cc2578ec600ad51f9a84 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Thu, 11 Apr 2013 18:20:45 -0700
Subject: Dalvik: Chaining cells must have one predecessor

BZ: 99859

Due to current chaining cell design which updates jumps inline during chaining,
each chaining cell can only have one predecessor. This is because when a CC
has more than one predecessor, only the last jump can be chained and the rest
of the jumps remain unchained. This can affect performance in some instances
because some paths won't chain.

Since this scenario shows up as a result of some optimization passes in
Middle-end, we ensure that we always have one predecessor for each CC before
we give the CFG to the Backend.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Icb8c234ebf6d4f7f9f40d6354b89d655ebfdcf2b
Orig-MCG-Change-Id: I391d7683cff5c9adb1bfd9a21145d35b7e3fc0fd
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/BBOptimization.cpp |   63 ++++++++++++++++++++++++++++++++++++++++
 vm/compiler/BBOptimization.h   |    7 ++++
 vm/compiler/LoopOpt.cpp        |    2 +
 3 files changed, 72 insertions(+), 0 deletions(-)

diff --git a/vm/compiler/BBOptimization.cpp b/vm/compiler/BBOptimization.cpp
index ad14586..6744510 100644
--- a/vm/compiler/BBOptimization.cpp
+++ b/vm/compiler/BBOptimization.cpp
@@ -1220,3 +1220,66 @@ bool dvmCompilerConvert2addr (CompilationUnit *cUnit, BasicBlock *bb)
 
     return result;
 }
+
+bool dvmCompilerFixChainingCellPredecessors (CompilationUnit *cUnit, BasicBlock *bb)
+{
+    //Is this block a chaining cell?
+    int type = bb->blockType;
+
+    //If not, we are done
+    if (type > kChainingCellGap)
+    {
+        return false;
+    }
+
+    //Otherwise get predecessors
+    BitVector *predecessors = bb->predecessors;
+
+    //Count the number of them
+    int cnt = dvmCountSetBits (predecessors);
+
+    //If more than one, we have work
+    if (cnt <= 1)
+    {
+        return false;
+    }
+
+    //Walk them
+    BitVectorIterator bvIterator;
+    dvmBitVectorIteratorInit(bb->predecessors, &bvIterator);
+
+    //Get next index
+    int nextIdx = dvmBitVectorIteratorNext (&bvIterator);
+    while (true) {
+        //Get current index
+        int blockIdx = nextIdx;
+
+        nextIdx = dvmBitVectorIteratorNext(&bvIterator);
+
+        //We don't care about the last one, it can keep the chaining cell
+        if (nextIdx == -1)
+        {
+            break;
+        }
+
+        //Get the predecessor basic block
+        BasicBlock *predBB = (BasicBlock *) dvmGrowableListGetElement (&cUnit->blockList, blockIdx);
+
+        //Create a copy
+        BasicBlock *copy = dvmCompilerCopyBasicBlock (cUnit, bb);
+
+        //Attach it now
+        if (predBB->taken == bb)
+        {
+            predBB->taken = copy;
+        }
+
+        if (predBB->fallThrough == bb)
+        {
+            predBB->fallThrough = copy;
+        }
+    }
+
+    //Don't iterate
+    return false;
+}
diff --git a/vm/compiler/BBOptimization.h b/vm/compiler/BBOptimization.h
index 6057ed9..12e74c6 100644
--- a/vm/compiler/BBOptimization.h
+++ b/vm/compiler/BBOptimization.h
@@ -79,4 +79,11 @@ void dvmCompilerReorder (CompilationUnit *cUnit, Pass *pass);
  * @return Returns whether anything was changed in the BasicBlock.
  */
 bool dvmCompilerConvert2addr (CompilationUnit *cUnit, BasicBlock *bb);
+
+/**
+ * @brief Ensures that each chaining cell has only one predecessor.
+ * @param cUnit the CompilationUnit.
+ * @param bb The BasicBlock to look at. Anything other than chaining cells is ignored.
+ */
+bool dvmCompilerFixChainingCellPredecessors (CompilationUnit *cUnit, BasicBlock *bb);
 #endif
diff --git a/vm/compiler/LoopOpt.cpp b/vm/compiler/LoopOpt.cpp
index 77fd9b0..b71d552 100644
--- a/vm/compiler/LoopOpt.cpp
+++ b/vm/compiler/LoopOpt.cpp
@@ -78,6 +78,8 @@ START_PASSES
     NEW_PASS ("Write Back Registers", kAllNodes, 0, 0, 0, 0, dvmCompilerWriteBackAll, 0, 0),
     NEW_PASS ("Registerization ME", kAllNodes, 0, dvmCompilerRegisterizeGate,
                 0, dvmCompilerRegisterize, 0, 0, 0),
+    NEW_PASS ("Fix Chaining Cells", kAllNodes, 0, 0,
+                0, 0, dvmCompilerFixChainingCellPredecessors, 0, kOptimizationBasicBlockChange),
     NEW_PASS ("Insert Prebackward Block", kAllNodesAndNew, 0, 0,
                     0, dvmCompilerInsertPreBackward, 0, 0, kOptimizationBasicBlockChange),
     NEW_PASS ("Reorder Blocks", kBreadthFirstTraversal, 0, dvmCompilerTraceIsLoop,
-- 
1.7.4.1

