From aff03b07483335c4ce5fb4033303d72e44e1b70c Mon Sep 17 00:00:00 2001
From: Alexei Zavjalov <alexei.zavjalov@intel.com>
Date: Tue, 19 Nov 2013 16:39:44 +0700
Subject: Dalvik: Fix dead lock in dalvik/libcrash

BZ: 151287

Dead lock was due to memory allocation in dvmCreateCstrFromString routine. This
function was changed to use an static buffer.

Change-Id: Ibd24717b35c75387279fabfefa806b0e0af1bc65
Category: device enablement
Domain: AOSP.Dalvik-Other
Origin: internal
Upstream-Candidate: no, proprietary
Signed-off-by: Alexei Zavjalov <alexei.zavjalov@intel.com>
Signed-off-by: Vitaly Provodin <vitaly.a.provodin@intel.com>
---
 libcrash/ThreadInfo.cpp |   26 ++++++++++----------------
 vm/UtfString.cpp        |   17 +++++++++++++++++
 vm/UtfString.h          |    8 ++++++++
 3 files changed, 35 insertions(+), 16 deletions(-)

diff --git a/libcrash/ThreadInfo.cpp b/libcrash/ThreadInfo.cpp
index 14db2fe..adc15b1 100644
--- a/libcrash/ThreadInfo.cpp
+++ b/libcrash/ThreadInfo.cpp
@@ -19,6 +19,9 @@
 #include "Dalvik.h"
 #include "ThreadInfo.h"
 
+#define MAX_THREAD_NAME_SIZE 256
+#define MAX_GROUP_NAME_SIZE 256
+
 /*
  * @brief Extract the object that is the target of a monitor-enter instruction
  * in the top stack frame of "thread".
@@ -222,8 +225,8 @@ static void dumpThreadInfo(ts_buf *buff, Thread *thread)
     Object *threadObj;
     Object *groupObj;
     StringObject *nameStr;
-    char *threadName = 0;
-    char *groupName = 0;
+    char threadName[MAX_THREAD_NAME_SIZE];
+    char groupName[MAX_GROUP_NAME_SIZE] = {0};
     bool isDaemon;
 
     /*
@@ -242,24 +245,18 @@ static void dumpThreadInfo(ts_buf *buff, Thread *thread)
         return;
     }
 
-    nameStr = (StringObject *) dvmGetFieldObject(threadObj,
-                gDvm.offJavaLangThread_name);
-    threadName = dvmCreateCstrFromString(nameStr);
+    nameStr = (StringObject *) dvmGetFieldObject(threadObj, gDvm.offJavaLangThread_name);
+    dvmConvertStringToCstr(nameStr, threadName, MAX_THREAD_NAME_SIZE);
 
     isDaemon = dvmGetFieldBoolean(threadObj, gDvm.offJavaLangThread_daemon);
 
     /* a null value for group is not expected, but deal with it anyway */
-    groupObj = (Object *) dvmGetFieldObject(threadObj,
-                gDvm.offJavaLangThread_group);
+    groupObj = (Object *) dvmGetFieldObject(threadObj, gDvm.offJavaLangThread_group);
 
     if (groupObj != 0) {
         nameStr = (StringObject *)
             dvmGetFieldObject(groupObj, gDvm.offJavaLangThreadGroup_name);
-        groupName = dvmCreateCstrFromString(nameStr);
-    }
-
-    if (groupName == 0) {
-        groupName = strdup("(null; initializing?)");
+        dvmConvertStringToCstr(nameStr, groupName, MAX_GROUP_NAME_SIZE);
     }
 
     pthread_t handle = thread->handle;
@@ -277,7 +274,7 @@ static void dumpThreadInfo(ts_buf *buff, Thread *thread)
     writeDebugMessage(buff,
         "%p \"%s\" \"%s\" %s %d obj=%p (stack: %p) %s\n",
         thread,
-        groupName,
+        groupName[0] == '\0' ? "(null; initializing?)" : groupName,
         threadName,
         isDaemon ? " daemon" : "",
         thread->systemTid,
@@ -289,9 +286,6 @@ static void dumpThreadInfo(ts_buf *buff, Thread *thread)
         ""
 #endif
         );
-
-    free(threadName), threadName = 0;
-    free(groupName), groupName = 0;
 }
 
 void dvmDumpThreadList(ts_buf *buff)
diff --git a/vm/UtfString.cpp b/vm/UtfString.cpp
index 2307fb4..ab33767 100644
--- a/vm/UtfString.cpp
+++ b/vm/UtfString.cpp
@@ -305,6 +305,23 @@ char* dvmCreateCstrFromString(const StringObject* jstr)
     return newStr;
 }
 
+void dvmConvertStringToCstr(const StringObject* jstr, char* cstr, int lenMax)
+{
+    if (gDvm.classJavaLangString == 0 || jstr == 0 || lenMax == 0 || cstr == 0) {
+        return;
+    }
+
+    int fieldLen = dvmGetFieldInt(jstr, STRING_FIELDOFF_COUNT);
+    int offset = dvmGetFieldInt(jstr, STRING_FIELDOFF_OFFSET);
+
+    ArrayObject* chars = (ArrayObject*) dvmGetFieldObject(jstr, STRING_FIELDOFF_VALUE);
+    const u2* data = (const u2*)(void*)chars->contents + offset;
+
+    int len = MIN(fieldLen, lenMax-1);
+
+    convertUtf16ToUtf8(cstr, data, len);
+}
+
 void dvmGetStringUtfRegion(const StringObject* jstr,
         int start, int len, char* buf)
 {
diff --git a/vm/UtfString.h b/vm/UtfString.h
index 352948c..ea6d72f 100644
--- a/vm/UtfString.h
+++ b/vm/UtfString.h
@@ -126,6 +126,14 @@ StringObject* dvmCreateStringFromUnicode(const u2* unichars, int len);
 char* dvmCreateCstrFromString(const StringObject* jstr);
 
 /*
+ * @brief Convert java/lang/String object to UTF-8 C string.
+ * @param jstr pointer to an string object to convert
+ * @param cstr pointer to an C string buffer to put the converted string
+ * @param len maximum number of characters to be converted from jstr
+ */
+void dvmConvertStringToCstr(const StringObject* jstr, char* cstr, int lenMax);
+
+/*
  * Create a UTF-8 C string from a region of a java/lang/String.  (Used by
  * the JNI GetStringUTFRegion call.)
  */
-- 
1.7.4.1

