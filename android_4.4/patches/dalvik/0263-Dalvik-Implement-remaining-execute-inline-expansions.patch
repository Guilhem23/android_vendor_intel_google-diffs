From be1e6a1f2b5cbdcbbe55f71be1815313ddf2c5aa Mon Sep 17 00:00:00 2001
From: Tim Hartley <timothy.d.hartley@intel.com>
Date: Mon, 22 Jul 2013 10:43:52 +0000
Subject: Dalvik: Implement remaining execute-inline expansions in PCG GL

BZ: 125792

This patch implements all of the remaining
inlined execute-inline expansions, and allows all
of the execute-inline expansions to call their C versions.

vm/compiler/codegen/x86/pcg/Analysis.cpp
 - Added the datatype definitions and uses for each execute inline.

vm/compiler/codegen/x86/pcg/LowerCall.cpp
 - Added inline implementations for MATH_ABS_INT, MATH_ABS_LONG, MATH_ABS_FLOAT,
   and STRING_FASTINDEXOF_II.

vm/compiler/codegen/x86/pcg/Utility.cpp
 - Removed all of the gates for execute-inline bytecodes in
   dvmCompilerPcgSupportTrace.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I18f0a61124fce171b5796c3ccf53051bbfb1c1de
Orig-MCG-Change-Id: Iebac09b53c3b02fc851f163a72926eb91f763a20
Signed-off-by: Tim Hartley <timothy.d.hartley@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Reviewed-on: http://android.intel.com:8080/123673
Reviewed-by: Popov, Ivan G <ivan.g.popov@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/pcg/Analysis.cpp  |   33 ++++++
 vm/compiler/codegen/x86/pcg/LowerCall.cpp |  163 +++++++++++++++++++++++++----
 vm/compiler/codegen/x86/pcg/Utility.cpp   |   25 -----
 3 files changed, 174 insertions(+), 47 deletions(-)

diff --git a/vm/compiler/codegen/x86/pcg/Analysis.cpp b/vm/compiler/codegen/x86/pcg/Analysis.cpp
index bac6416..4f79eec 100644
--- a/vm/compiler/codegen/x86/pcg/Analysis.cpp
+++ b/vm/compiler/codegen/x86/pcg/Analysis.cpp
@@ -178,6 +178,8 @@ static bool pcgAnalyzeExecuteInline (CompilationUnitPCG *cUnit, MIR *mir)
     {
         case INLINE_STRING_LENGTH:
         case INLINE_STRING_IS_EMPTY:
+        case INLINE_MATH_ABS_INT:
+        case INLINE_STRICT_MATH_ABS_INT:
             //Paranoid
             assert (ssa->numUses > 0 && ssa->uses != 0);
             pcgRef (cUnit, ssa->uses[0], INTreg);
@@ -186,12 +188,22 @@ static bool pcgAnalyzeExecuteInline (CompilationUnitPCG *cUnit, MIR *mir)
         case INLINE_STRING_CHARAT:
         case INLINE_MATH_MAX_INT:
         case INLINE_MATH_MIN_INT:
+        case INLINE_STRICT_MATH_MAX_INT:
+        case INLINE_STRICT_MATH_MIN_INT:
             //Paranoid
             assert (ssa->numUses > 1 && ssa->uses != 0);
             pcgRef (cUnit, ssa->uses[0], INTreg);
             pcgRef (cUnit, ssa->uses[1], INTreg);
             break;
 
+        case INLINE_MATH_ABS_LONG:
+        case INLINE_STRICT_MATH_ABS_LONG:
+            //Paranoid
+            assert (ssa->numUses > 1 && ssa->uses != 0);
+            pcgRef (cUnit, ssa->uses[0], LLreg);
+            pcgRef (cUnit, ssa->uses[1], LLreg);
+            break;
+
         case INLINE_STRING_EQUALS:
         case INLINE_STRING_COMPARETO:
             //Paranoid
@@ -200,15 +212,33 @@ static bool pcgAnalyzeExecuteInline (CompilationUnitPCG *cUnit, MIR *mir)
             pcgRef (cUnit, ssa->uses[1], Any4);
             break;
 
+        case INLINE_STRING_FASTINDEXOF_II:
+            assert (ssa->numUses > 2 && ssa->uses != 0);
+            pcgRef (cUnit, ssa->uses[0], Any4);
+            pcgRef (cUnit, ssa->uses[1], Any4);
+            pcgRef (cUnit, ssa->uses[2], Any4);
+            break;
+
         case INLINE_DOUBLE_TO_RAW_LONG_BITS:
+        case INLINE_LONG_BITS_TO_DOUBLE:
+        case INLINE_DOUBLE_TO_LONG_BITS:
         case INLINE_MATH_SIN:
+        case INLINE_MATH_SQRT:
         case INLINE_MATH_COS:
+        case INLINE_STRICT_MATH_SQRT:
+        case INLINE_STRICT_MATH_ABS_DOUBLE:
             //Paranoid
             assert (ssa->numUses > 1 && ssa->uses != 0);
             pcgRef (cUnit, ssa->uses[0], Any8);
             pcgRef (cUnit, ssa->uses[1], Any8);
             break;
 
+        case INLINE_MATH_ABS_FLOAT:
+            //Paranoid
+            assert (ssa->numUses > 0 && ssa->uses != 0);
+            pcgRef (cUnit, ssa->uses[0], VXreg32);
+            break;
+
         case INLINE_MATH_ABS_DOUBLE:
             //Paranoid
             assert (ssa->numUses > 1 && ssa->uses != 0);
@@ -216,7 +246,10 @@ static bool pcgAnalyzeExecuteInline (CompilationUnitPCG *cUnit, MIR *mir)
             pcgRef (cUnit, ssa->uses[1], DPVXreg64);
             break;
 
+        case INLINE_INT_BITS_TO_FLOAT:
+        case INLINE_FLOAT_TO_INT_BITS:
         case INLINE_FLOAT_TO_RAW_INT_BITS:
+        case INLINE_STRICT_MATH_ABS_FLOAT:
             //Paranoid
             assert (ssa->numUses > 0 && ssa->uses != 0);
             pcgRef (cUnit, ssa->uses[0], Any4);
diff --git a/vm/compiler/codegen/x86/pcg/LowerCall.cpp b/vm/compiler/codegen/x86/pcg/LowerCall.cpp
index 70a1372..0932a34 100644
--- a/vm/compiler/codegen/x86/pcg/LowerCall.cpp
+++ b/vm/compiler/codegen/x86/pcg/LowerCall.cpp
@@ -311,6 +311,9 @@ void dvmCompilerPcgTranslateExecuteInline (CompilationUnitPCG *cUnit, MIR *mir)
 
     dvmCompilerPcgExportPC (cUnit);
 
+    // The purpose of returning vs breaking in this switch statement is that it
+    // *truly* inlines the implementation of these bytcodes, while bytecodes
+    // not in the switch statement simply call special functions in InlineNative.cpp
     switch (tmp) {
         case INLINE_EMPTYINLINEMETHOD:
             return;  // NOP
@@ -366,13 +369,36 @@ void dvmCompilerPcgTranslateExecuteInline (CompilationUnitPCG *cUnit, MIR *mir)
             }
 
         case INLINE_MATH_ABS_INT:
-            ALOGI ("\nunimplemented : INLINE_MATH_ABS_INT.\n");
-            exit (-1);
-            break;
+            {
+                CGInst C = dvmCompilerPcgGetVirtualReg (cUnit, ssaRep->uses[0], "mov", 4);
+                CGInst shiftedC = CGCreateNewInst ("sar", "ri", C, 31);
+                CGInst xoredC = CGCreateNewInst ("xor", "rr", C, shiftedC);
+                CGInst result = CGCreateNewInst ("sub", "rr", xoredC, shiftedC);
+                self = dvmCompilerPcgGetSelfPointer (cUnit);
+                dvmCompilerPcgCreateSimpleStore (self,
+                    offsetof (Thread, interpSave.retval), result);
+                return;
+            }
         case INLINE_MATH_ABS_LONG:
-            ALOGI ("\nunimplemented : INLINE_MATH_ABS_LONG.\n");
-            exit (-1);
-            break;
+            {
+                const char *opcode;
+                int32_t dtypeSize;
+                ssaNum = ssaRep->uses[0];
+                dtypeSize = dvmCompilerPcgGetOpcodeAndSizeForDtype (
+                    dvmCompilerPcgGetDtypeForSSANum (cUnit, ssaNum), &opcode);
+                CGInst load = dvmCompilerPcgGetVirtualReg (cUnit, ssaNum,
+                    opcode, dtypeSize);
+                CGInst shiftedLoad = CGCreateNewInst ("lsar", "ri", load, 63);
+                CGInst xoredLoad = CGCreateNewInst ("lxor", "rr", load,
+                        shiftedLoad);
+                CGInst result = CGCreateNewInst ("lsub", "rr", xoredLoad,
+                        shiftedLoad);
+                self = dvmCompilerPcgGetSelfPointer (cUnit);
+                dvmCompilerPcgCreateTypedStore (self, CGInstInvalid, 0,
+                    CGSymbolInvalid, offsetof (Thread, interpSave.retval),
+                    dvmCompilerPcgGetDtypeForSSANum(cUnit, ssaNum), result);
+                return;
+            }
 
         case INLINE_MATH_MAX_INT:
         case INLINE_MATH_MIN_INT:
@@ -388,9 +414,24 @@ void dvmCompilerPcgTranslateExecuteInline (CompilationUnitPCG *cUnit, MIR *mir)
             }
 
         case INLINE_MATH_ABS_FLOAT:
-            ALOGI ("\nunimplemented : INLINE_MATH_ABS_FLOAT.\n");
-            exit (-1);
-            break;
+            {
+                __attribute__ ( (aligned (16))) static u4 mask[4] =
+                    {0, 0, 0, 0x7fffffff};
+
+                CGInst load = dvmCompilerPcgGetVirtualReg (cUnit,
+                    ssaRep->uses[0], "movss1", 4);
+
+                CGAddr addr = CGCreateAddr (CGInstInvalid, CGInstInvalid, 0,
+                    CGSymbolInvalid, (int32_t)&mask);
+                CGInst result = CGCreateNewInst ("andps1", "rm", load, addr,
+                    16, (void*)1);
+
+                // Store the return value
+                self = dvmCompilerPcgGetSelfPointer (cUnit);
+                addr = CGCreateAddr (self, CGInstInvalid, 0, CGSymbolInvalid, offsetof (Thread, interpSave.retval));
+                CGCreateNewInst ("movss1", "mr", addr, 4, (void*)1, result);
+                return;
+            }
         case INLINE_MATH_ABS_DOUBLE:
             {
                 __attribute__ ( (aligned (16))) static u4 mask[4] = {0xffffffff, 0x7fffffff, 0, 0};
@@ -398,23 +439,106 @@ void dvmCompilerPcgTranslateExecuteInline (CompilationUnitPCG *cUnit, MIR *mir)
                 CGInst load = dvmCompilerPcgGetVirtualReg(cUnit, ssaRep->uses[0], "movsd1", 8);
                 CGAddr addr = CGCreateAddr(CGInstInvalid, CGInstInvalid, 0, CGSymbolInvalid, (int32_t)&mask);
                 CGInst result = CGCreateNewInst("andpd1", "rm", load, addr, 16, (void*)1);
+
+                // Store the return value
                 self = dvmCompilerPcgGetSelfPointer (cUnit);
                 addr = CGCreateAddr (self, CGInstInvalid, 0, CGSymbolInvalid, offsetof (Thread, interpSave.retval));
                 CGCreateNewInst ("movsd1", "mr", addr, 8, (void*)1, result);
                 return;
             }
-
         case INLINE_STRING_FASTINDEXOF_II:
-            ALOGI ("\nunimplemented : INLINE_STRING_FASTINDEXOF_II.\n");
-            exit (-1);
-            break;
-        case INLINE_INT_BITS_TO_FLOAT:
-            ALOGI ("\nunimplemented : INLINE_INT_BITS_TO_FLOAT.\n");
-            exit (-1);
-            break;
+            {
+                CGInst stringObject = dvmCompilerPcgGetVirtualReg (cUnit,
+                    ssaRep->uses[0], "mov", 4);
+
+                // Bail if the String pointer is null
+                dvmCompilerPcgGenerateSimpleNullCheck (cUnit, stringObject);
+
+                // Get the matchChar and the startIndex
+                CGInst matchChar = dvmCompilerPcgGetVirtualReg (cUnit,
+                    ssaRep->uses[1], "mov", 4);
+                CGInst startIndex = dvmCompilerPcgGetVirtualReg (cUnit,
+                    ssaRep->uses[2], "mov", 4);
+
+                // Get the string length (I think)
+                CGAddr countAddr = CGCreateAddr (stringObject,
+                    CGInstInvalid, 0, CGSymbolInvalid,
+                    gDvm.offJavaLangString_count);
+                CGInst count = CGCreateNewInst ("mov", "m", countAddr, 4,
+                    (void*)1);
+
+                // Get the offset (not sure what that is, exactly) from
+                // the StringObject reference
+                CGAddr offsetAddr = CGCreateAddr (stringObject, CGInstInvalid,
+                    0, CGSymbolInvalid, gDvm.offJavaLangString_offset);
+                CGInst offset = CGCreateNewInst ("mov", "m", offsetAddr, 4,
+                    (void*)1);
+
+                // Precalculate the "actual" value address
+                // Java chars are 2-bytes, btw
+                CGInst charsAddrPlusOffset = CGCreateNewInst ("add", "rr",
+                    stringObject, CGCreateNewInst ("mul", "ri", offset, 2));
+
+                CGInst zero = CGCreateNewInst ("mov", "i", 0);
+
+                // clamp startIndex to [0,count]
+                startIndex = CGCreateNewInst ("islcc", "rcrrr", startIndex,
+                    "slt", zero, zero, startIndex);
+                startIndex = CGCreateNewInst ("islcc", "rcrrr", startIndex,
+                    "sge", count, count, startIndex);
+
+                // Loop
+                CGLabel loopLabel = CGCreateLabel ();
+                CGLabel exitLabel = CGCreateLabel ();
+                CGLabel exitFalseLabel = CGCreateLabel ();
+
+                CGTemp loopCounterTemp = cUnit->getCurrentTemporaryVR(true);
+                CGInst loopCounter = CGCreateNewInst ("mov", "r", startIndex);
+                CGAddTempDef(loopCounterTemp, loopCounter);
+
+                CGBindLabel (loopLabel);
+
+                // Get out of the loop, when we've incremented the
+                // index past the end of the array
+                CGCreateNewInst ("cjcc", "rcrbp", CGGetTempUseInst(loopCounterTemp), "uge",
+                    count, exitFalseLabel, 0);
+
+                // Check if the indexed character is equal to the matchChar
+                CGAddr indexedCharsAddr = CGCreateAddr (charsAddrPlusOffset,
+                    CGGetTempUseInst(loopCounterTemp), 2, CGSymbolInvalid, 0);
+                CGInst indexedChar = CGCreateNewInst ("hldz", "m",
+                    indexedCharsAddr, 2, (void*)1);
+                CGCreateNewInst ("cjcc", "rcrbp", matchChar, "eq",
+                    indexedChar, exitLabel, 0);
+
+                // increment the array index and jump back to the loop label
+                CGInst newStartIndex = CGCreateNewInst ("add", "ri", CGGetTempUseInst(loopCounterTemp), 1);
+                CGAddTempDef(loopCounterTemp, newStartIndex);
+                CGCreateNewInst ("jmp", "b", loopLabel);
 
+                // Lay down the unsuccessful exit label
+                CGBindLabel (exitFalseLabel);
+
+                // Set the return value to -1 to denote not finding the char in the string
+                CGInst falseResult = CGCreateNewInst ("mov", "i", -1);
+                CGAddTempDef(loopCounterTemp, falseResult);
+
+                // Lay down the successful exit label
+                CGBindLabel (exitLabel);
+
+                // Get the return value
+                CGInst result = CGCreateNewInst ("mov", "r", CGGetTempUseInst(loopCounterTemp));
+
+                // Store the return value
+                self = dvmCompilerPcgGetSelfPointer (cUnit);
+                dvmCompilerPcgCreateSimpleStore (self,
+                    offsetof (Thread, interpSave.retval), result);
+                return;
+            }
+        case INLINE_INT_BITS_TO_FLOAT:
         case INLINE_DOUBLE_TO_RAW_LONG_BITS:
         case INLINE_FLOAT_TO_RAW_INT_BITS:
+        case INLINE_LONG_BITS_TO_DOUBLE:
             {
                 const char *opcode;
                 int32_t dtypeSize;
@@ -426,11 +550,6 @@ void dvmCompilerPcgTranslateExecuteInline (CompilationUnitPCG *cUnit, MIR *mir)
                 CGCreateNewInst (opcode, "mr", addr, dtypeSize, (void*)1, load);
                 return;
             }
-
-        case INLINE_LONG_BITS_TO_DOUBLE:
-            ALOGI ("\nunimplemented : INLINE_LONG_BITS_TO_DOUBLE.\n");
-            exit (-1);
-            break;
         default:
             break;
     }
diff --git a/vm/compiler/codegen/x86/pcg/Utility.cpp b/vm/compiler/codegen/x86/pcg/Utility.cpp
index c3b7c9e..42ec1b3 100644
--- a/vm/compiler/codegen/x86/pcg/Utility.cpp
+++ b/vm/compiler/codegen/x86/pcg/Utility.cpp
@@ -449,31 +449,6 @@ bool dvmCompilerPcgSupportTrace (CompilationUnit *cUnit)
 
             switch (dalvikOpCode)
             {
-                case OP_EXECUTE_INLINE:
-                case OP_EXECUTE_INLINE_RANGE:
-                    switch (mir->dalvikInsn.vB)
-                    {
-                        case INLINE_STRING_EQUALS:
-                        case INLINE_STRING_COMPARETO:
-                        case INLINE_STRING_LENGTH:
-                        case INLINE_STRING_CHARAT:
-                        case INLINE_MATH_MAX_INT:
-                        case INLINE_MATH_MIN_INT:
-                        case INLINE_STRING_IS_EMPTY:
-                        case INLINE_DOUBLE_TO_RAW_LONG_BITS:
-                        case INLINE_FLOAT_TO_RAW_INT_BITS:
-                        case INLINE_MATH_SIN:
-                        case INLINE_MATH_COS:
-                        case INLINE_MATH_ABS_DOUBLE:
-                            // These are supported.
-                            break;
-
-                        default:
-                            faultyMIR = mir;
-                            break;
-                    }
-                    break;
-
                 case OP_INVOKE_VIRTUAL:
                 case OP_INVOKE_SUPER:
                 case OP_INVOKE_VIRTUAL_RANGE:
-- 
1.7.4.1

