From 9e0712c4788b4c3e51fba79fe137b00fc17531f0 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Wed, 13 Mar 2013 12:22:15 -0700
Subject: Dalvik: Allow more bytecodes to be supported by registerization

BZ: 92850

This patch adds to the list of opcodes that are accepted by registerization.
This affects benchmarks positively because it allows more loops to sink
their stores post loop.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I94c0f16613148fcd6905724cb5ef08d5c0871790
Orig-MCG-Change-Id: Ieb68f03aadb07e16c7b61357528d8c5d7b4d744d
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/RegisterizationME.cpp |  191 +++++++++++++++++++++++++++++++++---
 1 files changed, 175 insertions(+), 16 deletions(-)

diff --git a/vm/compiler/RegisterizationME.cpp b/vm/compiler/RegisterizationME.cpp
index 4e3c9e2..dc2b739 100644
--- a/vm/compiler/RegisterizationME.cpp
+++ b/vm/compiler/RegisterizationME.cpp
@@ -518,33 +518,194 @@ static bool parseBlock (BasicBlock *bb)
         switch (opcode)
         {
             case kMirOpPhi:
-            case OP_MUL_INT:
-            case OP_ADD_INT:
-            case OP_ADD_INT_2ADDR:
-            case OP_ADD_INT_LIT8:
-            case OP_GOTO:
+            case OP_NOP:
+            case OP_MOVE_FROM16:
+            case OP_MOVE_16:
+            case OP_MOVE_WIDE:
+            case OP_MOVE_WIDE_FROM16:
+            case OP_MOVE_WIDE_16:
+            case OP_MOVE_OBJECT:
+            case OP_MOVE_OBJECT_16:
+
+            //Not OP_MOVE_RESULT to OP_RETURN_OBJECT
+            case OP_CONST_4:
             case OP_CONST_16:
+            case OP_CONST:
+            case OP_CONST_HIGH16:
+            case OP_CONST_WIDE_16:
+            case OP_CONST_WIDE_32:
             case OP_CONST_WIDE:
+            case OP_CONST_WIDE_HIGH16:
+            case OP_CONST_STRING:
+            case OP_CONST_STRING_JUMBO:
+            case OP_CONST_CLASS:
+
+            //Not monitor/check/instance of, array or instance/trow
+
+            case OP_GOTO:
+            case OP_GOTO_16:
+            case OP_GOTO_32:
+
+            //Not switch
+
+            case OP_CMPL_FLOAT:
+            case OP_CMPG_FLOAT:
+            case OP_CMPL_DOUBLE:
+            case OP_CMPG_DOUBLE:
+            case OP_CMP_LONG:
+
+            case OP_IF_EQ:
+            case OP_IF_NE:
+            case OP_IF_LT:
             case OP_IF_GE:
+            case OP_IF_GT:
+            case OP_IF_LE:
+            case OP_IF_EQZ:
+            case OP_IF_NEZ:
+            case OP_IF_LTZ:
             case OP_IF_GEZ:
+            case OP_IF_GTZ:
+            case OP_IF_LEZ:
+
+            //Not the unused
+
+            //Not agets/aputs/iget/iputs/sgets/sputs
+            case OP_AGET:
+            case OP_AGET_WIDE:
+            case OP_AGET_OBJECT:
+            case OP_AGET_BYTE:
+            case OP_AGET_CHAR:
+            case OP_AGET_SHORT:
+            case OP_APUT:
+            case OP_APUT_WIDE:
+            case OP_APUT_OBJECT:
+            case OP_APUT_BYTE:
+            case OP_APUT_CHAR:
+            case OP_APUT_SHORT:
+
+            //Not the invokes
+
+            //Not the unused
+
+            //Not the invokes
+
+            //Not the unused
+
+            case OP_NEG_INT:
+            case OP_NOT_INT:
+            case OP_NEG_LONG:
+            case OP_NOT_LONG:
+            case OP_NEG_FLOAT:
+            case OP_NEG_DOUBLE:
+
+            case OP_INT_TO_LONG:
+            case OP_INT_TO_FLOAT:
+            case OP_LONG_TO_INT:
+            case OP_LONG_TO_FLOAT:
+            case OP_LONG_TO_DOUBLE:
+            case OP_FLOAT_TO_INT:
+            case OP_FLOAT_TO_LONG:
+            case OP_FLOAT_TO_DOUBLE:
+            case OP_DOUBLE_TO_INT:
+            case OP_DOUBLE_TO_LONG:
+            case OP_DOUBLE_TO_FLOAT:
             case OP_INT_TO_BYTE:
+            case OP_INT_TO_CHAR:
             case OP_INT_TO_SHORT:
-            case OP_MUL_DOUBLE:
-            case OP_ADD_DOUBLE_2ADDR:
+
+            //Only a subset of alu
+            case OP_ADD_INT:
+            case OP_SUB_INT:
+            case OP_MUL_INT:
+            case OP_DIV_INT:
+            case OP_REM_INT:
+            case OP_AND_INT:
+            case OP_OR_INT:
+            case OP_XOR_INT:
+            case OP_SHL_INT:
+            case OP_SHR_INT:
+            case OP_USHR_INT:
+            case OP_ADD_LONG:
+            case OP_SUB_LONG:
             case OP_MUL_LONG:
-            case OP_ADD_LONG_2ADDR:
+            case OP_DIV_LONG:
+            case OP_REM_LONG:
+            case OP_AND_LONG:
+            case OP_OR_LONG:
+            case OP_XOR_LONG:
+            case OP_SHL_LONG:
+            case OP_SHR_LONG:
+            case OP_USHR_LONG:
+
+            case OP_ADD_FLOAT:
+            case OP_SUB_FLOAT:
             case OP_MUL_FLOAT:
+            case OP_DIV_FLOAT:
+            case OP_REM_FLOAT:
+
+            case OP_ADD_DOUBLE:
+            case OP_SUB_DOUBLE:
+            case OP_MUL_DOUBLE:
+            case OP_DIV_DOUBLE:
+            case OP_REM_DOUBLE:
+
+            case OP_ADD_INT_2ADDR:
+            case OP_SUB_INT_2ADDR:
+            case OP_MUL_INT_2ADDR:
+            case OP_DIV_INT_2ADDR:
+            case OP_REM_INT_2ADDR:
+            case OP_AND_INT_2ADDR:
+            case OP_OR_INT_2ADDR:
+            case OP_XOR_INT_2ADDR:
+            case OP_SHL_INT_2ADDR:
+            case OP_SHR_INT_2ADDR:
+            case OP_USHR_INT_2ADDR:
+            case OP_ADD_LONG_2ADDR:
+            case OP_SUB_LONG_2ADDR:
+            case OP_MUL_LONG_2ADDR:
+            case OP_DIV_LONG_2ADDR:
+            case OP_REM_LONG_2ADDR:
+            case OP_AND_LONG_2ADDR:
+            case OP_OR_LONG_2ADDR:
+            case OP_XOR_LONG_2ADDR:
+            case OP_SHL_LONG_2ADDR:
+            case OP_SHR_LONG_2ADDR:
+            case OP_USHR_LONG_2ADDR:
+
             case OP_ADD_FLOAT_2ADDR:
-            case OP_CONST_WIDE_HIGH16:
-            case OP_CONST_HIGH16:
-            case OP_CONST_WIDE_16:
-            case OP_CMPG_FLOAT:
-            case OP_CMPG_DOUBLE:
-            case OP_CMP_LONG:
+            case OP_SUB_FLOAT_2ADDR:
+            case OP_MUL_FLOAT_2ADDR:
+            case OP_DIV_FLOAT_2ADDR:
+            case OP_REM_FLOAT_2ADDR:
+
+            case OP_ADD_DOUBLE_2ADDR:
+            case OP_SUB_DOUBLE_2ADDR:
+            case OP_MUL_DOUBLE_2ADDR:
+            case OP_DIV_DOUBLE_2ADDR:
+            case OP_REM_DOUBLE_2ADDR:
+
+            //Not the lit 16 lit 8
+            case OP_ADD_INT_LIT16:
+            case OP_ADD_INT_LIT8:
+            //Not the volatile
+
+            //Not the breakpoint/throw/execute inline
+
+            //Not the invokes
+
+            //Not the return barrier
+
+            //Not the quick
+
+            //Not the extended except PHI
                 break;
 
             default:
                 //Not accepted, refuse the block
+                {
+                    char *tmp = dvmCompilerGetDalvikDisassembly (& (mir->dalvikInsn), NULL);
+                    ALOGD ("Rejecting registerization due to %s", tmp);
+                }
                 return false;
         }
     }
@@ -562,8 +723,6 @@ static bool checkLoop (const CompilationUnit *cUnit, const LoopInformation *info
 {
     const BitVector *blocks = info->getBasicBlocks ();
 
-    int elems = dvmCountSetBits (blocks);
-
     //Go through each block
     BitVectorIterator bvIterator;
 
-- 
1.7.4.1

