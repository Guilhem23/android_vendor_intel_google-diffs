From 4bc5823f3bcea97a53e258b3c5188b58447b4c1f Mon Sep 17 00:00:00 2001
From: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Date: Tue, 10 Dec 2013 13:44:32 +0700
Subject: Dalvik: A safe approach of traversal the expression tree

BZ: 157335

This patch fixes the issue with traversal the exrpression tree
in 'haveSafeAccumulationHelper' recursive function. The previous
implementation assumed that any bytecode expression has at least
two children, which is not true for all kind of expressions. There
are unary operations (i.e., type cast), which have just one child.
The suggested changes add appropriate checks of children vector
size in order to avoid out of bounds accesses.

Change-Id: I92e44d4d29b48057e02fbb25c5cccaeab58b78b0
Category: device enablement
Domain: AOSP.Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, need rework
Signed-off-by: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
---
 vm/compiler/Vectorization.cpp |   50 +++++++++++++++++++++++-----------------
 1 files changed, 29 insertions(+), 21 deletions(-)

diff --git a/vm/compiler/Vectorization.cpp b/vm/compiler/Vectorization.cpp
index 5e81ec5..31c3b6a 100644
--- a/vm/compiler/Vectorization.cpp
+++ b/vm/compiler/Vectorization.cpp
@@ -1231,9 +1231,14 @@ static bool haveSafeAccumulationHelper (CompilationUnit *cUnit, BytecodeExpressi
         return false;
     }
 
+    //Whether the VR has been found on left/right side of the expression
     bool sawVRLeft = false;
     bool sawVRRight = false;
 
+    //VRs for left/right sides of the expression
+    int lhsVR = -1;
+    int rhsVR = -1;
+
     if (exp->getExpressionKind() == ExpKind_Invalid)
     {
         //This is not a failure
@@ -1277,10 +1282,13 @@ static bool haveSafeAccumulationHelper (CompilationUnit *cUnit, BytecodeExpressi
      */
 
     //Get both the children
-    Expression *lhs = exp->getChildren()[0];
-    Expression *rhs = exp->getChildren()[1];
+    std::vector<Expression *> children = exp->getChildren();
+
+    //We have at least one child sub-expression (unary operation)
+    assert (children.size() > 0);
 
     //Check the left side first
+    Expression *lhs = children[0];
     if (lhs != 0 && lhs->isBytecodeExpression() == true)
     {
         //We now look for the VR in the lhs expression. We pass didFail to routine because it will update it.
@@ -1293,31 +1301,31 @@ static bool haveSafeAccumulationHelper (CompilationUnit *cUnit, BytecodeExpressi
         return (sawVRLeft == true || sawVRRight == true);
     }
 
-    //Check the right side
-    if (rhs != 0 && rhs->isBytecodeExpression() == true)
-    {
-        //We now look for the VR in the rhs expression. We pass didFail to routine because it will update it.
-        sawVRRight = haveSafeAccumulationHelper (cUnit, static_cast<BytecodeExpression *>(rhs), didFail, VR);
-    }
-
-    //If we saw the VR on both sides, or we failed on one side
-    if (didFail == true || (sawVRLeft == true && sawVRRight == true))
-    {
-        return true;
-    }
-
-    //Now check if we set the VR
-    int lhsVR = -1;
-    int rhsVR = -1;
-
     if (lhs != 0 && lhs->isVirtualRegister() == true)
     {
         lhsVR = dvmExtractSSARegister (cUnit, static_cast<VirtualRegister *>(lhs)->getLowSSAReg());
     }
 
-    if (rhs != 0 && rhs->isVirtualRegister() == true)
+    //Check the right side, if exist
+    if (children.size() > 1)
     {
-        rhsVR = dvmExtractSSARegister (cUnit, static_cast<VirtualRegister *>(rhs)->getLowSSAReg());
+        Expression *rhs = children[1];
+        if (rhs != 0 && rhs->isBytecodeExpression() == true)
+        {
+            //We now look for the VR in the rhs expression. We pass didFail to routine because it will update it.
+            sawVRRight = haveSafeAccumulationHelper (cUnit, static_cast<BytecodeExpression *>(rhs), didFail, VR);
+        }
+
+        //If we saw the VR on both sides, or we failed on one side
+        if (didFail == true || (sawVRLeft == true && sawVRRight == true))
+        {
+            return true;
+        }
+
+        if (rhs != 0 && rhs->isVirtualRegister() == true)
+        {
+            rhsVR = dvmExtractSSARegister (cUnit, static_cast<VirtualRegister *>(rhs)->getLowSSAReg());
+        }
     }
 
     //If this is not an Add, neither this or any of the children should have our VR
-- 
1.7.4.1

