From 23374dfad15bde718077413936e47709166acb65 Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Fri, 4 Oct 2013 17:43:34 -0700
Subject: Dalvik: Klocwork for inlining and check hoisting

BZ: 143111

-Eliminates possible dereference of null block in check hoisting
-Eliminates possible dereference of null nesting information

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I7adec09ae2028e5562e32ead6a7085acba28b492
Orig-MCG-Change-Id: Ibc84624cdc4d8265c450267b277dfc8e4d4ef7a5
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Reviewed-on: http://android.intel.com:8080/136435
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Shou, Yixin <yixin.shou@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/Checks.cpp               |    6 +++---
 vm/compiler/InlineTransformation.cpp |    7 +++----
 2 files changed, 6 insertions(+), 7 deletions(-)

diff --git a/vm/compiler/Checks.cpp b/vm/compiler/Checks.cpp
index 5e6e07d..4e9df66 100644
--- a/vm/compiler/Checks.cpp
+++ b/vm/compiler/Checks.cpp
@@ -991,11 +991,11 @@ bool dvmCompilerGenerateNullCheckHoist (BasicBlock *hoistToBB, int objectReg)
     //Check if we have a BB to hoist to
     if (hoistToBB != 0)
     {
-        const MIR *firstMir = hoistToBB->fallThrough->firstMIRInsn;
-
         //Now check if we can determine PC in case of exception
-        if (hoistToBB->fallThrough != 0 && firstMir != 0)
+        if (hoistToBB->fallThrough != 0 && hoistToBB->fallThrough->firstMIRInsn != 0)
         {
+            const MIR *firstMir = hoistToBB->fallThrough->firstMIRInsn;
+
             //Do a sanity check on the block offset before we hoist. It should match the offset of first instruction
             if (hoistToBB->fallThrough->startOffset == firstMir->offset)
             {
diff --git a/vm/compiler/InlineTransformation.cpp b/vm/compiler/InlineTransformation.cpp
index 62afd66..e53743e 100755
--- a/vm/compiler/InlineTransformation.cpp
+++ b/vm/compiler/InlineTransformation.cpp
@@ -390,16 +390,15 @@ static int determineRegisterWindowShift (const Method *calleeMethod, const Neste
         if (invokeNesting != 0 && invokeNesting->parent != 0)
         {
             calleeMethod = invokeNesting->sourceMethod;
+
+            //We want to prepare for looking at the next level
+            invokeNesting = invokeNesting->parent;
         }
         else
         {
             //We don't have nesting so we have no other method to include in our calculation
             calleeMethod = 0;
         }
-
-        //We want to look at next level
-        invokeNesting = invokeNesting->parent;
-
     } while (calleeMethod != 0);
 
     return registerWindowShift;
-- 
1.7.4.1

