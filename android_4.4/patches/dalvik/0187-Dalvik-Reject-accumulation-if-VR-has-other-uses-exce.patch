From 3300c990fb260d3b78e7c939afb6fefc4c180b16 Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Tue, 28 May 2013 16:17:45 +0700
Subject: Dalvik: Reject accumulation if VR has other uses except itself computation

BZ: 110819

We cannot sink accumulation for some VR if this VR is used as input for
other computation in a loop body. The patch adds this check.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I348996a3837bcb2f9d3c737d6ff34993bc4d81ff
Orig-MCG-Change-Id: I05b0f637a7dd684511d9d3f667e51ea50896a7b3
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/AccumulationSinking.cpp |   67 +++++++++++++++++++++++++++++++++-
 1 files changed, 65 insertions(+), 2 deletions(-)

diff --git a/vm/compiler/AccumulationSinking.cpp b/vm/compiler/AccumulationSinking.cpp
index efbc6af..e02721b 100644
--- a/vm/compiler/AccumulationSinking.cpp
+++ b/vm/compiler/AccumulationSinking.cpp
@@ -201,6 +201,66 @@ static bool fillAccumulatorMap (CompilationUnit *cUnit, LoopInformation *info, u
 
 
 /**
+ * @brief check whether given VR has Phi node and is used as input for def of other VRs
+ * @param cUnit the CompilationUnit
+ * @param info the LoopInformation
+ * @param vr Virtual Register to check
+ * @param defMIR MIR defines our VR
+ * @return whether VR is not used in other calculations except itself
+ */
+static bool checkNoOtherUses(CompilationUnit *cUnit, LoopInformation *info, unsigned int vr, MIR *defMIR)
+{
+    if (defMIR == 0)
+    {
+        return false;
+    }
+
+    assert(defMIR->ssaRep);
+    assert(defMIR->ssaRep->numDefs > 0);
+    assert(dvmExtractSSARegister(cUnit, defMIR->ssaRep->numDefs[0]) == vr ||
+            (defMIR->ssaRep->numDefs > 1 && dvmExtractSSARegister(cUnit, defMIR->ssaRep->numDefs[1]) == vr));
+
+    //Get the SSA representation
+    SSARepresentation *ssa = defMIR->ssaRep;
+
+    int numDefs = ssa->numDefs;
+    SUsedChain **chains = ssa->usedNext;
+
+    for (int i = 0; i < numDefs; i++)
+    {
+        for (SUsedChain *chain = chains[i]; chain != 0; chain = chain->nextUse)
+        {
+            MIR* mir = chain->mir;
+
+            if (info->isBasicBlockInLoop(mir->bb) == true)
+            {
+                if (static_cast<int>(mir->dalvikInsn.opcode) == static_cast<int>(kMirOpPhi))
+                {
+                    continue;
+                }
+
+                SSARepresentation *ssaMir = mir->ssaRep;
+                bool ok = false;
+                for (int i = 0; i < ssaMir->numDefs; i++)
+                {
+                    if (dvmExtractSSARegister(cUnit, ssaMir->defs[i]) == vr)
+                    {
+                        ok |= checkNoOtherUses(cUnit, info, vr, mir);
+                        break;
+                    }
+                }
+
+                if (ok == false)
+                {
+                    return false;
+                }
+            }
+        }
+    }
+    return true;
+}
+
+/**
  * @brief Filter the VRs to only consider inter-iteration interIteration, non IV registers, and not used for another calculation
  * @param cUnit the CompilationUnit
  * @param info the LoopInformation
@@ -238,8 +298,11 @@ static void filterVRs (CompilationUnit *cUnit, LoopInformation *info, std::vecto
         //Is that register an induction variable?
         if (info->isAnInductionVariable (cUnit, vr) == false)
         {
-            //Add it now
-            vrElements.push_back (vr);
+            if (checkNoOtherUses(cUnit, info, vr, info->getPhiInstruction (cUnit, vr)) == true)
+            {
+                //Add it now
+                vrElements.push_back (vr);
+            }
         }
     }
 
-- 
1.7.4.1

