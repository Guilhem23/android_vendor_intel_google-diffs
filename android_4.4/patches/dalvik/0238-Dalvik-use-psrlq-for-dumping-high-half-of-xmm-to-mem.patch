From f0e0dcb90ed6506578a21649151d6cddc6baa77b Mon Sep 17 00:00:00 2001
From: Yixin Shou <yixin.shou@intel.com>
Date: Thu, 11 Jul 2013 08:43:31 -0700
Subject: Dalvik: use psrlq for dumping high half of xmm to memory

BZ: 123069

This patch use psrlq instruction to move high part of xmm to low
part of xmm to replace original two instructions, movq and movss,
for this purpose for partially dumping xmm to memory.

This patch improves SmartBench Mandelbrot with 24%.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I72b3f32966e1036ed2acb8a546954fc8ccf047dc
Orig-MCG-Change-Id: Idbfab579e8704627fecbe6bdb48f31ed07157984
Signed-off-by: Yixin Shou <yixin.shou@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/AnalysisO1.cpp |    8 ++------
 vm/compiler/codegen/x86/Lower.h        |   12 ++++++++++++
 2 files changed, 14 insertions(+), 6 deletions(-)

diff --git a/vm/compiler/codegen/x86/AnalysisO1.cpp b/vm/compiler/codegen/x86/AnalysisO1.cpp
index a2fcd02..df2a11d 100644
--- a/vm/compiler/codegen/x86/AnalysisO1.cpp
+++ b/vm/compiler/codegen/x86/AnalysisO1.cpp
@@ -2956,12 +2956,8 @@ void dumpPartToMem(int reg /*xmm physical reg*/, int vA, bool isLow) {
                                    getSpillLocDisp(4*k+4), PhysicalReg_SCRATCH_1, isScratchPhysical,
                                    reg, true);
 #else
-        saveToSpillRegion(OpndSize_64, reg, 4*k);
-        //update low 32 bits of xmm reg from 4*k+4
-        move_ss_mem_to_reg_noalloc(
-                                   getSpillLocDisp(4*k+4), PhysicalReg_EBP, true,
-                                   MemoryAccess_SPILL, 4*k+4,
-                                   reg, true);
+        // right shift high half of xmm to low half xmm
+        dump_imm_reg_noalloc(Mnemonic_PSRLQ, OpndSize_64, 32, reg, true, LowOpndRegType_xmm);
 #endif
         //move low 32 bits of xmm reg to vA+1
         move_ss_reg_to_mem_noalloc(reg, true, 4*(vA+1), PhysicalReg_FP, true, MemoryAccess_VR, vA+1);
diff --git a/vm/compiler/codegen/x86/Lower.h b/vm/compiler/codegen/x86/Lower.h
index f1ec1cd..4abff83 100644
--- a/vm/compiler/codegen/x86/Lower.h
+++ b/vm/compiler/codegen/x86/Lower.h
@@ -1311,6 +1311,18 @@ LowOpRegMem* dump_reg_mem_noalloc(Mnemonic m, OpndSize size,
                            MemoryAccessType mType, int mIndex, LowOpndRegType type);
 LowOpImmReg* dump_imm_reg(Mnemonic m, AtomOpCode m2, OpndSize size,
                    int imm, int reg, bool isPhysical, LowOpndRegType type, bool chaining);
+/**
+ * @brief generate a x86 instruction that takes one immediate and one physical reg operand
+ * @param m opcode mnemonic
+ * @param size width of the operand
+ * @param imm immediate value
+ * @param reg register number
+ * @param isPhysical TRUE if reg is a physical register, false otherwise
+ * @param type register type
+ * @return return a LowOp for immediate to register if scheduling is on, otherwise, return NULL
+ */
+LowOpImmReg* dump_imm_reg_noalloc(Mnemonic m, OpndSize size, int imm, int reg,
+                   bool isPhysical, LowOpndRegType type);
 LowOpImmMem* dump_imm_mem(Mnemonic m, AtomOpCode m2, OpndSize size,
                    int imm,
                    int disp, int base_reg, bool isBasePhysical,
-- 
1.7.4.1

