From 9a3cfeee15c1fff248ab45a78020ee136771e884 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Wed, 10 Apr 2013 08:01:43 -0700
Subject: Dalvik: Backend Options

BZ: 99468

The following patch enables option passing to the Dalvik back-end. It uses a
 -Xjitbackendoption:key=value system and provides an API in Init.h to extract
 values.

Category: device-enablement
Domain: AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I0084e789445965b17bc19cb6317b3d3959c202e1
Orig-MCG-Change-Id: I52612561f8581f3f024c20c49b9cff2304cc1c41
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Tim Hartley <timothy.d.hartley@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/Globals.h |    6 ++
 vm/Init.cpp  |  199 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 vm/Init.h    |   28 ++++++++
 3 files changed, 233 insertions(+), 0 deletions(-)

diff --git a/vm/Globals.h b/vm/Globals.h
index f292f21..54e7c84 100644
--- a/vm/Globals.h
+++ b/vm/Globals.h
@@ -962,6 +962,12 @@ struct DvmJitGlobals {
      */
     unsigned int maximumRegisterization;
 
+    /* Map to handle options for the backend */
+    std::map<std::string, std::string> backendOptions;
+
+    /* Unprocessed string for the backend */
+    std::string backendString;
+
     /* Flag to control which loop detection system is being used */
     bool oldLoopDetection;
 
diff --git a/vm/Init.cpp b/vm/Init.cpp
index a7654bc..416d450 100644
--- a/vm/Init.cpp
+++ b/vm/Init.cpp
@@ -28,6 +28,7 @@
 #include <linux/fs.h>
 #include <cutils/fs.h>
 #include <unistd.h>
+#include <sstream>
 #ifdef HAVE_ANDROID_OS
 #include <sys/prctl.h>
 #endif
@@ -155,6 +156,8 @@ static void usage(const char* progName)
     dvmFprintf(stderr, "  -Xjitconfig:filename\n");
     dvmFprintf(stderr, "  -Xjitcheckcg\n");
     dvmFprintf(stderr, "  -Xjitverbose\n");
+    dvmFprintf(stderr, "  -Xjitbackendoption:key=value[,key=value,...] (Provide option passing to the backend\n");
+    dvmFprintf(stderr, "  -Xjitbackendstring:value (Provide a string to the backend for post-processing\n");
     dvmFprintf(stderr, "  -Xjit[no]scheduling (Turn on/off Atom Instruction Scheduling)\n");
     dvmFprintf(stderr, "  -Xjitarenatrimstyle:<none|onlyOne|average|user> (Select arena triming style)\n");
     dvmFprintf(stderr, "  -Xjitarenatrimvalue:<value> (The value for the user based arena trim style)\n");
@@ -1169,6 +1172,99 @@ static int processOptions(int argc, const char* const argv[],
             gDvmJit.printBinary = true;
         } else if (strncmp(argv[i], "-Xjitverbose", 12) == 0) {
             gDvmJit.printMe = true;
+        } else if (strncmp(argv[i], "-Xjitbackendstring:", 19) == 0) {
+            char *ptr = strchr (argv[i], ':');
+
+            //Paranoid
+            assert (ptr != 0);
+
+            //Next character
+            ptr++;
+
+            //Copy into the global structure
+            gDvmJit.backendString = ptr;
+
+        } else if (strncmp(argv[i], "-Xjitbackendoption:", 19) == 0) {
+            char *ptr = strchr (argv[i], ':');
+
+            //Paranoid
+            assert (ptr != 0);
+
+            //Next character
+            ptr++;
+
+            //Copy top 1024, should be enough
+            const int length = 1024;
+            char *copy = strndup (ptr, length);
+
+            //Paranoid
+            if (copy == 0)
+            {
+                dvmFprintf(stderr, "Option -Xjitbackendoption had a memory management issue, option ignored\n");
+                break;
+            }
+
+            //Copy and ptr must match
+            if (strcmp (copy, ptr) != 0)
+            {
+                dvmFprintf(stderr, "Option -Xjitbackendoption only allows a string after the ':' of %d characters, option ignored\n", length);
+                free (copy), copy = 0;
+                break;
+            }
+
+            //Go through the list
+            char *start = copy;
+
+            //Go through the options, we stop when start is nil
+            while (start != 0)
+            {
+                //Get =
+                char *equal = strchr (start, '=');
+
+                if (equal != 0)
+                {
+                    //Set to '\0', separating value and key
+                    *equal = '\0';
+
+                    //Next character
+                    equal++;
+                }
+                else
+                {
+                    //We strdup so the backend can change the values as it sees fit
+                    equal = 0;
+                }
+
+                //Find end of equal
+                char *next = strchr (equal, ',');
+
+                //If we have another option, we have to separate the current option couple and the next
+                if (next != 0)
+                {
+                    //Set to '\0', separating this key and next key/value couple
+                    *next = '\0';
+
+                    //Next character
+                    next++;
+                }
+
+                //Set in map: depends if equal is nil or not
+                if (equal != 0)
+                {
+                    gDvmJit.backendOptions[start] = equal;
+                }
+                else
+                {
+                    gDvmJit.backendOptions[start] = "empty";
+                }
+
+                //Update start, it is the next
+                start = next;
+            }
+
+            //Free copy
+            free (copy), copy = 0;
+
         } else if (strncmp(argv[i], "-Xjitscheduling", 15) == 0) {
             gDvmJit.scheduling = true;
         } else if (strncmp(argv[i], "-Xjitnoscheduling", 17) == 0) {
@@ -2362,3 +2458,106 @@ void dvmAbort()
 
     /* notreached */
 }
+
+#ifdef WITH_JIT
+/*
+ * @brief Does a backend option exist?
+ * @param key the key we are looking for
+ * @return returns true if key is found
+ */
+bool dvmBackendOptionExists (const std::string &key)
+{
+    //Find it
+    std::map<std::string, std::string>::iterator it = gDvmJit.backendOptions.find (key);
+
+    //Did we find it?
+    return (it != gDvmJit.backendOptions.end ());
+}
+
+/*
+ * @brief Retrieve a backend option as a string
+ * @param key the key we are looking for
+ * @param value Updates the value parameter if found
+ * @return returns true if key is found
+ */
+bool dvmExtractBackendOption (const std::string &key, std::string &value)
+{
+    //Find it
+    std::map<std::string, std::string>::iterator it = gDvmJit.backendOptions.find (key);
+
+    //Did we find it?
+    if (it == gDvmJit.backendOptions.end ())
+    {
+        return false;
+    }
+    else
+    {
+        //Set it and leave
+        value = it->second;
+        return true;
+    }
+}
+
+/*
+ * @brief Retrieve a backend option as a char*
+ * @param key the key we are looking for
+ * @param value Updates the value parameter if found
+ * @return returns true if key is found
+ */
+bool dvmExtractBackendOption (const std::string &key, const char **value)
+{
+    //Get key
+    std::string svalue;
+    bool res = dvmExtractBackendOption (key, svalue);
+
+    //If not found, bail
+    if (res == false)
+    {
+        return false;
+    }
+
+    //Transform into a char *
+    *value = svalue.c_str ();
+    return true;
+}
+
+/*
+ * @brief Retrieve a backend option as a char*
+ * @param key the key we are looking for
+ * @param value Updates the value parameter if found
+ * @return returns true if key is found
+ */
+bool dvmExtractBackendOption (const std::string &key, int* value)
+{
+    //Get key
+    std::string svalue;
+    bool res = dvmExtractBackendOption (key, svalue);
+
+    //If not found, bail
+    if (res == false)
+    {
+        return false;
+    }
+
+    //Transform into a int
+    const char *c_str = svalue.c_str();
+    char *endptr = 0;
+
+    int tmp = strtol(c_str, &endptr, 0);
+
+    if (endptr != 0 && *endptr == '\0' && res != LONG_MIN && res != LONG_MAX)
+    {
+        *value = tmp;
+    }
+    else
+    {
+        dvmFprintf (stderr, "Extracting backend option had an issue: %s\n", key.c_str ());
+
+        //Register failure
+        res = false;
+    }
+
+    //Return result
+    return res;
+}
+#endif
diff --git a/vm/Init.h b/vm/Init.h
index 1b585fa..147098a 100644
--- a/vm/Init.h
+++ b/vm/Init.h
@@ -69,4 +69,32 @@ int dvmFprintf(FILE* fp, const char* format, ...)
 #endif
     ;
 
+#ifdef WITH_JIT
+/*
+ * Does a backend option exist?
+ * Returns if key is found
+ */
+bool dvmBackendOptionExists (const std::string &key);
+
+/*
+ * Retrieve a backend option as a string
+ * Updates the value parameter if found
+ * Returns if key is found
+ */
+bool dvmExtractBackendOption (const std::string &key, std::string &value);
+
+/*
+ * Retrieve a backend option as an char*
+ * Updates the value parameter if found
+ * Returns if key is found
+ */
+bool dvmExtractBackendOption (const std::string &key, const char **value);
+
+/*
+ * Retrieve a backend option as an integer
+ * Updates the value parameter if found
+ * Returns if key is found
+ */
+bool dvmExtractBackendOption (const std::string &key, int* value);
+#endif
 #endif  // DALVIK_INIT_H_
-- 
1.7.4.1

