From 8bec1ddc1b2766797cbd8ae281af2c600d04975a Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Wed, 27 Mar 2013 12:47:47 +0700
Subject: Dalvik: Add new traversal method to DataFlow dispatcher

BZ: 94543

During traversal of Basic Blocks some functions can can create new
basic blocks. Current traversal mode kAllNodes does not support this case.
This patch adds new traversal mode kAllNodesAndNew to cover this case.
Functions creating new basic blocks use this new mode with this patch.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I038b0b8e03adc580ca347f3c66971b0abfb731bf
Orig-MCG-Change-Id: I83af4dcf2045a0b7216972e175fccbb0f3baf2e8
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Signed-off-by: Dmitry Petrochenko <dmitry.petrochenko@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/Compiler.h        |    1 +
 vm/compiler/CompilerUtility.h |    1 +
 vm/compiler/Dataflow.cpp      |   12 ++++++++++++
 vm/compiler/LoopOpt.cpp       |    6 +++---
 vm/compiler/Utility.cpp       |    7 +++++++
 5 files changed, 24 insertions(+), 3 deletions(-)

diff --git a/vm/compiler/Compiler.h b/vm/compiler/Compiler.h
index 68514ee..de89d0b 100644
--- a/vm/compiler/Compiler.h
+++ b/vm/compiler/Compiler.h
@@ -179,6 +179,7 @@ typedef enum DataFlowAnalysisMode {
     kPostOrderDFSTraversal,     // Depth-First-Search / Post-Order
     kPostOrderDOMTraversal,     // Dominator tree / Post-Order
     kBreadthFirstTraversal,     // Breadth-First Traversal
+    kAllNodesAndNew,            // All nodes and new added during traversal
 } DataFlowAnalysisMode;
 
 typedef struct CompilerMethodStats {
diff --git a/vm/compiler/CompilerUtility.h b/vm/compiler/CompilerUtility.h
index 6c6c4fc..f220997 100644
--- a/vm/compiler/CompilerUtility.h
+++ b/vm/compiler/CompilerUtility.h
@@ -68,6 +68,7 @@ void dvmGrowableListIteratorInit(GrowableList *gList,
 intptr_t dvmGrowableListIteratorNext(GrowableListIterator *iterator);
 bool dvmGrowableListSetLastIterator(GrowableListIterator *iterator, intptr_t elem);
 intptr_t dvmGrowableListGetElement(const GrowableList *gList, size_t idx);
+size_t dvmGrowableListSize(const GrowableList *gList);
 
 BitVector* dvmCompilerAllocBitVector(unsigned int startBits, bool expandable);
 bool dvmCompilerSetBit(BitVector* pBits, unsigned int num);
diff --git a/vm/compiler/Dataflow.cpp b/vm/compiler/Dataflow.cpp
index 80031bd..c44c00f 100644
--- a/vm/compiler/Dataflow.cpp
+++ b/vm/compiler/Dataflow.cpp
@@ -2385,6 +2385,18 @@ void dvmCompilerDataFlowAnalysisDispatcher(CompilationUnit *cUnit,
             dvmCompilerDataFlowAnalysisDispatcher (cUnit,
                     dvmCompilerClearVisitedFlag, kAllNodes, false);
         }
+        /*
+         * Scan all blocks including new added during traversal
+         */
+        else if (dfaMode == kAllNodesAndNew) {
+            const GrowableList *blockList = &cUnit->blockList;
+
+            for (size_t idx = 0; idx < dvmGrowableListSize(blockList); idx++)
+            {
+                BasicBlock *bb = (BasicBlock *) dvmGrowableListGetElement(blockList, idx);
+                change |= (*func)(cUnit, bb);
+            }
+        }
 
         /* If isIterative is false, exit the loop after the first iteration */
         change &= isIterative;
diff --git a/vm/compiler/LoopOpt.cpp b/vm/compiler/LoopOpt.cpp
index 1d88885..77fd9b0 100644
--- a/vm/compiler/LoopOpt.cpp
+++ b/vm/compiler/LoopOpt.cpp
@@ -48,13 +48,13 @@ static void clearPHIInformation (CompilationUnit *cUnit);
 
 START_PASSES
     //This loop formation is used when the new loop filtering is active
-    NEW_PASS ("Form Loop", kAllNodes, 0, dvmCompilerTraceIsLoopNewSystem,
+    NEW_PASS ("Form Loop", kAllNodesAndNew, 0, dvmCompilerTraceIsLoopNewSystem,
                 0, dvmCompilerTestLoop, dvmCompilerFormLoop, 0, kOptimizationBasicBlockChange),
     //Check if the formed loops are like we want right now (nested or not, branches or not)
     NEW_PASS ("Reject Loops", kAllNodes, 0, dvmCompilerCheckLoops,
                             0, 0, 0, 0, 0),
     //This loop formation is used when the old loop filtering is active
-    NEW_PASS ("Old Loop Formation", kAllNodes, 0, dvmCompilerTraceIsLoopOldSystem,
+    NEW_PASS ("Old Loop Formation", kAllNodesAndNew, 0, dvmCompilerTraceIsLoopOldSystem,
                 dvmCompilerFormOldLoop, 0, 0, 0, kOptimizationBasicBlockChange),
     NEW_PASS ("Check Removal", kAllNodes, 0, 0,
                 dvmCompilerStartCheckRemoval, dvmCompilerEndCheckRemoval, dvmCompilerCheckRemoval, 0, 0),
@@ -78,7 +78,7 @@ START_PASSES
     NEW_PASS ("Write Back Registers", kAllNodes, 0, 0, 0, 0, dvmCompilerWriteBackAll, 0, 0),
     NEW_PASS ("Registerization ME", kAllNodes, 0, dvmCompilerRegisterizeGate,
                 0, dvmCompilerRegisterize, 0, 0, 0),
-    NEW_PASS ("Insert Prebackward Block", kAllNodes, 0, 0,
+    NEW_PASS ("Insert Prebackward Block", kAllNodesAndNew, 0, 0,
                     0, dvmCompilerInsertPreBackward, 0, 0, kOptimizationBasicBlockChange),
     NEW_PASS ("Reorder Blocks", kBreadthFirstTraversal, 0, dvmCompilerTraceIsLoop,
                 dvmCompilerReorder, 0, 0, 0, kOptimizationBasicBlockChange),
diff --git a/vm/compiler/Utility.cpp b/vm/compiler/Utility.cpp
index c92928b..118f6f6 100644
--- a/vm/compiler/Utility.cpp
+++ b/vm/compiler/Utility.cpp
@@ -223,6 +223,13 @@ void dvmClearGrowableList (GrowableList *gList)
     gList->numUsed = 0;
 }
 
+/* Size of the List */
+size_t dvmGrowableListSize(const GrowableList *gList)
+{
+    assert (gList != 0);
+    return gList->numUsed;
+}
+
 /* Expand the capacity of a growable list */
 static void expandGrowableList(GrowableList *gList)
 {
-- 
1.7.4.1

