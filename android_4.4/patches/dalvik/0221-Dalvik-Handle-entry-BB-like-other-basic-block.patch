From 4b4d679f798e991cc629e8502d7916c21b5f38ac Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Mon, 8 Jul 2013 16:16:35 -0700
Subject: Dalvik: Handle entry BB like other basic block

BZ: 122032

The entry basic block is similar to a dalvik BB from code generation
point of view. Since an entry BB may have bytecodes, it is now handled
in the same path as all other basic blocks.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ibc6b25c5878d5afa88ac35e8c84efe5c8ac41e51
Orig-MCG-Change-Id: Idb224326acef0c73f4bcaefd4b4c57cad7364c7c
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/CodegenInterface.cpp |  125 ++++---------------------
 1 files changed, 20 insertions(+), 105 deletions(-)

diff --git a/vm/compiler/codegen/x86/CodegenInterface.cpp b/vm/compiler/codegen/x86/CodegenInterface.cpp
index 3a59d0d..f1114bf 100644
--- a/vm/compiler/codegen/x86/CodegenInterface.cpp
+++ b/vm/compiler/codegen/x86/CodegenInterface.cpp
@@ -1816,102 +1816,25 @@ static bool generateCode (CompilationUnit *cUnit, BasicBlock *bb, BasicBlock **n
     assert (bbO1 != 0);
     bbO1->streamStart = stream;
 
-    //If in O1, not the entry block, and actually have an instruction
-    if(gDvm.executionMode == kExecutionModeNcgO1 &&
-            bb->blockType != kEntryBlock) {
-
 #ifdef WITH_JIT_TPROFILE
-        //Generate the loop counter profile code for loop
-        genLoopCounterProfileCode(cUnit, bbO1);
+    //Generate the loop counter profile code for loop
+    genLoopCounterProfileCode(cUnit, bbO1);
 #endif
-        //Generate the code
-        startOfBasicBlock(bb);
-        int cg_ret = codeGenBasicBlockJit(cUnit->method, bb);
-        endOfBasicBlock(bb);
-
-        //Error handling, we return false
-        if(cg_ret < 0) {
-            ALOGI("Could not compile trace for %s%s, offset %d",
-                    cUnit->method->clazz->descriptor, cUnit->method->name,
-                    cUnit->traceDesc->trace[0].info.frag.startOffset);
-            SET_JIT_ERROR(kJitErrorCodegen);
-            endOfTrace (cUnit);
-            PROTECT_CODE_CACHE(stream, unprotected_code_cache_bytes);
-            return false;
-        }
+    //Generate the code
+    startOfBasicBlock(bb);
+    int cg_ret = codeGenBasicBlockJit(cUnit->method, bb);
+    endOfBasicBlock(bb);
+
+    //Error handling, we return false
+    if(cg_ret < 0) {
+        ALOGI("Could not compile trace for %s%s, offset %d",
+                cUnit->method->clazz->descriptor, cUnit->method->name,
+                cUnit->traceDesc->trace[0].info.frag.startOffset);
+        SET_JIT_ERROR(kJitErrorCodegen);
+        endOfTrace (cUnit);
+        PROTECT_CODE_CACHE(stream, unprotected_code_cache_bytes);
+        return false;
     }
-    else {
-        //Not O1 or iti s the entry block
-        for (MIR *mir = bb->firstMIRInsn; mir; mir = mir->next) {
-            // Global variable rPC that's holding the Dalvik PC
-            // needs to be updated here because we are iterating
-            // through the MIRs of this BB.
-            rPC = const_cast<u2 *>(cUnit->method->insns) + mir->offset;
-            startOfBasicBlock(bb); //why here for O0
-            Opcode dalvikOpCode = mir->dalvikInsn.opcode;
-
-            //If extended, send it off and go to the next instruction
-            if((int)dalvikOpCode >= (int)kMirOpFirst) {
-                handleExtendedMIR (cUnit, bbO1, mir);
-                continue;
-            }
-
-            //A normal instruction is handled here
-            InstructionFormat dalvikFormat = dexGetFormatFromOpcode(dalvikOpCode);
-            ALOGV("ready to handle bytecode at offset %x: opcode %d format %d",
-                    mir->offset, dalvikOpCode, dalvikFormat);
-
-            // Before: A boundary LIR with Atom pseudo-mnemonic named
-            //      ATOM_PSEUDO_DALVIK_BYTECODE_BOUNDARY was being created
-            //      at this point. The allocation of the Atom LIR used to
-            //      update the global variable named lowOpTimeStamp.
-            // After: LIRs are now only allocated through the Instruction
-            //      scheduling interface and LIRs with only pseudo-mnemonics
-            //      are not supported. In order to keep semantics, the
-            //      timestamp will be updated here manually since it affects
-            //      register allocation.
-            lowOpTimeStamp++;
-
-            bool notHandled = true;
-            /*
-             * Debugging: screen the opcode first to see if it is in the
-             * do[-not]-compile list
-             */
-            bool singleStepMe =
-                gDvmJit.includeSelectedOp !=
-                ((gDvmJit.opList[dalvikOpCode >> 3] &
-                  (1 << (dalvikOpCode & 0x7))) !=
-                 0);
-
-            if (singleStepMe == false && cUnit->allSingleStep == false)
-            {
-                //lower each byte code, update LIR
-                notHandled = lowerByteCodeJit(cUnit->method, mir, rPC);
-
-                //Look if the code cache is full
-                if(gDvmJit.codeCacheByteUsed + (stream - streamStart) +
-                        CODE_CACHE_PADDING > gDvmJit.codeCacheSize) {
-                    ALOGI("JIT_INFO: Code cache full after lowerByteCodeJit (trace uses %uB)", (stream - streamStart));
-                    SET_JIT_ERROR(kJitErrorCodeCacheFull);
-                    gDvmJit.codeCacheFull = true;
-                    endOfTrace (cUnit);
-                    PROTECT_CODE_CACHE(stream, unprotected_code_cache_bytes);
-                    return false;
-                }
-            }
-
-            //If not handle, error flag setting and return false
-            if (notHandled) {
-                ALOGI("JIT_INFO: Opcode 0x%x (%s) / Fmt %d at offset %#06x not lowered\n",
-                        dalvikOpCode, dexGetOpcodeName(dalvikOpCode), dalvikFormat, mir->offset);
-                //Lowering could have failed due to various reasons.
-                //Set a generic error flag
-                SET_JIT_ERROR(kJitErrorCodegen);
-                endOfTrace (cUnit);
-                return false;
-            }
-        } // end for
-    } // end else //JIT + O0 code generator
 
     //Register next fall through
     *nextFallThrough = bb->fallThrough;
@@ -2041,20 +1964,12 @@ static void compilerMIR2LIRJit(CompilationUnit_O1 *cUnit, JitTranslationInfo *in
         switch (bbO1->blockType)
         {
             case kEntryBlock:
-                //First handle fallthrough branch
-                handleFallThroughBranch (cUnit, bbO1, &nextFallThrough);
-
-                //Set label offset
-                bbO1->label->lop.generic.offset = (stream - streamMethodStart);
+                //The entry block should always be processed first because it is entry to trace
+                assert (i == 0);
 
-                if (generateCode (cUnit, bbO1, &nextFallThrough) == false)
-                {
-                    //Generate code set an error for the jit, we can just return
-                    return;
-                }
-                break;
+                //Intentional fallthrough because we handle it same way as an exit block
             case kExitBlock:
-                //Only do the handle through if there is an instruction in the exit block
+                //Only handle the fallthrough if there is an instruction
                 if (bbO1->firstMIRInsn != 0)
                 {
                     //First handle fallthrough branch
-- 
1.7.4.1

