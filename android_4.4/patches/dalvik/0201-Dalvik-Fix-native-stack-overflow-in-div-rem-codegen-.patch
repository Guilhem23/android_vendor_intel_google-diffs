From 6aedb20c2cf382e9ba49aefabf679d7b8fa9bcc7 Mon Sep 17 00:00:00 2001
From: Dmitry Petrochenko <dmitry.petrochenko@intel.com>
Date: Tue, 4 Jun 2013 19:02:27 +0700
Subject: Dalvik: Fix native stack overflow in div/rem codegen for long operands

BZ: 111518

The ESP modification before handling the "divide by zero" exception
caused native stack overflow when exception happens frequently due to
and leak of 16 bytes per exception. Temproral storage of data on the stack
moved after the potential exception handling, thus ESP remains unmodified
when exception occurs.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I10f77f43efe65f2ad082177b97ae08de28a32457
Orig-MCG-Change-Id: Ia47cf2420ff7277f699641d51ae9ea641c3adf2e
Signed-off-by: Dmitry Petrochenko <dmitry.petrochenko@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/LowerAlu.cpp |   10 +++-------
 1 files changed, 3 insertions(+), 7 deletions(-)

diff --git a/vm/compiler/codegen/x86/LowerAlu.cpp b/vm/compiler/codegen/x86/LowerAlu.cpp
index d9b13bd..c48f0d9 100644
--- a/vm/compiler/codegen/x86/LowerAlu.cpp
+++ b/vm/compiler/codegen/x86/LowerAlu.cpp
@@ -1620,22 +1620,20 @@ int op_mul_long_2addr(const MIR * mir) {
     return retval;
 }
 
-#define P_GPR_1 PhysicalReg_EBX
-#define P_GPR_2 PhysicalReg_ECX
 //! common code to handle DIV & REM of long
 
 //! It uses GPR & XMM; and calls call_moddi3 & call_divdi3
 int common_div_rem_long(bool isRem, int vA, int v1, int v2) {
     get_virtual_reg(v2, OpndSize_32, 1, false);
     get_virtual_reg(v2+1, OpndSize_32, 2, false);
-    //save to native stack before changing register P_GPR_1
-    load_effective_addr(-16, PhysicalReg_ESP, true, PhysicalReg_ESP, true);
-    move_reg_to_mem(OpndSize_32, 1, false, 8, PhysicalReg_ESP, true);
+    //save to native stack before changing register 1, esp-8 is unused area
+    move_reg_to_mem(OpndSize_32, 1, false, 8-16, PhysicalReg_ESP, true);
     alu_binary_reg_reg(OpndSize_32, or_opc, 2, false, 1, false);
 
     handlePotentialException(
                                        Condition_E, Condition_NE,
                                        1, "common_errDivideByZero");
+    load_effective_addr(-16, PhysicalReg_ESP, true, PhysicalReg_ESP, true);
     move_reg_to_mem(OpndSize_32, 2, false, 12, PhysicalReg_ESP, true);
     get_virtual_reg(v1, OpndSize_64, 1, false);
     move_reg_to_mem(OpndSize_64, 1, false, 0, PhysicalReg_ESP, true);
@@ -1650,8 +1648,6 @@ int common_div_rem_long(bool isRem, int vA, int v1, int v2) {
     set_virtual_reg(vA, OpndSize_32, PhysicalReg_EAX, true);
     return 0;
 }
-#undef P_GPR_1
-#undef P_GPR_2
 
 /**
  * @brief Generate native code for bytecode div-long
-- 
1.7.4.1

