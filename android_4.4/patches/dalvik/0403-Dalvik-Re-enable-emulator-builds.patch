From 2d7f177a5dba06ae426d1ece84615ae2221bca7d Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Mon, 25 Nov 2013 11:24:33 +0700
Subject: Dalvik: Re-enable emulator builds

The following changes have been done to re-enable emulators.

vm/Android.mk
    Fix host build to use x86 when arm emulator is building
vm/Dvm.mk
    Add SSAWalkData.cpp to compilation for emulators
vm/Init.cpp
    Clean-up of option definition and parsing to separate all
      from those which are used for x86 only
    Clean-up initial values of globals
vm/alloc/HeapBitmap.h
vm/alloc/MarkSweep.cpp
    Fix build issue when TLA is disabled
vm/compiler/BBOptimization.cpp
vm/compiler/BBOptimization.h
vm/compiler/Compiler.h
vm/compiler/IntermediateRep.cpp
    Move some DFA utility functions from one source to another
      which is used in emulator build
vm/compiler/Dataflow.cpp
    Fix constantValues access which is a pointer now
    Make dvmCompilerNonLoopAnalysis the same as in Google's code
vm/compiler/Frontend.cpp
    Make BYTECODE_FILTER for x86 only
    dvmCompilerBuildLoop -> dvmCompilerCalculateBasicBlockInformation
    dvmCompilerMIR2LIR should accept info also
vm/compiler/InlineTransformation.cpp
    Do not compile isSmallThrowFreeLeaf for non-x86
    Fix warning which is considered as an error for arm emulator
vm/compiler/JitProfiling.h
    CDECL for x86 only
vm/compiler/Loop.cpp
    Elimnate warnings for debugging loops utilities
    Switch off Pass framework related code for non-x86 builds
    Switch off deeper Loop analysis in dvmCompilerCalculateBasicBlockInformation
      for non-x86 builds
vm/compiler/StackExtension.h
vm/compiler/codegen/arm/ArchUtility.cpp
vm/compiler/codegen/arm/CodegenDriver.cpp
vm/compiler/codegen/mips/ArchUtility.cpp
vm/compiler/codegen/mips/CodegenDriver.cpp
    Remove function definitions from header file causing a linker error
      and move it to ARM/MIPS source code
vm/compiler/codegen/mips/CodegenFactory.cpp
    MIPS build does not use ARMs CodegenFactory so duplicate functions
      to MIPS source code as well

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Compiler-ME; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

BZ: APDEV-551
BZ: APDEV-591
BZ: AXIA-5052
Change-Id: Id47c73683f0f272dcb6d1d934ea2bbc9553a5925
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 Android.mk                                  |   15 ++---
 vm/Android.mk                               |    8 ---
 vm/Dvm.mk                                   |   16 ++----
 vm/Init.cpp                                 |   36 +++++++-----
 vm/alloc/HeapBitmap.h                       |    2 -
 vm/alloc/MarkSweep.cpp                      |    4 +-
 vm/compiler/BBOptimization.cpp              |   76 ------------------------
 vm/compiler/BBOptimization.h                |   16 -----
 vm/compiler/Compiler.h                      |   16 +++++
 vm/compiler/Dataflow.cpp                    |   30 +--------
 vm/compiler/Frontend.cpp                    |   13 +---
 vm/compiler/InlineTransformation.cpp        |    6 +-
 vm/compiler/IntermediateRep.cpp             |   75 ++++++++++++++++++++++++
 vm/compiler/JitProfiling.h                  |    4 +
 vm/compiler/Loop.cpp                        |   16 +++++-
 vm/compiler/SSATransformation.cpp           |    4 +
 vm/compiler/StackExtension.h                |   21 -------
 vm/compiler/codegen/arm/ArchUtility.cpp     |   18 ++++++
 vm/compiler/codegen/arm/CodegenDriver.cpp   |    2 +-
 vm/compiler/codegen/mips/ArchUtility.cpp    |   18 ++++++
 vm/compiler/codegen/mips/CodegenDriver.cpp  |    2 +-
 vm/compiler/codegen/mips/CodegenFactory.cpp |   83 +++++++++++++++++++++++++++
 22 files changed, 281 insertions(+), 200 deletions(-)

diff --git a/Android.mk b/Android.mk
index 11ee273..dbb8524 100644
--- a/Android.mk
+++ b/Android.mk
@@ -42,15 +42,12 @@ endif
 ifeq ($(WITH_JIT),true)
   ifeq ($(TARGET_ARCH),x86)
     ifeq ($(WITH_PCG),)
-      ifeq ($(TARGET_ARCH_VARIANT),haswell)
-        WITH_PCG := false
-      else
-        ifeq ($(TARGET_ARCH_VARIANT),silvermont)
-          WITH_PCG := false
-        else
-          WITH_PCG := true
-        endif
-      endif
+	ifneq ($(USE_INTEL_IPP),true)
+	    # PCG depends on libsvml from vendor/intel/
+	    WITH_PCG := false
+	else
+	    WITH_PCG := true
+	endif
     endif
   endif
 endif
diff --git a/vm/Android.mk b/vm/Android.mk
index 20bfeb0..df0800e 100644
--- a/vm/Android.mk
+++ b/vm/Android.mk
@@ -131,14 +131,6 @@ ifeq ($(WITH_HOST_DALVIK),true)
 
     WITH_JIT := true
 
-    # Use TARGET_ARCH_VARIANT for HOST build if HOST_ARCH is x86
-    ifeq ($(HOST_ARCH),x86)
-        dvm_arch_variant := $(TARGET_ARCH_VARIANT)
-        ifeq ($(DALVIK_FI),x86)
-            dvm_arch_variant := $(DALVIK_FI)
-        endif
-    endif
-
     include $(LOCAL_PATH)/Dvm.mk
 
     ifeq ($(dvm_arch_variant),x86)
diff --git a/vm/Dvm.mk b/vm/Dvm.mk
index ef6f72b..d476c5f 100644
--- a/vm/Dvm.mk
+++ b/vm/Dvm.mk
@@ -38,7 +38,9 @@ endif
 #
 
 # Houdini support
+ifeq ($(INTEL_HOUDINI),true)
 LOCAL_CFLAGS += -DMTERP_NO_UNALIGN_64
+endif
 
 # Make a debugging version when building the simulator (if not told
 # otherwise) and when explicitly asked.
@@ -47,16 +49,8 @@ ifneq ($(strip $(DEBUG_DALVIK_VM)),)
   dvm_make_debug_vm := $(DEBUG_DALVIK_VM)
 endif
 
-# Disable x86-atom/x86-slm/haswell variant
-ifneq (, $(findstring x86-, $(dvm_arch_variant)))
-dvm_arch_variant := x86
-endif
-
-ifneq (, $(findstring haswell, $(dvm_arch_variant)))
-dvm_arch_variant := x86
-endif
-
-ifneq (, $(findstring silvermont, $(dvm_arch_variant)))
+# x86 uses only one variant at this moment
+ifeq ($(dvm_arch),x86)
 dvm_arch_variant := x86
 endif
 
@@ -274,6 +268,7 @@ ifeq ($(WITH_JIT),true)
 	compiler/IntermediateRep.cpp \
 	compiler/Dataflow.cpp \
 	compiler/SSATransformation.cpp \
+	compiler/SSAWalkData.cpp \
 	compiler/Loop.cpp \
 	compiler/Ralloc.cpp \
 	interp/Jit.cpp
@@ -388,7 +383,6 @@ ifeq ($(dvm_arch),x86)
               compiler/Pass.cpp \
               compiler/BBOptimization.cpp \
               compiler/LoopInformation.cpp \
-              compiler/SSAWalkData.cpp \
               compiler/RegisterizationME.cpp \
               compiler/Expression.cpp \
               compiler/AccumulationSinking.cpp \
diff --git a/vm/Init.cpp b/vm/Init.cpp
index 3e0bf21..8924572 100644
--- a/vm/Init.cpp
+++ b/vm/Init.cpp
@@ -153,8 +153,6 @@ static void usage(const char* progName)
     dvmFprintf(stderr, "  -Xincludeselectedmethod\n");
     dvmFprintf(stderr, "  -Xjitthreshold:decimalvalue\n");
     dvmFprintf(stderr, "  -Xjitcodecachesize:decimalvalueofkbytes\n");
-    dvmFprintf(stderr, "  -Xjittablesize:decimalvalue\n");
-    dvmFprintf(stderr, "  -Xjitcodecachesize:decimalvalue\n");
     dvmFprintf(stderr, "  -Xjitblocking\n");
     dvmFprintf(stderr, "  -Xjitmethod:signature[,signature]* "
                        "(eg Ljava/lang/String\\;replace)\n");
@@ -163,6 +161,8 @@ static void usage(const char* progName)
     dvmFprintf(stderr, "  -Xjitconfig:filename\n");
     dvmFprintf(stderr, "  -Xjitcheckcg\n");
     dvmFprintf(stderr, "  -Xjitverbose\n");
+#ifdef ARCH_IA32
+    dvmFprintf(stderr, "  -Xjittablesize:decimalvalue\n");
     dvmFprintf(stderr, "  -Xjitbackendoption:key=value[,key=value,...] (Provide option passing to the backend\n");
     dvmFprintf(stderr, "  -Xjitbackendstring:value (Provide a string to the backend for post-processing\n");
     dvmFprintf(stderr, "  -Xjit[no]scheduling (Turn on/off Atom Instruction Scheduling)\n");
@@ -188,6 +188,7 @@ static void usage(const char* progName)
     dvmFprintf(stderr, "  -Xjitinliningmethodsizemax:<value> The maximum number of bytecodes a method can have to be considered for inlining\n");
     dvmFprintf(stderr, "  -Xjitdisablepredictedinlining Disable method inlining that is done on a predicted method");
     dvmFprintf(stderr, "  -Xjitmaxscratch:<value> The maximum number of scratch registers that are allowed to be used in optimization passes\n");
+#endif
 #if defined(VTUNE_DALVIK)
     dvmFprintf(stderr, "  -Xjitsepdalvik\n");
     dvmFprintf(stderr, "  -Xjitvtuneinfo:{none,jit,dex,src}\n");
@@ -1447,8 +1448,6 @@ int processOptions(int argc, const char* const argv[], bool ignoreUnrecognized)
         } else if (strncmp(argv[i], "-Xjittablesize:", 15) == 0) {
             gDvmJit.jitTableSize = atoi(argv[i] + 15);
         } else if (strncmp(argv[i], "-Xjitcodecachesize:", 19) == 0) {
-            gDvmJit.codeCacheSize = atoi(argv[i] + 19);
-        } else if (strncmp(argv[i], "-Xjitcodecachesize:", 19) == 0) {
             gDvmJit.codeCacheSize = atoi(argv[i] + 19) * 1024;
 #ifndef ARCH_IA32
             if (gDvmJit.codeCacheSize == 0) {
@@ -1467,6 +1466,7 @@ int processOptions(int argc, const char* const argv[], bool ignoreUnrecognized)
             gDvmJit.printBinary = true;
         } else if (strncmp(argv[i], "-Xjitverbose", 12) == 0) {
             gDvmJit.printMe = true;
+#ifndef ARCH_IA32
         } else if (strncmp(argv[i], "-Xjitbackendstring:", 19) == 0) {
             char *ptr = strchr (argv[i], ':');
 
@@ -1627,6 +1627,7 @@ int processOptions(int argc, const char* const argv[], bool ignoreUnrecognized)
             {
                 dvmFprintf (stderr, "Refusing option for %s, it is not a valid number: must be only a strictly positive number\n", argv[i]);
             }
+#endif
         } else if (strncmp(argv[i], "-Xjitdisableinlining", 20) == 0) {
             gDvmJit.disableOpt |= 1 << kMethodInlining;
         } else if (strncmp(argv[i], "-Xjitinliningmethodsizemax:", strlen ("-Xjitinliningmethodsizemax:")) == 0) {
@@ -1648,6 +1649,7 @@ int processOptions(int argc, const char* const argv[], bool ignoreUnrecognized)
             }
         } else if (strncmp(argv[i], "-Xjitdisablepredictedinlining", strlen ("-Xjitdisablepredictedinlining")) == 0) {
             gDvmJit.disableOpt |= 1 << kPredictedMethodInlining;
+#ifdef ARCH_IA32
         } else if (strncmp(argv[i], "-Xjitmaxscratch:", strlen ("-Xjitmaxscratch:")) == 0) {
             const unsigned int sizeOfOption = strlen ("-Xjitmaxscratch:");
             char *endptr = 0;
@@ -1724,8 +1726,10 @@ int processOptions(int argc, const char* const argv[], bool ignoreUnrecognized)
             const char *file = argv[i] + 16;
             //Send off to handle user pass
             dvmCompilerHandleUserPlugin (file);
+#endif
         } else if (strncmp (argv[i], "-Xjitabortonerror", 17) == 0) {
             gDvmJit.abortOnCompilerError = true;
+#ifdef ARCH_IA32
         } else if (strncmp (argv[i], "-Xjitarenatrimstyle:", 20) == 0) {
             const char *style = argv[i] + 20;
             const char *acceptedStyles[] = {"none", "onlyOne", "average", "user"};
@@ -1771,6 +1775,7 @@ int processOptions(int argc, const char* const argv[], bool ignoreUnrecognized)
             {
                 dvmFprintf (stderr, "Refusing option for %s, it is not a valid number: must be only a strictly positive number\n", argv[i]);
             }
+#endif
 #if defined(VTUNE_DALVIK)
         } else if (strncmp(argv[i], "-Xjitsepdalvik", 14) == 0) {
             gDvmJit.vtuneInfo = kVTuneInfoNativeCode;
@@ -1999,10 +2004,20 @@ static void setCommandLineDefaults()
 #if defined(WITH_JIT)
     gDvm.executionMode = kExecutionModeJit;
 
+    gDvmJit.num_entries_pcTable = 0;
+    gDvmJit.includeSelectedMethod = false; //uninitialized variable may not be zero
+    gDvmJit.includeSelectedOffset = false;
+    gDvmJit.methodTable = NULL;
+    gDvmJit.classTable = NULL;
+    gDvmJit.codeCacheSize = DEFAULT_CODE_CACHE_SIZE;
+
+    gDvm.constInit = false;
+    gDvm.commonInit = false;
+
     gDvmJit.nestedLoops = true;
     gDvmJit.branchLoops = true;
     gDvmJit.testLoops = false;
-    gDvmJit.oldLoopDetection = false;
+    gDvmJit.oldLoopDetection = true;
     gDvmJit.backEndRegisterization = true;
     gDvmJit.maximumRegisterization = UINT_MAX;
     gDvmJit.abortOnCompilerError = false;
@@ -2030,20 +2045,13 @@ static void setCommandLineDefaults()
     //Set the jit framework in place
     setJitFramework ();
 
-    gDvmJit.num_entries_pcTable = 0;
     gDvmJit.scheduling = true;
-    gDvmJit.includeSelectedMethod = false; //uninitialized variable may not be zero
-    gDvmJit.includeSelectedOffset = false;
-    gDvmJit.methodTable = NULL;
-    gDvmJit.classTable = NULL;
-    gDvmJit.codeCacheSize = DEFAULT_CODE_CACHE_SIZE;
-
     gDvmJit.threshold = 0;
     gDvmJit.jitTableSize = 0;
+    //Reset for IA32
     gDvmJit.codeCacheSize = 0;
+    gDvmJit.oldLoopDetection = false;
 
-    gDvm.constInit = false;
-    gDvm.commonInit = false;
     gDvmJit.disableOpt = 1<<kMethodJit;
 #if defined(WITH_JIT_TUNING)
     gDvmJit.methodProfTable = NULL;
diff --git a/vm/alloc/HeapBitmap.h b/vm/alloc/HeapBitmap.h
index 5bb41f0..0319f51 100644
--- a/vm/alloc/HeapBitmap.h
+++ b/vm/alloc/HeapBitmap.h
@@ -19,9 +19,7 @@
 #include <limits.h>
 #include <stdint.h>
 
-#ifdef WITH_TLA
 #include "alloc/DlMalloc.h"
-#endif
 
 #define HB_OBJECT_ALIGNMENT 8
 #define HB_BITS_PER_WORD (sizeof(unsigned long) * CHAR_BIT)
diff --git a/vm/alloc/MarkSweep.cpp b/vm/alloc/MarkSweep.cpp
index e9bdf58..9bde005 100644
--- a/vm/alloc/MarkSweep.cpp
+++ b/vm/alloc/MarkSweep.cpp
@@ -999,6 +999,7 @@ void dvmHeapSweepUnmarkedObjects(bool isPartial, bool isConcurrent,
     prevMark = dvmHeapSourceGetLiveBits();
 
     bool withTLA = false;
+    mspace spaceForTLA = 0;
 
 #ifdef WITH_TLA
     bool resultIntercept = false;
@@ -1011,6 +1012,7 @@ void dvmHeapSweepUnmarkedObjects(bool isPartial, bool isConcurrent,
 
         /* Diable TLAMalloc */
         resultIntercept = dvmTLADisableMalloc();
+        spaceForTLA = dvmHeapSourceGetHeapMsp();
     }
 #endif
 
@@ -1022,7 +1024,7 @@ void dvmHeapSweepUnmarkedObjects(bool isPartial, bool isConcurrent,
          */
         dvmHeapBitmapSweepWalk (prevLive, prevMark, base[i], max[i],
                                 sweepBitmapCallback, &ctx,
-                                withTLA, isConcurrent, dvmHeapSourceGetHeapMsp());
+                                withTLA, isConcurrent, spaceForTLA);
     }
 
 #ifdef WITH_TLA
diff --git a/vm/compiler/BBOptimization.cpp b/vm/compiler/BBOptimization.cpp
index 4f956e5..648ccb5 100644
--- a/vm/compiler/BBOptimization.cpp
+++ b/vm/compiler/BBOptimization.cpp
@@ -163,50 +163,6 @@ bool dvmCompilerMergeBasicBlocks (CompilationUnit *cUnit, BasicBlock *bb)
     return false;
 }
 
-bool dvmCompilerRemoveUnreachableBlocks (CompilationUnit *cUnit, BasicBlock *bb)
-{
-    //Get the predecessors for this block
-    unsigned int predecessorCount = dvmCountSetBits (bb->predecessors);
-
-    //If it has no predecessors and it is a bytecode type block, then we can remove it without repercussion
-    if (predecessorCount == 0 && bb->blockType == kDalvikByteCode)
-    {
-        //Remove the block
-        dvmCompilerHideBasicBlock (cUnit->blockList, bb);
-
-        //We changed the CFG
-        return true;
-    }
-
-    //We've done nothing
-    return false;
-}
-
-/**
- * @brief Update the predecessor information of old and new BB
- * @details This only switches predecessors, unlike dvmCompilerCalculatePredecessors()
- * which calculates predecessor information for the whole cUnit.
- * @param parent The basic block whose children are changing
- * @param oldChild The basic block which is losing the parent
- * @param newChild The basic block which is gaining the parent
- */
-void dvmCompilerUpdatePredecessors (BasicBlock *parent, BasicBlock *oldChild, BasicBlock *newChild) {
-    assert(parent != 0);
-
-    //Remove association from old child
-    if ((oldChild != 0) && (dvmIsBitSet(oldChild->predecessors, parent->id) == true))
-    {
-        dvmCompilerClearBit (oldChild->predecessors, parent->id);
-    }
-
-    //Add information for newChild
-    if (newChild != 0)
-    {
-        dvmCompilerSetBit (newChild->predecessors, parent->id);
-    }
-}
-
-
 /**
  * @brief Insert the pre-loop header
  * @param cUnit the CompilationUnit
@@ -1521,35 +1477,3 @@ bool dvmCompilerRemoveGoto (CompilationUnit *cUnit, BasicBlock *bb)
     return false;
 }
 
-bool dvmCompilerFillUsedVector (CompilationUnit *cUnit, BasicBlock *bb)
-{
-    for (MIR *mir = bb->firstMIRInsn; mir != 0; mir = mir->next)
-    {
-        //Get SSA
-        SSARepresentation *ssaRep = mir->ssaRep;
-
-        if (ssaRep == 0)
-        {
-            continue;
-        }
-
-        //Go through the uses
-        int numUses = ssaRep->numUses;
-
-        for (int i = 0; i < numUses; i++)
-        {
-            //Get use
-            int ssaNum = ssaRep->uses[i];
-
-            //Get VR
-            int vr = dvmExtractSSARegister (cUnit, ssaNum);
-
-            //Set the bit in the used VRs' bitvector
-            dvmSetBit (cUnit->usedVRs, vr);
-        }
-    }
-
-    //Function did not instructions in the BB
-    return false;
-}
-
diff --git a/vm/compiler/BBOptimization.h b/vm/compiler/BBOptimization.h
index 2fe75f6..07ccb07 100644
--- a/vm/compiler/BBOptimization.h
+++ b/vm/compiler/BBOptimization.h
@@ -32,14 +32,6 @@ class LoopInformation;
 bool dvmCompilerMergeBasicBlocks (CompilationUnit *cUnit, BasicBlock *bb);
 
 /**
- * @brief Removes all bytecode blocks that have no predecessors
- * @param cUnit the Compilation Unit
- * @param bb the Basic Block
- * @return Returns whether we changed anything for the basic block
- */
-bool dvmCompilerRemoveUnreachableBlocks (CompilationUnit *cUnit, BasicBlock *bb);
-
-/**
  * @brief Form a loop
  * @details make sure it is a bottom formed
  * loop (or make it so), add a preloop block and an exit block
@@ -126,12 +118,4 @@ void dvmCompilerLocalValueNumbering (CompilationUnit *cUnit);
  */
 bool dvmCompilerRemoveGoto (CompilationUnit *cUnit, BasicBlock *bb);
 
-/**
- * @brief Get the used virtual registers in the BasicBlock and fill cUnit->usedVRs
- * @param cUnit the CompilationUnit
- * @param bb the BasicBlock
- * @return returns whether we changed any field in the BasicBlock structure and would like a second call on it
- */
-bool dvmCompilerFillUsedVector (CompilationUnit *cUnit, BasicBlock *bb);
-
 #endif
diff --git a/vm/compiler/Compiler.h b/vm/compiler/Compiler.h
index 066c223..fb440e8 100644
--- a/vm/compiler/Compiler.h
+++ b/vm/compiler/Compiler.h
@@ -347,6 +347,22 @@ MIR *dvmCompilerFindLowestMIRInColor (MIR *elem);
 bool dvmCompilerBuildDefUseChain (CompilationUnit *cUnit, BasicBlock *bb);
 
 /**
+ * @brief Removes all bytecode blocks that have no predecessors
+ * @param cUnit the Compilation Unit
+ * @param bb the Basic Block
+ * @return Returns whether we changed anything for the basic block
+ */
+bool dvmCompilerRemoveUnreachableBlocks (CompilationUnit *cUnit, BasicBlock *bb);
+
+/**
+ * @brief Get the used virtual registers in the BasicBlock and fill cUnit->usedVRs
+ * @param cUnit the CompilationUnit
+ * @param bb the BasicBlock
+ * @return returns whether we changed any field in the BasicBlock structure and would like a second call on it
+ */
+bool dvmCompilerFillUsedVector (CompilationUnit *cUnit, BasicBlock *bb);
+
+/**
  * @brief Checks if the opcode is a conditional branch.
  * @param opcode The opcode to check which may be an extended one
  * @return Returns whether we are looking at a conditional branch
diff --git a/vm/compiler/Dataflow.cpp b/vm/compiler/Dataflow.cpp
index 84bb689..87308b1 100644
--- a/vm/compiler/Dataflow.cpp
+++ b/vm/compiler/Dataflow.cpp
@@ -2398,7 +2398,7 @@ bool dvmCompilerFindInductionVariables(struct CompilationUnit *cUnit,
                         if (dvmIsBitSet(isConstantV,
                                         mir->ssaRep->uses[1])) {
                             deltaValue =
-                                cUnit->constantValues[mir->ssaRep->uses[1]];
+                                (*cUnit->constantValues)[mir->ssaRep->uses[1]];
                             deltaIsConstant = true;
                         }
                         break;
@@ -2406,7 +2406,7 @@ bool dvmCompilerFindInductionVariables(struct CompilationUnit *cUnit,
                         if (dvmIsBitSet(isConstantV,
                                         mir->ssaRep->uses[1])) {
                             deltaValue =
-                                -cUnit->constantValues[mir->ssaRep->uses[1]];
+                                -(*cUnit->constantValues)[mir->ssaRep->uses[1]];
                             deltaIsConstant = true;
                         }
                         break;
@@ -2464,14 +2464,14 @@ bool dvmCompilerFindInductionVariables(struct CompilationUnit *cUnit,
                 case OP_ADD_INT:
                     if (dvmIsBitSet(isConstantV,
                                     mir->ssaRep->uses[1])) {
-                        c = cUnit->constantValues[mir->ssaRep->uses[1]];
+                        c = (*cUnit->constantValues)[mir->ssaRep->uses[1]];
                         cIsConstant = true;
                     }
                     break;
                 case OP_SUB_INT:
                     if (dvmIsBitSet(isConstantV,
                                     mir->ssaRep->uses[1])) {
-                        c = -cUnit->constantValues[mir->ssaRep->uses[1]];
+                        c = -(*cUnit->constantValues)[mir->ssaRep->uses[1]];
                         cIsConstant = true;
                     }
                     break;
@@ -3495,31 +3495,9 @@ void dvmCompilerDataFlowAnalysisDispatcher(CompilationUnit *cUnit,
 /* Main entry point to do SSA conversion for non-loop traces */
 void dvmCompilerNonLoopAnalysis(CompilationUnit *cUnit)
 {
-    //Clear the nodes
-    dvmCompilerDataFlowAnalysisDispatcher (cUnit,
-            dvmCompilerClearVisitedFlag, kAllNodes, false);
-
     dvmCompilerDataFlowAnalysisDispatcher(cUnit, dvmCompilerDoSSAConversion,
                                           kAllNodes,
                                           false /* isIterative */);
-
-    //Set walk data: create the data on the stack, will get destroyed automatically at the end of the function
-    SSAWalkData data (cUnit);
-    cUnit->walkData = static_cast<void *> (&data);
-
-    dvmCompilerDataFlowAnalysisDispatcher (cUnit, dvmCompilerBuildDefUseChain, kAllNodes, false);
-
-    //Just for safety, reset walkData
-    cUnit->walkData = 0;
-
-    //We do this calculation to provide the backend with what is being used and defined in each BasicBlock
-    dvmCompilerDataFlowAnalysisDispatcher(cUnit, dvmCompilerFindLocalLiveIn,
-                                          kAllNodes,
-                                          false /* isIterative */);
-
-    dvmCompilerDataFlowAnalysisDispatcher (cUnit, dvmCompilerInitializeExitUses,
-                                          kAllNodes,
-                                          false /* isIterative */);
 }
 
 int dvmCompilerGetStartUseIndex (Opcode opcode)
diff --git a/vm/compiler/Frontend.cpp b/vm/compiler/Frontend.cpp
index 4722953..682988b 100644
--- a/vm/compiler/Frontend.cpp
+++ b/vm/compiler/Frontend.cpp
@@ -25,7 +25,9 @@
 #include "RegisterizationME.h"
 #include "Utility.h"
 
+#ifdef ARCH_IA32
 #define BYTECODE_FILTER
+#endif
 
 #ifdef PROFILE_OPCODE
 #include "dalvikvm/ProfileOpcodes.h"
@@ -2167,18 +2169,11 @@ static bool compileLoop(CompilationUnit *cUnit, unsigned int startOffset,
     //Mark off any non loop header block for future reference
     dvmCompilerLoopMarkOffNonHeaderBlocks (cUnit);
 
-#ifndef ARCH_IA32
     /* Try to identify a loop */
-    if (!dvmCompilerBuildLoop(cUnit))
-    {
-        goto bail;
-    }
-#else
     if (dvmCompilerCalculateBasicBlockInformation (cUnit) == false)
     {
         goto bail;
     }
-#endif
 
     //Set that the CompilationUnit is a loop
     dvmCompilerLoopOpt(cUnit);
@@ -2255,7 +2250,7 @@ static bool compileLoop(CompilationUnit *cUnit, unsigned int startOffset,
     dvmCompilerLocalRegAlloc(cUnit);
 
     /* Convert MIR to LIR, etc. */
-    dvmCompilerMIR2LIR(cUnit);
+    dvmCompilerMIR2LIR(cUnit, info);
 #endif
 
     /* Loop contains never executed blocks / heavy instructions */
@@ -2922,7 +2917,7 @@ bool dvmCompileTrace(JitTraceDescription *desc, int numMaxInsts,
     }
 
     /* Convert MIR to LIR, etc. */
-    dvmCompilerMIR2LIR(&cUnit);
+    dvmCompilerMIR2LIR(&cUnit, info);
 #else /* ARCH_IA32 */
     //The loop optimization framework can work for traces as well
     dvmCompilerLoopOpt(&cUnit);
diff --git a/vm/compiler/InlineTransformation.cpp b/vm/compiler/InlineTransformation.cpp
index 5dc3cc3..876f4db 100755
--- a/vm/compiler/InlineTransformation.cpp
+++ b/vm/compiler/InlineTransformation.cpp
@@ -327,6 +327,7 @@ static bool isVerySimpleMethod (CompilerMethodStats *methodStats)
     return false;
 }
 
+#ifdef ARCH_IA32
 /**
  * @brief Checks if method is throw-free, leaf, and fewer than 20 instructions.
  * @param methodStats The statics on method we are trying to inline
@@ -364,8 +365,7 @@ static InliningFailure isSmallThrowFreeLeaf (CompilerMethodStats *methodStats)
 
     return kInliningNoError;
 }
-
-
+#endif
 
 /**
  * @brief Used to determine the register window shift required to uniquely name all VRs for multiple levels of nesting
@@ -666,7 +666,7 @@ static InliningFailure removeInvokeAndMoveResult (GrowableList &callerBasicBlock
         int flags = dvmCompilerGetOpcodeFlags (lastMir->dalvikInsn.opcode);
 
         //If bytecode can continue, it may fall through in which case branch is needed
-        if (flags & kInstrCanContinue != 0)
+        if ((flags & kInstrCanContinue) != 0)
         {
             invokeBB->needFallThroughBranch = true;
         }
diff --git a/vm/compiler/IntermediateRep.cpp b/vm/compiler/IntermediateRep.cpp
index 793df9a..b45610e 100644
--- a/vm/compiler/IntermediateRep.cpp
+++ b/vm/compiler/IntermediateRep.cpp
@@ -1720,3 +1720,78 @@ BasicBlock **ChildBlockIterator::getNextChildPtr (void)
     //If we make it here we found no remaining children
     return 0;
 }
+
+/**
+ * @brief Update the predecessor information of old and new BB
+ * @details This only switches predecessors, unlike dvmCompilerCalculatePredecessors()
+ * which calculates predecessor information for the whole cUnit.
+ * @param parent The basic block whose children are changing
+ * @param oldChild The basic block which is losing the parent
+ * @param newChild The basic block which is gaining the parent
+ */
+void dvmCompilerUpdatePredecessors (BasicBlock *parent, BasicBlock *oldChild, BasicBlock *newChild) {
+    assert(parent != 0);
+
+    //Remove association from old child
+    if ((oldChild != 0) && (dvmIsBitSet(oldChild->predecessors, parent->id) == true))
+    {
+        dvmCompilerClearBit (oldChild->predecessors, parent->id);
+    }
+
+    //Add information for newChild
+    if (newChild != 0)
+    {
+        dvmCompilerSetBit (newChild->predecessors, parent->id);
+    }
+}
+
+bool dvmCompilerRemoveUnreachableBlocks (CompilationUnit *cUnit, BasicBlock *bb)
+{
+    //Get the predecessors for this block
+    unsigned int predecessorCount = dvmCountSetBits (bb->predecessors);
+
+    //If it has no predecessors and it is a bytecode type block, then we can remove it without repercussion
+    if (predecessorCount == 0 && bb->blockType == kDalvikByteCode)
+    {
+        //Remove the block
+        dvmCompilerHideBasicBlock (cUnit->blockList, bb);
+
+        //We changed the CFG
+        return true;
+    }
+
+    //We've done nothing
+    return false;
+}
+
+bool dvmCompilerFillUsedVector (CompilationUnit *cUnit, BasicBlock *bb)
+{
+    for (MIR *mir = bb->firstMIRInsn; mir != 0; mir = mir->next)
+    {
+        //Get SSA
+        SSARepresentation *ssaRep = mir->ssaRep;
+
+        if (ssaRep == 0)
+        {
+            continue;
+        }
+
+        //Go through the uses
+        int numUses = ssaRep->numUses;
+
+        for (int i = 0; i < numUses; i++)
+        {
+            //Get use
+            int ssaNum = ssaRep->uses[i];
+
+            //Get VR
+            int vr = dvmExtractSSARegister (cUnit, ssaNum);
+
+            //Set the bit in the used VRs' bitvector
+            dvmSetBit (cUnit->usedVRs, vr);
+        }
+    }
+
+    //Function did not instructions in the BB
+    return false;
+}
diff --git a/vm/compiler/JitProfiling.h b/vm/compiler/JitProfiling.h
index 29f3923..e3b056d 100644
--- a/vm/compiler/JitProfiling.h
+++ b/vm/compiler/JitProfiling.h
@@ -406,6 +406,7 @@ typedef struct _iJIT_Method_Inline_Load
 extern "C" {
 #endif /* __cplusplus */
 
+#ifdef ARCH_IA32
 #ifndef CDECL
 #  if defined WIN32 || defined _WIN32
 #    define CDECL __cdecl
@@ -419,6 +420,9 @@ extern "C" {
 #endif /* CDECL */
 
 #define JITAPI CDECL
+#else
+#define JITAPI
+#endif
 /** @endcond */
 
 /**
diff --git a/vm/compiler/Loop.cpp b/vm/compiler/Loop.cpp
index 1c50112..7c91755 100644
--- a/vm/compiler/Loop.cpp
+++ b/vm/compiler/Loop.cpp
@@ -23,6 +23,11 @@
 #include "PassDriver.h"
 #endif
 
+#ifdef DEBUG_LOOP_ON
+#define DEBUG_LOOP(X) X
+#else
+#define DEBUG_LOOP(X)
+#endif
 
 #ifndef ARCH_IA32
 /**
@@ -929,6 +934,7 @@ static void dvmDumpHoistedRangeCheckInfo(CompilationUnit* cUnit)
 #endif
 
 
+#ifdef ARCH_IA32
 // The main purpose of the function is to transform internal array access info into
 // hoisted checks extended MIRs at start of a loop which will be transformed to
 // assembly using special algorithm and data from hoisted checks MIR's
@@ -1074,6 +1080,7 @@ void dvmCompilerGenHoistedChecks(CompilationUnit *cUnit, Pass* pass)
 
     (void) pass;
 }
+#endif
 
 void resetBlockEdges(BasicBlock *bb)
 {
@@ -1705,6 +1712,8 @@ bool dvmCompilerLoopOpt(CompilationUnit *cUnit)
     return true;
 }
 #else
+
+#ifdef DEBUG_LOOP_ON
 /* Debugging routines */
 static void dumpConstants(CompilationUnit *cUnit)
 {
@@ -1715,7 +1724,7 @@ static void dumpConstants(CompilationUnit *cUnit)
             int subNReg = dvmConvertSSARegToDalvik(cUnit, i);
             ALOGE("CONST: s%d(v%d_%d) has %d", i,
                  DECODE_REG(subNReg), DECODE_SUB(subNReg),
-                 cUnit->constantValues[i]);
+                 (*cUnit->constantValues)[i]);
         }
     }
 }
@@ -1772,6 +1781,7 @@ static void dumpHoistedChecks(CompilationUnit *cUnit)
         ALOGE("  opcode %d", loopAnalysis->loopBranchOpcode);
     }
 }
+#endif
 
 /*
  * Main entry point to do loop optimization.
@@ -1833,7 +1843,7 @@ bool dvmCompilerInsertBackwardChaining(CompilationUnit *cUnit)
 #if !defined(WITH_SELF_VERIFICATION)
     if (gDvmJit.profileMode != kTraceProfilingContinuous &&
         gDvmJit.profileMode != kTraceProfilingPeriodicOn) {
-        return;
+        return false;
     }
 #endif
 #endif
@@ -2198,6 +2208,7 @@ void dvmCompilerLoopMarkOffNonHeaderBlocks (CompilationUnit *cUnit)
     //Domination is done later so no need here
 }
 
+#ifdef ARCH_IA32
 /**
  * @brief Looks through backward's predecessors and inserts a new block in
  * between. It also ensures that new block is the taken branch and flips
@@ -2429,3 +2440,4 @@ void dvmCompilerInsertLoopHelperBlocks (CompilationUnit *cUnit, Pass *currentPas
     //Unused argument
     (void) currentPass;
 }
+#endif
\ No newline at end of file
diff --git a/vm/compiler/SSATransformation.cpp b/vm/compiler/SSATransformation.cpp
index 013a76f..459a29c 100644
--- a/vm/compiler/SSATransformation.cpp
+++ b/vm/compiler/SSATransformation.cpp
@@ -1138,11 +1138,13 @@ bool dvmCompilerCalculateBasicBlockInformation (CompilationUnit *cUnit, bool fil
     //Just for safety, reset walkData
     cUnit->walkData = 0;
 
+#ifdef ARCH_IA32
     //Call loop information fill if needed
     if (buildLoopInfo == true)
     {
         cUnit->loopInformation = LoopInformation::getLoopInformation (cUnit, cUnit->loopInformation);
     }
+#endif
 
     //Clear the constants
     cUnit->constantValues->clear ();
@@ -1154,6 +1156,7 @@ bool dvmCompilerCalculateBasicBlockInformation (CompilationUnit *cUnit, bool fil
             kAllNodes,
             false /* isIterative */);
 
+#ifdef ARCH_IA32
     //Finally, find the induction variables
     dvmCompilerFindInductionVariables (cUnit, cUnit->loopInformation);
 
@@ -1165,6 +1168,7 @@ bool dvmCompilerCalculateBasicBlockInformation (CompilationUnit *cUnit, bool fil
 
     //Do invariant detection in a loop
     dvmCompilerVariant (cUnit);
+#endif
 
     return true;
 }
diff --git a/vm/compiler/StackExtension.h b/vm/compiler/StackExtension.h
index f7b6751..be2301f 100644
--- a/vm/compiler/StackExtension.h
+++ b/vm/compiler/StackExtension.h
@@ -43,28 +43,7 @@ int dvmArchSpecGetPureLocalScratchRegister (const Method * method, unsigned int
 bool dvmArchIsPureLocalScratchRegister (const Method * method, int virtualReg, int registerWindowShift);
 
 #ifdef ARCH_IA32
-
 #include "codegen/x86/StackExtensionX86.h"
-
-#else
-
-unsigned int dvmArchSpecGetNumberOfScratch (void)
-{
-    //Non-x86 don't have scratch registers in their frames
-    return 0;
-}
-
-int dvmArchSpecGetPureLocalScratchRegister (const Method * method, unsigned int idx, int registerWindowShift)
-{
-    //Non-x86 don't have scratch registers in their frames
-    return -1;
-}
-
-bool dvmArchIsPureLocalScratchRegister (const Method * method, int virtualReg, int registerWindowShift)
-{
-    //Non-x86 don't support scratch registers and therefore no VR is scratch
-    return false;
-}
 #endif
 
 #endif /* STACKEXTENSION_H_ */
diff --git a/vm/compiler/codegen/arm/ArchUtility.cpp b/vm/compiler/codegen/arm/ArchUtility.cpp
index 9f87b7f..14b5c4a 100644
--- a/vm/compiler/codegen/arm/ArchUtility.cpp
+++ b/vm/compiler/codegen/arm/ArchUtility.cpp
@@ -436,3 +436,21 @@ void dvmCompilerCacheClear(char *start, size_t size)
 
     memset(start, 0xde, size);
 }
+
+unsigned int dvmArchSpecGetNumberOfScratch (void)
+{
+    //Non-x86 don't have scratch registers in their frames
+    return 0;
+}
+
+int dvmArchSpecGetPureLocalScratchRegister (const Method * method, unsigned int idx, int registerWindowShift)
+{
+    //Non-x86 don't have scratch registers in their frames
+    return -1;
+}
+
+bool dvmArchIsPureLocalScratchRegister (const Method * method, int virtualReg, int registerWindowShift)
+{
+    //Non-x86 don't support scratch registers and therefore no VR is scratch
+    return false;
+}
diff --git a/vm/compiler/codegen/arm/CodegenDriver.cpp b/vm/compiler/codegen/arm/CodegenDriver.cpp
index 44a48f7..520bf80 100644
--- a/vm/compiler/codegen/arm/CodegenDriver.cpp
+++ b/vm/compiler/codegen/arm/CodegenDriver.cpp
@@ -4176,7 +4176,7 @@ static bool selfVerificationPuntOps(MIR *mir)
 }
 #endif
 
-void dvmCompilerMIR2LIR(CompilationUnit *cUnit)
+void dvmCompilerMIR2LIR(CompilationUnit *cUnit, JitTranslationInfo *info)
 {
     /* Used to hold the labels of each block */
     ArmLIR *labelList =
diff --git a/vm/compiler/codegen/mips/ArchUtility.cpp b/vm/compiler/codegen/mips/ArchUtility.cpp
index 1f6d593..9368144 100644
--- a/vm/compiler/codegen/mips/ArchUtility.cpp
+++ b/vm/compiler/codegen/mips/ArchUtility.cpp
@@ -354,3 +354,21 @@ void dvmCompilerCacheClear(char *start, size_t size)
     /* 0x66 is an invalid opcode for mips. */
     memset(start, 0x66, size);
 }
+
+unsigned int dvmArchSpecGetNumberOfScratch (void)
+{
+    //Non-x86 don't have scratch registers in their frames
+    return 0;
+}
+
+int dvmArchSpecGetPureLocalScratchRegister (const Method * method, unsigned int idx, int registerWindowShift)
+{
+    //Non-x86 don't have scratch registers in their frames
+    return -1;
+}
+
+bool dvmArchIsPureLocalScratchRegister (const Method * method, int virtualReg, int registerWindowShift)
+{
+    //Non-x86 don't support scratch registers and therefore no VR is scratch
+    return false;
+}
diff --git a/vm/compiler/codegen/mips/CodegenDriver.cpp b/vm/compiler/codegen/mips/CodegenDriver.cpp
index 62a9a4f..e7b38d6 100644
--- a/vm/compiler/codegen/mips/CodegenDriver.cpp
+++ b/vm/compiler/codegen/mips/CodegenDriver.cpp
@@ -4304,7 +4304,7 @@ assert(0); /* MIPSTODO port selfVerificationPuntOps() */
 }
 #endif
 
-void dvmCompilerMIR2LIR(CompilationUnit *cUnit)
+void dvmCompilerMIR2LIR(CompilationUnit *cUnit, JitTranslationInfo *info)
 {
     /* Used to hold the labels of each block */
     MipsLIR *labelList =
diff --git a/vm/compiler/codegen/mips/CodegenFactory.cpp b/vm/compiler/codegen/mips/CodegenFactory.cpp
index a1211cc..c88649b 100644
--- a/vm/compiler/codegen/mips/CodegenFactory.cpp
+++ b/vm/compiler/codegen/mips/CodegenFactory.cpp
@@ -347,3 +347,86 @@ static void genDispatchToHandler(CompilationUnit *cUnit, TemplateOpcode opCode)
         newLIR2(cUnit, kMipsJalr, r_RA, r_T9);
     }
 }
+
+#ifndef ARCH_IA32
+//For non x86, to let it compile
+bool dvmCompilerFindRegClass (MIR *mir, int vR, RegisterClass &regClass, bool onlyUse)
+{
+    (void) mir;
+    (void) vR;
+    (void) regClass;
+    (void) onlyUse;
+    return false;
+}
+
+/**
+ * @brief Architecture specific BasicBlock printing
+ * @param cUnit the CompilationUnit
+ * @param bb the BasicBlock
+ * @param file the File in which to dump the BasicBlock
+ */
+void dvmCompilerDumpArchSpecificBB(CompilationUnit *cUnit, BasicBlock *bb, FILE *file, bool beforeMIRs) {
+    // Empty stub for non x86
+    (void) cUnit;
+    (void) bb;
+    (void) file;
+    (void) beforeMIRs;
+}
+
+/**
+ * @brief Architecture specific BasicBlock creator
+ * @details Initializes x86 specific BasicBlock fields
+ * @return newly created BasicBlock
+ */
+BasicBlock * dvmCompilerArchSpecificNewBB(void) {
+    // Empty stub since non x86 do not use a specialized BasicBlock
+    return NULL;
+}
+
+/**
+ * @brief Architecture specific checker for possible bail out to VM
+ * @details Returns true for x86 if bail out from JIT code is possible
+ * @param cUnit the CompilationUnit
+ * @param mir the MIR to check
+ * @return true if bail out possible
+ */
+bool backendCanBailOut(CompilationUnit *cUnit, MIR *mir) {
+    // non x86 do not use a fake uses
+    return false;
+}
+
+/**
+ * @brief Check whether architecture supports vectorized packed size in bytes
+ * @param size The vectorized packed size, ie the size of the operands lying in a vectorized instruction
+ * @return Returns whether the architecture supports it
+ */
+bool dvmCompilerArchSupportsVectorizedPackedSize (unsigned int size)
+{
+    //No vectorization support for other architectures unless encoder implements it
+    return false;
+}
+
+/**
+ * @brief Used to check whether the architecture specific portion supports extended opcode
+ * @param extendedOpcode The opcode to check
+ * @return Returns whether the extended opcode is supported
+ */
+bool dvmCompilerArchSupportsExtendedOp (int extendedOpcode)
+{
+    switch (extendedOpcode)
+    {
+        case kMirOpPhi:
+        case kMirOpNullNRangeUpCheck:
+        case kMirOpNullNRangeDownCheck:
+        case kMirOpLowerBound:
+        case kMirOpPunt:
+        case kMirOpCheckInlinePrediction:
+            return true;
+        default:
+            break;
+    }
+
+    //If we get here it is not supported
+    return false;
+}
+#endif
-- 
1.7.4.1

