From 7710c2f6cd6de4a85a0e1d124cc9479c3bf4567d Mon Sep 17 00:00:00 2001
From: vladimir.a.ivanov <vladimir.a.ivanov@intel.com>
Date: Sun, 8 Dec 2013 09:23:17 +0700
Subject: Dalvik: incorrect thread shutdown on system.exit

BZ: 137837

This issue occurred due to active threads reading from global variables on the VM shutdown.
The current model assumes that signals are ignored during shutdown with help of SIG_IGN macro.
But it works for signals send by 'kill' method only. The proposed solution tries to
ignore signals by user-defined handler that is called for signals from any points.

Change-Id: Id8be4d79f7826dade6eab2fb14e036b0bb9045f6
Category: device enablement
Domain: AOSP.Dalvik-Other
Origin: internal
Upstream-Candidate: no, proprietary
Signed-off-by: vladimir.a.ivanov <vladimir.a.ivanov@intel.com>
---
 vm/SignalCatcher.cpp |   30 ++++++++++++++++++++++--------
 1 files changed, 22 insertions(+), 8 deletions(-)

diff --git a/vm/SignalCatcher.cpp b/vm/SignalCatcher.cpp
index 8e62e26..4779abb 100644
--- a/vm/SignalCatcher.cpp
+++ b/vm/SignalCatcher.cpp
@@ -35,6 +35,14 @@
 static void* signalCatcherThreadStart(void* arg);
 
 /**
+ * @brief signals handler to implement 'ignore' semantic.
+ * Do nothing.
+ * @param signal signal number
+ */
+void ignHandler(int signal) {
+}
+
+/**
  * @brief Ignore fatal signals after System.exit()
  * @details Java spec does not specify VM behavior after System.exit() call.
  * Therefore we legaly ignore fatal signals on VM shutdown phase after
@@ -51,14 +59,20 @@ void dvmIgnoreSignalsOnVMExit(void)
 
     ALOGI("System.exit() call: started ignoring fatal signals");
 
-    /* Ignore fatal signals after System.exit()*/
-    signal(SIGSEGV, SIG_IGN);
-    signal(SIGILL,  SIG_IGN);
-    signal(SIGABRT, SIG_IGN);
-    signal(SIGBUS,  SIG_IGN);
-    signal(SIGIOT,  SIG_IGN);
-    signal(SIGFPE,  SIG_IGN);
-    signal(SIGPIPE, SIG_IGN);
+    /* Ignore fatal signals after System.exit()
+     * Now it implemented as user's handler because the SIG_IGN
+     * works for the method 'kill' only. I.e. mentioned signals
+     * will be ignored in the case of call 'kill(pid, SIGSEGV)'.
+     * But the SIGSEGV will be passed to default signal handler
+     * in the case of illegal memory access, for example.
+     */
+    signal(SIGSEGV, ignHandler);
+    signal(SIGILL,  ignHandler);
+    signal(SIGABRT, ignHandler);
+    signal(SIGBUS,  ignHandler);
+    signal(SIGIOT,  ignHandler);
+    signal(SIGFPE,  ignHandler);
+    signal(SIGPIPE, ignHandler);
 }
 
 /*
-- 
1.7.4.1

