From 4ffad0194655a2a95e954e6ab205227dc7eb56c8 Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Tue, 5 Mar 2013 18:05:22 +0700
Subject: Dalvik: incorrect arguments for existATryBlock in freeReg

BZ: 83969

There is a mix up of usage offsetPC global variable in code.
This global variable means actually sequential number of MIR
in the trace while sometimes it is used as offset to bytecode PC.
That leads to incorrect behavior.
The patch fixes the usage of offsetPC in freeReg function and
introduces a utility function to convert offsetPC to bytecode offset.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I44c811c43ec1d6aad99517110992a4efa428449e
Orig-MCG-Change-Id: I3e91005b0a4bde044974b44a854024021bd7ab97
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/AnalysisO1.cpp |   23 +++++++++++++++++++----
 1 files changed, 19 insertions(+), 4 deletions(-)

diff --git a/vm/compiler/codegen/x86/AnalysisO1.cpp b/vm/compiler/codegen/x86/AnalysisO1.cpp
index 651a98f..555fce4 100644
--- a/vm/compiler/codegen/x86/AnalysisO1.cpp
+++ b/vm/compiler/codegen/x86/AnalysisO1.cpp
@@ -4350,6 +4350,20 @@ bool isNextToLastAccess(int compileIndex) {
     return false;
 }
 
+/** return bytecode offset corresponding to offsetPC
+*/
+int convertOffsetPCtoBytecodeOffset(int offPC) {
+    if(offPC == PC_FOR_START_OF_BB)
+        return currentBB->pc_start;
+    if(offPC == PC_FOR_END_OF_BB)
+        return currentBB->pc_end;
+    for(MIR * mir = currentBB->jitBasicBlock->firstMIRInsn; mir; mir = mir->next) {
+       if(mir->seqNum == offPC)
+         return mir->offset;
+    }
+    return currentBB->pc_end;
+}
+
 /** return the start of the next live range
     if there does not exist a next live range, return pc_end of the basic block
     for 64 bits, return the larger one for low half and high half
@@ -4377,7 +4391,7 @@ int getNextLiveRange(int compileIndex) {
         }
         ptr = ptr->next;
     }
-    if(!found) return currentBB->pc_end;
+    if(!found) return PC_FOR_END_OF_BB;
     if(tSize == OpndSize_32) return nextUse;
 
     /* check live ranges of the high half */
@@ -4398,7 +4412,7 @@ int getNextLiveRange(int compileIndex) {
         }
         ptr = ptr->next;
     }
-    if(!found) return currentBB->pc_end;
+    if(!found) return PC_FOR_END_OF_BB;
     /* return the larger one */
     return (nextUse2 > nextUse ? nextUse2 : nextUse);
 }
@@ -4516,7 +4530,7 @@ int freeReg(bool spillGL) {
                        last bytecode of a live range && offsetPC != currentBB->pc_end
                            -> last bytecode of a live range not reaching end
                 */
-                typeC = ((freeCrit && offsetPC != currentBB->pc_end) ||
+                typeC = ((freeCrit && offsetPC != PC_FOR_END_OF_BB) ||
                          (currentBB->endsWithReturn && boolB)) &&
                         compileTable[k].gType == GLOBALTYPE_GG &&
                         !delayFreeing;
@@ -4551,7 +4565,8 @@ int freeReg(bool spillGL) {
                        and there exists a try block from offsetPC to the next live range
                            dump VR to interpreted stack */
                     int tmpPC = getNextLiveRange(k);
-                    if(existATryBlock(currentMethod, offsetPC, tmpPC)) dumpGL = true;
+                    if(existATryBlock(currentMethod, convertOffsetPCtoBytecodeOffset(offsetPC),
+                        convertOffsetPCtoBytecodeOffset(tmpPC))) dumpGL = true;
                 }
                 /* if the live range reach end of basic block, dump VR to interpreted stack */
                 if(compileTable[k].gType == GLOBALTYPE_GL && reachEnd) dumpGL = true;
-- 
1.7.4.1

