From 89336b7639518222d246610b2366333855d68cdf Mon Sep 17 00:00:00 2001
From: Tim Hartley <timothy.d.hartley@intel.com>
Date: Thu, 26 Sep 2013 13:33:52 -0700
Subject: Dalvik: PCG GL needs numerator-is-zero division optimizaion

BZ: 141503

LCG code generation has an optimization where division is
avoided when the numerator is zero. This patch adds this
optimization to the PCG GL, leading to a swing of roughly 25%
in CFBench Java MIPS.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Id1745703aa3ee39681e90a65a8f1545238e7f7d0
Orig-MCG-Change-Id: I96b0b4b8bcb8d6fb2f9143e23a00616ea723846b
Signed-off-by: Tim Hartley <timothy.d.hartley@intel.com>
Reviewed-on: http://android.intel.com:8080/134721
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Kreitzer, David L <david.l.kreitzer@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Dittert, Eric <eric.dittert@intel.com>
Reviewed-by: Semukhina, Elena V <elena.v.semukhina@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/pcg/LowerALU.cpp |   17 ++++++++++++++++-
 1 files changed, 16 insertions(+), 1 deletions(-)

diff --git a/vm/compiler/codegen/x86/pcg/LowerALU.cpp b/vm/compiler/codegen/x86/pcg/LowerALU.cpp
index 06e93f8..4f4fed1 100644
--- a/vm/compiler/codegen/x86/pcg/LowerALU.cpp
+++ b/vm/compiler/codegen/x86/pcg/LowerALU.cpp
@@ -705,6 +705,7 @@ void dvmCompilerPcgTranslateDivRemInt (CompilationUnitPCG *cUnit, MIR *mir)
     const char *opcodeMove;
     const char *divbRes;
     u4 specialResult;  // This is the defined result for 0x80000000 / -1
+    bool skipZeroNumDiv = false;
 
     Opcode dalvikOpCode = mir->dalvikInsn.opcode;
 
@@ -722,6 +723,7 @@ void dvmCompilerPcgTranslateDivRemInt (CompilationUnitPCG *cUnit, MIR *mir)
         opcodeMove = "bmov";
         divbRes = "al";
         specialResult = 0x80000000;
+        skipZeroNumDiv = true;
     }
     else
     {
@@ -738,6 +740,9 @@ void dvmCompilerPcgTranslateDivRemInt (CompilationUnitPCG *cUnit, MIR *mir)
     // if (C == 0) {
     //     throwDivideByZero ();
     // }
+    // else if (B == 0) { // This check is only performed for division, not remainder
+    //      r = 0;
+    // }
     // else if ( ( (B | C) & 0xffffff00) == 0) {
     //     r = B [byte /] C
     // }
@@ -761,12 +766,22 @@ void dvmCompilerPcgTranslateDivRemInt (CompilationUnitPCG *cUnit, MIR *mir)
 
     CGBindLabel (zeroCheckOk);
 
+    CGTemp resultTemp = cUnit->getCurrentTemporaryVR (true);
     CGLabel codeEnd = CGCreateLabel ();
     CGLabel specialLabel_1 = CGCreateLabel ();
     CGLabel specialLabel_2 = CGCreateLabel ();
     CGLabel specialLabel_3 = CGCreateLabel ();
     CGLabel divLabel = CGCreateLabel ();
-    CGTemp resultTemp = cUnit->getCurrentTemporaryVR (true);
+
+    if (skipZeroNumDiv == true)
+    {
+        // Short circuit check for zero numerator.
+        CGLabel numer_zeroCheckOk = CGCreateLabel ();
+        CGCreateNewInst ("cjcc", "rcrbp", B, "ne", zero, numer_zeroCheckOk, 99);
+        CGAddTempDef (resultTemp, zero);
+        CGCreateNewInst ("jmp", "b", codeEnd);
+        CGBindLabel (numer_zeroCheckOk);
+    }
 
     CGInst orVal = CGCreateNewInst ("or", "rr", B, C);
     CGInst andVal = CGCreateNewInst ("and", "ri", orVal, 0xffffff00);
-- 
1.7.4.1

