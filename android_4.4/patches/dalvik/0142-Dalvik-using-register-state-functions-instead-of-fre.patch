From 89b1969700b2ef0e72747525fb15532165336d3e Mon Sep 17 00:00:00 2001
From: lzang1 <lin.zang@intel.com>
Date: Tue, 16 Apr 2013 14:58:29 +0800
Subject: Dalvik: using register state functions instead of freeReg() in JIT for monitor enter/exit

BZ: 100730

In the JIT implementation of monitor enter/exit. freeReg() was used for keeping the VR state consistency
when native call was invoked. However, there is some light-weighted register state record-recover
function such as rememberState() and transferToState().
these func should be used instead of freeReg() for Register state consistency processing.

This patch use rememberState() and transferToState() in monitor enter/exit JIT instead of freeReg().

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I923c3ac933246a27efd3fdd334b6747843168f76
Orig-MCG-Change-Id: Ia94f07d1ee14abea4ca7950495e5a516750ce4cf
Signed-off-by: lzang1 <lin.zang@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/LowerObject.cpp |   24 ++++++++++--------------
 1 files changed, 10 insertions(+), 14 deletions(-)

diff --git a/vm/compiler/codegen/x86/LowerObject.cpp b/vm/compiler/codegen/x86/LowerObject.cpp
index 8458117..84bfdcf 100644
--- a/vm/compiler/codegen/x86/LowerObject.cpp
+++ b/vm/compiler/codegen/x86/LowerObject.cpp
@@ -233,17 +233,6 @@ int monitor_enter_nohelper(int vA, const MIR *mir) {
     scratchRegs[0] = PhysicalReg_SCRATCH_1;
     scratchRegs[2] = PhysicalReg_Null; scratchRegs[3] = PhysicalReg_Null;
 
-    //Force spill vA.
-    //In native implementation, dvmLockObject() invokes beforeCall() that spill vA
-    //And op_monitor_exit() will retrive vA back from memory
-    //However, after inlining the JIT code,
-    //there will be a chance that dvmLockObject() will not be called,
-    //but the op_moniter_exit still retrieve vA back from memory.
-    //To avoid this issue, we force spill VR out here by call freeReg.
-    if(gDvm.executionMode == kExecutionModeNcgO1) {
-        freeReg(true);
-    }
-
     if((mir->OptimizationFlags & MIR_IGNORE_NULL_CHECK) == 0)
     {
         requestVRFreeDelay(vA,VRDELAY_NULLCHECK); // Request VR delay before transfer to temporary
@@ -287,6 +276,9 @@ int monitor_enter_nohelper(int vA, const MIR *mir) {
     //add the lock to Object using cmpxchg, if it is simple case, EAX value should be same as Object->lock
     compareAndExchange(OpndSize_32, 3, false, offsetof(Object, lock), 1, false);
 
+    //remember the state of register before comditional_jump
+    rememberState(1);
+
     //if successful added lock, jump to the end of this function
     conditional_jump(Condition_Z, ".call_monitor_native_done", true);
 
@@ -312,6 +304,8 @@ int monitor_enter_nohelper(int vA, const MIR *mir) {
     scratchRegs[0] = PhysicalReg_SCRATCH_2;
     call_dvmLockObject();
     load_effective_addr(8, PhysicalReg_ESP, true, PhysicalReg_ESP, true);
+    //now we restore the register state for later use of VR
+    transferToState(1);
     if (insertLabel(".call_monitor_native_done", true) == -1) {
        return -1;
     }
@@ -420,10 +414,10 @@ int op_monitor_exit(const MIR * mir) {
         //there will be a chance that dvmUnlockObject() will not be called,
         //but the spill in beforecall() marked the VR as in memory,
         //so later use of VR may incorrectly unspill the value from memory.
-        //To avoid this issue, we force spill VR out here by call freeReg.
-	freeReg(true);
+        //To avoid this issue, we remember the state.
+        rememberState(1);
 
-	//locked by other thread or fat lock or recursive lock, jump to call the native functions
+        //locked by other thread or fat lock or recursive lock, jump to call the native functions
         conditional_jump(Condition_NE, "j_call_dvmUnlockObject", true);
 
         //create the new words(32bit) for obj->lock, it only contains the hash bits of original obj->lock
@@ -446,6 +440,8 @@ int op_monitor_exit(const MIR * mir) {
         call_dvmUnlockObject();
         compare_imm_reg(OpndSize_32, 0, PhysicalReg_EAX, true);
         load_effective_addr(8, PhysicalReg_ESP, true, PhysicalReg_ESP, true);
+        //transfor the register state for later use of VR
+        transferToState(1);
 
 #if defined(WITH_JIT)
         conditional_jump(Condition_NE, ".unlock_object_done", true);
-- 
1.7.4.1

