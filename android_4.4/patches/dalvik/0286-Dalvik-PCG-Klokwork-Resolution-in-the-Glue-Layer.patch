From 90d16d982454fa6b6bd1c8d662edbed77c17ad17 Mon Sep 17 00:00:00 2001
From: Dong-Yuan Chen <dong-yuan.chen@intel.com>
Date: Sat, 17 Aug 2013 22:18:33 -0700
Subject: Dalvik: PCG: Klokwork Resolution in the Glue Layer

BZ: 130200

There were Klokwork issues in the PCG GLue Layer. This patch addresses them.

The issues related to NULL dereferencing without explicit checks and were
signaled on the 08/12/13.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I919cb20e2da90aacbc0973ee736597728e9b8646
Orig-MCG-Change-Id: I1bc827179f097225b94382e531e769da07d34c4b
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Reviewed-on: http://android.intel.com:8080/125055
Reviewed-by: Dittert, Eric <eric.dittert@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Semukhina, Elena V <elena.v.semukhina@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Reviewed-on: http://android.intel.com:8080/125994
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/pcg/Analysis.cpp           |   13 ++++++++-
 .../codegen/x86/pcg/ChainingCellException.cpp      |   28 +++++++++++++++++--
 vm/compiler/codegen/x86/pcg/CodeGeneration.cpp     |   12 ++++++++
 vm/compiler/codegen/x86/pcg/Labels.cpp             |   25 +++++++++++++++---
 vm/compiler/codegen/x86/pcg/LowerALU.cpp           |   25 +++++++++++++++++
 5 files changed, 95 insertions(+), 8 deletions(-)

diff --git a/vm/compiler/codegen/x86/pcg/Analysis.cpp b/vm/compiler/codegen/x86/pcg/Analysis.cpp
index 55fe158..ef77f8d 100644
--- a/vm/compiler/codegen/x86/pcg/Analysis.cpp
+++ b/vm/compiler/codegen/x86/pcg/Analysis.cpp
@@ -15,6 +15,7 @@
  */
 
 #include "Analysis.h"
+#include "CodegenErrors.h"
 #include "BasicBlockPCG.h"
 #include "CompilationUnitPCG.h"
 #include "Dataflow.h"
@@ -344,7 +345,6 @@ static void initGensAndKills (CompilationUnitPCG *cUnit)
             //Go through each define
             for (int i = 0; i < mir->ssaRep->numDefs; i++)
             {
-
                 //Get SSA and its information
                 int ssaNum = mir->ssaRep->defs[i];
 
@@ -356,6 +356,17 @@ static void initGensAndKills (CompilationUnitPCG *cUnit)
                 //Get bitvector associated to it
                 BitVector *vrDefsBv = cUnit->getSSANumSet (vrNum);
 
+                //Paranoid
+                if (vrDefsBv == 0)
+                {
+                    //Bail using a LCG error, this will have to get changed
+                    //For the moment just make it fail with the generic error
+                    SET_JIT_ERROR (kJitErrorCodegen);
+
+                    //Just return because this is already a bad enough situation
+                    return;
+                }
+
                 // Add all defs of this VR to the kills set.
                 // Remove all defs of this VR from the gens set.
                 dvmUnifyBitVectors (bb->kills, bb->kills, vrDefsBv);
diff --git a/vm/compiler/codegen/x86/pcg/ChainingCellException.cpp b/vm/compiler/codegen/x86/pcg/ChainingCellException.cpp
index 71e1fc4..bf1732b 100644
--- a/vm/compiler/codegen/x86/pcg/ChainingCellException.cpp
+++ b/vm/compiler/codegen/x86/pcg/ChainingCellException.cpp
@@ -627,7 +627,21 @@ static uint8_t* dvmCompilerPcgEmitBackwardBranchChainingCell (CompilationUnitPCG
 void dvmCompilerPcgGenerateRaiseExceptionSimple (CompilationUnitPCG *cUnit)
 {
     dvmCompilerPcgGenerateWritebacks (cUnit, cUnit->getCurrMod ());
-    CGCreateNewInst ("jmp", "b", cUnit->getBasicBlockPCG (cUnit->exceptionBlockId)->cgLabel);
+
+    BasicBlockPCG *bb = cUnit->getBasicBlockPCG (cUnit->exceptionBlockId);
+
+    //Paranoid test
+    if (bb == 0)
+    {
+        //Bail using a LCG error, this will have to get changed
+        //For the moment just make it fail with the generic error
+        SET_JIT_ERROR (kJitErrorCodegen);
+
+        //Just return because this is already a bad enough situation
+        return;
+    }
+
+    CGCreateNewInst ("jmp", "b", bb->cgLabel);
     cUnit->setExceptionBlockReferenced (true);
 }
 
@@ -679,8 +693,16 @@ void dvmCompilerPcgGeneratePredictedChain (CompilationUnitPCG *cUnit, BasicBlock
 
     BasicBlockPCG *target = cUnit->getBasicBlockPCG (traceTakenId);
 
-    //Paranoid
-    assert (target != 0);
+    //Paranoid check
+    if (target == 0)
+    {
+        //Bail using a LCG error, this will have to get changed
+        //For the moment just make it fail with the generic error
+        SET_JIT_ERROR (kJitErrorCodegen);
+
+        //Just return because this is already a bad enough situation
+        return;
+    }
 
     CGInst takenTarget = CGCreateNewInst ("movltc", "n", dvmCompilerPcgGetInvokeTarget (cUnit, target));
     CGInst predictedMethod = dvmCompilerPcgCreateSimpleLoad(takenTarget, OFFSETOF_MEMBER (PredictedChainingCell, method));
diff --git a/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp b/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
index 917cc50..70e1541 100644
--- a/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
+++ b/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
@@ -17,6 +17,7 @@
 #include "Analysis.h"
 #include "BasicBlockPCG.h"
 #include "ChainingCellException.h"
+#include "CodegenErrors.h"
 #include "CodeGeneration.h"
 #include "CompilationUnitPCG.h"
 #include "CompilerIR.h"
@@ -1151,6 +1152,17 @@ static bool dvmCompilerPcgTranslateCUnit (CompilationUnitPCG *cUnit, JitTranslat
 
                 BasicBlockPCG *bb = cUnit->getBasicBlockPCG (blockId);
 
+                //Paranoid test
+                if (bb == 0)
+                {
+                    //Bail using a LCG error, this will have to get changed
+                    //For the moment just make it fail with the generic error
+                    SET_JIT_ERROR (kJitErrorCodegen);
+
+                    //Just return because this is already a bad enough situation
+                    return false;
+                }
+
                 if (bb->possiblyReferenced == false)
                 {
                     continue;
diff --git a/vm/compiler/codegen/x86/pcg/Labels.cpp b/vm/compiler/codegen/x86/pcg/Labels.cpp
index 4587e50..04ecd5e 100644
--- a/vm/compiler/codegen/x86/pcg/Labels.cpp
+++ b/vm/compiler/codegen/x86/pcg/Labels.cpp
@@ -15,6 +15,7 @@
  */
 
 #include "BasicBlockPCG.h"
+#include "CodegenErrors.h"
 #include "CompilationUnitPCG.h"
 #include "CompilerIR.h"
 #include "Labels.h"
@@ -36,8 +37,16 @@ void dvmCompilerPcgResolveSymbolReferences (const CompilationUnitPCG *cUnit, uin
         //Get relocation
         relocation = cUnit->getRelocation (i);
 
-        //Paranoid
-        assert (relocation != 0);
+        //Paranoid test
+        if (relocation == 0)
+        {
+            //Bail using a LCG error, this will have to get changed
+            //For the moment just make it fail with the generic error
+            SET_JIT_ERROR (kJitErrorCodegen);
+
+            //Just return because this is already a bad enough situation
+            return;
+        }
 
         uint8_t *symbolAddress = (uint8_t*) relocation->targetSymbol->address;
         void *ip = codePtr + relocation->codeOffset;
@@ -118,8 +127,16 @@ void dvmCompilerPcgBindSymbolAddress (CGSymbol cgSymbol, void *address)
     //Get the right client symbol information
     SClientSymbolInfo *clientSymbol = singletonPtr<PersistentInfo> ()->getSymbolInfo (cgSymbol);
 
-    //Paranoid
-    assert (clientSymbol != 0);
+    //Paranoid test
+    if (clientSymbol == 0)
+    {
+        //Bail using a LCG error, this will have to get changed
+        //For the moment just make it fail with the generic error
+        SET_JIT_ERROR (kJitErrorCodegen);
+
+        //Just return because this is already a bad enough situation
+        return;
+    }
 
     //Update the address
     clientSymbol->address = address;
diff --git a/vm/compiler/codegen/x86/pcg/LowerALU.cpp b/vm/compiler/codegen/x86/pcg/LowerALU.cpp
index e1e225f..e0cd95c 100644
--- a/vm/compiler/codegen/x86/pcg/LowerALU.cpp
+++ b/vm/compiler/codegen/x86/pcg/LowerALU.cpp
@@ -15,6 +15,7 @@
  */
 
 #include "ChainingCellException.h"
+#include "CodegenErrors.h"
 #include "CompilationUnitPCG.h"
 #include "CompilerIR.h"
 #include "Dataflow.h"
@@ -122,6 +123,18 @@ void dvmCompilerPcgTranslateConstHelper (CompilationUnitPCG *cUnit, MIR *mir, u4
         // TODO: We need to use a more "official" method for creating the
         // FP constant in memory.
         u4 *myConstPtr = (u4*)malloc (sizeof (u4));
+
+        //Paranoid check
+        if (myConstPtr == 0)
+        {
+            //Bail using a LCG error, this will have to get changed
+            //For the moment just make it fail with the generic error
+            SET_JIT_ERROR (kJitErrorCodegen);
+
+            //Just return because this is already a bad enough situation
+            return;
+        }
+
         *myConstPtr = val;
         CGAddr addr = CGCreateAddr (CGInstInvalid, CGInstInvalid, 0,
                 CGSymbolInvalid, (int32_t)myConstPtr);
@@ -180,6 +193,18 @@ void dvmCompilerPcgTranslateConstWide (CompilationUnitPCG *cUnit, MIR *mir, u8 v
         // TODO: We need to use a more "official" method for creating the
         // FP constant in memory.
         u8 *myConstPtr = (u8*)malloc (sizeof (u8));
+
+        //Paranoid check
+        if (myConstPtr == 0)
+        {
+            //Bail using a LCG error, this will have to get changed
+            //For the moment just make it fail with the generic error
+            SET_JIT_ERROR (kJitErrorCodegen);
+
+            //Just return because this is already a bad enough situation
+            return;
+        }
+
         *myConstPtr = val;
         CGAddr addr = CGCreateAddr (CGInstInvalid, CGInstInvalid, 0, CGSymbolInvalid, (int32_t)myConstPtr);
         CGInst constMov = CGCreateNewInst ("movsd1", "m", addr, 8, (void*)1);
-- 
1.7.4.1

