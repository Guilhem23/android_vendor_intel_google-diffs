From 169e56141cfbb018cf5df90faf5527991c5b858c Mon Sep 17 00:00:00 2001
From: Dong-Yuan Chen <dong-yuan.chen@intel.com>
Date: Sat, 17 Aug 2013 22:13:25 -0700
Subject: Dalvik: dexGetOpcodeName for extended opcode should not be used

BZ: 129857

dexGetOpcodeName for extended opcode return undefined result.
Patch introduces utility function which returns valid result for
extended opcode as well.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I154945e8c4f6286f6cba65070719f20094cf4de9
Orig-MCG-Change-Id: Icdd659d8531420699d0cba4d8d358d237a0914e5
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Reviewed-on: http://android.intel.com:8080/124940
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Semukhina, Elena V <elena.v.semukhina@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Reviewed-on: http://android.intel.com:8080/125989
---
 vm/compiler/CompilerIR.h                       |    7 ++++++
 vm/compiler/IntermediateRep.cpp                |   26 ++++++++++++++++++++++++
 vm/compiler/codegen/x86/lightcg/AnalysisO1.cpp |    4 +-
 vm/compiler/codegen/x86/lightcg/Lower.cpp      |    2 +-
 vm/compiler/codegen/x86/pcg/CodeGeneration.cpp |    2 +-
 5 files changed, 37 insertions(+), 4 deletions(-)

diff --git a/vm/compiler/CompilerIR.h b/vm/compiler/CompilerIR.h
index 1753cc4..57ea788 100644
--- a/vm/compiler/CompilerIR.h
+++ b/vm/compiler/CompilerIR.h
@@ -620,4 +620,11 @@ void dvmCompilerDumpCompilationUnit(CompilationUnit *cUnit);
  */
 OpcodeFlags dvmCompilerGetOpcodeFlags (int opcode);
 
+/**
+ * @brief Given a dalvik Opcode or an extended opcode, it returns the name its name.
+ * @param opcode The opcode for which to get name
+ * @return Returns the name for the specified opcode.
+ */
+const char* dvmCompilerGetOpcodeName (int opcode);
+
 #endif  // DALVIK_VM_COMPILER_IR_H_
diff --git a/vm/compiler/IntermediateRep.cpp b/vm/compiler/IntermediateRep.cpp
index 39eaf89..ab3b5de 100644
--- a/vm/compiler/IntermediateRep.cpp
+++ b/vm/compiler/IntermediateRep.cpp
@@ -1275,6 +1275,32 @@ OpcodeFlags dvmCompilerGetOpcodeFlags (int opcode)
     return flags;
 }
 
+const char* dvmCompilerGetOpcodeName (int opcode)
+{
+    static const char *ExtendedMIROpNames[] = {
+        "kMirOpPhi",
+        "kMirOpNullNRangeUpCheck",
+        "kMirOpNullNRangeDownCheck",
+        "kMirOpLowerBound",
+        "kMirOpPunt",
+        "kMirOpCheckInlinePrediction",
+        "kMirOpNullCheck",
+        "kMirOpBoundCheck",
+        "kMirOpRegisterize"
+    };
+    assert (sizeof (ExtendedMIROpNames) / sizeof (char *) == kMirOpLast - kMirOpFirst);
+
+    if (opcode < static_cast<int> (kNumPackedOpcodes))
+    {
+        return dexGetOpcodeName (static_cast<Opcode> (opcode));
+    }
+    if (opcode < static_cast<int> (kMirOpLast))
+    {
+        return ExtendedMIROpNames[opcode - static_cast<int> (kMirOpFirst)];
+    }
+    return "KMirUnknown";
+}
+
 ChildBlockIterator::ChildBlockIterator (BasicBlock *bb)
 {
     //Initialize basic block
diff --git a/vm/compiler/codegen/x86/lightcg/AnalysisO1.cpp b/vm/compiler/codegen/x86/lightcg/AnalysisO1.cpp
index f2e7eb4..c4192ca 100644
--- a/vm/compiler/codegen/x86/lightcg/AnalysisO1.cpp
+++ b/vm/compiler/codegen/x86/lightcg/AnalysisO1.cpp
@@ -1563,7 +1563,7 @@ int codeGenBasicBlock(const Method* method, BasicBlock_O1* bb, CompilationUnit_O
 
             if(gDvmJit.codeCacheByteUsed + (stream - streamStart) +
                  CODE_CACHE_PADDING > gDvmJit.codeCacheSize) {
-                 ALOGI("JIT_INFO: Code cache full while lowering bytecode %s", dexGetOpcodeName(mir->dalvikInsn.opcode));
+                 ALOGI("JIT_INFO: Code cache full while lowering bytecode %s", dvmCompilerGetOpcodeName (mir->dalvikInsn.opcode));
                  gDvmJit.codeCacheFull = true;
                  SET_JIT_ERROR(kJitErrorCodeCacheFull);
                  return -1;
@@ -1587,7 +1587,7 @@ int codeGenBasicBlock(const Method* method, BasicBlock_O1* bb, CompilationUnit_O
             offsetNCG = stream - streamMethodStart;
             mapFromBCtoNCG[mir->offset] = offsetNCG;
 #ifdef DEBUG_COMPILE_TABLE
-            ALOGI("Bytecode %s generates a constant and has no side effect\n", dexGetOpcodeName(mir->dalvikInsn.opcode));
+            ALOGI("Bytecode %s generates a constant and has no side effect\n", dvmCompilerGetOpcodeName (mir->dalvikInsn.opcode));
 #endif
         }
 
diff --git a/vm/compiler/codegen/x86/lightcg/Lower.cpp b/vm/compiler/codegen/x86/lightcg/Lower.cpp
index 06b9092..0d19163 100644
--- a/vm/compiler/codegen/x86/lightcg/Lower.cpp
+++ b/vm/compiler/codegen/x86/lightcg/Lower.cpp
@@ -1121,7 +1121,7 @@ int lowerByteCode(const Method* method, const MIR * mir, const u2 * dalvikPC, Co
         return op_invoke_super_quick_range(mir);
     default:
         ALOGI("JIT_INFO: JIT does not support bytecode %s\n",
-                dexGetOpcodeName(mir->dalvikInsn.opcode));
+                dvmCompilerGetOpcodeName (mir->dalvikInsn.opcode));
         SET_JIT_ERROR(kJitErrorUnsupportedBytecode);
         assert(false && "All opcodes should be supported.");
         break;
diff --git a/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp b/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
index 5e2ea7f..917cc50 100644
--- a/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
+++ b/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
@@ -766,7 +766,7 @@ static bool dvmCompilerPcgTranslateInsn (CompilationUnitPCG *cUnit, MIR *mir)
 
         default:
             ALOGI ("XXXXXXXXXXXXXX Insn: %s (%d)\n",
-                    dexGetOpcodeName (dalvikOpCode), dalvikOpCode);
+                    dvmCompilerGetOpcodeName (dalvikOpCode), dalvikOpCode);
             LOGE ("Jit (PCG): unsupported MIR opcode");
             assert (0);
             SET_JIT_ERROR(kJitErrorUnsupportedBytecode);
-- 
1.7.4.1

