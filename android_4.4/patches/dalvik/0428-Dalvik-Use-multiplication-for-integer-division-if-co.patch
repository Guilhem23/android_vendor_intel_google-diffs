From 74c691343b7f6e66f61cd6fb63b8a4f3b4bdab8c Mon Sep 17 00:00:00 2001
From: Yixin Shou <yixin.shou@intel.com>
Date: Wed, 11 Sep 2013 11:35:59 -0700
Subject: Dalvik: Use multiplication for integer division if constant divisor info available

BZ: 138241

If the divisor is constant and defined outside of the trace, with method scope
constant information available, multiplication is used to replace division for
interger division in this patch. Also, the same algorithm used for bytecode
DIV_INT and REM_INT to replace idiv with imul are used for DIV_INT_LIT8/16
and REM_INT_LIT8/16 in this patch.

Change-Id: I4cd7c0065109fbb74735d231742aac0b1d927c2b
Category: device enablement
Domain: AOSP.Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, need rework
Signed-off-by: Yixin Shou <yixin.shou@intel.com>
---
 vm/compiler/codegen/x86/lightcg/AnalysisO1.h       |    8 +
 .../codegen/x86/lightcg/BytecodeVisitor.cpp        |  147 ++++++++---
 vm/compiler/codegen/x86/lightcg/LowerAlu.cpp       |  283 +++++++++++++-------
 vm/compiler/codegen/x86/pcg/LowerALU.cpp           |   50 ++++
 4 files changed, 366 insertions(+), 122 deletions(-)

diff --git a/vm/compiler/codegen/x86/lightcg/AnalysisO1.h b/vm/compiler/codegen/x86/lightcg/AnalysisO1.h
index 85fc2a1..32c8617 100644
--- a/vm/compiler/codegen/x86/lightcg/AnalysisO1.h
+++ b/vm/compiler/codegen/x86/lightcg/AnalysisO1.h
@@ -391,6 +391,14 @@ void forwardAnalysis(int type);
 //functions in bc_visitor.c
 int getConstInfo(BasicBlock_O1* bb, const MIR * currentMIR);
 int getVirtualRegInfo(VirtualRegInfo* infoArray, const MIR * currentMIR, bool updateBBConstraints = false);
+
+/*
+ * @brief Updates infoArray with temporaries accessed when lowering the bytecode
+ * @param infoArray array of TempRegInfo to store temporaries accessed by a single bytecode
+ * @param currentMIR current mir handled
+ * @param dalvikPC PC pointer to bytecode
+ * @return Returns size represented by the physical type.
+ */
 int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR, const u2* dalvikPC);
 int createCFGHandler(Method* method);
 
diff --git a/vm/compiler/codegen/x86/lightcg/BytecodeVisitor.cpp b/vm/compiler/codegen/x86/lightcg/BytecodeVisitor.cpp
index cc662ca..c07c30f 100644
--- a/vm/compiler/codegen/x86/lightcg/BytecodeVisitor.cpp
+++ b/vm/compiler/codegen/x86/lightcg/BytecodeVisitor.cpp
@@ -24,6 +24,9 @@
 #include "libdex/DexFile.h"
 #include "Lower.h"
 #include "AnalysisO1.h"
+#include "CompilationUnit.h"
+#include "MethodContext.h"
+#include "MethodContextHandler.h"
 
 #if 0 /* This is dead code and has been disabled. If reenabling,
          the MIR or opcode must be passed in as a parameter */
@@ -5797,29 +5800,52 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR, const u2* dal
         //Check if the virtual register is a constant because if it is we can figure out result without division
         isConst = isVirtualRegConstant(v2, LowOpndRegType_gp, &tmpvalue, false);
 
+        // Check if vr is constant in method scope
+        if (isConst != VR_IS_CONSTANT)
+        {
+            u8 value;
+
+            // value is passed as a reference to return the constant value if v2 is a constant
+            ConstVRType isConstVRContext = dvmCompilerGetConstValueOfVR(const_cast<MIR*>(currentMIR), v2, value);
+            if (isConstVRContext == kVRNonWideConst)
+            {
+                isConst = VR_IS_CONSTANT;
+                tmpvalue = (int)value;
+            }
+        }
+
         //If we have a constant, we can use a multiplication approach instead.
         //However, we currently do not handle case of -1 constant so we take the divide path.
         //It also does not make sense to optimize division by zero.
         if (isConst == VR_IS_CONSTANT && tmpvalue != -1)
         {
-            if (tmpvalue == 0 || tmpvalue == 1) {
-                infoArray[0].regNum = 2;
+            if (tmpvalue == 0)
+            {
+                infoArray[0].regNum = PhysicalReg_EDX;
+                infoArray[0].refCount = 1;
+                infoArray[0].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
+                return 1;
+            }
+            if (tmpvalue == 1)
+            {
+                infoArray[0].regNum = PhysicalReg_EAX;
+                infoArray[0].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
+                infoArray[0].shareWithVR = false;
                 infoArray[0].refCount = 2;
-                infoArray[0].physicalType = LowOpndRegType_gp;
-                infoArray[1].regNum = PhysicalReg_EAX;
+                infoArray[1].regNum = PhysicalReg_EDX;
+                infoArray[1].refCount = 1;
                 infoArray[1].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
-                infoArray[1].shareWithVR = false;
-                infoArray[1].refCount = 2;
-                infoArray[2].regNum = PhysicalReg_EDX;
-                infoArray[2].refCount = 1;
-                infoArray[2].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
-                if (tmpvalue == 1 && (inst_op == OP_REM_INT || inst_op == OP_REM_INT_2ADDR)) {
-                    infoArray[2].refCount++;
-                } else if (tmpvalue == 1) {
+                if (inst_op == OP_REM_INT || inst_op == OP_REM_INT_2ADDR) {
                     infoArray[1].refCount++;
                 }
-                return 3;
-            } else {
+                else
+                {
+                    infoArray[0].refCount++;
+                }
+                return 2;
+            }
+            else
+            {
                 int magic, shift;
                 calculateMagicAndShift(tmpvalue, &magic, &shift);
 
@@ -5833,7 +5859,7 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR, const u2* dal
                 infoArray[3].regNum = 1;
                 infoArray[3].physicalType = LowOpndRegType_gp;
                 if (inst_op == OP_REM_INT || inst_op == OP_REM_INT_2ADDR) {
-                    infoArray[0].refCount = 6;
+                    infoArray[0].refCount = 4;
                     infoArray[1].refCount = 8;
                     infoArray[2].refCount = 8;
                     infoArray[3].refCount = 3;
@@ -5845,7 +5871,7 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR, const u2* dal
                         infoArray[2].refCount++;
                     }
                 }else {
-                    infoArray[0].refCount = 4;
+                    infoArray[0].refCount = 2;
                     infoArray[1].refCount = 7;
                     infoArray[2].refCount = 5;
                     infoArray[3].refCount = 1;
@@ -5950,28 +5976,87 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR, const u2* dal
             infoArray[0].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
             return 1;
         }
-        if(inst_op == OP_DIV_INT_LIT16 || inst_op == OP_DIV_INT_LIT8) {
-            if(tmp_s2 == -1)
-                infoArray[1].refCount = 4+1;
-            else
-                infoArray[1].refCount = 4;
-            infoArray[2].refCount = 2; //edx
-        } else {
-            if(tmp_s2 == -1)
-                infoArray[1].refCount = 3+1;
+        if (tmp_s2 == 1)
+        {
+            infoArray[0].regNum = PhysicalReg_EAX;
+            infoArray[0].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
+            infoArray[0].shareWithVR = false;
+            infoArray[0].refCount = 1;
+            infoArray[1].regNum = PhysicalReg_EDX;
+            infoArray[1].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
+            infoArray[1].refCount = 2;
+            if (inst_op == OP_REM_INT_LIT16 || inst_op == OP_REM_INT_LIT8)
+            {
+                infoArray[1].refCount++;
+            }
             else
-                infoArray[1].refCount = 3;
-            infoArray[2].refCount = 3; //edx
+            {
+                infoArray[0].refCount++;
+            }
+            return 2;
         }
         infoArray[0].regNum = 2;
-        infoArray[0].refCount = 2; //define, use
         infoArray[0].physicalType = LowOpndRegType_gp;
-        infoArray[1].regNum = PhysicalReg_EAX; //dividend, quotient
+        infoArray[1].regNum = PhysicalReg_EAX;
         infoArray[1].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
         infoArray[1].shareWithVR = false;
-        infoArray[2].regNum = PhysicalReg_EDX; //export_pc, output for REM
+        infoArray[2].regNum = PhysicalReg_EDX;
         infoArray[2].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
-        return 3;
+
+        if (tmp_s2 != -1)
+        {
+            int magic, shift;
+
+            // Use algorithm in H.S.Warren's Hacker's Delight Chapter 10 to replace div with mul
+            // Calculate magic number and shift for a given constant divisor based on the algorithm
+            calculateMagicAndShift(tmp_s2, &magic, &shift);
+            infoArray[3].regNum = 1;
+            infoArray[3].physicalType = LowOpndRegType_gp;
+            infoArray[0].refCount = 2;
+            infoArray[1].refCount = 6; // EAX
+            infoArray[2].refCount = 6; // EDX
+            infoArray[3].refCount = 3;
+
+            // if divisor > 0 and magic number < 0 or divisor < 0 and magic number > 0
+            if ((tmp_s2 > 0 && magic < 0) || (tmp_s2 < 0 && magic > 0))
+            {
+                infoArray[3].refCount++;
+                infoArray[2].refCount++;
+            }
+
+            // if shift !=0, update refcount of EDX
+            if (shift != 0) {
+                infoArray[2].refCount++;
+            }
+            if (inst_op == OP_REM_INT_LIT16 || inst_op == OP_REM_INT_LIT8)
+            {
+                infoArray[0].refCount += 2;
+                infoArray[1].refCount += 1;
+                infoArray[2].refCount += 3;
+                infoArray[3].refCount += 2;
+            }
+            return 4;
+        }
+        else
+        {
+            infoArray[0].refCount = 2;
+            infoArray[1].refCount = 3;
+            infoArray[2].refCount = 4;
+            if(inst_op == OP_DIV_INT_LIT16 || inst_op == OP_DIV_INT_LIT8)
+            {
+                infoArray[1].refCount ++;
+            }
+            else
+            {
+                infoArray[2].refCount ++;
+            }
+
+            if (tmp_s2 == -1)
+            {
+                infoArray[1].refCount++;
+            }
+            return 3;
+        }
 
     case OP_ADD_LONG:
     case OP_ADD_LONG_2ADDR:
diff --git a/vm/compiler/codegen/x86/lightcg/LowerAlu.cpp b/vm/compiler/codegen/x86/lightcg/LowerAlu.cpp
index 03af0ec..e1c0d17 100644
--- a/vm/compiler/codegen/x86/lightcg/LowerAlu.cpp
+++ b/vm/compiler/codegen/x86/lightcg/LowerAlu.cpp
@@ -23,6 +23,9 @@
 #include "Lower.h"
 #include "NcgAot.h"
 #include "enc_wrapper.h"
+#include "CompilationUnit.h"
+#include "MethodContext.h"
+#include "MethodContextHandler.h"
 
 /////////////////////////////////////////////
 #define P_GPR_1 PhysicalReg_EBX
@@ -804,6 +807,89 @@ int op_ushr_int_2addr(const MIR * mir) {
     return retval;
 }
 
+/**
+ * @brief common code used by common_div_rem_int and common_div_rem_int_lit for replacing div with mul
+ * @param divisor constant value of divisor
+ * @param isRem true for REM, false for DIV
+ * @return value >= 0 when handled
+ */
+static void common_div_to_mul(int divisor, bool isRem)
+{
+    int magic;
+    int shift;
+
+#ifdef DIVREM_BYTECODE_VERBOSE
+    ALOGD("Using multiplication for integer division due to a constant divisor");
+#endif
+
+    // According to H.S.Warren's Hacker's Delight Chapter 10 and
+    // T,Grablund, P.L.Montogomery's Division by invariant integers using multiplication
+    // For a integer divided by a constant,
+    // we can always find a magic number M and a shift S. Thus,
+    // For d >= 2,
+    //     int(n/d) = floor(n/d) = floor(M*n/2^S), while n > 0
+    //     int(n/d) = ceil(n/d) = floor(M*n/2^S) +1, while n < 0.
+    // For d <= -2,
+    //     int(n/d) = ceil(n/d) = floor(M*n/2^S) +1 , while n > 0
+    //     int(n/d) = floor(n/d) = floor(M*n/2^S), while n < 0.
+    // We implement this algorithm in the following way:
+    // 1. multiply magic number m and numerator n, get the higher 32bit result in EDX
+    // 2. if divisor > 0 and magic < 0, add numerator to EDX
+    //    if divisor < 0 and magic > 0, sub numerator to EDX
+    // 3. if S !=0, SAR S bits for EDX
+    // 4. add 1 to EDX if EDX < 0
+    // 5. Thus, EDX is the quotient
+
+    // mov %eax, %tmp1
+    // mov magic, %tmp2
+    // imul %tmp2
+    calculateMagicAndShift(divisor, &magic, &shift);
+
+    move_reg_to_reg(OpndSize_32, PhysicalReg_EAX, true, 1, false);
+    move_imm_to_reg(OpndSize_32, magic, 2, false);
+    alu_unary_reg(OpndSize_32, imul_opc, 2, false);
+
+    // divisor > 0 && M < 0
+    if (divisor > 0 && magic < 0)
+    {
+        alu_binary_reg_reg(OpndSize_32, add_opc, 1, false, PhysicalReg_EDX, true);
+    }
+    else
+    {
+        // divisor < 0 && M > 0
+        if (divisor < 0 && magic > 0)
+        {
+            alu_binary_reg_reg(OpndSize_32, sub_opc, 1, false, PhysicalReg_EDX, true);
+        }
+    }
+
+    // sarl shift, %edx
+    if (shift != 0)
+    {
+        alu_binary_imm_reg(OpndSize_32, sar_opc, shift, PhysicalReg_EDX, true);
+    }
+
+    // mov %edx, %eax
+    // shrl 31, %edx
+    // add %edx, %eax
+    move_reg_to_reg(OpndSize_32, PhysicalReg_EDX, true, PhysicalReg_EAX, true);
+    alu_binary_imm_reg(OpndSize_32, shr_opc, 31, PhysicalReg_EDX, true);
+    alu_binary_reg_reg(OpndSize_32, add_opc, PhysicalReg_EDX, true, PhysicalReg_EAX, true);
+
+    // for REM operation
+    if (isRem == true)
+    {
+        //mov v2, %tmp2
+        //imul %tmp2
+        //sub %eax, %tmp1
+        //mov %tmp1, edx
+        move_imm_to_reg(OpndSize_32, divisor, 2, false);
+        alu_unary_reg(OpndSize_32, imul_opc, 2, false);
+        alu_binary_reg_reg(OpndSize_32, sub_opc, PhysicalReg_EAX, true, 1, false);
+        move_reg_to_reg(OpndSize_32, 1, false, PhysicalReg_EDX, true);
+    }
+}
+
 #define P_GPR_1 PhysicalReg_EBX
 /**
  * @brief common code to handle integer DIV & REM, it used GPR
@@ -812,98 +898,85 @@ int op_ushr_int_2addr(const MIR * mir) {
  *  The special case: when op0 == minint && op1 == -1, return 0 for isRem, return 0x80000000 for isDiv
  *  There are four merge points in the control flow for this bytecode
  *  make sure the reg. alloc. state is the same at merge points by calling transferToState
+ * @param mir bytecode representation
  * @param isRem true for REM, false for DIV
  * @param vA the destination VR
  * @param v1 the source VR for numerator
  * @param v2 the source VR for divisor
  * @return value >= 0 when handled
  */
-int common_div_rem_int(bool isRem, int vA, int v1, int v2) {
-    get_virtual_reg(v1, OpndSize_32, PhysicalReg_EAX, true);
-    move_imm_to_reg(OpndSize_32, 0, PhysicalReg_EDX, true);
-    get_virtual_reg(v2, OpndSize_32, 2, false);
-
-    // Handle the div 0 case
-    compare_imm_reg(OpndSize_32, 0, 2, false);
-    handlePotentialException(
-                                       Condition_E, Condition_NE,
-                                       1, "common_errDivideByZero");
-
-    //Check if numerator is 0
-    compare_imm_reg(OpndSize_32, 0, PhysicalReg_EAX, true);
-    rememberState(2);
-    conditional_jump(Condition_Z, ".common_div_rem_int_divdone", true);
-
-    transferToState(1);
+static int common_div_rem_int(const MIR* mir, bool isRem, int vA, int v1, int v2) {
 
     // Handle the case where the divisor is a constant at compile time
     int divisor[2];
     int isConst = isVirtualRegConstant(v2, LowOpndRegType_gp, divisor, false);
+
+    // check if vr is constant in method scope
+    if (isConst != VR_IS_CONSTANT)
+    {
+        u8 value;
+
+        // Get constant info with method context, value is passed as reference to return constant value of the v2
+        ConstVRType isConstVRContext = dvmCompilerGetConstValueOfVR(mir, v2, value);
+
+        // if VR is recognized as a non-wide constant with method context
+        if (isConstVRContext == kVRNonWideConst)
+        {
+#ifdef DIVREM_BYTECODE_VERBOSE
+            ALOGD("Method level constant recognized for virtual register v%d in DIV or REM bytecode with value %lu", v2, value);
+#endif
+            isConst = VR_IS_CONSTANT;
+            divisor[0] = (int)value;
+        }
+    }
+
+    // if divisor is constant and not a -1
     // For now we just use the generic code generation for division by -1
-    if (isConst == VR_IS_CONSTANT && divisor[0] != -1) {
-        if (divisor[0] == 0) {
-            // Division by zero: we don't need to generate the code at all.
-            transferToState(2);
+    if (isConst == VR_IS_CONSTANT && divisor[0] != -1)
+    {
+        // if divisor is 0
+        if (divisor[0] == 0)
+        {
+            export_pc(); //use %edx
+            beforeCall("exception"); //dump GG, GL VRs
+            unconditional_jump("common_errDivideByZero", false);
             return 0;
-        } else if (divisor[0] != 1) { // There is nothing to do with division by 1
-            int magic;
-            int shift;
-            calculateMagicAndShift(divisor[0], &magic, &shift);
-
-            // According to H.S.Warren's Hacker's Delight Chapter 10 and
-            // T,Grablund, P.L.Montogomery's Division by invariant integers using multiplication
-            // For a integer divided by a constant,
-            // we can always find a magic number M and a shift S. Thus,
-            // For d >= 2,
-            //     int(n/d) = floor(n/d) = floor(M*n/2^S), while n > 0
-            //     int(n/d) = ceil(n/d) = floor(M*n/2^S) +1, while n < 0.
-            // For d <= -2,
-            //     int(n/d) = ceil(n/d) = floor(M*n/2^S) +1 , while n > 0
-            //     int(n/d) = floor(n/d) = floor(M*n/2^S), while n < 0.
-            // We implement this algorithm in the following way:
-            // 1. multiply magic number m and numerator n, get the higher 32bit result in EDX
-            // 2. if divisor > 0 and magic < 0, add numerator to EDX
-            //    if divisor < 0 and magic > 0, sub numerator to EDX
-            // 3. if S !=0, SAR S bits for EDX
-            // 4. add 1 to EDX if EDX < 0
-            // 5. Thus, EDX is the quotient
-
-            // mov %eax, %tmp1
-            // mov magic, %tmp2
-            // imul %tmp2
-
-            move_reg_to_reg(OpndSize_32, PhysicalReg_EAX, true, 1, false);
-            move_imm_to_reg(OpndSize_32, magic, 2, false);
-            alu_unary_reg(OpndSize_32, imul_opc, 2, false);
-            // v2>0 && M<0
-            if (divisor[0] > 0 && magic < 0){
-                alu_binary_reg_reg(OpndSize_32, add_opc, 1, false, PhysicalReg_EDX, true);
-            }else if (divisor[0] < 0 && magic > 0){
-            // v2<0 && M>0
-                alu_binary_reg_reg(OpndSize_32, sub_opc, 1, false, PhysicalReg_EDX, true);
-            }
-            // sarl shift, %edx
-            if (shift != 0)
-                alu_binary_imm_reg(OpndSize_32, sar_opc, shift, PhysicalReg_EDX, true);
-            // mov %edx, %eax
-            // shrl 31, %edx
-            // add %edx, %eax
-            move_reg_to_reg(OpndSize_32, PhysicalReg_EDX, true, PhysicalReg_EAX, true);
-            alu_binary_imm_reg(OpndSize_32, shr_opc, 31, PhysicalReg_EDX, true);
-            alu_binary_reg_reg(OpndSize_32, add_opc, PhysicalReg_EDX, true, PhysicalReg_EAX, true);
-
-            if (isRem == true) {
-                 //mov v2, %tmp2
-                 //imul %tmp2
-                 //sub %eax, %tmp1
-                 //mov %tmp1, edx
-                move_imm_to_reg(OpndSize_32, divisor[0], 2, false);
-                alu_unary_reg(OpndSize_32, imul_opc, 2, false);
-                alu_binary_reg_reg(OpndSize_32, sub_opc, PhysicalReg_EAX, true, 1, false);
-                move_reg_to_reg(OpndSize_32, 1, false, PhysicalReg_EDX, true);
-            }
         }
-    } else { //It is a general case. Both divisor and numerator are variables.
+
+        // Get numerator to EAX
+        get_virtual_reg(v1, OpndSize_32, PhysicalReg_EAX, true);
+        move_imm_to_reg(OpndSize_32, 0, PhysicalReg_EDX, true);
+
+        //Check if numerator is 0
+        compare_imm_reg(OpndSize_32, 0, PhysicalReg_EAX, true);
+        rememberState(2);
+        conditional_jump(Condition_Z, ".common_div_rem_int_divdone", true);
+
+        // There is nothing to do with division by 1
+        if (divisor[0] != 1)
+        {
+            common_div_to_mul(divisor[0], isRem);
+        }
+    }
+    else
+    {
+        //It is a general case. Both divisor and numerator are variables.
+        get_virtual_reg(v1, OpndSize_32, PhysicalReg_EAX, true);
+        move_imm_to_reg(OpndSize_32, 0, PhysicalReg_EDX, true);
+        get_virtual_reg(v2, OpndSize_32, 2, false);
+
+        // Handle the div 0 case
+        compare_imm_reg(OpndSize_32, 0, 2, false);
+        handlePotentialException(
+                                       Condition_E, Condition_NE,
+                                       1, "common_errDivideByZero");
+
+        //Check if numerator is 0
+        compare_imm_reg(OpndSize_32, 0, PhysicalReg_EAX, true);
+        rememberState(2);
+        conditional_jump(Condition_Z, ".common_div_rem_int_divdone", true);
+
+        transferToState(1);
 
         //Find out Numerator | Denominator
         move_reg_to_reg(OpndSize_32, PhysicalReg_EAX, true, 3, false);
@@ -993,7 +1066,7 @@ int op_div_int(const MIR * mir) {
     vA = mir->dalvikInsn.vA;
     v1 = mir->dalvikInsn.vB;
     v2 = mir->dalvikInsn.vC;
-    int retval = common_div_rem_int(false, vA, v1, v2);
+    int retval = common_div_rem_int(mir, false, vA, v1, v2);
     return retval;
 }
 
@@ -1008,7 +1081,7 @@ int op_rem_int(const MIR * mir) {
     vA = mir->dalvikInsn.vA;
     v1 = mir->dalvikInsn.vB;
     v2 = mir->dalvikInsn.vC;
-    int retval = common_div_rem_int(true, vA, v1, v2);
+    int retval = common_div_rem_int(mir, true, vA, v1, v2);
     return retval;
 }
 
@@ -1022,7 +1095,7 @@ int op_div_int_2addr(const MIR * mir) {
     int vA = mir->dalvikInsn.vA;
     int v1 = vA;
     int v2 = mir->dalvikInsn.vB;
-    int retval = common_div_rem_int(false, vA, v1, v2);
+    int retval = common_div_rem_int(mir, false, vA, v1, v2);
     return retval;
 }
 
@@ -1036,7 +1109,7 @@ int op_rem_int_2addr(const MIR * mir) {
     int vA = mir->dalvikInsn.vA;
     int v1 = vA;
     int v2 = mir->dalvikInsn.vB;
-    int retval = common_div_rem_int(true, vA, v1, v2);
+    int retval = common_div_rem_int(mir, true, vA, v1, v2);
     return retval;
 }
 
@@ -1348,10 +1421,17 @@ int div_lit_strength_reduction(int vA, int vB, s2 imm) {
     return 0;
 }
 
-////////// throws exception!!!
-//! common code to handle integer DIV & REM with literal
-
-//! It uses GPR
+/**
+ * @brief common code to handle integer DIV & REM with literal, it uses GPR
+ * @details If the constant divisor is a constant at compile time, use the
+ *  same algorithm and the implementation as the one used in integer DIV & REM
+ *  to use multiplication to replace division to save the cost.
+ * @param isRem true for REM, false for DIV
+ * @param vA the destination VR
+ * @param vB the source VR for numerator
+ * @param imm the constant divisor
+ * @return value >= 0 when handled
+ */
 int common_div_rem_int_lit(bool isRem, int vA, int vB, s2 imm) {
     if(!isRem) {
         int retCode = div_lit_strength_reduction(vA, vB, imm);
@@ -1368,16 +1448,37 @@ int common_div_rem_int_lit(bool isRem, int vA, int vB, s2 imm) {
         return 0;
     }
     get_virtual_reg(vB, OpndSize_32, PhysicalReg_EAX, true);
+
+    // zero EDX
+    alu_binary_reg_reg(OpndSize_32, xor_opc, PhysicalReg_EDX, true, PhysicalReg_EDX, true);
+
     //check against -1 for DIV_INT??
     if(imm == -1) {
         compare_imm_reg(OpndSize_32, 0x80000000, PhysicalReg_EAX, true);
         conditional_jump(Condition_E, ".div_rem_int_lit_special", true);
         rememberState(1);
     }
-    move_imm_to_reg(OpndSize_32, imm, 2, false);
-    convert_integer(OpndSize_32, OpndSize_64); //cdq
-    //idiv: dividend in edx:eax; quotient in eax; remainder in edx
-    alu_unary_reg(OpndSize_32, idiv_opc, 2, false);
+
+    // if immediate is not -1
+    if (imm != -1)
+    {
+        // if immediate is 1, no need to do the div/rem operation
+        if (imm != 1)
+        {
+            common_div_to_mul(imm, isRem);
+        }
+    }
+
+    // handling the -1 case.
+    else
+    {
+        move_imm_to_reg(OpndSize_32, imm, 2, false);
+        convert_integer(OpndSize_32, OpndSize_64); //cdq
+
+        //idiv: dividend in edx:eax; quotient in eax; remainder in edx
+        alu_unary_reg(OpndSize_32, idiv_opc, 2, false);
+    }
+
     if(isRem)
         set_virtual_reg(vA, OpndSize_32, PhysicalReg_EDX, true);
     else
diff --git a/vm/compiler/codegen/x86/pcg/LowerALU.cpp b/vm/compiler/codegen/x86/pcg/LowerALU.cpp
index 06657bf..86f06ac 100644
--- a/vm/compiler/codegen/x86/pcg/LowerALU.cpp
+++ b/vm/compiler/codegen/x86/pcg/LowerALU.cpp
@@ -21,6 +21,10 @@
 #include "Dataflow.h"
 #include "LowerALU.h"
 #include "UtilityPCG.h"
+#include "CompilationUnit.h"
+#include "MethodContext.h"
+#include "MethodContextHandler.h"
+#include "limits.h"
 
 void dvmCompilerPcgTranslateMove (CompilationUnitPCG *cUnit, MIR *mir)
 {
@@ -734,6 +738,32 @@ void dvmCompilerPcgTranslateDivRemInt (CompilationUnitPCG *cUnit, MIR *mir)
     CGLabel zeroCheckOk = CGCreateLabel ();
     CGInst B = dvmCompilerPcgGetVirtualReg (cUnit, ssaRep->uses[0], "mov", 4);
     CGInst C = dvmCompilerPcgGetVirtualReg (cUnit, ssaRep->uses[1], "mov", 4);
+
+
+    u8 value;
+    int v2;
+
+    // Get the divisor
+    if (dalvikOpCode == OP_DIV_INT || dalvikOpCode == OP_REM_INT)
+    {
+        v2 = mir->dalvikInsn.vC;
+    }
+    else
+    {
+        v2 = mir->dalvikInsn.vB;
+    }
+
+    // Get constant info with method context, value is passed as reference to return constant value of the v2
+    ConstVRType isConstVRContext = dvmCompilerGetConstValueOfVR(const_cast<MIR*>(mir), v2, value);
+
+    // if VR is recognized as a non-wide constant with method context,
+    // load the constant using a mov to let PCG backend utilize the constant info
+    // to do the optimization for div/rem operation when divisor is constant.
+    if (isConstVRContext == kVRNonWideConst)
+    {
+        C = CGCreateNewInst ("mov", "i", value);
+    }
+
     CGInst zero = CGCreateNewInst ("mov", "i", 0);
     CGCreateNewInst ("cjcc", "rcrbp", C, "ne", zero, zeroCheckOk, 100);
 
@@ -759,6 +789,26 @@ void dvmCompilerPcgTranslateDivRemInt (CompilationUnitPCG *cUnit, MIR *mir)
         CGBindLabel (numer_zeroCheckOk);
     }
 
+    // if VR is recognized as a non-wide constant with method context
+    if (isConstVRContext == kVRNonWideConst)
+    {
+        if ((s8)value == -1)
+        {
+            CGInst minInt = CGCreateNewInst ("mov", "i", INT_MIN);
+            CGCreateNewInst ("cjcc", "rcrbp", B, "ne", minInt, divLabel, 99);
+            CGInst specialVal = CGCreateNewInst ("mov", "i", specialResult);
+            CGAddTempDef (resultTemp, specialVal);
+            CGCreateNewInst ("jmp", "b", codeEnd);
+        }
+        CGBindLabel (divLabel);
+        CGInst div = CGCreateNewInst (opcode, "rr", B, C);
+        CGAddTempDef (resultTemp, div);
+
+        CGBindLabel (codeEnd);
+        dvmCompilerPcgSetVirtualReg (cUnit, ssaRep->defs[0], "mov", 4, CGGetTempUseInst (resultTemp));
+        return;
+    }
+
     CGInst orVal = CGCreateNewInst ("or", "rr", B, C);
     CGInst andVal = CGCreateNewInst ("and", "ri", orVal, 0xffffff00);
     CGCreateNewInst ("cjcc", "rcrb", andVal, "ne", zero, specialLabel_1);
-- 
1.7.4.1

