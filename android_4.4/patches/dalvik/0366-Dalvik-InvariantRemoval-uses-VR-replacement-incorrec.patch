From f9f1868d60aff5240af2d75b55a121693da87fa2 Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Mon, 7 Oct 2013 16:23:08 +0700
Subject: Dalvik: InvariantRemoval uses VR replacement incorrectly

BZ: 142551

Invariant Removal optimization should not use scratch register for
replacement since the moment it was detected that this register will
be used after the loop in move instruction. If we continue to use
this register in replacement we are risky to lose the right value
for previous replacement.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I8fd6670bc14105a4e623e64d675f3948205ec707
Orig-MCG-Change-Id: Idf0954c67e83dc36880b1ca4d3673ce8f3fad9a0
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Reviewed-on: http://android.intel.com:8080/136526
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Provodin, Vitaly A <vitaly.a.provodin@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: Shou, Yixin <yixin.shou@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Dmitry Petrochenko <dmitry.petrochenko@intel.com>
Reviewed-on: http://android.intel.com:8080/137217
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/InvariantRemoval.cpp |   15 ++++++++++-----
 1 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/vm/compiler/InvariantRemoval.cpp b/vm/compiler/InvariantRemoval.cpp
index f6aa6a2..14a4e0b 100644
--- a/vm/compiler/InvariantRemoval.cpp
+++ b/vm/compiler/InvariantRemoval.cpp
@@ -193,11 +193,12 @@ static void findInvariantsInPeel (CompilationUnit *cUnit, std::vector<MIR *> &se
  * @param chosen the chosen MIRs to be hoisted by the algorithm
  * @param localValueNumberingDef the map providing a quick look-up between definition and LVN
  * @param replacements the map providing the replacament association between current register and scratch register
+ * @param available map sent by value denotes which scratch registers cannot be re-used
  * @return did we find a replacement for the MIR instruction?
  */
 static bool findReplacement (CompilationUnit *cUnit, MIR* mir, int &current, int max,
                              std::map<MIR *, bool> &chosen, std::map<int, int> &localValueNumberingDef,
-                             std::map<int, int> &replacements)
+                             std::map<int, int> &replacements, std::map<int, bool> available)
 {
     //How many defines does this instruction require
     int defs = mir->ssaRep->numDefs;
@@ -214,9 +215,6 @@ static bool findReplacement (CompilationUnit *cUnit, MIR* mir, int &current, int
     //  So instead, we see if we can use two new ones
     if (defs == 1)
     {
-        //Find out which registers are available
-        std::map<int, bool> available;
-
         //First, go through the mirs, is there one no longer needed
         for (std::map<MIR *, bool>::iterator it = chosen.begin (); it != chosen.end (); it++)
         {
@@ -406,6 +404,9 @@ static void hoistInvariants (CompilationUnit *cUnit, LoopInformation *loopInfo,
     //Map of chosen instruction that have been finally hoisted
     std::map<MIR *, bool> chosen;
 
+    //This map contains scratch virtual registers which cannot be re-used since the moment they are added into this map
+    std::map<int, bool> available;
+
     //Map of replacement registers that failed, all future replacements using these registers must fail because we haven't hoisted that replacement
     std::map<int, bool> failedHoisting;
 
@@ -449,7 +450,7 @@ static void hoistInvariants (CompilationUnit *cUnit, LoopInformation *loopInfo,
         }
 
         //We are ready to try to hoist, do we have a replacement?
-        bool found = findReplacement (cUnit, peeledMir, current, max, chosen, localValueNumberingDef, replacements);
+        bool found = findReplacement (cUnit, peeledMir, current, max, chosen, localValueNumberingDef, replacements, available);
 
         //If failed, skip it
         if (found == false)
@@ -525,6 +526,10 @@ static void hoistInvariants (CompilationUnit *cUnit, LoopInformation *loopInfo,
                 MIR *move = dvmCompilerNewMoveMir (newReg, oldReg, isWide);
 
                 moves.push_back (move);
+
+                //We did a move, so since that moment the scratch register cannot be re-used for
+                //other purposes because we use it after the loop
+                available[newReg] = false;
             }
 
             //Since we reused the ssaRep from the MIR we copied from, we must reset it right now
-- 
1.7.4.1

