From f9ec01d0a622eb7dd6cafb90e773a39a6eaa6f7c Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Fri, 25 Oct 2013 17:00:42 +0700
Subject: Dalvik: Loop rejector misses to stop loop optimizations if loop is not detected

BZ: 147610

If loop is not found we should set quitLoopMode to true in case trace is a loop.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I37a3fdcee782633db44e2ed9205f6b587f3ece37
Orig-MCG-Change-Id: I355fd7b30eed1a4417223c033a43a39130d27533
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/PassDriver.cpp |   43 ++++++++++++++++++++++---------------------
 vm/compiler/PassDriver.h   |    7 -------
 2 files changed, 22 insertions(+), 28 deletions(-)

diff --git a/vm/compiler/PassDriver.cpp b/vm/compiler/PassDriver.cpp
index 6016c2b..beb3c7a 100644
--- a/vm/compiler/PassDriver.cpp
+++ b/vm/compiler/PassDriver.cpp
@@ -391,27 +391,34 @@ static bool exitLoopHelper (LoopInformation *info, void *data)
     return dvmCountSetBits (info->getExitLoops ()) <= 1;
 }
 
-bool dvmCompilerCheckLoops (const CompilationUnit *cUnit)
+/**
+ * @brief Check if the loops are formed the way we want (nested / branches on / off)
+ * @param cUnit the CompilationUnit
+ * @return Whether to continue as a loop or bail
+ */
+static bool dvmCompilerCheckLoops (CompilationUnit *cUnit)
 {
     // Build loop information
-    LoopInformation *loopInfo = LoopInformation::getLoopInformation (const_cast<CompilationUnit *>(cUnit), 0);
-    const_cast<CompilationUnit *>(cUnit)->loopInformation = loopInfo;
+    LoopInformation *loopInfo = LoopInformation::getLoopInformation (cUnit, 0);
+    cUnit->loopInformation = loopInfo;
 
-    if (loopInfo != 0)
+    if (loopInfo == 0)
+    {
+        BAIL_LOOP_COMPILATION();
+    }
+    else
     {
         // we are rejecting sibling loops at top level
         if (loopInfo->getNextSibling () !=0)
         {
-            const_cast<CompilationUnit *>(cUnit)->quitLoopMode = true;
-            return false;
+            BAIL_LOOP_COMPILATION();
         }
 
         // Check that we have no more than one loop output
         // Note we are working before loop formation, so exit block is real one
         if (loopInfo->iterate (exitLoopHelper) == false)
         {
-            const_cast<CompilationUnit *>(cUnit)->quitLoopMode = true;
-            return false;
+            BAIL_LOOP_COMPILATION();
         }
 
         //If it is nested and option says no, bail
@@ -420,8 +427,7 @@ bool dvmCompilerCheckLoops (const CompilationUnit *cUnit)
             // We do not have sibling so it is enough to check first
             if (loopInfo->getNested () != 0)
             {
-                const_cast<CompilationUnit *>(cUnit)->quitLoopMode = true;
-                return false;
+                BAIL_LOOP_COMPILATION();
             }
 
             //Ok second possibility to reject is if we only want simple loops
@@ -432,14 +438,12 @@ bool dvmCompilerCheckLoops (const CompilationUnit *cUnit)
 
                 if (backwards == 0)
                 {
-                    const_cast<CompilationUnit *>(cUnit)->quitLoopMode = true;
-                    return false;
+                    BAIL_LOOP_COMPILATION();
                 }
 
                 if (dvmCountSetBits (backwards) != 1)
                 {
-                    const_cast<CompilationUnit *>(cUnit)->quitLoopMode = true;
-                    return false;
+                    BAIL_LOOP_COMPILATION();
                 }
 
                 //Finally, get the basic block for the backward branch
@@ -447,8 +451,7 @@ bool dvmCompilerCheckLoops (const CompilationUnit *cUnit)
 
                 if (backwardIdx < 0)
                 {
-                    const_cast<CompilationUnit *>(cUnit)->quitLoopMode = true;
-                    return false;
+                    BAIL_LOOP_COMPILATION();
                 }
 
                 BasicBlock *backward = (BasicBlock *) dvmGrowableListGetElement (&cUnit->blockList, backwardIdx);
@@ -456,8 +459,7 @@ bool dvmCompilerCheckLoops (const CompilationUnit *cUnit)
                 //If nil or no domination loopInformation, bail
                 if (backward == 0 || backward->dominators == 0)
                 {
-                    const_cast<CompilationUnit *>(cUnit)->quitLoopMode = true;
-                    return false;
+                    BAIL_LOOP_COMPILATION();
                 }
 
                 //Now go through each BB and see if it dominates backward
@@ -476,8 +478,7 @@ bool dvmCompilerCheckLoops (const CompilationUnit *cUnit)
                     //We bail if it doesn't dominate
                     if (dvmIsBitSet (backward->dominators, bb->id) == 0)
                     {
-                        const_cast<CompilationUnit *>(cUnit)->quitLoopMode = true;
-                        return false;
+                        BAIL_LOOP_COMPILATION();
                     }
                 }
             }
@@ -498,7 +499,7 @@ bool checkLoopsGate (const CompilationUnit *cUnit, Pass *curPass)
     //Unused parameter
     (void) curPass;
 
-    return dvmCompilerCheckLoops (cUnit);
+    return dvmCompilerCheckLoops (const_cast<CompilationUnit *>(cUnit));
 }
 
 bool dvmCompilerCheckReferences (CompilationUnit *cUnit, BasicBlock *bb)
diff --git a/vm/compiler/PassDriver.h b/vm/compiler/PassDriver.h
index cd0d519..d11787f 100644
--- a/vm/compiler/PassDriver.h
+++ b/vm/compiler/PassDriver.h
@@ -90,13 +90,6 @@ void dvmCompilerPrintPassNames (void);
 void dvmCompilerPrintIgnorePasses (void);
 
 /**
- * @brief Check if the loops are formed the way we want (nested / branches on / off)
- * @param cUnit the CompilationUnit
- * @return Whether to continue as a loop or bail
- */
-bool dvmCompilerCheckLoops (const CompilationUnit *cUnit);
-
-/**
  * @brief Used to check whether instructions in basic block have resolved references.
  * @details If unresolved references have been found then cUnit->quitLoopMode is set to true.
  * @param cUnit The compilation unit
-- 
1.7.4.1

