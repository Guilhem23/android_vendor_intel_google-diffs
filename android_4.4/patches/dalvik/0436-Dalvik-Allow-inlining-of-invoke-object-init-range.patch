From ec81faac11f56f709d654cae9f97bd293c09fc8e Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Wed, 20 Nov 2013 10:14:31 -0800
Subject: Dalvik: Allow inlining of invoke-object-init/range

BZ: 153329

The x86 backends do not support invoke-object-init/range because they do not
have an implementation. As a result, all of the traces containing it are
rejected. However, the body of Object.<init> is simply a return-void which
means it has no semantic effect. We can technically skip it by adding a pass
to remove it. However, we want to prevent any errors in case our suposition
ever becomes not true. Thus, we allow the inliner to be smart and inline it;
this deals with potential issues because if body is no longer return-void
we can still retain semantics, and also if ever it is selected for single step
we won't actually skip it since inliner won't inline.

Change-Id: I15055a95b2e9be25d5d565e87432fee2932ab487
Category: device enablement
Domain: AOSP.Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, need rework
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
---
 vm/compiler/InlineTransformation.cpp               |    5 +++--
 vm/compiler/Utility.cpp                            |    6 ++++++
 .../codegen/x86/lightcg/CodegenInterface.cpp       |    1 -
 3 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/vm/compiler/InlineTransformation.cpp b/vm/compiler/InlineTransformation.cpp
index f876c34..5ef9496 100755
--- a/vm/compiler/InlineTransformation.cpp
+++ b/vm/compiler/InlineTransformation.cpp
@@ -1925,8 +1925,9 @@ static bool handleInlining (CompilationUnit *cUnit, JitTranslationInfo *info, Ba
     {
         //If we have callsite information from the trace building, then we try to use that.
         //For virtual and interface invokes, the callsite information will be the method called
-        //during building so it is just a guess.
-        if (invoke->meta.callsiteInfo != 0)
+        //during building so it is just a guess. We skip this logic if we have an invoke-object-init
+        //because we know method being invoked.
+        if (invoke->meta.callsiteInfo != 0 && invoke->dalvikInsn.opcode != OP_INVOKE_OBJECT_INIT_RANGE)
         {
             calleeMethod = invoke->meta.callsiteInfo->method;
         }
diff --git a/vm/compiler/Utility.cpp b/vm/compiler/Utility.cpp
index c58721c..9f2c59a 100644
--- a/vm/compiler/Utility.cpp
+++ b/vm/compiler/Utility.cpp
@@ -735,6 +735,12 @@ const Method *dvmCompilerCheckResolvedMethod (const Method *methodContainingInvo
             }
 
             break;
+
+        case OP_INVOKE_OBJECT_INIT_RANGE:
+            //The dex optimizer has already determined that we are doing an object-init.
+            callee = dvmFindDirectMethodByDescriptor (gDvm.classJavaLangObject, "<init>", "()V");
+            break;
+
         default:
             //For virtual invokes we cannot figure out method callee without access to the this pointer
             break;
diff --git a/vm/compiler/codegen/x86/lightcg/CodegenInterface.cpp b/vm/compiler/codegen/x86/lightcg/CodegenInterface.cpp
index c6d3065..d9e7a2f 100644
--- a/vm/compiler/codegen/x86/lightcg/CodegenInterface.cpp
+++ b/vm/compiler/codegen/x86/lightcg/CodegenInterface.cpp
@@ -116,7 +116,6 @@ static void updateCodeCache(int &dst, int src)
 /* JIT opcode filtering */
 bool jitOpcodeTable[kNumPackedOpcodes];
 Opcode jitNotSupportedOpcode[] = {
-    OP_INVOKE_OBJECT_INIT_RANGE,
 #if defined (WITH_SELF_VERIFICATION)
     OP_MONITOR_ENTER,
     OP_MONITOR_EXIT,
-- 
1.7.4.1

