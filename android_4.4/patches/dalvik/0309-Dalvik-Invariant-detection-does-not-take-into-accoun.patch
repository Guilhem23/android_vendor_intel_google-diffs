From ee97aca703d40567768a0880adba499e4e9b5049 Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Fri, 16 Aug 2013 12:42:47 +0700
Subject: Dalvik: Invariant detection does not take into account volatile modifier

BZ: 131066

Volatile get/put cannot be considered as invariant of a loop because
it can be changed on any iteration of a loop by separate thread.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Iaf18682825982b0f869baee145a3ddac19173038
Orig-MCG-Change-Id: Icb8c5dacc734967ea3450265c8f017ae6c58b1f5
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Reviewed-on: http://android.intel.com:8080/125818
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Provodin, Vitaly A <vitaly.a.provodin@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 vm/compiler/Dataflow.cpp          |   23 +++++++++++++++++++++++
 vm/compiler/Dataflow.h            |    7 +++++++
 vm/compiler/InvariantRemoval.cpp  |   33 ++-------------------------------
 vm/compiler/LoopRegisterUsage.cpp |   16 ++++++++++++++--
 4 files changed, 46 insertions(+), 33 deletions(-)

diff --git a/vm/compiler/Dataflow.cpp b/vm/compiler/Dataflow.cpp
index 22edc1e..d7fcb94 100644
--- a/vm/compiler/Dataflow.cpp
+++ b/vm/compiler/Dataflow.cpp
@@ -3276,3 +3276,26 @@ int dvmCompilerGetStartUseIndex (Opcode opcode)
 
     return res;
 }
+
+bool dvmCompilerIsOpcodeVolatile (Opcode opcode)
+{
+    switch (opcode)
+    {
+        case OP_IGET_VOLATILE:
+        case OP_IPUT_VOLATILE:
+        case OP_SGET_VOLATILE:
+        case OP_SPUT_VOLATILE:
+        case OP_IGET_OBJECT_VOLATILE:
+        case OP_IGET_WIDE_VOLATILE:
+        case OP_IPUT_WIDE_VOLATILE:
+        case OP_SGET_WIDE_VOLATILE:
+        case OP_SPUT_WIDE_VOLATILE:
+        case OP_IPUT_OBJECT_VOLATILE:
+        case OP_SGET_OBJECT_VOLATILE:
+        case OP_SPUT_OBJECT_VOLATILE:
+            return true;
+        default:
+            break;
+    }
+    return false;
+}
diff --git a/vm/compiler/Dataflow.h b/vm/compiler/Dataflow.h
index 9fc6c19..ec3c900 100644
--- a/vm/compiler/Dataflow.h
+++ b/vm/compiler/Dataflow.h
@@ -192,4 +192,11 @@ typedef struct ArrayAccessInfo {
  */
 int dvmCompilerGetStartUseIndex (Opcode opcode);
 
+/**
+ * @brief Check whether opcode is volatile
+ * @param opcode the considered opcode
+ * @return true if opcode represents a volatile instruction
+ */
+bool dvmCompilerIsOpcodeVolatile (Opcode opcode);
+
 #endif  // DALVIK_VM_DATAFLOW_H_
diff --git a/vm/compiler/InvariantRemoval.cpp b/vm/compiler/InvariantRemoval.cpp
index 62c9de5..f06112b 100644
--- a/vm/compiler/InvariantRemoval.cpp
+++ b/vm/compiler/InvariantRemoval.cpp
@@ -1046,35 +1046,6 @@ bool dvmCompilerInvariantRemovalGate (const CompilationUnit *cUnit, Pass *curPas
 }
 
 /**
- * @brief Checks if an opcode represents a volatile getter/setter
- * @param op The opcode to check
- * @return Returns true if the bytecode is volatile
- */
-static bool isVolatileGetterSetter (Opcode op)
-{
-    switch (op)
-    {
-        case OP_IGET_VOLATILE:
-        case OP_IPUT_VOLATILE:
-        case OP_SGET_VOLATILE:
-        case OP_SPUT_VOLATILE:
-        case OP_IGET_OBJECT_VOLATILE:
-        case OP_IGET_WIDE_VOLATILE:
-        case OP_IPUT_WIDE_VOLATILE:
-        case OP_SGET_WIDE_VOLATILE:
-        case OP_SPUT_WIDE_VOLATILE:
-        case OP_IPUT_OBJECT_VOLATILE:
-        case OP_SGET_OBJECT_VOLATILE:
-        case OP_SPUT_OBJECT_VOLATILE:
-            return true;
-        default:
-            break;
-    }
-
-    return false;
-}
-
-/**
  * @brief Finds all getters and setters in a given basic block
  * @param bb The basic block to check
  * @param data A vector of MIR pointers where to store the getters and setters
@@ -1095,7 +1066,7 @@ static bool findGettersSetters (BasicBlock *bb, void *data)
     {
         int dfFlags = dvmCompilerDataFlowAttributes[mir->dalvikInsn.opcode];
 
-        if (((dfFlags & DF_IS_SETTER) != 0) || ((dfFlags & DF_IS_GETTER) != 0) || isVolatileGetterSetter (mir->dalvikInsn.opcode) == true)
+        if (((dfFlags & DF_IS_SETTER) != 0) || ((dfFlags & DF_IS_GETTER) != 0) || dvmCompilerIsOpcodeVolatile (mir->dalvikInsn.opcode) == true)
         {
             gettersSetters.push_back (mir);
         }
@@ -1194,7 +1165,7 @@ static std::vector<MIR *> selectInvariants (CompilationUnit *cUnit, BasicBlock *
             }
 
             //If the MIR is a volatile, skip it
-            if (isVolatileGetterSetter (mir->dalvikInsn.opcode) == true)
+            if (dvmCompilerIsOpcodeVolatile (mir->dalvikInsn.opcode) == true)
             {
                 continue;
             }
diff --git a/vm/compiler/LoopRegisterUsage.cpp b/vm/compiler/LoopRegisterUsage.cpp
index ae63ffb..8597b9e 100644
--- a/vm/compiler/LoopRegisterUsage.cpp
+++ b/vm/compiler/LoopRegisterUsage.cpp
@@ -88,6 +88,16 @@ static void handleVariants (LoopInformation *info, MIR *highest, BitVector *vari
             haveGetter = true;
         }
 
+        // Volatile get/put cannot be invariant. The value can be changed any time
+        // by other thread and we should see this change immidiately
+        if (dvmCompilerIsOpcodeVolatile (current->dalvikInsn.opcode) == true)
+        {
+            haveVariant = true;
+
+            //We can break here, we are done in this case
+            break;
+        }
+
         //Now check if it's variant
         if (dvmCompilerCheckVariant (current, variants) == true)
         {
@@ -704,8 +714,10 @@ static void handleVariantBB (LoopInformation *info, BasicBlock *bb)
 
             if (opcode < static_cast<int> (kMirOpFirst))
             {
-                //If the opcode is alone in its color, we only care about its uses
-                if (dvmCompilerUsesAreInvariant (mir, variants) == true)
+                // If the opcode is alone in its color, we only care about its uses and whether mir is volatile
+                // Volatile get/put cannot be invariant. The value can be changed any time
+                // by other thread and we should see this change immediately
+                if (dvmCompilerUsesAreInvariant (mir, variants) == true && dvmCompilerIsOpcodeVolatile (mir->dalvikInsn.opcode) == false)
                 {
                     //Mark the loop information as having invariants
                     info->setContainsInvariantInstructions ();
-- 
1.7.4.1

