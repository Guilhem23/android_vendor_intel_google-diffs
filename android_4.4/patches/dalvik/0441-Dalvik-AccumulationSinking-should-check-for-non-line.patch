From 95d92d3c254dea2d93f804fe1e2ce1c1a5a057fc Mon Sep 17 00:00:00 2001
From: Alexei Zavjalov <alexei.zavjalov@intel.com>
Date: Sat, 28 Dec 2013 19:00:10 +0700
Subject: Dalvik: AccumulationSinking should check for non linear calculations

BZ: 160134

If we are trying to move accumulation from the loop body, we have to check
it doesn't contain any non linear calculations like a = a * const. This patch
is adding a new function called isLinearFunction which tries to find all
non-linear calculation in MIR sequences related to each VRs.

Change-Id: If2d17ae6fe26afcd0fdbdf21568e29977040c4cc
Category: device enablement
Domain: AOSP.Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, need rework
Signed-off-by: Alexei Zavjalov <alexei.zavjalov@intel.com>
---
 vm/compiler/AccumulationSinking.cpp |   80 ++++++++++++++++++++++++++++++++++-
 1 files changed, 79 insertions(+), 1 deletions(-)

diff --git a/vm/compiler/AccumulationSinking.cpp b/vm/compiler/AccumulationSinking.cpp
index 4ff0ed7..22e091b 100644
--- a/vm/compiler/AccumulationSinking.cpp
+++ b/vm/compiler/AccumulationSinking.cpp
@@ -410,6 +410,77 @@ static bool checkNoOtherUses(CompilationUnit *cUnit, LoopInformation *info, unsi
 }
 
 /**
+ * @brief Check the function is linear and doesn't contain expressions like "a = a * c"
+ * @param cUnit the CompilationUnit
+ * @param listOfMirs the list of MIRs unite by VR
+ * @param vr VR related to MIRs
+ */
+static bool isLinearFunction(CompilationUnit *cUnit, std::vector<MIR *> &listOfMirs, unsigned int vr)
+{
+    std::map<VirtualRegister *, Expression *> vrToExpression;
+    std::map<MIR *, Expression *> mirToExpressionMap;
+
+    /* We have to go through all MIRs to make shure we have no multiplies
+     *  with the same VR as the result and as one of the args
+     */
+    for (std::vector<MIR *>::const_iterator iter = listOfMirs.begin ();
+       iter != listOfMirs.end (); iter++)
+    {
+        MIR * mir = (*iter);
+
+        Expression * expression = Expression::mirToExpression (mir, &vrToExpression);
+
+        if (expression == 0)
+        {
+            continue;
+        }
+
+        if (expression->isBytecodeExpression() == false)
+        {
+            continue;
+        }
+
+        // If we get to this point, we know that we have a bytecode expression.
+        BytecodeExpression * bytecodeExpr =
+            static_cast<BytecodeExpression *>(expression);
+
+        if (bytecodeExpr->getExpressionKind() == ExpKind_Mul)
+        {
+            // Linear transformation expressions are always binary
+            BinaryExpression * binaryExpr =
+                static_cast<BinaryExpression *>(bytecodeExpr);
+
+            Expression * rhsChild = binaryExpr->getRhs();
+            Expression * lhsChild = binaryExpr->getLhs();
+
+            if (rhsChild != 0 && rhsChild->isVirtualRegister() == true)
+            {
+                VirtualRegister * rhsVRExpr =
+                    static_cast<VirtualRegister *>(rhsChild);
+
+                if (dvmExtractSSARegister(cUnit, rhsVRExpr->getLowSSAReg()) == vr)
+                {
+                    return false;
+                }
+            }
+
+            if (lhsChild != 0 && lhsChild->isVirtualRegister() == true)
+            {
+                VirtualRegister * lhsVRExpr =
+                    static_cast<VirtualRegister *>(lhsChild);
+
+                if (dvmExtractSSARegister(cUnit, lhsVRExpr->getLowSSAReg()) == vr)
+                {
+                    return false;
+                }
+            }
+        }
+    }
+
+    return true;
+}
+
+/**
  * @brief Filter the VRs to only consider inter-iteration interIteration, non IV registers, and not used for another calculation
  * @param cUnit the CompilationUnit
  * @param info the LoopInformation
@@ -491,9 +562,16 @@ static void filterVRs (CompilationUnit *cUnit, LoopInformation *info, std::vecto
         //Fill the map if it is an accumulation
         bool res = fillAccumulatorMap (cUnit, info, vr, accumulatorCalculation, accumulatorMap);
 
-        //If we succeeded, reverse the list first before adding it
+        //If we succeeded, check every vector doesn't contain linear calculations and then
+        //reverse the list before adding it
         if (res == true)
         {
+            if (isLinearFunction(cUnit, accumulatorCalculation, vr) == false)
+            {
+                PASS_LOG (ALOGD, cUnit, "Accumulation_Sinking: Found non linear calculation in expressions chain");
+                continue;
+            }
+
             std::reverse (accumulatorCalculation.begin (), accumulatorCalculation.end ());
 
             accumulatorList.push_back (accumulatorCalculation);
-- 
1.7.4.1

