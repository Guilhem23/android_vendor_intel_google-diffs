From abdffd402c1a3b35c76bb55395301b3fde34ca9d Mon Sep 17 00:00:00 2001
From: Mark Mendell <mark.p.mendell@intel.com>
Date: Thu, 5 Dec 2013 09:55:20 -0800
Subject: Dalvik: Fewer "loop trace not optimized" messages

BZ: 156984

Generate the messages from BZ 152485 only under
-Xjitverbose, in order to reduce log message pollution

Change-Id: I7d1ad7dac830f685b1bbf1daf43ed199e244b635
Category: device enablement
Domain: AOSP.Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, need rework
Signed-off-by: Mark Mendell <mark.p.mendell@intel.com>
---
 vm/compiler/Frontend.cpp |   14 ++++++++---
 vm/compiler/Loop.cpp     |   58 ++++++++++++++++++++++++++++++++-------------
 2 files changed, 51 insertions(+), 21 deletions(-)

diff --git a/vm/compiler/Frontend.cpp b/vm/compiler/Frontend.cpp
index 7b78d27..688f516 100644
--- a/vm/compiler/Frontend.cpp
+++ b/vm/compiler/Frontend.cpp
@@ -2188,8 +2188,11 @@ static bool compileLoop(CompilationUnit *cUnit, unsigned int startOffset,
         int numByteCodes = countByteCodes (cUnit);
         if (numByteCodes > JIT_MAX_TRACE_LEN)
         {
-            ALOGD("JIT_INFO: Loop trace @ offset %04x aborted due too many byte codes (%d/%d)",
-                  cUnit->entryBlock->startOffset, numByteCodes, JIT_MAX_TRACE_LEN);
+            if (cUnit->printMe == true)
+            {
+                ALOGD("JIT_INFO: Loop trace @ offset %04x aborted due too many byte codes (%d/%d)",
+                      cUnit->entryBlock->startOffset, numByteCodes, JIT_MAX_TRACE_LEN);
+            }
             goto bail;
         }
     }
@@ -2290,8 +2293,11 @@ static bool compileLoop(CompilationUnit *cUnit, unsigned int startOffset,
 
     /* Loop is too big - bail out */
     if (cUnit->assemblerStatus == kRetryHalve) {
-        ALOGD("JIT_INFO: Loop trace @ offset %04x aborted because trace is too large",
-                cUnit->entryBlock->startOffset);
+        if (cUnit->printMe == true)
+        {
+            ALOGD("JIT_INFO: Loop trace @ offset %04x aborted because trace is too large",
+                    cUnit->entryBlock->startOffset);
+        }
         goto bail;
     }
 
diff --git a/vm/compiler/Loop.cpp b/vm/compiler/Loop.cpp
index 9bd414c..484bb71 100644
--- a/vm/compiler/Loop.cpp
+++ b/vm/compiler/Loop.cpp
@@ -1142,8 +1142,11 @@ static bool checkBBInstructionsForCFGLoop (CompilationUnit *cUnit, BasicBlock *b
             //If we don't support it, just quit
             if (mir->dalvikInsn.opcode == nonFixableOpcodes[i])
             {
-                ALOGD("JIT_INFO: Loop trace @ offset %04x not a loop: unsupported opcode in loop : %s",
-                      cUnit->entryBlock->startOffset, dexGetOpcodeName(mir->dalvikInsn.opcode));
+                if (cUnit->printMe == true)
+                {
+                    ALOGD("JIT_INFO: Loop trace @ offset %04x not a loop: unsupported opcode in loop : %s",
+                          cUnit->entryBlock->startOffset, dexGetOpcodeName(mir->dalvikInsn.opcode));
+                }
                 return false;
             }
         }
@@ -1557,8 +1560,11 @@ static bool acceptCFGLoops (CompilationUnit *cUnit)
 
     if (res == true)
     {
-        ALOGD("JIT_INFO: Loop trace @ offset %04x not a loop: first BB hidden",
-              cUnit->entryBlock->startOffset);
+        if (cUnit->printMe == true)
+        {
+            ALOGD("JIT_INFO: Loop trace @ offset %04x not a loop: first BB hidden",
+                  cUnit->entryBlock->startOffset);
+        }
         return false;
     }
 
@@ -1568,8 +1574,11 @@ static bool acceptCFGLoops (CompilationUnit *cUnit)
 
     if (res == false)
     {
-        ALOGD("JIT_INFO: Loop trace @ offset %04x not a loop: children of first BB hidden",
-              cUnit->entryBlock->startOffset);
+        if (cUnit->printMe == true)
+        {
+            ALOGD("JIT_INFO: Loop trace @ offset %04x not a loop: children of first BB hidden",
+                  cUnit->entryBlock->startOffset);
+        }
         return false;
     }
 
@@ -1597,7 +1606,7 @@ static bool acceptCFGLoops (CompilationUnit *cUnit)
     {
         //If it isn't top formed, it must be bottom formed
         bool res = isBottomFormed (cUnit, first);
-        if (res == false)
+        if (res == false && cUnit->printMe == true)
         {
             ALOGD("JIT_INFO: Loop trace @ offset %04x not a loop: not top or bottom formed",
                   cUnit->entryBlock->startOffset);
@@ -1620,8 +1629,11 @@ bool dvmCompilerFilterLoopBlocks(CompilationUnit *cUnit)
      * A loop body should have at least two incoming edges.
      */
     if (numPred < 2) {
-        ALOGD("JIT_INFO: Loop trace @ offset %04x not a loop: only one predecessor",
-              cUnit->entryBlock->startOffset);
+        if (cUnit->printMe == true)
+        {
+            ALOGD("JIT_INFO: Loop trace @ offset %04x not a loop: only one predecessor",
+                  cUnit->entryBlock->startOffset);
+        }
         return false;
     }
 
@@ -1673,16 +1685,22 @@ bool dvmCompilerFilterLoopBlocks(CompilationUnit *cUnit)
                  * to handle.
                  */
                 if (bb->taken == cUnit->exitBlock) {
-                    ALOGD("JIT_INFO: Loop trace @ offset %04x taken branch to exit block",
-                          cUnit->entryBlock->startOffset);
+                    if (cUnit->printMe == true)
+                    {
+                        ALOGD("JIT_INFO: Loop trace @ offset %04x taken branch to exit block",
+                              cUnit->entryBlock->startOffset);
+                    }
                     return false;
                 }
                 if (bb->taken->hidden) {
                     //We should only be adding one loop exit
                     if (normalChainingAdded == true)
                     {
-                        ALOGD("JIT_INFO: Loop trace @ offset %04x more than one loop exit",
-                              cUnit->entryBlock->startOffset);
+                        if (cUnit->printMe == true)
+                        {
+                            ALOGD("JIT_INFO: Loop trace @ offset %04x more than one loop exit",
+                                  cUnit->entryBlock->startOffset);
+                        }
                         return false;
                     }
                     bb->taken->blockType = kChainingCellNormal;
@@ -1699,15 +1717,21 @@ bool dvmCompilerFilterLoopBlocks(CompilationUnit *cUnit)
                  * to handle.
                  */
                 if (bb->fallThrough == cUnit->exitBlock) {
-                    ALOGD("JIT_INFO: Loop trace @ offset %04x fallthrough to exit block",
-                          cUnit->entryBlock->startOffset);
+                    if (cUnit->printMe == true)
+                    {
+                        ALOGD("JIT_INFO: Loop trace @ offset %04x fallthrough to exit block",
+                              cUnit->entryBlock->startOffset);
+                    }
                     return false;
                 }
                 if (bb->fallThrough->hidden) {
                     //We should only be adding one loop exit
                     if (normalChainingAdded == true) {
-                        ALOGD("JIT_INFO: Loop trace @ offset %04x fallthrough to more than one loop exit",
-                              cUnit->entryBlock->startOffset);
+                        if (cUnit->printMe == true)
+                        {
+                            ALOGD("JIT_INFO: Loop trace @ offset %04x fallthrough to more than one loop exit",
+                                  cUnit->entryBlock->startOffset);
+                        }
                         return false;
                     }
                     bb->fallThrough->blockType = kChainingCellNormal;
-- 
1.7.4.1

