From 92a1553bcdcf62b4af889f6a76fed2eff5219da7 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Mon, 15 Jul 2013 14:42:14 -0700
Subject: Dalvik: PCG Agreeing with QA Testing

BZ: 123662

Certain elements must be emitted/handled so that QA testing can recognize and
 correctly interpret the logged information when using the PCG backend.

- Printing out the name of the trace
- Adding LOWER in front of bytecodes
- Changing the backward chaining message

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ideaedcb8a513413cdc9510bba497147bfbb0d822
Orig-MCG-Change-Id: I476b1b691a0c1ca580992a21c30d46c01e1eeb4b
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 .../codegen/x86/pcg/ChainingCellException.cpp      |    4 ++--
 vm/compiler/codegen/x86/pcg/CodeGeneration.cpp     |    7 ++++++-
 vm/compiler/codegen/x86/pcg/CompilationUnitPCG.cpp |    7 +++++++
 vm/compiler/codegen/x86/pcg/Utility.cpp            |    1 -
 4 files changed, 15 insertions(+), 4 deletions(-)

diff --git a/vm/compiler/codegen/x86/pcg/ChainingCellException.cpp b/vm/compiler/codegen/x86/pcg/ChainingCellException.cpp
index dbf85d0..00a0c4a 100644
--- a/vm/compiler/codegen/x86/pcg/ChainingCellException.cpp
+++ b/vm/compiler/codegen/x86/pcg/ChainingCellException.cpp
@@ -165,7 +165,7 @@ static uint8_t* dvmCompilerPcgEmitPredictedChainingCell (CompilationUnitPCG *cUn
 
     if (cUnit->checkDebugMask (DebugMaskBytecode) == true)
     {
-        ALOGI ("LOWER InvokePredictedChainingCell at @%p\n", currCachePtr);
+        ALOGI ("LOWER InvokePredictedChainingCell at offsetPC @%p\n", currCachePtr);
     }
 
     // This is the beginning of the chaining cell. All symbol referenced will be made to this location.
@@ -412,7 +412,7 @@ static uint8_t* dvmCompilerPcgEmitBackwardBranchChainingCell (CompilationUnitPCG
 
     if (cUnit->checkDebugMask (DebugMaskBytecode) == true)
     {
-        ALOGI ("LOWER BackwardBranchChainingCell at @%p\n", currCachePtr);
+        ALOGI ("LOWER BackwardBranchChainingCell with offsetPC @%p\n", currCachePtr);
     }
 
     // Lay down a backward branch chaining cell in memory.  Given that the VM
diff --git a/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp b/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
index 9056849..13e17a3 100644
--- a/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
+++ b/vm/compiler/codegen/x86/pcg/CodeGeneration.cpp
@@ -1228,6 +1228,7 @@ void dvmCompilerPcgEmitCode (CompilationUnitPCG *cUnit, JitTranslationInfo* info
         gDvmJit.codeCacheFull = true;
         return;
     }
+
     freeSpace -= (endAddr + 1) - currCachePtr;
 
     cUnit->bindBlockSymbolAddresses (startAddr);
@@ -1246,7 +1247,6 @@ void dvmCompilerPcgEmitCode (CompilationUnitPCG *cUnit, JitTranslationInfo* info
     // cUnit->totalSize gives the total size, including initial padding.  We
     // also increment gDvmJit.codeCacheByteUsed by this amount.
     // Increment gDvmJit.numCompilations to indicate successful compilation.
-    //
     cUnit->baseAddr = startAddr;
     info->codeAddress = startAddr;
     cUnit->totalSize = currCachePtr - cacheStartPtr + 1;
@@ -1270,6 +1270,11 @@ void dvmCompilerPcgEmitCode (CompilationUnitPCG *cUnit, JitTranslationInfo* info
         ALOGI ("Code cache range for trace %d [0x%p, 0x%p)\n", cUnit->getTraceID (),
                 cacheStartPtr, stream);
     }
+
+    ALOGD("-------- PCG: Emit trace for [%s%s@%#x] binary code starts at %p (cache start %p)",
+            cUnit->method->clazz->descriptor, cUnit->method->name,
+            cUnit->traceDesc->trace[0].info.frag.startOffset,
+            cUnit->baseAddr, gDvmJit.codeCache);
 }
 
 void *dvmCompilerPcgCreateHookFunction (void)
diff --git a/vm/compiler/codegen/x86/pcg/CompilationUnitPCG.cpp b/vm/compiler/codegen/x86/pcg/CompilationUnitPCG.cpp
index 4ce2b01..cb98ef8 100644
--- a/vm/compiler/codegen/x86/pcg/CompilationUnitPCG.cpp
+++ b/vm/compiler/codegen/x86/pcg/CompilationUnitPCG.cpp
@@ -46,6 +46,13 @@ CompilationUnitPCG::CompilationUnitPCG (CompilationUnit *cUnit)
         debugLevel = tmp;
     }
 
+    //Set certain debug printing if printMe is true
+    if (cUnit->printMe == true)
+    {
+        setDebugLevel (DebugMaskBytecode);
+        setDebugLevel (DebugMaskDisasm);
+    }
+
     //Get the value
     tmp = 0;
     res = dvmExtractBackendOption ("OptimizationLevel", &tmp);
diff --git a/vm/compiler/codegen/x86/pcg/Utility.cpp b/vm/compiler/codegen/x86/pcg/Utility.cpp
index 77cee75..49178c9 100644
--- a/vm/compiler/codegen/x86/pcg/Utility.cpp
+++ b/vm/compiler/codegen/x86/pcg/Utility.cpp
@@ -443,7 +443,6 @@ bool dvmCompilerPcgSupportTrace (CompilationUnit *cUnit)
             //Increment the bytecode count
             bytecodeCount++;
 
-
             switch (dalvikOpCode)
             {
                 case OP_EXECUTE_INLINE:
-- 
1.7.4.1

