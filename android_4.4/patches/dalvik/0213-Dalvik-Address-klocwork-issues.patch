From 693e83b903eb4f312e7d11e69f985451edc4a6b6 Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Mon, 1 Jul 2013 09:40:04 -0700
Subject: Dalvik: Address klocwork issues

BZ: 120367

-Ensures that mapping between RegName and PhysicalReg does not lead to out of
bounds access.
-Information about registers exists for all PhysicalReg.
-Eliminates chance of null dereferencing when looking for compile entry during
loading of virtual registers for child.
-When printing register name to string, it ensures that when no name exists,
"(null)" is printed instead.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ie87a4b9fa36ddc73ecb4224daaa18ce77899c606
Orig-MCG-Change-Id: I25e1ba5700e4e0720612826550e7f26d56f9b8cf
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/AnalysisO1.cpp         |   11 ++-
 vm/compiler/codegen/x86/RegisterizationBE.cpp  |    9 ++-
 vm/compiler/codegen/x86/libenc/enc_base.cpp    |    2 +-
 vm/compiler/codegen/x86/libenc/enc_wrapper.cpp |   96 ++++++++++++++++++-----
 vm/compiler/codegen/x86/libenc/enc_wrapper.h   |    4 +-
 5 files changed, 95 insertions(+), 27 deletions(-)

diff --git a/vm/compiler/codegen/x86/AnalysisO1.cpp b/vm/compiler/codegen/x86/AnalysisO1.cpp
index 21386bf..7c6f531 100644
--- a/vm/compiler/codegen/x86/AnalysisO1.cpp
+++ b/vm/compiler/codegen/x86/AnalysisO1.cpp
@@ -222,8 +222,12 @@ CompilationUnit* currentUnit = NULL;
 
 //! the current basic block
 BasicBlock_O1* currentBB = NULL;
-//! array of RegisterInfo for all the physical registers
-RegisterInfo allRegs[PhysicalReg_Last]; //initialized in codeGen
+
+/**
+ * @brief Information for each physical register
+ * @details Initialized during code generation
+ */
+RegisterInfo allRegs[PhysicalReg_Last+1];
 
 //! this array says whether a spill location is used (0 means not used, 1 means used)
 int spillIndexUsed[MAX_SPILL_JIT_IA];
@@ -306,6 +310,9 @@ static inline bool isCurrentByteCodeJump(Opcode opcode) {
    initialize data structure allRegs, which stores information for each physical register,
    whether it is used, when it was last freed, whether it is callee-saved */
 void initializeAllRegs() {
+    //Initialize entire array
+    memset (allRegs, PhysicalReg_Null, sizeof (allRegs));
+
     int k;
     for(k = PhysicalReg_EAX; k <= PhysicalReg_EBP; k++) {
         allRegs[k].physicalReg = (PhysicalReg) k;
diff --git a/vm/compiler/codegen/x86/RegisterizationBE.cpp b/vm/compiler/codegen/x86/RegisterizationBE.cpp
index db99dd4..689b9f0 100644
--- a/vm/compiler/codegen/x86/RegisterizationBE.cpp
+++ b/vm/compiler/codegen/x86/RegisterizationBE.cpp
@@ -1251,8 +1251,15 @@ static bool loadVirtualRegistersForChild (const std::set<int> &virtualRegistersT
             }
         }
 
+        //Paranoid: this should never happen
+        if (childCompileEntry == 0)
+        {
+            ALOGD ("JIT_INFO: Trying to load virtual register for child but cannot find compile entry");
+            SET_JIT_ERROR (kJitErrorBERegisterization);
+            return false;
+        }
+
         //Paranoid
-        assert (childCompileEntry != 0);
         assert (childCompileEntry->isVirtualReg () == true);
 
         //Get the physical type
diff --git a/vm/compiler/codegen/x86/libenc/enc_base.cpp b/vm/compiler/codegen/x86/libenc/enc_base.cpp
index dde49b7..0562ce8 100644
--- a/vm/compiler/codegen/x86/libenc/enc_base.cpp
+++ b/vm/compiler/codegen/x86/libenc/enc_base.cpp
@@ -1117,7 +1117,7 @@ const char * getRegNameString(RegName reg)
             return registers[i].regstring;
         }
     }
-    return NULL;
+    return "(null)";
 }
 
 RegName getRegName(const char * regname)
diff --git a/vm/compiler/codegen/x86/libenc/enc_wrapper.cpp b/vm/compiler/codegen/x86/libenc/enc_wrapper.cpp
index aa3d882..024ffa2 100644
--- a/vm/compiler/codegen/x86/libenc/enc_wrapper.cpp
+++ b/vm/compiler/codegen/x86/libenc/enc_wrapper.cpp
@@ -24,26 +24,80 @@
 
 //#define PRINT_ENCODER_STREAM
 bool dump_x86_inst = false;
-//map_reg
-const RegName map_of_regno_2_regname[] = {
-    RegName_EAX,    RegName_EBX,    RegName_ECX,    RegName_EDX,
-    RegName_EDI,    RegName_ESI,    RegName_ESP,    RegName_EBP,
-    RegName_XMM0,   RegName_XMM1,   RegName_XMM2,   RegName_XMM3,
-    RegName_XMM4,   RegName_XMM5,   RegName_XMM6,   RegName_XMM7,
-    RegName_Null,   RegName_Null,   RegName_Null,   RegName_Null,
-    RegName_Null,   RegName_Null,   RegName_Null,   RegName_Null,
-    RegName_Null,
-    RegName_Null,   RegName_Null,   RegName_Null,   RegName_Null,   RegName_Null,
-    RegName_Null,   RegName_Null,   RegName_Null,   RegName_Null,
-    RegName_Null,   RegName_Null,   RegName_Null,   RegName_Null,
-    RegName_Null,   RegName_Null,   //SCRATCH
-    RegName_Null,   RegName_Null,   RegName_Null,   RegName_Null
-};
+
+/**
+ * @brief Provides mapping between PhysicalReg and RegName used by encoder
+ * @param physicalReg The physical register
+ * @return Returns encoder's register name
+ */
+static RegName mapFromPhysicalReg (int physicalReg)
+{
+    RegName reg = RegName_Null;
+
+    //Get mapping between PhysicalReg and RegName
+    switch (physicalReg)
+    {
+        case PhysicalReg_EAX:
+            reg = RegName_EAX;
+            break;
+        case PhysicalReg_EBX:
+            reg = RegName_EBX;
+            break;
+        case PhysicalReg_ECX:
+            reg = RegName_ECX;
+            break;
+        case PhysicalReg_EDX:
+            reg = RegName_EDX;
+            break;
+        case PhysicalReg_EDI:
+            reg = RegName_EDI;
+            break;
+        case PhysicalReg_ESI:
+            reg = RegName_ESI;
+            break;
+        case PhysicalReg_ESP:
+            reg = RegName_ESP;
+            break;
+        case PhysicalReg_EBP:
+            reg = RegName_EBP;
+            break;
+        case PhysicalReg_XMM0:
+            reg = RegName_XMM0;
+            break;
+        case PhysicalReg_XMM1:
+            reg = RegName_XMM1;
+            break;
+        case PhysicalReg_XMM2:
+            reg = RegName_XMM2;
+            break;
+        case PhysicalReg_XMM3:
+            reg = RegName_XMM3;
+            break;
+        case PhysicalReg_XMM4:
+            reg = RegName_XMM4;
+            break;
+        case PhysicalReg_XMM5:
+            reg = RegName_XMM5;
+            break;
+        case PhysicalReg_XMM6:
+            reg = RegName_XMM6;
+            break;
+        case PhysicalReg_XMM7:
+            reg = RegName_XMM7;
+            break;
+        default:
+            //We have no mapping
+            reg = RegName_Null;
+            break;
+    }
+
+    return reg;
+}
 
 //getRegSize, getAliasReg:
 //OpndSize, RegName, OpndExt: enum enc_defs.h
 inline void add_r(EncoderBase::Operands & args, int physicalReg, OpndSize sz, OpndExt ext = OpndExt_None) {
-    RegName reg = map_of_regno_2_regname[physicalReg];
+    RegName reg = mapFromPhysicalReg (physicalReg);
     if (sz != getRegSize(reg)) {
        reg = getAliasReg(reg, sz);
     }
@@ -51,22 +105,22 @@ inline void add_r(EncoderBase::Operands & args, int physicalReg, OpndSize sz, Op
 }
 inline void add_m(EncoderBase::Operands & args, int baseReg, int disp, OpndSize sz, OpndExt ext = OpndExt_None) {
     args.add(EncoderBase::Operand(sz,
-                                  map_of_regno_2_regname[baseReg],
+                                  mapFromPhysicalReg (baseReg),
                                   RegName_Null, 0,
                                   disp, ext));
 }
 inline void add_m_scale(EncoderBase::Operands & args, int baseReg, int indexReg, int scale,
                         OpndSize sz, OpndExt ext = OpndExt_None) {
     args.add(EncoderBase::Operand(sz,
-                                  map_of_regno_2_regname[baseReg],
-                                  map_of_regno_2_regname[indexReg], scale,
+                                  mapFromPhysicalReg (baseReg),
+                                  mapFromPhysicalReg (indexReg), scale,
                                   0, ext));
 }
 inline void add_m_disp_scale(EncoderBase::Operands & args, int baseReg, int disp, int indexReg, int scale,
                         OpndSize sz, OpndExt ext = OpndExt_None) {
     args.add(EncoderBase::Operand(sz,
-                                  map_of_regno_2_regname[baseReg],
-                                  map_of_regno_2_regname[indexReg], scale,
+                                  mapFromPhysicalReg (baseReg),
+                                  mapFromPhysicalReg (indexReg), scale,
                                   disp, ext));
 }
 
diff --git a/vm/compiler/codegen/x86/libenc/enc_wrapper.h b/vm/compiler/codegen/x86/libenc/enc_wrapper.h
index ba50c13..727159d 100644
--- a/vm/compiler/codegen/x86/libenc/enc_wrapper.h
+++ b/vm/compiler/codegen/x86/libenc/enc_wrapper.h
@@ -49,8 +49,8 @@ typedef enum PhysicalReg {
   PhysicalReg_SCRATCH_5, PhysicalReg_SCRATCH_6, PhysicalReg_SCRATCH_7, PhysicalReg_SCRATCH_8,
   PhysicalReg_SCRATCH_9, PhysicalReg_SCRATCH_10,
 
-  //This should be the last entry:
-  PhysicalReg_Last
+  //This should be the last entry
+  PhysicalReg_Last = PhysicalReg_SCRATCH_10
 } PhysicalReg;
 
 typedef enum Reg_No {
-- 
1.7.4.1

