From 6c039415bf1fc777823e8aec607f9eb19a8aa0a6 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Mon, 7 Jan 2013 16:29:01 -0800
Subject: Dalvik: Insert Backward Chaining should be made safe

BZ: 75978

Backward Chaining Made Safe

The current patch tests if the function findPredecessorBlock returns NULL.
If it does, the dvmCompilerInsertBackwardChaining returns false and the loop
  framework rejects the loop.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ic094fa497a11b80a9f91066a83c4211c8c823871
Orig-MCG-Change-Id: I1a2c0e176e71027dcc5f4b0a7ea6d09ce0124917
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/Compiler.h   |    8 +++++++-
 vm/compiler/Frontend.cpp |    7 ++++++-
 vm/compiler/Loop.cpp     |   23 +++++++++++++++++++++--
 3 files changed, 34 insertions(+), 4 deletions(-)

diff --git a/vm/compiler/Compiler.h b/vm/compiler/Compiler.h
index 6b8a408..ba3bd9b 100644
--- a/vm/compiler/Compiler.h
+++ b/vm/compiler/Compiler.h
@@ -222,7 +222,13 @@ void dvmCompilerInlineMIR(struct CompilationUnit *cUnit,
 void dvmInitializeSSAConversion(struct CompilationUnit *cUnit);
 int dvmConvertSSARegToDalvik(const struct CompilationUnit *cUnit, int ssaReg);
 bool dvmCompilerLoopOpt(struct CompilationUnit *cUnit);
-void dvmCompilerInsertBackwardChaining(struct CompilationUnit *cUnit);
+
+/**
+ * @brief Insert the backward chaining BasicBlock
+ * @param cUnit the CompilationUnit
+ * @return whether the process was a success or not
+ */
+bool dvmCompilerInsertBackwardChaining(struct CompilationUnit *cUnit);
 void dvmCompilerNonLoopAnalysis(struct CompilationUnit *cUnit);
 bool dvmCompilerFindLocalLiveIn(struct CompilationUnit *cUnit,
                                 struct BasicBlock *bb);
diff --git a/vm/compiler/Frontend.cpp b/vm/compiler/Frontend.cpp
index 5b3ea7a..f05bbe9 100644
--- a/vm/compiler/Frontend.cpp
+++ b/vm/compiler/Frontend.cpp
@@ -1783,8 +1783,13 @@ static bool compileLoop(CompilationUnit *cUnit, unsigned int startOffset,
     /*
      * Change the backward branch to the backward chaining cell after dataflow
      * analsys/optimizations are done.
+     * Backward branching can fail, if it does, reject the loop
      */
-    dvmCompilerInsertBackwardChaining(cUnit);
+    if (dvmCompilerInsertBackwardChaining(cUnit) == false)
+    {
+        ALOGD ("WARNING: Loop formation: Insert Backward Chaining Failed");
+        goto bail;
+    }
 
 #if defined(ARCH_IA32)
     /* Convert MIR to LIR, etc. */
diff --git a/vm/compiler/Loop.cpp b/vm/compiler/Loop.cpp
index b4093e3..0074860 100644
--- a/vm/compiler/Loop.cpp
+++ b/vm/compiler/Loop.cpp
@@ -96,6 +96,10 @@ static void dumpHoistedChecks(CompilationUnit *cUnit)
 
 #endif
 
+/**
+ * Find the predecessor block of a given BasicBlock: the single predecessor whichever if only one predecessor,
+ *      the entry block if there are two predecessors and the entry block is a predecessor, 0 otherwise
+ */
 static BasicBlock *findPredecessorBlock(const CompilationUnit *cUnit,
                                         const BasicBlock *bb)
 {
@@ -784,7 +788,7 @@ bool dvmCompilerLoopOpt(CompilationUnit *cUnit)
 /*
  * Select the target block of the backward branch.
  */
-void dvmCompilerInsertBackwardChaining(CompilationUnit *cUnit)
+bool dvmCompilerInsertBackwardChaining(CompilationUnit *cUnit)
 {
     /*
      * If we are not in self-verification or profiling mode, the backward
@@ -809,11 +813,26 @@ void dvmCompilerInsertBackwardChaining(CompilationUnit *cUnit)
      */
     BasicBlock *firstBB = cUnit->entryBlock->fallThrough;
     BasicBlock *backBranchBB = findPredecessorBlock(cUnit, firstBB);
+
+    //Backward branching can fail if findPredecessorBlock returns 0, if it does report the failure
+    if (backBranchBB == NULL)
+    {
+        return false;
+    }
+
     if (backBranchBB->taken == firstBB) {
         backBranchBB->taken = cUnit->backChainBlock;
     } else {
-        assert(backBranchBB->fallThrough == firstBB);
+        //Paranoid: if fallThrough is not firstBB, we have an issue: neither taken or fallthrough went to firstBB...
+        if (backBranchBB->fallThrough != firstBB)
+        {
+            //Report it as a failure
+            return false;
+        }
         backBranchBB->fallThrough = cUnit->backChainBlock;
     }
     cUnit->backChainBlock->startOffset = firstBB->startOffset;
+
+    //Report success
+    return true;
 }
-- 
1.7.4.1

