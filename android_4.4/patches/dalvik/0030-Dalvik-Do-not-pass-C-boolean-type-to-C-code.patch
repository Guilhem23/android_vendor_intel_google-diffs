From 8e319675227ce5bc702f67caf1c52ce6a0c481b5 Mon Sep 17 00:00:00 2001
From: Qiming Shi <qiming.shi@intel.com>
Date: Sat, 1 Jun 2013 14:52:36 +0800
Subject: Dalvik: Do not pass C++ boolean type to C code

BZ: 75820

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Interpreter; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I2097b6381409c76dcf6fee91ebedc33ffdd22de3
Orig-MCG-Change-Id: Ic00175003c61cbd09f534635ec537c819cdb3ce7
Signed-off-by: dvshkurk <Dmitry.V.Shkurko@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/Exception.cpp                        |    2 +-
 vm/Exception.h                          |    2 +-
 vm/compiler/codegen/x86/LowerHelper.cpp |    2 +-
 vm/mterp/Mterp.h                        |    1 +
 vm/mterp/out/InterpAsm-x86.S            |   16 ++++++++--------
 vm/mterp/x86/entry.S                    |    4 ++--
 vm/mterp/x86/footer.S                   |   12 ++++++------
 7 files changed, 20 insertions(+), 19 deletions(-)

diff --git a/vm/Exception.cpp b/vm/Exception.cpp
index ca76140..af84596 100644
--- a/vm/Exception.cpp
+++ b/vm/Exception.cpp
@@ -713,7 +713,7 @@ static int findCatchInMethod(Thread* self, const Method* method, int relPc,
  * If "scanOnly" is false, self->interpSave.curFrame is also set to this value.
  */
 int dvmFindCatchBlock(Thread* self, int relPc, Object* exception,
-    bool scanOnly, void** newFrame)
+    int scanOnly, void** newFrame)
 {
     u4* fp = self->interpSave.curFrame;
     int catchAddr = -1;
diff --git a/vm/Exception.h b/vm/Exception.h
index 055ed2b..fb225e7 100644
--- a/vm/Exception.h
+++ b/vm/Exception.h
@@ -174,7 +174,7 @@ void dvmLogExceptionStackTrace(void);
  * find a catcher.
  */
 extern "C" int dvmFindCatchBlock(Thread* self, int relPc, Object* exception,
-    bool doUnroll, void** newFrame);
+    int doUnroll, void** newFrame);
 
 /*
  * Support for saving exception stack traces and converting them to
diff --git a/vm/compiler/codegen/x86/LowerHelper.cpp b/vm/compiler/codegen/x86/LowerHelper.cpp
index 7affeb8..7ccd3ba 100644
--- a/vm/compiler/codegen/x86/LowerHelper.cpp
+++ b/vm/compiler/codegen/x86/LowerHelper.cpp
@@ -2637,7 +2637,7 @@ int call_fmodf() {
 int call_dvmFindCatchBlock() {
     //int dvmFindCatchBlock(Thread* self, int relPc, Object* exception,
     //bool doUnroll, void** newFrame)
-    typedef int (*vmHelper)(Thread*, int, Object*, bool, void**);
+    typedef int (*vmHelper)(Thread*, int, Object*, int, void**);
     vmHelper funcPtr = dvmFindCatchBlock;
     if(gDvm.executionMode == kExecutionModeNcgO1) {
         beforeCall("dvmFindCatchBlock");
diff --git a/vm/mterp/Mterp.h b/vm/mterp/Mterp.h
index 6762f67..567fdca 100644
--- a/vm/mterp/Mterp.h
+++ b/vm/mterp/Mterp.h
@@ -36,6 +36,7 @@ extern "C" bool dvmCheckAsmConstants(void);
  * Local entry and exit points.  The platform-specific implementation must
  * provide these two.
  */
+
 extern "C" void dvmMterpStdRun(Thread* self);
 extern "C" void dvmMterpStdBail(Thread* self);
 
diff --git a/vm/mterp/out/InterpAsm-x86.S b/vm/mterp/out/InterpAsm-x86.S
index c87f306..2081fcc 100644
--- a/vm/mterp/out/InterpAsm-x86.S
+++ b/vm/mterp/out/InterpAsm-x86.S
@@ -15627,7 +15627,7 @@ dvmMterpStdRun:
     .global dvmMterpStdBail
     .type   dvmMterpStdBail, %function
 /*
- * void dvmMterpStdBail(Thread* self, bool changeInterp)
+ * void dvmMterpStdBail(Thread* self, int changeInterp)
  *
  * Restore the stack pointer and PC from the save point established on entry.
  * This is essentially the same as a longjmp, but should be cheaper.  The
@@ -15638,7 +15638,7 @@ dvmMterpStdRun:
  *
  * On entry:
  *  esp+4 (arg0)  Thread* self
- *  esp+8 (arg1)  bool changeInterp
+ *  esp+8 (arg1)  int changeInterp
  */
 dvmMterpStdBail:
     movl    4(%esp),%ecx                 # grab self
@@ -15981,7 +15981,7 @@ common_selectTrace:
     movzwl      offThread_subMode(%ebx), %ecx
     and         $(kSubModeJitTraceBuild | kSubModeJitSV), %ecx
     jne         3f                     # already doing JIT work, continue
-    movl        %eax, offThread_jitState(%ebx)
+    movb        %al, offThread_jitState(%ebx)
     movl        rSELF, %eax
     movl       %eax, OUT_ARG0(%esp)
 
@@ -16006,7 +16006,7 @@ common_selectTrace2:
     mov         %ebx, EBX_SPILL(%ebp)
     movl        rSELF, %ebx
     movl        %ebx, OUT_ARG0(%esp)
-    movl        %eax, offThread_jitState(%ebx)
+    movb        %al, offThread_jitState(%ebx)
     movzwl      offThread_subMode(%ebx), %ecx
     mov         EBX_SPILL(%ebp), %ebx
     and         (kSubModeJitTraceBuild | kSubModeJitSV), %ecx
@@ -16223,7 +16223,7 @@ common_invokeMethodNoRange:
     movl        %eax, offThread_method(%ecx) # self->method<- methodToCall
     movl        %edx, offThread_methodClassDex(%ecx) # self->methodClassDex<- method->clazz->pDvmDex
     movl        offMethod_insns(%eax), rPC # rPC<- methodToCall->insns
-    movl        $1, offThread_debugIsMethodEntry(%ecx)
+    movb        $1, offThread_debugIsMethodEntry(%ecx)
     movl        LOCAL1_OFFSET(%ebp), rFP # rFP<- newFP
     movl        rFP, offThread_curFrame(%ecx) # curFrame<-newFP
     movl        offThread_curHandlerTable(%ecx),rIBASE
@@ -16569,7 +16569,7 @@ common_exceptionThrown:
     call       dvmAddTrackedAlloc      # don't let the exception be GCed
     UNSPILL_TMP1(%edx)
     movl       rSELF, %ecx
-    movl       offThread_subMode(%ecx), %eax    # get subMode flags
+    movzwl     offThread_subMode(%ecx), %eax    # get subMode flags
     movl       $0, offThread_exception(%ecx)
 
     # Special subMode?
@@ -16613,7 +16613,7 @@ common_exceptionThrown:
 
     /* fix earlier stack overflow if necessary; may trash rFP */
     movl       rSELF, %ecx
-    cmpl       $0, offThread_stackOverflowed(%ecx) # did we overflow?
+    cmpb       $0, offThread_stackOverflowed(%ecx) # did we overflow?
     je         1f                         # no, skip ahead
     movl       %eax, rFP                  # save relPc result in rFP
     movl       %ecx, OUT_ARG0(%esp)       # Arg 0 = self
@@ -16662,7 +16662,7 @@ common_exceptionThrown:
 .LnotCaughtLocally: # %edx = exception
     /* fix stack overflow if necessary */
     movl       rSELF, %ecx
-    movl       offThread_stackOverflowed(%ecx), %eax
+    movzbl     offThread_stackOverflowed(%ecx), %eax
     cmpl       $0, %eax                   # did we overflow earlier?
     je         1f
     movl       %ecx, OUT_ARG0(%esp)
diff --git a/vm/mterp/x86/entry.S b/vm/mterp/x86/entry.S
index f97d6a5..37e7dfb 100644
--- a/vm/mterp/x86/entry.S
+++ b/vm/mterp/x86/entry.S
@@ -64,7 +64,7 @@ dvmMterpStdRun:
     .global dvmMterpStdBail
     .type   dvmMterpStdBail, %function
 /*
- * void dvmMterpStdBail(Thread* self, bool changeInterp)
+ * void dvmMterpStdBail(Thread* self, int changeInterp)
  *
  * Restore the stack pointer and PC from the save point established on entry.
  * This is essentially the same as a longjmp, but should be cheaper.  The
@@ -75,7 +75,7 @@ dvmMterpStdRun:
  *
  * On entry:
  *  esp+4 (arg0)  Thread* self
- *  esp+8 (arg1)  bool changeInterp
+ *  esp+8 (arg1)  int changeInterp
  */
 dvmMterpStdBail:
     movl    4(%esp),%ecx                 # grab self
diff --git a/vm/mterp/x86/footer.S b/vm/mterp/x86/footer.S
index 054dc11..bc05e3b 100644
--- a/vm/mterp/x86/footer.S
+++ b/vm/mterp/x86/footer.S
@@ -304,7 +304,7 @@ common_selectTrace:
     movzwl      offThread_subMode(%ebx), %ecx
     and         $$(kSubModeJitTraceBuild | kSubModeJitSV), %ecx
     jne         3f                     # already doing JIT work, continue
-    movl        %eax, offThread_jitState(%ebx)
+    movb        %al, offThread_jitState(%ebx)
     movl        rSELF, %eax
     movl       %eax, OUT_ARG0(%esp)
 
@@ -329,7 +329,7 @@ common_selectTrace2:
     mov         %ebx, EBX_SPILL(%ebp)
     movl        rSELF, %ebx
     movl        %ebx, OUT_ARG0(%esp)
-    movl        %eax, offThread_jitState(%ebx)
+    movb        %al, offThread_jitState(%ebx)
     movzwl      offThread_subMode(%ebx), %ecx
     mov         EBX_SPILL(%ebp), %ebx
     and         (kSubModeJitTraceBuild | kSubModeJitSV), %ecx
@@ -546,7 +546,7 @@ common_invokeMethodNoRange:
     movl        %eax, offThread_method(%ecx) # self->method<- methodToCall
     movl        %edx, offThread_methodClassDex(%ecx) # self->methodClassDex<- method->clazz->pDvmDex
     movl        offMethod_insns(%eax), rPC # rPC<- methodToCall->insns
-    movl        $$1, offThread_debugIsMethodEntry(%ecx)
+    movb        $$1, offThread_debugIsMethodEntry(%ecx)
     movl        LOCAL1_OFFSET(%ebp), rFP # rFP<- newFP
     movl        rFP, offThread_curFrame(%ecx) # curFrame<-newFP
     movl        offThread_curHandlerTable(%ecx),rIBASE
@@ -892,7 +892,7 @@ common_exceptionThrown:
     call       dvmAddTrackedAlloc      # don't let the exception be GCed
     UNSPILL_TMP1(%edx)
     movl       rSELF, %ecx
-    movl       offThread_subMode(%ecx), %eax    # get subMode flags
+    movzwl     offThread_subMode(%ecx), %eax    # get subMode flags
     movl       $$0, offThread_exception(%ecx)
 
     # Special subMode?
@@ -936,7 +936,7 @@ common_exceptionThrown:
 
     /* fix earlier stack overflow if necessary; may trash rFP */
     movl       rSELF, %ecx
-    cmpl       $$0, offThread_stackOverflowed(%ecx) # did we overflow?
+    cmpb       $$0, offThread_stackOverflowed(%ecx) # did we overflow?
     je         1f                         # no, skip ahead
     movl       %eax, rFP                  # save relPc result in rFP
     movl       %ecx, OUT_ARG0(%esp)       # Arg 0 = self
@@ -985,7 +985,7 @@ common_exceptionThrown:
 .LnotCaughtLocally: # %edx = exception
     /* fix stack overflow if necessary */
     movl       rSELF, %ecx
-    movl       offThread_stackOverflowed(%ecx), %eax
+    movzbl     offThread_stackOverflowed(%ecx), %eax
     cmpl       $$0, %eax                   # did we overflow earlier?
     je         1f
     movl       %ecx, OUT_ARG0(%esp)
-- 
1.7.4.1

