From fcbd27ced51a776662fee7c7b0c8d9bae6850442 Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Mon, 7 Jan 2013 18:20:46 -0800
Subject: Dalvik: Singleton class support

BZ: 75820

Several classes in Dalvik need only a single global instance.
This template wrapper allows for any non-singleton class to be
used in a singleton manner. This means that calling this function
by specifying the class name as the template parameter like
singleton<ClassName>() will lead to the creation and fetch of a
single global instance. The class doesn't have to be specifically
implemented using the singleton pattern. However, it should be
noted that this implementation is semantically different than
a standard singleton implementation since multiple instances
can still be created and if the class copy constructor is public,
copies of the global instance can be made. Thus, as long as no copy
is made and as long as this wrapper is always used for fetching the
global instance, it will ensure that only a single instance exists.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Iab0fbbf9e27627fac25ecf0255aaea815d93bdaa
Orig-MCG-Change-Id: I6dbfe70f65ee81626718823dbb570004bf3b63b7
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/Singleton.h |   53 +++++++++++++++++++++++++++++++++++
 1 files changed, 53 insertions(+), 0 deletions(-)
 create mode 100644 vm/compiler/codegen/x86/Singleton.h

diff --git a/vm/compiler/codegen/x86/Singleton.h b/vm/compiler/codegen/x86/Singleton.h
new file mode 100644
index 0000000..59ce8db
--- /dev/null
+++ b/vm/compiler/codegen/x86/Singleton.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2010-2013 Intel Corporation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * @file Singleton.h
+ * @brief Implements the interface for singleton pattern.
+ */
+
+/**
+ * @details Calling this function allows any non-singleton class to be treated
+ * as a singleton. However, please note that making a copy of the instance
+ * is still allowed and your new copy is no longer the singleton instance.
+ * @return singleton instance
+ */
+template <class T>
+T& singleton() {
+    // Better not to use dynamic allocation so that we can make sure
+    // that it will be destroyed.
+    static T instance;
+    return instance;
+}
+
+/**
+ * @details Calling this function allows any non-singleton class to be treated
+ * as a singleton.
+ * @return pointer to singleton instance
+ * @warning This is not thread safe. It also does not call class destructor
+ * and leaks on program exit. Calls to this should not be mixed with calls to
+ * singleton<T>() because they will not retrieve the same instance.
+ */
+template <class T>
+T* singletonPtr() {
+    static T * instance = 0;
+
+    // Create a new instance if one doesn't already exist
+    if (instance == 0)
+        instance = new T();
+
+    return instance;
+}
-- 
1.7.4.1

