From ff959740ef3df25fb242ba67df6e7d59d9bbe882 Mon Sep 17 00:00:00 2001
From: Dong-Yuan Chen <dong-yuan.chen@intel.com>
Date: Sat, 17 Aug 2013 21:54:20 -0700
Subject: Dalvik: Fix possible null mir dereference

BZ: 127897

The REHABQ heuristic for VR operations can possibly dereference null mir.
This patch addresses that issue.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ic5c5f4d0e9bdb8006614a7aa95ddc8cd10fa1bcc
Orig-MCG-Change-Id: Ied42686ccf510b8b9d6d39155ee0e5990fbabc5e
Signed-off-by: Yixin Shou <yixin.shou@intel.com>
Reviewed-on: http://android.intel.com:8080/122833
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Popov, Ivan G <ivan.g.popov@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Reviewed-on: http://android.intel.com:8080/125988
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/lightcg/LowerHelper.cpp |   12 +++++++++---
 1 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/vm/compiler/codegen/x86/lightcg/LowerHelper.cpp b/vm/compiler/codegen/x86/lightcg/LowerHelper.cpp
index a24b1d0..f2abace 100644
--- a/vm/compiler/codegen/x86/lightcg/LowerHelper.cpp
+++ b/vm/compiler/codegen/x86/lightcg/LowerHelper.cpp
@@ -1935,8 +1935,13 @@ bool alu_imm_to_VR(OpndSize size, ALU_Opcode opc, int srcVR, int destVR, int imm
                            store/load REHABQ hazard for increment in memory */
                         const int incOptMirWindow = 2;
 
+                        // Initialize ssa info pointer to 0
+                        SSARepresentation *ssa = 0;
+
                         // Get SSA representation
-                        SSARepresentation *ssa = mir->ssaRep;
+                        if (mir != 0) {
+                            ssa = mir->ssaRep;
+                        }
 
                         // current add/sub mir should only have one def and we
                         // only care if this def is used
@@ -1944,18 +1949,19 @@ bool alu_imm_to_VR(OpndSize size, ALU_Opcode opc, int srcVR, int destVR, int imm
                            ssa->usedNext[0] != 0 && ssa->usedNext[0]->mir != 0) {
 
                             MIR * mirUse = ssa->usedNext[0]->mir;
-                            MIR * nextMIR = const_cast<MIR*>(mir);
+                            MIR * nextMIR = mir->next;
 
                             // check adjacent mirs window
                             for (int i = 0; i < incOptMirWindow; i ++) {
                                 if (nextMIR != 0) {
-                                    nextMIR = nextMIR->next;
 
                                     // if the define variable of mir is used in adjacent mir, return
                                     // false to avoid add/sub in memory
                                     if (mirUse == nextMIR) {
                                         return false;
                                     }
+
+                                    nextMIR = nextMIR->next;
                                 }
                             }
                         }
-- 
1.7.4.1

