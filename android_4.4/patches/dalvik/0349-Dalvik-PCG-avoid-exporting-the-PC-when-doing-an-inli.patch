From 61806b695e2d6f160a8d44f65d523e0914963aa2 Mon Sep 17 00:00:00 2001
From: David L Kreitzer <david.l.kreitzer@intel.com>
Date: Wed, 18 Sep 2013 15:31:24 -0700
Subject: Dalvik: PCG: avoid exporting the PC when doing an inline expansion that doesn't require it

BZ: 139583

Instead of unconditionally exporting the PC in the inline expansion routine,
only do it on paths that might reach a side exit for an exception.  Note that
the PCG utility routines that do null checks and raise exceptions already
export the PC, so it is only needed on the generic "default" path.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I8ba7ac84ad222f8fdad2c08b73dad5e70996398c
Orig-MCG-Change-Id: I311019a86469eb5c2be261de90413d162d753a1e
Signed-off-by: Kreitzer, David L <david.l.kreitzer@intel.com>
Reviewed-on: http://android.intel.com:8080/132987
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Popov, Ivan G <ivan.g.popov@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/pcg/LowerCall.cpp |    5 ++---
 1 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/vm/compiler/codegen/x86/pcg/LowerCall.cpp b/vm/compiler/codegen/x86/pcg/LowerCall.cpp
index 8a95547..15aaed7 100644
--- a/vm/compiler/codegen/x86/pcg/LowerCall.cpp
+++ b/vm/compiler/codegen/x86/pcg/LowerCall.cpp
@@ -560,8 +560,6 @@ void dvmCompilerPcgTranslateExecuteInline (CompilationUnitPCG *cUnit, MIR *mir)
 
     assert (ssaRep != 0);
 
-    dvmCompilerPcgExportPC (cUnit);
-
     // The purpose of returning vs breaking in this switch statement is that it
     // *truly* inlines the implementation of these bytcodes, while bytecodes
     // not in the switch statement simply call special functions in InlineNative.cpp
@@ -699,7 +697,7 @@ void dvmCompilerPcgTranslateExecuteInline (CompilationUnitPCG *cUnit, MIR *mir)
                     ssaRep->uses[0], "mov", 4);
 
                 // Bail if the String pointer is null
-                dvmCompilerPcgGenerateSimpleNullCheck (cUnit, stringObject);
+                dvmCompilerPcgGenerateNullCheck (cUnit, stringObject, mir);
 
                 // Get the matchChar and the startIndex
                 CGInst matchChar = dvmCompilerPcgGetVirtualReg (cUnit,
@@ -801,6 +799,7 @@ void dvmCompilerPcgTranslateExecuteInline (CompilationUnitPCG *cUnit, MIR *mir)
                 return;
             }
         default:
+            dvmCompilerPcgExportPC (cUnit);
             break;
     }
 
-- 
1.7.4.1

