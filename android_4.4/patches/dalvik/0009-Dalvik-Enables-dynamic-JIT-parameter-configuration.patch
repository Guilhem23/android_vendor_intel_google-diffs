From 74901f9e12a19e88b3d721c35a8a286095256ef4 Mon Sep 17 00:00:00 2001
From: Qiming Shi <qiming.shi@intel.com>
Date: Sat, 1 Jun 2013 14:01:45 +0800
Subject: Dalvik: Enables dynamic JIT parameter configuration

BZ: 47554

This patch allows the configuration of the JIT parameters to be done
via global properties or via the command line dalvikvm.

The following parameters can now be configured dynamically:
 - JIT threshold : trigger for trace selection
     default value is 255
 - JIT table size : size of JIT hash table (measured in entries)
     default value is 4096
 - JIT code cache size: bytes allocated for the code cache
     default value is 524288

The following global properties are supported:
 - dalvik.jit.threshold
 - dalvik.jit.code_cache_size
 - dalvik.jit.table_size
These properties either go in local.prop so the changes are effective at
boot, or can be changed anytime by issuing command like:
 $ adb shell setprop dalvik.jit.threshold 255

The following command line flags are now supported:
 -Xjitthreshold:decimalvalue
 -Xjittablesize:decimalvalue
 -Xjitcodecachesize:decimalvalue
Thus, to use these flags you must pass them to dalvikvm executable like:
 $ adb shell dalvikvm -Xjitthreshold:255

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I4dc7850ef62ca0fc3921fd5230528261cba1e44d
Orig-MCG-Change-Id: I32713d0fdea9503d6922fb9a0a7f1e0fbcf135e9
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/Init.cpp                                  |   42 ++++++++-----
 vm/compiler/codegen/x86/CodegenInterface.cpp |   85 +++++++++++++++++++++++---
 2 files changed, 103 insertions(+), 24 deletions(-)

diff --git a/vm/Init.cpp b/vm/Init.cpp
index c5a21ab..597361e 100644
--- a/vm/Init.cpp
+++ b/vm/Init.cpp
@@ -140,6 +140,8 @@ static void usage(const char* progName)
     dvmFprintf(stderr, "  -Xincludeselectedmethod\n");
     dvmFprintf(stderr, "  -Xjitthreshold:decimalvalue\n");
     dvmFprintf(stderr, "  -Xjitcodecachesize:decimalvalueofkbytes\n");
+    dvmFprintf(stderr, "  -Xjittablesize:decimalvalue\n");
+    dvmFprintf(stderr, "  -Xjitcodecachesize:decimalvalue\n");
     dvmFprintf(stderr, "  -Xjitblocking\n");
     dvmFprintf(stderr, "  -Xjitmethod:signature[,signature]* "
                        "(eg Ljava/lang/String\\;replace)\n");
@@ -1121,32 +1123,38 @@ static int processOptions(int argc, const char* const argv[],
         } else if (strncmp(argv[i], "-Xjitconfig:", 12) == 0) {
             processXjitconfig(argv[i] + strlen("-Xjitconfig:"));
         } else if (strncmp(argv[i], "-Xjitblocking", 13) == 0) {
-          gDvmJit.blockingMode = true;
+            gDvmJit.blockingMode = true;
         } else if (strncmp(argv[i], "-Xjitthreshold:", 15) == 0) {
-          gDvmJit.threshold = atoi(argv[i] + 15);
+            gDvmJit.threshold = atoi(argv[i] + 15);
+        } else if (strncmp(argv[i], "-Xjittablesize:", 15) == 0) {
+            gDvmJit.jitTableSize = atoi(argv[i] + 15);
         } else if (strncmp(argv[i], "-Xjitcodecachesize:", 19) == 0) {
-          gDvmJit.codeCacheSize = atoi(argv[i] + 19) * 1024;
-          if (gDvmJit.codeCacheSize == 0) {
-            gDvm.executionMode = kExecutionModeInterpFast;
-          }
+            gDvmJit.codeCacheSize = atoi(argv[i] + 19);
+        } else if (strncmp(argv[i], "-Xjitcodecachesize:", 19) == 0) {
+            gDvmJit.codeCacheSize = atoi(argv[i] + 19) * 1024;
+#ifndef ARCH_IA32
+            if (gDvmJit.codeCacheSize == 0) {
+                gDvm.executionMode = kExecutionModeInterpFast;
+            }
+#endif
         } else if (strncmp(argv[i], "-Xincludeselectedop", 19) == 0) {
-          gDvmJit.includeSelectedOp = true;
+            gDvmJit.includeSelectedOp = true;
         } else if (strncmp(argv[i], "-Xincludeselectedmethod", 23) == 0) {
-          gDvmJit.includeSelectedMethod = true;
+            gDvmJit.includeSelectedMethod = true;
         } else if (strncmp(argv[i], "-Xjitcheckcg", 12) == 0) {
-          gDvmJit.checkCallGraph = true;
-          /* Need to enable blocking mode due to stack crawling */
-          gDvmJit.blockingMode = true;
+            gDvmJit.checkCallGraph = true;
+            /* Need to enable blocking mode due to stack crawling */
+            gDvmJit.blockingMode = true;
         } else if (strncmp(argv[i], "-Xjitdumpbin", 12) == 0) {
-          gDvmJit.printBinary = true;
+            gDvmJit.printBinary = true;
         } else if (strncmp(argv[i], "-Xjitverbose", 12) == 0) {
-          gDvmJit.printMe = true;
+            gDvmJit.printMe = true;
 #ifdef SEP_DALVIK
         } else if (strncmp(argv[i], "-Xjitsepdalvik", 14) == 0) {
-          gDvmJit.sepDalvik = true;
+            gDvmJit.sepDalvik = true;
 #endif
         } else if (strncmp(argv[i], "-Xjitprofile", 12) == 0) {
-          gDvmJit.profileMode = kTraceProfilingContinuous;
+            gDvmJit.profileMode = kTraceProfilingContinuous;
         } else if (strncmp(argv[i], "-Xjitdisableopt", 15) == 0) {
           /* Disable selected optimizations */
           if (argv[i][15] == ':') {
@@ -1291,6 +1299,10 @@ static void setCommandLineDefaults()
     gDvmJit.classTable = NULL;
     gDvmJit.codeCacheSize = DEFAULT_CODE_CACHE_SIZE;
 
+    gDvmJit.threshold = 0;
+    gDvmJit.jitTableSize = 0;
+    gDvmJit.codeCacheSize = 0;
+
     gDvm.constInit = false;
     gDvm.commonInit = false;
 #else
diff --git a/vm/compiler/codegen/x86/CodegenInterface.cpp b/vm/compiler/codegen/x86/CodegenInterface.cpp
index 451c5e5..9ea18c7 100644
--- a/vm/compiler/codegen/x86/CodegenInterface.cpp
+++ b/vm/compiler/codegen/x86/CodegenInterface.cpp
@@ -24,6 +24,10 @@
 #include "NcgAot.h"
 #include "compiler/codegen/CompilerCodegen.h"
 
+#ifdef HAVE_ANDROID_OS
+#include <cutils/properties.h>
+#endif
+
 /* Init values when a predicted chain is initially assembled */
 /* E7FE is branch to self */
 #define PREDICTED_CHAIN_BX_PAIR_INIT     0xe7fe
@@ -60,19 +64,81 @@ void *dvmCompilerGetInterpretTemplate()
 #define UPDATE_CODE_CACHE_PATCHES()
 #endif
 
+//! default JIT table size used by x86 JIT
+#define DEFAULT_X86_ATOM_DALVIK_JIT_TABLE_SIZE 1<<12
+//! default JIT threshold used by x86 JIT
+#define DEFAULT_X86_ATOM_DALVIK_JIT_THRESHOLD 255
+//! default JIT code cache size used by x86 JIT
+#define DEFAULT_X86_ATOM_DALVIK_JIT_CODE_CACHE_SIZE 512*1024
+
+//! Initializes target-specific configuration
+
+//! Configures the jit table size, jit threshold, and jit code cache size
+//! Initializes status of all threads and the table of supported bytecodes
+//! @return true when initialization is successful (NOTE: current
+//! implementation always returns true)
 bool dvmCompilerArchInit() {
-    /* Target-specific configuration */
-    gDvmJit.jitTableSize = 1 << 12;
+#ifdef HAVE_ANDROID_OS
+    char propertyBuffer[PROPERTY_VALUE_MAX];
+#endif
+    unsigned long propertyValue;
+
+    // Initialize JIT table size
+    if(gDvmJit.jitTableSize == 0 || (gDvmJit.jitTableSize & (gDvmJit.jitTableSize - 1))) {
+        // JIT table size has not been initialized yet or is not a power of two
+#ifdef HAVE_ANDROID_OS
+        memset(propertyBuffer, 0, PROPERTY_VALUE_MAX); // zero out buffer so we don't use junk
+        property_get("dalvik.jit.table_size", propertyBuffer, NULL);
+        propertyValue = strtoul(propertyBuffer, NULL, 10 /*base*/);
+#else
+        propertyValue = 0ul;
+#endif
+        if (errno == ERANGE || propertyValue == 0ul || (propertyValue & (propertyValue - 1ul)))
+            /* out of range, conversion failed, trying to use invalid value of 0, or using non-power of two */
+            gDvmJit.jitTableSize = DEFAULT_X86_ATOM_DALVIK_JIT_TABLE_SIZE;
+        else // property is valid, but we still need to cast from unsigned long to unsigned int
+            gDvmJit.jitTableSize = static_cast<unsigned int>(propertyValue);
+    }
+
+    // Initialize JIT table mask
     gDvmJit.jitTableMask = gDvmJit.jitTableSize - 1;
-    if (gDvmJit.threshold == 0) {
-        gDvmJit.threshold = 255;
+    gDvmJit.optLevel = kJitOptLevelO1;
+
+    // Initialize JIT threshold
+    if(gDvmJit.threshold == 0) { // JIT threshold has not been initialized yet
+#ifdef HAVE_ANDROID_OS
+        memset(propertyBuffer, 0, PROPERTY_VALUE_MAX); // zero out buffer so we don't use junk
+        property_get("dalvik.jit.threshold", propertyBuffer, NULL);
+        propertyValue = strtoul(propertyBuffer, NULL, 10 /*base*/);
+#else
+        propertyValue = 0ul;
+#endif
+        if (errno == ERANGE || propertyValue == 0ul)
+            /* out of range, conversion failed, or trying to use invalid value of 0 */
+            gDvmJit.threshold = DEFAULT_X86_ATOM_DALVIK_JIT_THRESHOLD;
+        else // property is valid, but we still need to cast from unsigned long to unsigned short
+            gDvmJit.threshold = static_cast<unsigned short>(propertyValue);
     }
-    if (gDvmJit.codeCacheSize == DEFAULT_CODE_CACHE_SIZE) {
-      gDvmJit.codeCacheSize = 512 * 1024;
-    } else if ((gDvmJit.codeCacheSize == 0) && (gDvm.executionMode == kExecutionModeJit)) {
-      gDvm.executionMode = kExecutionModeInterpFast;
+
+    // Initialize JIT code cache size
+    if(gDvmJit.codeCacheSize == 0) { // JIT code cache size has not been initialized yet
+#ifdef HAVE_ANDROID_OS
+        memset(propertyBuffer, 0, PROPERTY_VALUE_MAX); // zero out buffer so we don't use junk
+        property_get("dalvik.jit.code_cache_size", propertyBuffer, NULL);
+        propertyValue = strtoul(propertyBuffer, NULL, 10 /*base*/);
+#else
+        propertyValue = 0ul;
+#endif
+        if (errno == ERANGE || propertyValue == 0ul)
+            /* out of range, conversion failed, or trying to use invalid value of 0 */
+            gDvmJit.codeCacheSize = DEFAULT_X86_ATOM_DALVIK_JIT_CODE_CACHE_SIZE;
+        else // property is valid, but we still need to cast from unsigned long to unsigned int
+            gDvmJit.codeCacheSize = static_cast<unsigned int>(propertyValue);
     }
-    gDvmJit.optLevel = kJitOptLevelO1;
+
+    LOGV("JIT threshold set to %hu",gDvmJit.threshold);
+    LOGV("JIT table size set to %u",gDvmJit.jitTableSize);
+    LOGV("JIT code cache size set to %u",gDvmJit.codeCacheSize);
 
     //Disable Method-JIT
     gDvmJit.disableOpt |= (1 << kMethodJit);
@@ -251,6 +317,7 @@ void dvmCompilerSortAndPrintTraceProfiles() //in Assemble.c
         if (sortedEntries[i].dPC != 0) {
             numTraces++;
         }
+#endif
     }
     if (numTraces == 0)
         numTraces = 1;
-- 
1.7.4.1

