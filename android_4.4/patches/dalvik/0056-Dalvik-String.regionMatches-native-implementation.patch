From a2cd223e90940c81758c83751ce91a6646e44ad9 Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Wed, 23 Jan 2013 13:56:05 -0800
Subject: Dalvik: String.regionMatches native implementation

BZ: 82426

Patch provides a native implementation of String.regionMatches.

Category: device-enablement
Domain: AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I448596d053eb80f24d95a4418a2e0e5af01e605d
Orig-MCG-Change-Id: Ia99401e06f94480069a4ce102ff298c31fbc4615
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 tests/020-string/expected.txt               |   16 ++
 tests/020-string/info.txt                   |    7 +-
 tests/020-string/src/Main.java              |    1 +
 tests/020-string/src/RegionMatchesTest.java |  203 +++++++++++++++++++++++++++
 vm/native/java_lang_String.cpp              |   88 ++++++++++++
 5 files changed, 309 insertions(+), 6 deletions(-)
 create mode 100644 tests/020-string/src/RegionMatchesTest.java

diff --git a/tests/020-string/expected.txt b/tests/020-string/expected.txt
index 081fea3..5b9da66 100644
--- a/tests/020-string/expected.txt
+++ b/tests/020-string/expected.txt
@@ -5,3 +5,19 @@ Compare unicode: -65302
 Got expected exception
 subStr is 'uick brown fox jumps over the lazy '
 Indexes are: 0:-1:0:43:33:-1:18:13:13:-1:18:18:-1:13:-1:-1:-1
+Starting regionMatches test
+true
+true
+false
+false
+false
+true
+false
+false
+false
+false
+false
+true
+java.lang.NullPointerException: string == null
+java.lang.NullPointerException
+java.lang.ClassCastException: java.lang.Object cannot be cast to java.lang.String
diff --git a/tests/020-string/info.txt b/tests/020-string/info.txt
index 08127da..239ea1f 100644
--- a/tests/020-string/info.txt
+++ b/tests/020-string/info.txt
@@ -1,6 +1 @@
-This is a miscellaneous test that was imported into the new-at-the-time
-runtime test framework. The test is intended to exercise basic features,
-and as such cannot be build on top of junit, since failure of such basic
-features might disrupt junit.
-
-TODO: Real description goes here.
+This test covers String.compareTo, String.equals, and String.regionMatches.
\ No newline at end of file
diff --git a/tests/020-string/src/Main.java b/tests/020-string/src/Main.java
index bb8ce1f..6158d2c 100644
--- a/tests/020-string/src/Main.java
+++ b/tests/020-string/src/Main.java
@@ -21,6 +21,7 @@ public class Main {
     public static void main(String args[]) {
         basicTest();
         indexTest();
+        RegionMatchesTest.runTest();
     }
 
     public static void basicTest() {
diff --git a/tests/020-string/src/RegionMatchesTest.java b/tests/020-string/src/RegionMatchesTest.java
new file mode 100644
index 0000000..39ea904
--- /dev/null
+++ b/tests/020-string/src/RegionMatchesTest.java
@@ -0,0 +1,203 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Covers testing for String.regionMatches.
+ */
+public class RegionMatchesTest {
+    /*
+     * Flag whether to dump result of regionMatches
+     */
+    static boolean printResult = false;
+
+    /*
+     * Number of iterations for testing loop
+     */
+    static int ITERATIONS = 100000;
+
+    /*
+     * Strings have the same value
+     */
+    static void testStringSame() {
+        // Strings are exactly the same
+        String s1 = new String("The stock symbol for Intel is INTC");
+        String s2 = new String("The stock symbol for Intel is INTC");
+        boolean result1 = s1.regionMatches(0, s2, 0, 34);
+        boolean result2 = s2.regionMatches(10, s1, 10, 10);
+        boolean result3 = s1.regionMatches(5, s2, 11, 10);
+
+        if(printResult) {
+            System.out.println(result1);
+            System.out.println(result2);
+            System.out.println(result3);
+        }
+    }
+
+    /*
+     * Strings have the same length.
+     */
+    static void testStringSameLength() {
+        // Strings are same length
+        String s1 = new String("The stock symbol for Intel is INTC ");
+        String s2 = new String("The stock symbol for Google is GOOG");
+        boolean result = s2.regionMatches(0, s1, 0, 34);
+
+        if(printResult) {
+            System.out.println(result);
+        }
+    }
+
+    /*
+     * Strings have different lengths.
+     */
+    static void testStringDifferentLength() {
+        // Strings are different length
+        String s1 = new String("The stock symbol for Intel is INTC");
+        String s2 = new String("The stock symbol for Google is GOOG");
+        boolean result = s2.regionMatches(0, s1, 0, 34);
+
+        if(printResult) {
+            System.out.println(result);
+        }
+    }
+
+    /*
+     * Only other string is null.
+     */
+    static void testNullStringOther() {
+        String s1 = new String("INTC");
+        String s2 = null;
+        boolean result = s1.regionMatches(0, s2, 0, 4);
+    }
+
+    /*
+     * This string is null.
+     */
+    static void testNullStringThis() {
+        String s2 = new String("INTC");
+        String s1 = null;
+        boolean result2 = s1.regionMatches(0, s2, 0, 4);
+    }
+
+    /*
+     * A zero length region is tested.
+     */
+    static void testZeroLength() {
+        String s1 = new String("INTC");
+        String s2 = new String("INTC");
+        boolean result = s1.regionMatches(0, s2, 1, 0);
+
+        if(printResult) {
+            System.out.println(result);
+        }
+    }
+
+    /*
+     * The strings are the same reference.
+     */
+    static void testStringSameReference() {
+        // Strings are same reference
+        String s1 = new String("INTC");
+        String s2 = s1;
+
+        boolean result1 = s1.regionMatches(0, s2, 0, 4);
+        boolean result2 = s1.regionMatches(0, s2, 1, 3);
+
+        if(printResult) {
+            System.out.println(result1);
+            System.out.println(result2);
+        }
+    }
+
+    /*
+     * regionMatches parameters are bad and should return false.
+     */
+    static void testStringBadParameters() {
+        String s1 = new String("INTC");
+        String s2 = new String("INTC");
+        // bad toffset
+        boolean result1 = s1.regionMatches(-2, s2, 0, 3);
+        // bad ooffset
+        boolean result2 = s1.regionMatches(0, s2, -2, 3);
+        // bad toffset + len
+        boolean result3 = s1.regionMatches(2, s2, 0, 3);
+        // bad ooffset + len
+        boolean result4 = s1.regionMatches(0, s2, 3, 3);
+
+        if(printResult) {
+            System.out.println(result1);
+            System.out.println(result2);
+            System.out.println(result3);
+            System.out.println(result4);
+        }
+    }
+
+    /*
+     * One of the "strings" is actually an Object.
+     */
+    static void testNoString() {
+        String s1 = new String("INTC");
+        Object s2 = new Object();
+        boolean result = s1.regionMatches(3, (String)s2, 4, 10);
+
+        if(printResult) {
+            System.out.println(result);
+        }
+    }
+
+    /*
+     * Start the test harness for regionMatches
+     */
+    static public void runTest() {
+        System.out.println("Starting regionMatches test");
+
+        boolean tmpResult;
+
+        // Trying to make regionMatches hot by using it many times.
+        for(int i = 0; i < ITERATIONS; i++) {
+            testStringSame();
+            testStringSameLength();
+            testStringDifferentLength();
+            testStringSameReference();
+            testStringBadParameters();
+            testZeroLength();
+        }
+
+        // Now print the actual results of the region matching
+        printResult = true;
+        testStringSame();
+        testStringSameLength();
+        testStringDifferentLength();
+        testStringSameReference();
+        testStringBadParameters();
+        testZeroLength();
+        try {
+            testNullStringOther();
+        } catch (Exception e) {
+            System.out.println(e.toString());
+        }
+        try {
+            testNullStringThis();
+        } catch (Exception e) {
+            System.out.println(e.toString());
+        }
+        try {
+            testNoString();
+        } catch (Exception e) {
+            System.out.println(e.toString());
+        }
+    }
+}
diff --git a/vm/native/java_lang_String.cpp b/vm/native/java_lang_String.cpp
index 38f9e31..ed690b4 100644
--- a/vm/native/java_lang_String.cpp
+++ b/vm/native/java_lang_String.cpp
@@ -57,6 +57,93 @@ static void String_length(const u4* args, JValue* pResult)
     MAKE_INTRINSIC_TRAMPOLINE(javaLangString_length);
 }
 
+/**
+ * @brief Native implementation for String\.regionMatches
+ * @details public boolean regionMatches(int toffset, String other,
+ * int ooffset, int len)
+ * @param args arguments to regionMatches method \n
+ * args[0]: this - self String \n
+ * args[1]: thisStart - starting offset in this string \n
+ * args[2]: string - other String \n
+ * args[3]: start - starting offset in the other string \n
+ * args[4]: length - number of characters to compare
+ * @param pResult - result of the region comparison
+*/
+static void String_regionMatches(const u4* args, JValue* pResult)
+{
+    int thisCount, thisOffset, otherCount, otherOffset;
+    ArrayObject * thisArray;
+    ArrayObject * otherArray;
+    // Use u2 for the arrays so we can compare on Java 16-bit char at a time
+    const u2 * thisChars;
+    const u2 * otherChars;
+
+    // Initialize the arguments passed to the regionMatches method
+    Object * thisString = reinterpret_cast<Object *>(args[0]);
+    int thisStart = static_cast<int>(args[1]);
+    Object * otherString = reinterpret_cast<Object *>(args[2]);
+    int otherStart = static_cast<int>(args[3]);
+    int length = static_cast<int>(args[4]);
+
+    // Check if this and the other string are null
+    if (thisString == NULL || otherString == NULL) {
+        dvmThrowNullPointerException(NULL);
+        RETURN_VOID();
+    }
+
+    // Initialize some of the locals with the fields from the String object
+    thisCount = dvmGetFieldInt(thisString, STRING_FIELDOFF_COUNT);
+    otherCount = dvmGetFieldInt(otherString, STRING_FIELDOFF_COUNT);
+
+    // Check that bounds are correct
+    if ((otherStart < 0) || (thisStart < 0) || (length > thisCount - thisStart)
+            || (length > otherCount - otherStart)) {
+        RETURN_BOOLEAN(false);
+    }
+
+    // If length is 0 or less, there is nothing to compare so region matches
+    if (length <= 0) {
+        RETURN_BOOLEAN(true);
+    }
+
+    // Finish initializing the locals with the fields from the String object
+    thisOffset = dvmGetFieldInt(thisString, STRING_FIELDOFF_OFFSET);
+    otherOffset = dvmGetFieldInt(otherString, STRING_FIELDOFF_OFFSET);
+    thisArray = reinterpret_cast<ArrayObject *>(dvmGetFieldObject(thisString,
+            STRING_FIELDOFF_VALUE));
+    otherArray = reinterpret_cast<ArrayObject *>(dvmGetFieldObject(otherString,
+            STRING_FIELDOFF_VALUE));
+
+    // Point the two arrays to the proper offset to start comparing from
+    thisChars = ((const u2*) (void*) thisArray->contents) + thisOffset + thisStart;
+    otherChars = ((const u2*) (void*) otherArray->contents) + otherOffset + otherStart;
+
+
+
+    // Now compare the characters
+#if defined(ARCH_IA32)
+    // Each Java char is 2 bytes
+    int numBytes = length * 2;
+
+    // For x86 we can use the SSE optimized memcmp
+    bool result = (memcmp(thisChars, otherChars, numBytes) == 0);
+#elif defined(HAVE__MEMCMP16)
+    bool result = (__memcmp16(thisChars, otherChars, length) == 0);
+#else
+    // Eagerly set regionMatches return value to true unless otherwise proven
+    bool result = true;
+    for (int i = length - 1; i >= 0; --i) {
+        if (thisChars[i] != otherChars[i]) {
+            result = false;
+            break;
+        }
+    }
+#endif
+
+    // Return result of the comparison
+    RETURN_BOOLEAN(result);
+}
+
 const DalvikNativeMethod dvm_java_lang_String[] = {
     { "charAt",      "(I)C",                  String_charAt },
     { "compareTo",   "(Ljava/lang/String;)I", String_compareTo },
@@ -65,5 +152,6 @@ const DalvikNativeMethod dvm_java_lang_String[] = {
     { "intern",      "()Ljava/lang/String;",  String_intern },
     { "isEmpty",     "()Z",                   String_isEmpty },
     { "length",      "()I",                   String_length },
+    { "regionMatches", "(ILjava/lang/String;II)Z", String_regionMatches },
     { NULL, NULL, NULL },
 };
-- 
1.7.4.1

