From 13c86dd95625ca4438f280cd541dd5bba3c1217f Mon Sep 17 00:00:00 2001
From: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Date: Tue, 27 Aug 2013 16:29:51 +0700
Subject: Dalvik: The scheduler and encoder should use the same mnemonics for FP compare

BZ: 131742

There was a hack in encoder that substitued FUCOM/FUCOMP mnemonics,
which were passed by scheduler, with FUCOMI/FUCOMIP mnemonics. This
caused a problem of wrongly-rearranged FP compare instructions, due
to unanalyzed Ctrl dependencies for them. The thing is FUCOM/FUCOMP
don't change the EFLAGS register, but FUCOMI/FUCOMIP do. This patch
synchronizes scheduler and encoder in order to use the same mnemonics
for FP compare - FUCOMI/FUCOMIP, which allows to do the Ctrl depen-
dency analysis correctly.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I024639f9de138c26d62b3e2ebd11ddb313f3d3e1
Orig-MCG-Change-Id: I83a851269951dcb554126093f19cb1aa7a029a7c
Signed-off-by: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Reviewed-on: http://android.intel.com:8080/127916
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Provodin, Vitaly A <vitaly.a.provodin@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Reviewed-on: http://android.intel.com:8080/130505
Reviewed-by: Popov, Ivan G <ivan.g.popov@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/lightcg/LowerHelper.cpp    |    6 +++---
 vm/compiler/codegen/x86/lightcg/Scheduler.cpp      |   19 ++++++++++---------
 .../codegen/x86/lightcg/libenc/enc_wrapper.cpp     |    1 -
 3 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/vm/compiler/codegen/x86/lightcg/LowerHelper.cpp b/vm/compiler/codegen/x86/lightcg/LowerHelper.cpp
index b883320..aada534 100644
--- a/vm/compiler/codegen/x86/lightcg/LowerHelper.cpp
+++ b/vm/compiler/codegen/x86/lightcg/LowerHelper.cpp
@@ -393,8 +393,8 @@ LowOpRegReg* lower_reg_to_reg(Mnemonic m, AtomOpCode m2, OpndSize size, int regS
     }
 
     if (!gDvmJit.scheduling) {
-        if (m == Mnemonic_FUCOMP || m == Mnemonic_FUCOM) {
-            stream = encoder_compare_fp_stack(m == Mnemonic_FUCOMP, regSrc - regDest,
+        if (m == Mnemonic_FUCOMIP || m == Mnemonic_FUCOMI) {
+            stream = encoder_compare_fp_stack(m == Mnemonic_FUCOMIP, regSrc - regDest,
                     size == OpndSize_64, stream);
         } else {
             stream = encoder_reg_reg_diff_sizes(m, srcSize, regSrc, isPhysical, destSize,
@@ -1862,7 +1862,7 @@ void compare_sd_reg_with_reg(LowOp* op, int reg1, bool isPhysical1,
 
 //!
 void compare_fp_stack(bool pop, int reg, bool isDouble) { //compare ST(0) with ST(reg)
-    Mnemonic m = pop ? Mnemonic_FUCOMP : Mnemonic_FUCOM;
+    Mnemonic m = pop ? Mnemonic_FUCOMIP : Mnemonic_FUCOMI;
     lower_reg_to_reg(m, ATOM_NORMAL, isDouble ? OpndSize_64 : OpndSize_32,
                   PhysicalReg_ST0+reg, true /*isPhysical*/, PhysicalReg_ST0, true /*isPhysical2*/, LowOpndRegType_fs);
 }
diff --git a/vm/compiler/codegen/x86/lightcg/Scheduler.cpp b/vm/compiler/codegen/x86/lightcg/Scheduler.cpp
index 307a307..bf2e008 100644
--- a/vm/compiler/codegen/x86/lightcg/Scheduler.cpp
+++ b/vm/compiler/codegen/x86/lightcg/Scheduler.cpp
@@ -220,9 +220,9 @@ MachineModelEntry atomMachineModel[Mnemonic_Count*6] = {
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{PORT0,65},{INVP,INVN}, //FDIVP
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{PORT0,65},{INVP,INVN}, //FDIV
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{PORT1,1},{INVP,INVN},{INVP,INVN}, //FUCOM
-    {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //FUCOMI
+    {INVP,INVN},{INVP,INVN},{INVP,INVN},{PORT1,1},{INVP,INVN},{INVP,INVN}, //FUCOMI
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{PORT1,1},{INVP,INVN},{INVP,INVN}, //FUCOMP
-    {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //FUCOMIP
+    {INVP,INVN},{INVP,INVN},{INVP,INVN},{PORT1,1},{INVP,INVN},{INVP,INVN}, //FUCOMIP
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //FUCOMPP
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //FRNDINT
     {INVP,INVN},{INVP,INVN},{BOTH_PORTS,5},{INVP,INVN},{INVP,INVN},{BOTH_PORTS,5}, //FNSTCW
@@ -1135,11 +1135,11 @@ void Scheduler::updateUseDefInformation_imm_to_mem(LowOpImmMem * op) {
 //! register to register.
 //! \param op must be a MOV variant, a comparison (CMP, TEST, COMISS, COMISD),
 //! an ALU instruction including SSE variants SD and SS, SSE conversion,
-//! or must have mnemonic FUCOM, FUCOMP, CMOVcc, or CDQ.
+//! or must have mnemonic FUCOMI, FUCOMIP, CMOVcc, or CDQ.
 void Scheduler::updateUseDefInformation_reg_to_reg(LowOpRegReg * op) {
     assert(isMoveMnemonic(op->opCode) || isCompareMnemonic(op->opCode)
             || isConvertMnemonic(op->opCode) ||op->opCode2 == ATOM_NORMAL_ALU
-            || op->opCode == Mnemonic_FUCOM || op->opCode == Mnemonic_FUCOMP
+            || op->opCode == Mnemonic_FUCOMI || op->opCode == Mnemonic_FUCOMIP
             || op->opCode == Mnemonic_CDQ ||
             (op->opCode >= Mnemonic_CMOVcc && op->opCode < Mnemonic_CMP));
     bool isMove = isMoveMnemonic(op->opCode);
@@ -1153,8 +1153,9 @@ void Scheduler::updateUseDefInformation_reg_to_reg(LowOpRegReg * op) {
             || usesAndDefinesFlags(op->opCode))
         updateDependencyGraph(UseDefType_Ctrl, REG_NOT_USED, LowOpndDefUse_Use,
                 Latency_None, op);
-    else if (!isMove && !isConvert && op->opCode != Mnemonic_FUCOM
-            && op->opCode != Mnemonic_FUCOMP && op->opCode != Mnemonic_CDQ)
+    else if (!isMove && !isConvert && op->opCode != Mnemonic_CDQ)
+        // Note that FUCOMI and FUCOMIP update EFLAGS register (ZF, CF, PF),
+        // so we have to update Ctrl dependency for them.
         updateDependencyGraph(UseDefType_Ctrl, REG_NOT_USED, LowOpndDefUse_Def,
                 Latency_None, op);
 
@@ -1189,7 +1190,7 @@ void Scheduler::updateUseDefInformation_reg_to_reg(LowOpRegReg * op) {
     updateDependencyGraph(UseDefType_Reg, op->regDest.regNum,
             op->opndDest.defuse, Latency_None, op);
 
-    if (op->opCode == Mnemonic_FUCOM || op->opCode == Mnemonic_FUCOMP)
+    if (op->opCode == Mnemonic_FUCOMI || op->opCode == Mnemonic_FUCOMIP)
         handleFloatDependencyUpdate(op);
 }
 
@@ -1521,8 +1522,8 @@ void Scheduler::generateAssembly(LowOp * op) {
                 ((LowOpImmMem*) op)->memDest.m_base.isPhysical, stream);
     } else if (op->opndDest.type == LowOpndType_Reg
             && op->opndSrc.type == LowOpndType_Reg) {
-        if (op->opCode == Mnemonic_FUCOMP || op->opCode == Mnemonic_FUCOM) {
-            stream = encoder_compare_fp_stack(op->opCode == Mnemonic_FUCOMP,
+        if (op->opCode == Mnemonic_FUCOMIP || op->opCode == Mnemonic_FUCOMI) {
+            stream = encoder_compare_fp_stack(op->opCode == Mnemonic_FUCOMIP,
                     ((LowOpRegReg*) op)->regSrc.regNum
                             - ((LowOpRegReg*) op)->regDest.regNum,
                     op->opndDest.size == OpndSize_64, stream);
diff --git a/vm/compiler/codegen/x86/lightcg/libenc/enc_wrapper.cpp b/vm/compiler/codegen/x86/lightcg/libenc/enc_wrapper.cpp
index bc20fc3..2f0c303 100644
--- a/vm/compiler/codegen/x86/lightcg/libenc/enc_wrapper.cpp
+++ b/vm/compiler/codegen/x86/lightcg/libenc/enc_wrapper.cpp
@@ -604,7 +604,6 @@ extern "C" ENCODER_DECLARE_EXPORT char * encoder_return(char * stream) {
     return stream;
 }
 extern "C" ENCODER_DECLARE_EXPORT char * encoder_compare_fp_stack(bool pop, int reg, bool isDouble, char * stream) {
-    //Mnemonic m = pop ? Mnemonic_FUCOMP : Mnemonic_FUCOM;
     Mnemonic m = pop ? Mnemonic_FUCOMIP : Mnemonic_FUCOMI;
     //a single operand or 2 operands?
     //FST ST(i) has a single operand in encoder.inl?
-- 
1.7.4.1

