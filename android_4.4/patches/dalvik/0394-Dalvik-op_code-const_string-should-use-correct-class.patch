From 15c5c810645d8a76c61512ef207f03c85ba30d3d Mon Sep 17 00:00:00 2001
From: vladimir.a.ivanov <vladimir.a.ivanov@intel.com>
Date: Fri, 1 Nov 2013 12:28:26 +0700
Subject: Dalvik: op_code const_string should use correct class in case of inline.

BZ: 149137

The op_code const_string should use correct class in case of inline instead of
current one.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ieb26d5d888337c5cc26a2f419e8a0907ebe50712
Orig-MCG-Change-Id: I2d47334932942916ca414a5f71be8eb2132b0ea9
Signed-off-by: vladimir.a.ivanov <vladimir.a.ivanov@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/lightcg/LowerConst.cpp |   34 ++++++++++++-----------
 vm/compiler/codegen/x86/pcg/LowerALU.cpp       |    3 +-
 2 files changed, 20 insertions(+), 17 deletions(-)

diff --git a/vm/compiler/codegen/x86/lightcg/LowerConst.cpp b/vm/compiler/codegen/x86/lightcg/LowerConst.cpp
index 0fe1860..657cdad 100644
--- a/vm/compiler/codegen/x86/lightcg/LowerConst.cpp
+++ b/vm/compiler/codegen/x86/lightcg/LowerConst.cpp
@@ -37,26 +37,32 @@
 #define P_GPR_1 PhysicalReg_EBX
 #define P_GPR_2 PhysicalReg_ECX
 
-//! LOWER bytecode CONST_STRING without usage of helper function
-
-//! It calls const_string_resolve (%ebx is live across the call)
 //! Since the register allocator does not handle control flow within the lowered native sequence,
 //!   we define an interface between the lowering module and register allocator:
 //!     rememberState, gotoState, transferToState
 //!   to make sure at the control flow merge point the state of registers is the same
-int const_string_common_nohelper(u4 tmp, int vA) {
+
+/**
+ * @brief LOWER bytecode CONST_STRING without usage of helper function
+ * @param mir bytecode representation
+ * @return 0
+ * @details For inlined bytecode the class with currentMethod will not handle correct
+ * string. It should be accessed through the field meta.caleeMethod.
+ */
+static int const_string_common_nohelper(const MIR * mir) {
+    const Method *method = (mir->OptimizationFlags & MIR_CALLEE) ?
+                mir->meta.calleeMethod : currentMethod;
     /* for trace-based JIT, the string is already resolved since this code has been executed */
-    void *strPtr = (void*)
-              (currentMethod->clazz->pDvmDex->pResStrings[tmp]);
-    assert(strPtr != NULL);
-    set_VR_to_imm(vA, OpndSize_32, (int) strPtr );
+    void *strPtr = (void*)(method->clazz->pDvmDex->pResStrings[mir->dalvikInsn.vB]);
+    assert(strPtr != 0);
+    set_VR_to_imm(mir->dalvikInsn.vA, OpndSize_32, (int) strPtr );
     return 0;
 }
 //! dispatcher to select either const_string_common_helper or const_string_common_nohelper
 
 //!
-int const_string_common(u4 tmp, int vA) {
-    return const_string_common_nohelper(tmp, vA);
+static int const_string_common(const MIR * mir) {
+    return const_string_common_nohelper(mir);
 }
 #undef P_GPR_1
 #undef P_GPR_2
@@ -176,9 +182,7 @@ int op_const_wide_high16(const MIR * mir) {
  */
 int op_const_string(const MIR * mir) {
     assert(mir->dalvikInsn.opcode == OP_CONST_STRING);
-    int vA = mir->dalvikInsn.vA;
-    u4 tmp = mir->dalvikInsn.vB;
-    int retval = const_string_common(tmp, vA);
+    int retval = const_string_common(mir);
     return retval;
 }
 
@@ -189,9 +193,7 @@ int op_const_string(const MIR * mir) {
  */
 int op_const_string_jumbo(const MIR * mir) {
     assert(mir->dalvikInsn.opcode == OP_CONST_STRING_JUMBO);
-    int vA = mir->dalvikInsn.vA;
-    u4 tmp = mir->dalvikInsn.vB;
-    int retval = const_string_common(tmp, vA);
+    int retval = const_string_common(mir);
     return retval;
 }
 
diff --git a/vm/compiler/codegen/x86/pcg/LowerALU.cpp b/vm/compiler/codegen/x86/pcg/LowerALU.cpp
index 08a5978..06657bf 100644
--- a/vm/compiler/codegen/x86/pcg/LowerALU.cpp
+++ b/vm/compiler/codegen/x86/pcg/LowerALU.cpp
@@ -194,7 +194,8 @@ void dvmCompilerPcgTranslateConstWide (CompilationUnitPCG *cUnit, MIR *mir, u8 v
 void dvmCompilerPcgTranslateConstString (CompilationUnitPCG *cUnit, MIR *mir)
 {
     u4 tmp = mir->dalvikInsn.vB;
-    void *strPtr = (void*) (cUnit->method->clazz->pDvmDex->pResStrings[tmp]);
+    const Method *method = (mir->OptimizationFlags & MIR_CALLEE) ?  mir->meta.calleeMethod : cUnit->method;
+    void *strPtr = (void*) (method->clazz->pDvmDex->pResStrings[tmp]);
     assert (strPtr != 0);
 
     //Get the SSARepresentation
-- 
1.7.4.1

