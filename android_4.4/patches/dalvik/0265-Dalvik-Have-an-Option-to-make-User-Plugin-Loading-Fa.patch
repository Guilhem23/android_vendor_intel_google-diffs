From 43de7d8668edf613693a35f2db64454e8b1d6df9 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Wed, 24 Jul 2013 07:31:11 -0700
Subject: Dalvik: Have an Option to make User Plugin Loading Failure Fatal

BZ: 125729

Added a -Xjituserpluginfatal that dvmAborts if the loading of a plugin fails.
The option is off by default.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I105b1fe9c078f85fa8476f635c1006226d93cc3c
Orig-MCG-Change-Id: I312d31ea486ee3bb23487c5048fc45d821cba4af
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Reviewed-on: http://android.intel.com:8080/123675
Reviewed-by: Popov, Ivan G <ivan.g.popov@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/Globals.h            |    6 ++++++
 vm/Init.cpp             |   10 ++++++++++
 vm/compiler/LoopOpt.cpp |   22 ++++++++++++++++++++++
 3 files changed, 38 insertions(+), 0 deletions(-)

diff --git a/vm/Globals.h b/vm/Globals.h
index e0da5b8..e552358 100644
--- a/vm/Globals.h
+++ b/vm/Globals.h
@@ -1009,6 +1009,12 @@ struct DvmJitGlobals {
     /* Flag to control whether the loops should be tested */
     bool testLoops;
 
+    /* Flag to control whether failure to load a plugin is fatal */
+    bool userpluginfatal;
+
+    /* Flag to control whether a failure to load a plugin has occured */
+    bool userpluginfailed;
+
     /* Flag to control backend registerization */
     bool backEndRegisterization;
 
diff --git a/vm/Init.cpp b/vm/Init.cpp
index 46b7c58..f66624e 100644
--- a/vm/Init.cpp
+++ b/vm/Init.cpp
@@ -162,6 +162,7 @@ static void usage(const char* progName)
     dvmFprintf(stderr, "  -Xjitbackendstring:value (Provide a string to the backend for post-processing\n");
     dvmFprintf(stderr, "  -Xjit[no]scheduling (Turn on/off Atom Instruction Scheduling)\n");
     dvmFprintf(stderr, "  -Xjituserplugin:<file.so> (Handle a user plugin file)\n");
+    dvmFprintf(stderr, "  -Xjituserpluginfatal (Is failure to load a user plugin fatal?\n");
     dvmFprintf(stderr, "  -Xjitarenatrimstyle:<none|onlyOne|average|user> (Select arena triming style)\n");
     dvmFprintf(stderr, "  -Xjitarenatrimvalue:<value> (The value for the user based arena trim style)\n");
     dvmFprintf(stderr, "  -Xjitnestedloops (Allows nested loops to be compiled or not)\n");
@@ -1590,6 +1591,15 @@ int processOptions(int argc, const char* const argv[], bool ignoreUnrecognized)
         } else if (strncmp(argv[i], "-Xjitlooppasses", 15) == 0) {
             //Simply call the loop pass printer
             dvmCompilerPrintPassNames ();
+        } else if (strncmp (argv[i], "-Xjituserpluginfatal", 20) == 0) {
+            gDvmJit.userpluginfatal = true;
+
+            //It is technically possible we have already failed
+            if (gDvmJit.userpluginfailed == true)
+            {
+                //Then abort now
+                dvmAbort ();
+            }
         } else if (strncmp (argv[i], "-Xjituserplugin:", 16) == 0) {
             const char *file = argv[i] + 16;
             //Send off to handle user pass
diff --git a/vm/compiler/LoopOpt.cpp b/vm/compiler/LoopOpt.cpp
index 7a16804..6adbebe 100644
--- a/vm/compiler/LoopOpt.cpp
+++ b/vm/compiler/LoopOpt.cpp
@@ -589,6 +589,9 @@ bool dvmCompilerReplaceGate (const char *name, bool (*gate) (const CompilationUn
 //Handle a user plugin
 void dvmCompilerHandleUserPlugin (const char *fileName)
 {
+    //Let us be optimistic
+    bool failure = false;
+
     //Open the file
     void *userHandle = dlopen (fileName, RTLD_NOW);
 
@@ -600,6 +603,9 @@ void dvmCompilerHandleUserPlugin (const char *fileName)
         if (tmp == 0)
         {
             ALOGD ("Problem with %s, cannot find dalvikPluginInit function\n", fileName);
+
+            //Set failure flag
+            failure = true;
         }
         else
         {
@@ -614,5 +620,21 @@ void dvmCompilerHandleUserPlugin (const char *fileName)
     {
         ALOGD ("Problem opening user plugin file %s", fileName);
         ALOGD ("dlerror() reports %s", dlerror());
+
+        //Set failure flag
+        failure = true;
+    }
+
+    //If the failure flag is on
+    if (failure == true)
+    {
+        //Is the failure on the user plugin fatal?
+        if (gDvmJit.userpluginfatal == true)
+        {
+            dvmAbort ();
+        }
+
+        //Signal we failed loading a plugin
+        gDvmJit.userpluginfailed = true;
     }
 }
-- 
1.7.4.1

