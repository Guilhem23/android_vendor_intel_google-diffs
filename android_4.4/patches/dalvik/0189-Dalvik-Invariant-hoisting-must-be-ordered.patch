From b6d6af73ef5db3dd2520c981505a0fcd9ecd89be Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Wed, 29 May 2013 14:58:43 -0700
Subject: Dalvik: Invariant hoisting must be ordered

BZ: 111989

Invariant hoisting must ensure that original ordering is maintained
in order to ensure semantically correct program. This patch ensures
that the invariants hoisted are in program order.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Iaecc44687e231b0d7a259753121643dd970852d6
Orig-MCG-Change-Id: I598d13f83fcf1a277e5fa63bc94905e37044356b
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/InvariantRemoval.cpp |   28 ++++++++++++++++++++++------
 1 files changed, 22 insertions(+), 6 deletions(-)

diff --git a/vm/compiler/InvariantRemoval.cpp b/vm/compiler/InvariantRemoval.cpp
index d6b993a..55853b9 100644
--- a/vm/compiler/InvariantRemoval.cpp
+++ b/vm/compiler/InvariantRemoval.cpp
@@ -246,18 +246,34 @@ static void filterInvariants (CompilationUnit *cUnit, std::vector<MIR *> &select
         findReplacement (cUnit, mir, current, max, chosen, localValueNumberingDef, scratchReplacements);
     }
 
-    //Update the selection
-    selection.clear ();
-    for (std::map<MIR *, bool>::iterator it = chosen.begin (); it != chosen.end (); it++)
+    std::vector<MIR *> newSelection;
+
+    //We want to make sure that our new selection matches the original ordering so we start off by looking
+    //in order to see if we chose the MIR or not
+    for (std::vector<MIR *>::const_iterator it = selection.begin (); it != selection.end (); it++)
     {
-        MIR *mir = it->first;
+        //Get the mir
+        MIR *mir = *it;
 
-        //Only push if not nil
         if (mir != 0)
         {
-            selection.push_back (mir);
+            //Check to see if this MIR has been chosen
+            std::map<MIR *, bool>::const_iterator chosenIter = chosen.find (mir);
+
+            if (chosenIter != chosen.end ())
+            {
+                //So chosen contains the MIR. Let's make sure that it was indeed chosen by checking the flag
+                if (chosenIter->second == true)
+                {
+                    //The MIR has been chosen so make it part of the new selection which maintains ordering
+                    newSelection.push_back (mir);
+                }
+            }
         }
     }
+
+    //We have made a new selection that is a subset so simply swap that in now
+    selection.swap (newSelection);
 }
 
 static void hoistInvariants (CompilationUnit *cUnit, LoopInformation *loopInfo, std::vector<MIR *> &selection,
-- 
1.7.4.1

