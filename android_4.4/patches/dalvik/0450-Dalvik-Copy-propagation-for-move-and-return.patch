From 40d7d45bf58b1c2faab0fdabe0073625700b2342 Mon Sep 17 00:00:00 2001
From: Chao-ying Fu <Chao-ying.Fu@intel.com>
Date: Mon, 9 Dec 2013 10:21:25 -0800
Subject: Dalvik: Copy propagation for move and return

BZ: 151023

Copy propagate the source register of a move instruction to the source
register of a return instruction inside a basic block.  Then, remove the
move instruction.

Change-Id: I1f5f7b3e07d2a496c44a85d2ea48acb07755be99
Category: device enablement
Domain: AOSP.Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, need rework
Signed-off-by: Chao-ying Fu <Chao-ying.Fu@intel.com>
---
 vm/compiler/BBOptimization.cpp |   62 ++++++++++++++++++++++++++++++++++++++++
 vm/compiler/BBOptimization.h   |    8 +++++
 vm/compiler/PassDriver.cpp     |    2 +
 3 files changed, 72 insertions(+), 0 deletions(-)

diff --git a/vm/compiler/BBOptimization.cpp b/vm/compiler/BBOptimization.cpp
index 8ed1b87..bbb9568 100644
--- a/vm/compiler/BBOptimization.cpp
+++ b/vm/compiler/BBOptimization.cpp
@@ -1483,3 +1483,65 @@ bool dvmCompilerRemoveGoto (CompilationUnit *cUnit, BasicBlock *bb)
     return false;
 }
 
+bool dvmCompilerCopyPropagationMoveReturn (CompilationUnit *cUnit, BasicBlock *bb)
+{
+    //Do copy propagation on move and return only
+    MIR *mir, *defMir;
+    SSARepresentation *ssaRep, *defSsaRep;
+    SUsedChain *chain;
+
+    //Check if bb exists
+    if (bb == 0)
+    {
+        return false;
+    }
+
+    mir = bb->lastMIRInsn;
+    //Check if the last insn is OP_RETURN
+    if (mir == 0 || mir->dalvikInsn.opcode != OP_RETURN)
+    {
+        return false;
+    }
+
+    ssaRep = mir->ssaRep;
+    //Check the number of uses
+    if (ssaRep == 0 || ssaRep->numUses != 1)
+    {
+        return false;
+    }
+
+    defMir = ssaRep->defWhere[0];
+    //Make sure OP_MOVE is followed by OP_RETURN immediately
+    if (defMir == 0 || defMir->dalvikInsn.opcode != OP_MOVE
+        || defMir->next != mir)
+    {
+        return false;
+    }
+
+    defSsaRep = defMir->ssaRep;
+    if (defSsaRep == 0)
+    {
+        return false;
+    }
+
+    chain = defSsaRep->usedNext[0];
+    //Check if there is only one use
+    if (chain !=0 && chain->mir == mir && chain->nextUse == 0)
+    {
+        int oldReg = dvmExtractSSARegister (cUnit, defSsaRep->defs[0]);
+        int newReg = dvmExtractSSARegister (cUnit, defSsaRep->uses[0]);
+        //Update the source register of the return instruction
+        if (dvmCompilerRewriteMirUses (defMir, oldReg, newReg) == true)
+        {
+            //Remove the move instruction
+            bool removed = dvmCompilerRemoveMIR (bb, defMir);
+            (void) removed;
+            assert (removed == true);
+            //To reduce optimization time, don't re-run this optimization
+            return false;
+        }
+    }
+
+    //Did not change the BasicBlock
+    return false;
+}
diff --git a/vm/compiler/BBOptimization.h b/vm/compiler/BBOptimization.h
index 07ccb07..ebe6f66 100644
--- a/vm/compiler/BBOptimization.h
+++ b/vm/compiler/BBOptimization.h
@@ -118,4 +118,12 @@ void dvmCompilerLocalValueNumbering (CompilationUnit *cUnit);
  */
 bool dvmCompilerRemoveGoto (CompilationUnit *cUnit, BasicBlock *bb);
 
+/**
+ * @brief Copy propagation for move and return
+ * @param cUnit the CompilationUnit
+ * @param bb the BasicBlock
+ * @return did we change the BasicBlock
+ */
+bool dvmCompilerCopyPropagationMoveReturn (CompilationUnit *cUnit, BasicBlock *bb);
+
 #endif
diff --git a/vm/compiler/PassDriver.cpp b/vm/compiler/PassDriver.cpp
index 44ab092..2c438fe 100644
--- a/vm/compiler/PassDriver.cpp
+++ b/vm/compiler/PassDriver.cpp
@@ -96,6 +96,8 @@ START_PASSES
     //Loop could be transformed at this point (e.g. loop peeling), so new opportunities're possible for Checks_Removal
     NEW_PASS ("Check_Removal", kPredecessorsFirstTraversal, 0, 0,
                 dvmCompilerStartCheckRemoval, dvmCompilerEndCheckRemoval, dvmCompilerCheckRemoval, 0, kOptimizationDefUsesChange),
+    NEW_PASS ("Copy_Propagation_Move_Return", kAllNodes, 0, 0,
+                0, 0, dvmCompilerCopyPropagationMoveReturn, 0, kOptimizationDefUsesChange),
     //This should be after the last optimization that changes instruction sequence or BB logic
     //Note: reorder is safe and should be after
     //We do registerization for all traces to provide spill information to the BE
-- 
1.7.4.1

