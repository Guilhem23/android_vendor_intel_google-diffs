From 8ddf95fdfb322cd74ab2f68411955fdb1d36780e Mon Sep 17 00:00:00 2001
From: Bijoy Jose <bijoy.a.jose@intel.com>
Date: Mon, 11 Mar 2013 15:07:10 -0700
Subject: Dalvik: Fixes for issues reported by klockwork

BZ: 92117

This patch fixes multiple klockwork reported issues for dalvik.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Compiler-ME; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Icd36e4cd16d4a1524d3b47923daa6a50c1dfda4c
Orig-MCG-Change-Id: I8dbfbe569e24957dbaccb459b5353607730f889f
Signed-off-by: Bijoy Jose <bijoy.a.jose@intel.com>
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/Init.cpp                                   |   16 ++++++++++------
 vm/compiler/BBOptimization.cpp                |   13 ++++++++++++-
 vm/compiler/codegen/x86/CodegenInterface.cpp  |   25 ++++++++++++++++++-------
 vm/compiler/codegen/x86/LowerAlu.cpp          |   12 ++++++------
 vm/compiler/codegen/x86/RegisterizationBE.cpp |    5 +++++
 5 files changed, 51 insertions(+), 20 deletions(-)

diff --git a/vm/Init.cpp b/vm/Init.cpp
index 7f495b4..198c6dc 100644
--- a/vm/Init.cpp
+++ b/vm/Init.cpp
@@ -1206,14 +1206,18 @@ static int processOptions(int argc, const char* const argv[],
             //Get a copy of the names
             gDvmJit.ignorePasses = strndup (argv[i] + 18, max);
 
-            //Paranoid: let's not let people do anything they want
-            if (strlen (gDvmJit.ignorePasses) >= max)
+            //Paranoid for memory issues
+            if (gDvmJit.ignorePasses != 0)
             {
-                ALOGD ("Warning: -Xjitignorepasses' parameter was too long, are you sure it was wanted? Only part was accepted");
-            }
+                //Paranoid: let's not let people do anything they want
+                if (strlen (gDvmJit.ignorePasses) >= max)
+                {
+                    ALOGD ("Warning: -Xjitignorepasses' parameter was too long, are you sure it was wanted? Only part was accepted");
+                }
 
-            //Print what we will be ignoring
-            dvmCompilerPrintIgnorePasses ();
+                //Print what we will be ignoring
+                dvmCompilerPrintIgnorePasses ();
+            }
         } else if (strncmp(argv[i], "-Xjitlooppasses", 15) == 0) {
             //Simply call the loop pass printer
             dvmCompilerPrintPassNames ();
diff --git a/vm/compiler/BBOptimization.cpp b/vm/compiler/BBOptimization.cpp
index 1930eca..0f01c86 100644
--- a/vm/compiler/BBOptimization.cpp
+++ b/vm/compiler/BBOptimization.cpp
@@ -291,6 +291,12 @@ static void insertLoopExitBlock (CompilationUnit *cUnit, LoopInformation *info,
  */
 static void handleTopLoop (CompilationUnit *cUnit, LoopInformation *info, BasicBlock *bb, BasicBlock *predBB, BasicBlock *backward)
 {
+    //Paranoid on bb
+    if (bb == 0)
+    {
+        return;
+    }
+
     //Paranoid: we should have a branch
     assert (bb->taken != 0 || bb->fallThrough != 0);
 
@@ -397,8 +403,13 @@ static void handleTopLoop (CompilationUnit *cUnit, LoopInformation *info, BasicB
     //When we are done, we've copied the chain of BasicBlocks that form the continuation test
     //Now redirect backward to cur, we don't want to do the tests twice each iteration
     backward->fallThrough = cur;
+
     //Paranoid
-    assert (cur != 0);
+    if (cur == 0)
+    {
+        return;
+    }
+
     //Also set its offset, it might have changed and the chaining cell needs this
     backward->startOffset = cur->startOffset;
 
diff --git a/vm/compiler/codegen/x86/CodegenInterface.cpp b/vm/compiler/codegen/x86/CodegenInterface.cpp
index 984b8b2..5bdb687 100644
--- a/vm/compiler/codegen/x86/CodegenInterface.cpp
+++ b/vm/compiler/codegen/x86/CodegenInterface.cpp
@@ -1823,13 +1823,24 @@ static void compilerMIR2LIRJit(CompilationUnit *cUnit, JitTranslationInfo *info)
                             //Get the right loop
                             info = info->getLoopInformationByEntry (loopEntry);
 
-                            //We have a preLoop
-                            BasicBlock *preLoop = info->getPreHeader ();
-
-                            bbO1 = reinterpret_cast<BasicBlock_O1 *> (preLoop);
-                            assert (bbO1 != 0);
-
-                            preLoopHeaderAddr = bbO1->streamStart;
+                            //Paranoid
+                            if (info != 0)
+                            {
+                                //We have a preLoop
+                                BasicBlock *preLoop = info->getPreHeader ();
+
+                                //Paranoid
+                                if (preLoop != 0)
+                                {
+                                    bbO1 = reinterpret_cast<BasicBlock_O1 *> (preLoop);
+
+                                    //Paranoid
+                                    if (bbO1 != 0)
+                                    {
+                                        preLoopHeaderAddr = bbO1->streamStart;
+                                    }
+                                }
+                            }
                         }
 
                         if (loopHeaderAddr == 0 || preLoopHeaderAddr == 0){
diff --git a/vm/compiler/codegen/x86/LowerAlu.cpp b/vm/compiler/codegen/x86/LowerAlu.cpp
index ce79a60..aa607d7 100644
--- a/vm/compiler/codegen/x86/LowerAlu.cpp
+++ b/vm/compiler/codegen/x86/LowerAlu.cpp
@@ -1696,10 +1696,10 @@ int common_shl_long(u2 vA, u2 v1, u2 v2) {
     get_VR_ss(v2, 2, false);
     get_virtual_reg(v1, OpndSize_64, 1, false);
 
-    int value;
-    int isConst = isVirtualRegConstant(v2, LowOpndRegType_gp, &value, false); //do not update refCount
+    int value[2];
+    int isConst = isVirtualRegConstant(v2, LowOpndRegType_gp, value, false); //do not update refCount
     if (isConst == 3) {                          // case where shift amount is available
-        int shiftImm = (0x3f) & (value); // compute masked shift amount statically
+        int shiftImm = (0x3f) & (value[0]); // compute masked shift amount statically
         alu_binary_imm_reg(OpndSize_64, sll_opc, shiftImm, 1, false);
     } else {                                // case where shift count to be read from VR
         load_global_data_API("shiftMask", OpndSize_64, 3, false);
@@ -1754,10 +1754,10 @@ int common_ushr_long(u2 vA, u2 v1, u2 v2) {
     get_VR_sd(v1, 1, false);
     get_VR_ss(v2, 2, false);
 
-    int value;
-    int isConst = isVirtualRegConstant(v2, LowOpndRegType_gp, &value, false); //do not update refCount
+    int value[2];
+    int isConst = isVirtualRegConstant(v2, LowOpndRegType_gp, value, false); //do not update refCount
     if (isConst == 3) {                     // case where shift amount is available
-        int shiftImm = (0x3f) & (value); // compute masked shift amount statically
+        int shiftImm = (0x3f) & (value[0]); // compute masked shift amount statically
         alu_binary_imm_reg(OpndSize_64, srl_opc, shiftImm, 1, false);
     } else {                                // case where shift count to be read from VR
         load_sd_global_data_API("shiftMask", 3, false);
diff --git a/vm/compiler/codegen/x86/RegisterizationBE.cpp b/vm/compiler/codegen/x86/RegisterizationBE.cpp
index 40ed57c..c9e1560 100644
--- a/vm/compiler/codegen/x86/RegisterizationBE.cpp
+++ b/vm/compiler/codegen/x86/RegisterizationBE.cpp
@@ -757,6 +757,11 @@ static bool moveToChildPhysical (AssociationTable &associationsToUse,
         int VR = *setOpIter;
         PhysicalReg targetReg = childVRToPhysicalReg[VR];
 
+        //This should never happen but it will make buffer overflow checkers happy
+        if (targetReg >= PhysicalReg_SCRATCH_1) {
+            continue;
+        }
+
         LowOpndRegType type = LowOpndRegType_invalid;
         // Look through child's association entries to find the type of the VR
         // so we can load it properly into the physical register
-- 
1.7.4.1

