From d676da6e4449e9957b5eedac784f477022c2e521 Mon Sep 17 00:00:00 2001
From: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Date: Tue, 6 Aug 2013 18:54:37 +0700
Subject: Dalvik: An updated assert for optimized switches

BZ: 128536

New stwitches optimization includes a new type of generated
instructions - JMP mem. This required to modify scheduler's
function 'updateUseDefInformation_mem' in order to handle the
case when jump through memory is being scheduled. This patch
allso fills missed cell in scheduler's table for JMP mem
instruction. According to IA Optimization Manual (Jun 2013)
JMP mem uses both ports and has the latency equals 2.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I3749026acf31bfd1952c9faa40102f64a0e0d9b3
Orig-MCG-Change-Id: Ia738d140c4d8a0437ed8ca490be0714162293555
Signed-off-by: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Reviewed-on: http://android.intel.com:8080/125079
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/lightcg/Scheduler.cpp |   13 +++++++------
 1 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/vm/compiler/codegen/x86/lightcg/Scheduler.cpp b/vm/compiler/codegen/x86/lightcg/Scheduler.cpp
index 074b73c..f5efb1b 100644
--- a/vm/compiler/codegen/x86/lightcg/Scheduler.cpp
+++ b/vm/compiler/codegen/x86/lightcg/Scheduler.cpp
@@ -127,7 +127,7 @@ struct MachineModelEntry {
 MachineModelEntry atomMachineModel[Mnemonic_Count*6] = {
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //NULL, Null
 
-    {PORT1,1},{PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //JMP
+    {PORT1,1},{PORT1,1},{BOTH_PORTS,2},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //JMP
 
     {INVP,INVN},{EITHER_PORT,1},{PORT0,1},{EITHER_PORT,1},{PORT0,1},{PORT0,1}, //MOV
 
@@ -998,18 +998,19 @@ void Scheduler::updateUseDefInformation_reg(LowOpReg * op) {
 
 //! \brief Updates dependency information for for LowOps with a single
 //! memory operand.
-//! \param op has mnemonic CALL, FLDCW, FNSTCW, PUSH or it is an ALU
+//! \param op has mnemonic CALL, FLDCW, FNSTCW, PUSH, JMP or it is an ALU
 //! instruction
 void Scheduler::updateUseDefInformation_mem(LowOpMem * op) {
-    assert(op->opCode == Mnemonic_CALL || op->opCode == Mnemonic_FLDCW
-            || op->opCode == Mnemonic_FNSTCW || op->opCode == Mnemonic_PUSH
-            || op->opCode2 == ATOM_NORMAL_ALU);
+    assert(op->opCode == Mnemonic_CALL || op->opCode == Mnemonic_JMP
+            || op->opCode == Mnemonic_FLDCW || op->opCode == Mnemonic_FNSTCW
+            || op->opCode == Mnemonic_PUSH  || op->opCode2 == ATOM_NORMAL_ALU);
     op->instructionLatency = getAtomMnemonicLatency_mem(op->opCode);
     op->portType = getAtomMnemonicPort_mem(op->opCode);
     assert(op->instructionLatency != INVN);
     assert(op->portType != INVP);
 
-    if (op->opCode == Mnemonic_CALL || op->opCode == Mnemonic_FLDCW
+    if (op->opCode == Mnemonic_CALL || op->opCode == Mnemonic_JMP
+            || op->opCode == Mnemonic_FLDCW
             || op->opCode == Mnemonic_PUSH
             || isAluOpWithImplicitRegisterUsage(op->opCode))
         op->opndSrc.defuse = LowOpndDefUse_Use;
-- 
1.7.4.1

