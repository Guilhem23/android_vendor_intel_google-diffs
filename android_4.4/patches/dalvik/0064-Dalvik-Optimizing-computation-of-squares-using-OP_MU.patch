From def0af85cca905b6a05416e401442d7ae9862d58 Mon Sep 17 00:00:00 2001
From: Bijoy Jose <bijoy.a.jose@intel.com>
Date: Mon, 4 Feb 2013 18:13:35 -0800
Subject: Dalvik: Optimizing computation of squares using OP_MUL_LONG and OP_MUL_LONG/2ADDR.

BZ: 69035

Square of a number does not require as many partial products as multiplying
two different numbers. An special case to avoid an IMUL instruction when
computing squares is done for bytecodes OP_MUL_LONG and OP_MUL_LONG/2ADDR.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ic05b2d3fe504bc8aecb8c71ff1b6ae3e2eb1d1c5
Orig-MCG-Change-Id: I47c955fb70a74603948460ebc2a0779217ec1096
Signed-off-by: Bijoy Jose <bijoy.a.jose@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/BytecodeVisitor.cpp |  101 +++++++++++++++++++--------
 vm/compiler/codegen/x86/LowerAlu.cpp        |   42 +++++++++--
 2 files changed, 105 insertions(+), 38 deletions(-)

diff --git a/vm/compiler/codegen/x86/BytecodeVisitor.cpp b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
index 2a61086..245deb1 100644
--- a/vm/compiler/codegen/x86/BytecodeVisitor.cpp
+++ b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
@@ -2477,6 +2477,8 @@ int getVirtualRegInfo(VirtualRegInfo* infoArray, const MIR * currentMIR) {
         infoArray[5].refCount = 1;
         infoArray[5].accessType = REGACCESS_D;
         infoArray[5].physicalType = LowOpndRegType_gp;
+        updateCurrentBBWithConstraints(PhysicalReg_ECX);
+        updateCurrentBBWithConstraints(PhysicalReg_EAX);
         num_regs_per_bytecode = 6;
         codeSize = 2;
         break;
@@ -2771,6 +2773,8 @@ int getVirtualRegInfo(VirtualRegInfo* infoArray, const MIR * currentMIR) {
         infoArray[3].refCount = 2;
         infoArray[3].accessType = REGACCESS_UD;
         infoArray[3].physicalType = LowOpndRegType_gp;
+        updateCurrentBBWithConstraints(PhysicalReg_ECX);
+        updateCurrentBBWithConstraints(PhysicalReg_EAX);
         break;
     case OP_DIV_LONG_2ADDR: //vA used as xmm, then updated as gps
     case OP_REM_LONG_2ADDR:
@@ -4938,38 +4942,75 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
         return 3;
 
     case OP_MUL_LONG: //general purpose register
+        vA = currentMIR->dalvikInsn.vA;//INST_AA(inst);
+        v1 = currentMIR->dalvikInsn.vB;
+        v2 = currentMIR->dalvikInsn.vC;
+        if (v1 != v2){  // when the multuplicands are not the same
+           infoArray[0].regNum = 1;
+           infoArray[0].refCount = 6;
+           infoArray[0].physicalType = LowOpndRegType_gp;
+           infoArray[0].shareWithVR = false;
+           infoArray[1].regNum = 2;
+           infoArray[1].refCount = 3;
+           infoArray[1].physicalType = LowOpndRegType_gp;
+           infoArray[2].regNum = 3;
+           infoArray[2].refCount = 3;
+           infoArray[2].physicalType = LowOpndRegType_gp;
+           infoArray[3].regNum = PhysicalReg_EAX;
+           infoArray[3].refCount = 2+1; //for mul_opc
+           infoArray[3].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
+           infoArray[4].regNum = PhysicalReg_EDX;
+           infoArray[4].refCount = 2; //for mul_opc
+           infoArray[4].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
+           return 5;
+        } else {        // when square of a number is to be computed
+           infoArray[0].regNum = 1;
+           infoArray[0].refCount = 8;
+           infoArray[0].physicalType = LowOpndRegType_gp;
+           infoArray[0].shareWithVR = false;
+           infoArray[1].regNum = PhysicalReg_EAX;
+           infoArray[1].refCount = 2+1; //for mul_opc
+           infoArray[1].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
+           infoArray[2].regNum = PhysicalReg_EDX;
+           infoArray[2].refCount = 3+1; //for mul_opc
+           infoArray[2].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
+           return 3;
+         }
+
     case OP_MUL_LONG_2ADDR:
-        if(inst_op == OP_MUL_LONG) {
-            v1 = currentMIR->dalvikInsn.vB;
-            v2 = currentMIR->dalvikInsn.vC;
-        } else {
-            v1 = currentMIR->dalvikInsn.vA;
-            v2 = currentMIR->dalvikInsn.vB;
+        v1 = currentMIR->dalvikInsn.vA;
+        v2 = currentMIR->dalvikInsn.vB;
+        if (v1 != v2){  // when the multuplicands are not the same
+          infoArray[0].regNum = 1;
+          infoArray[0].refCount = 6;
+          infoArray[0].physicalType = LowOpndRegType_gp;
+          infoArray[0].shareWithVR = false;
+          infoArray[1].regNum = 2;
+          infoArray[1].refCount = 3;
+          infoArray[1].physicalType = LowOpndRegType_gp;
+          infoArray[2].regNum = 3;
+          infoArray[2].refCount = 3;
+          infoArray[2].physicalType = LowOpndRegType_gp;
+          infoArray[3].regNum = PhysicalReg_EAX;
+          infoArray[3].refCount = 2+1; //for mul_opc
+          infoArray[3].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
+          infoArray[4].regNum = PhysicalReg_EDX;
+          infoArray[4].refCount = 2; //for mul_opc
+          infoArray[4].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
+          return 5;
+        } else {    // when square of a number is to be computed
+          infoArray[0].regNum = 1;
+          infoArray[0].refCount = 8;
+          infoArray[0].physicalType = LowOpndRegType_gp;
+          infoArray[0].shareWithVR = false;
+          infoArray[1].regNum = PhysicalReg_EAX;
+          infoArray[1].refCount = 2+1; //for mul_opc
+          infoArray[1].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
+          infoArray[2].regNum = PhysicalReg_EDX;
+          infoArray[2].refCount = 3+1; //for mul_opc
+          infoArray[2].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
+          return 3;
         }
-        infoArray[0].regNum = 1;
-        infoArray[0].refCount = 6;
-        infoArray[0].physicalType = LowOpndRegType_gp;
-        infoArray[0].shareWithVR = false;
-
-        /* shareRegWithLivenessInfo is set to TRUE only when the two source VRs are not equal for OP_MUL_LONG.
-           This is required to avoid incorrect sharing of the same physical register for virtual registers and
-           temporary registers in OP_MUL_LONG lowering when using the VR liveness information heuristic in
-           register allocation */
-        if(v1 == v2)
-            infoArray[0].shareRegWithLivenessInfo = false;
-        infoArray[1].regNum = 2;
-        infoArray[1].refCount = 3;
-        infoArray[1].physicalType = LowOpndRegType_gp;
-        infoArray[2].regNum = 3;
-        infoArray[2].refCount = 3;
-        infoArray[2].physicalType = LowOpndRegType_gp;
-        infoArray[3].regNum = PhysicalReg_EAX;
-        infoArray[3].refCount = 2+1; //for mul_opc
-        infoArray[3].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
-        infoArray[4].regNum = PhysicalReg_EDX;
-        infoArray[4].refCount = 2; //for mul_opc
-        infoArray[4].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
-        return 5;
 
     case OP_DIV_LONG:
     case OP_REM_LONG:
diff --git a/vm/compiler/codegen/x86/LowerAlu.cpp b/vm/compiler/codegen/x86/LowerAlu.cpp
index c8e7614..598f8a0 100644
--- a/vm/compiler/codegen/x86/LowerAlu.cpp
+++ b/vm/compiler/codegen/x86/LowerAlu.cpp
@@ -1521,9 +1521,6 @@ int op_xor_long_2addr(const MIR * mir) {
 }
 
 //signed vs unsigned imul and mul?
-#define P_GPR_1 PhysicalReg_EBX
-#define P_GPR_2 PhysicalReg_ECX
-#define P_GPR_3 PhysicalReg_ESI
 //! common code to handle multiplication of long
 
 //! It uses GPR
@@ -1543,12 +1540,28 @@ int common_mul_long(u2 vA, u2 v1, u2 v2) {
     set_virtual_reg(vA, OpndSize_32, PhysicalReg_EAX, true);
     return 0;
 }
-#undef P_GPR_1
-#undef P_GPR_2
-#undef P_GPR_3
+
+//! common code to handle multiplication when multiplicands of long type are the same
+
+//! It uses GPR
+int common_mul_long_square(u2 vA, u2 v1) {
+    get_virtual_reg(v1, OpndSize_32, 1, false);
+    move_reg_to_reg(OpndSize_32, 1, false, PhysicalReg_EAX, true);
+    move_reg_to_reg(OpndSize_32,1, false, PhysicalReg_EDX, true);
+    //imul: 1L * 1H update temporary 1.
+    //same as 2L * 1H or 1L * 2H, thus eliminating need for second imul.
+    alu_binary_VR_reg(OpndSize_32, imul_opc, (v1+1), 1, false);
+    alu_binary_reg_reg(OpndSize_32, add_opc, 1, false, 1, false);
+    alu_unary_reg(OpndSize_32, mul_opc, PhysicalReg_EDX, true);
+    alu_binary_reg_reg(OpndSize_32, add_opc, PhysicalReg_EDX, true, 1, false);
+    set_virtual_reg(vA+1, OpndSize_32, 1, false);
+    set_virtual_reg(vA, OpndSize_32, PhysicalReg_EAX, true);
+    return 0;
+}
 
 /**
  * @brief Generate native code for bytecode mul-long
+ * @details when multiplicands are same, use special case for square
  * @param mir bytecode representation
  * @return value >= 0 when handled
  */
@@ -1557,12 +1570,19 @@ int op_mul_long(const MIR * mir) {
     u2 vA = mir->dalvikInsn.vA;
     u2 v1 = mir->dalvikInsn.vB;
     u2 v2 = mir->dalvikInsn.vC;
-    int retval = common_mul_long(vA, v1, v2);
+    int retval;
+    if (v1 != v2){
+      retval = common_mul_long(vA, v1, v2);
+    }
+    else{
+      retval = common_mul_long_square(vA, v1);
+    }
     return retval;
 }
 
 /**
  * @brief Generate native code for bytecode mul-long/2addr
+ * @details when multiplicands are same, use special case for square
  * @param mir bytecode representation
  * @return value >= 0 when handled
  */
@@ -1571,7 +1591,13 @@ int op_mul_long_2addr(const MIR * mir) {
     u2 vA = mir->dalvikInsn.vA;
     u2 v1 = vA;
     u2 v2 = mir->dalvikInsn.vB;
-    int retval = common_mul_long(vA, v1, v2);
+    int retval;
+    if (v1 != v2){
+      retval = common_mul_long(vA, v1, v2);
+    }
+    else{
+      retval = common_mul_long_square(vA, v1);
+    }
     return retval;
 }
 
-- 
1.7.4.1

