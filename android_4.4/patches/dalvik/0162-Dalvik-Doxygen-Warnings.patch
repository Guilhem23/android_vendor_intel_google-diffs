From 199e23dc89a32404e0ca39e10aca3efe5c2fb165 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Wed, 24 Apr 2013 14:19:37 -0700
Subject: Dalvik: Doxygen Warnings

BZ: 103333

Fixed doxygen warnings.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Compiler-ME; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ifc7ce1c11bd2c1c83c1c0bc14c85a1a5f66913a5
Orig-MCG-Change-Id: I68712bb50a6c2e0f9065cfd951d0227e4250ca1e
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/AccumulationSinking.cpp           |   12 ++++-----
 vm/compiler/BBOptimization.cpp                |    8 +++---
 vm/compiler/Checks.cpp                        |    4 +-
 vm/compiler/CompilerIR.h                      |    4 +-
 vm/compiler/Expression.h                      |   24 +++++++------------
 vm/compiler/IntermediateRep.cpp               |    4 +++
 vm/compiler/LoopInformation.cpp               |    3 --
 vm/compiler/LoopInformation.h                 |    4 +-
 vm/compiler/Pass.h                            |    2 +-
 vm/compiler/RegisterizationME.cpp             |    2 +
 vm/compiler/codegen/x86/AnalysisO1.cpp        |   31 +++++++++++++------------
 vm/compiler/codegen/x86/AnalysisO1.h          |    2 +-
 vm/compiler/codegen/x86/BytecodeVisitor.cpp   |    5 +++-
 vm/compiler/codegen/x86/CodegenInterface.cpp  |    1 +
 vm/compiler/codegen/x86/Lower.cpp             |    6 +++-
 vm/compiler/codegen/x86/LowerGetPut.cpp       |   23 +++++++++---------
 vm/compiler/codegen/x86/LowerHelper.cpp       |    5 +--
 vm/compiler/codegen/x86/LowerJump.cpp         |   17 ++++++++-----
 vm/compiler/codegen/x86/RegisterizationBE.cpp |    2 +-
 vm/compiler/codegen/x86/RegisterizationBE.h   |    6 +---
 vm/compiler/codegen/x86/Scheduler.cpp         |    5 ++-
 vm/compiler/codegen/x86/StackExtensionX86.cpp |    5 +--
 vm/compiler/codegen/x86/StackExtensionX86.h   |    3 +-
 vm/compiler/codegen/x86/libenc/enc_base.h     |    2 +-
 vm/compiler/codegen/x86/libenc/enc_defs.h     |    8 +++---
 vm/reflect/Annotation.cpp                     |    1 +
 vm/reflect/Reflect.h                          |    1 +
 27 files changed, 96 insertions(+), 94 deletions(-)

diff --git a/vm/compiler/AccumulationSinking.cpp b/vm/compiler/AccumulationSinking.cpp
index 6797223..efbc6af 100644
--- a/vm/compiler/AccumulationSinking.cpp
+++ b/vm/compiler/AccumulationSinking.cpp
@@ -26,6 +26,7 @@
 
 /**
  * @brief Choose an IV for the pass: it must be able to count the iterations
+ * @param cUnit the CompilationUnit
  * @param info the LoopInformation
  * @param increment Holds the chosen IV increment value (updated by the function)
  * @return the chosen IV for the pass, or -1 if not found
@@ -115,7 +116,7 @@ static MIR *findLastDefinition (CompilationUnit *cUnit, LoopInformation *info, M
  * @brief Helper function for filtering, it follows the definitions and accumulates them in the vector and map provided as arguments
  * @param cUnit the CompilationUnit
  * @param info the LoopInformation
- * @param vr the considered virtual register
+ * @param current the current instruction
  * @param accumulatorCalculation the calculation of the vr accumulator
  * @param accumulatorMap the map containing every MIR used for the calculation of the vr accumulator
  */
@@ -271,12 +272,9 @@ static void filterVRs (CompilationUnit *cUnit, LoopInformation *info, std::vecto
 }
 
 /**
- * @brief Check if the calculation of the accumulator is only for the accumulator
- * @param cUnit the CompilationUnit
- * @param info the LoopInformation
- * @param accumulatorList the list of instructions
- * @param accumulatorMap the map of instructions
- * @return whether this is an accepted accumulator calculation
+ * @brief Check if the instruction has a future use for its defines
+ * @param mir the instruction we are checking if there is a use
+ * @return whether the instruction has a future use
  */
 static bool checkUsage (const MIR *mir)
 {
diff --git a/vm/compiler/BBOptimization.cpp b/vm/compiler/BBOptimization.cpp
index 71539c0..c7d90f6 100644
--- a/vm/compiler/BBOptimization.cpp
+++ b/vm/compiler/BBOptimization.cpp
@@ -281,7 +281,7 @@ static bool insertPreLoopHeader (CompilationUnit *cUnit, LoopInformation *info,
  * @param cUnit the CompilationUnit
  * @param info the LoopInformation
  * @param cur the current BasicBlock we are attaching the loop exit block to
- * @param exit the loop exit BasicBlock
+ * @param exitBB the loop exit BasicBlock
  */
 static void insertLoopExitBlock (CompilationUnit *cUnit, LoopInformation *info, BasicBlock *cur, BasicBlock *exitBB)
 {
@@ -513,7 +513,7 @@ static bool handleTopLoop (CompilationUnit *cUnit, LoopInformation *info, BasicB
  * @param info the LoopInformation
  * @param bb the BasicBlock that represents the head of the loop for the top formed loop
  * @param predBB the predecessor of bb currently being handled
- * @param backward the backward chaining cell
+ * @param ptrBackward the backward chaining cell
  * @return whether we succeeded or not
  */
 static bool handleBottomLoop (CompilationUnit *cUnit, LoopInformation *info, BasicBlock *bb, BasicBlock *predBB, BasicBlock **ptrBackward)
@@ -1843,8 +1843,8 @@ typedef struct sLocalValueNumberingAssociation
 /**
  * @brief Handle the local value numbering for the instruction
  * @param mir MIR instruction
- * @param color the current color
- * @return the new color
+ * @param associations association between a SLocalValueNumberingAssociation and its color
+ * @param ssaAssociations map between the SSA register and its color
  */
 static void handleLocalValueNumbering (MIR *mir,
                                        std::map<SLocalValueNumberingAssociation, unsigned int> &associations,
diff --git a/vm/compiler/Checks.cpp b/vm/compiler/Checks.cpp
index 0ddb41c..a9e50fb 100644
--- a/vm/compiler/Checks.cpp
+++ b/vm/compiler/Checks.cpp
@@ -198,7 +198,7 @@ static void handleNullCheckHoist (CompilationUnit *cUnit, SRemoveData *removeDat
  * @param currentColor the current color for memory writes
  * @param directMatch is the equality a direct match?
  * @param idx the index for the use array we are comparing to (default 0)
- * @param return true if idx >= number of uses
+ * @return true if idx >= number of uses
  */
 static bool usesEqualHelper (const MIR *mir, const MIR *other, std::map<int, std::vector <std::pair <int, int> > > &replacementRegs, int currentColor, bool &directMatch, int idx = 0);
 
@@ -210,7 +210,7 @@ static bool usesEqualHelper (const MIR *mir, const MIR *other, std::map<int, std
  * @param replacementRegs the replacement register map to test different possible uses
  * @param currentColor the current color for memory writes
  * @param directMatch is the equality a direct match?
- * @param return whether or not mir and other are using the same registers via a replacementReg or not
+ * @return whether or not mir and other are using the same registers via a replacementReg or not
  */
 static bool usesEqual (const MIR *mir, const MIR *other, std::map<int, std::vector <std::pair <int, int> > > &replacementRegs, int currentColor, bool &directMatch);
 
diff --git a/vm/compiler/CompilerIR.h b/vm/compiler/CompilerIR.h
index ee18a11..e527d58 100644
--- a/vm/compiler/CompilerIR.h
+++ b/vm/compiler/CompilerIR.h
@@ -282,7 +282,7 @@ typedef struct CompilationUnit {
     unsigned int maximumRegisterization;    /**< @brief Maximum registerization to be accepted */
     void *passData;                         /**< @brief Pass data is used to transfer data throughout a Pass */
     void *walkData;                         /**< @brief Walk data when using the dispatcher */
-    struct sUsedChain* globalDefUseChain;   /**< @Brief The global def-use chain, this contains all def-use chains for reuse when recalculating */
+    struct sUsedChain* globalDefUseChain;   /**< @brief The global def-use chain, this contains all def-use chains for reuse when recalculating */
     const JitTraceDescription *traceDesc;
     LIR *firstLIRInsn;
     LIR *lastLIRInsn;
@@ -530,7 +530,7 @@ void dvmCompilerDumpCompilationUnit(CompilationUnit *cUnit);
 /**
  * @brief Rewrite the uses of a MIR.
  * @details This is guaranteed to not rewrite unless it will succeed.
- * @brief dalvikInsn The dalvik instruction to update.
+ * @param dalvikInsn The dalvik instruction to update.
  * @param oldVR the old VR that we want to rewrite
  * @param newVR the new VR we want to use
  * @return whether the rewrite was successful
diff --git a/vm/compiler/Expression.h b/vm/compiler/Expression.h
index b230b51..bed5fd8 100644
--- a/vm/compiler/Expression.h
+++ b/vm/compiler/Expression.h
@@ -323,14 +323,12 @@ public:
      * @brief Constructor of bytecode expression
      * @param assignTo Virtual register that expression assigns to.
      * Cannot be null.
-     * @param expKind Expression kind
-     * @param expType Expression type
+     * @param kind Expression kind
+     * @param type Expression type
      * @param insn MIR associated with expression. Cannot be null.
      */
-    BytecodeExpression (VirtualRegister * assignTo, ExpressionKind (expKind),
-            ExpressionType expType, MIR * insn) :
-            Expression (), assignmentTo (assignTo), mir (insn), expKind (
-                    expKind), expType (expType)
+    BytecodeExpression (VirtualRegister * assignTo, ExpressionKind kind, ExpressionType type, MIR * insn) :
+            Expression (), assignmentTo (assignTo), mir (insn), expKind (kind), expType (type)
     {
         assert(assignTo != 0);
         assert(insn != 0);
@@ -462,19 +460,15 @@ class BinaryExpression: public BytecodeExpression
 public:
     /**
      * @brief Constructor for binary bytecode expression.
-     * @param assignTo Virtual register that expression assigns to.
-     * Cannot be null.
+     * @param assignTo Virtual register that expression assigns to.  Cannot be null.
      * @param lhs Expression tree for the lhs operand. Cannot be null.
      * @param rhs Expression tree for the rhs operand. Cannot be null.
-     * @param expKind Expression kind
-     * @param expType Expression type
+     * @param kind Expression kind
+     * @param type Expression type
      * @param mir MIR associated with expression. Cannot be null.
      */
-    BinaryExpression (VirtualRegister * assignTo, Expression * lhs,
-            Expression * rhs, ExpressionKind expKind, ExpressionType expType,
-            MIR * mir) :
-            BytecodeExpression (assignTo, expKind, expType, mir), lhs (lhs), rhs (
-                    rhs)
+    BinaryExpression (VirtualRegister * assignTo, Expression * lhs, Expression * rhs, ExpressionKind kind, ExpressionType type, MIR * mir) :
+            BytecodeExpression (assignTo, kind, type, mir), lhs (lhs), rhs (rhs)
     {
         assert(lhs != 0);
         assert(rhs != 0);
diff --git a/vm/compiler/IntermediateRep.cpp b/vm/compiler/IntermediateRep.cpp
index 1db9044..8e3f455 100644
--- a/vm/compiler/IntermediateRep.cpp
+++ b/vm/compiler/IntermediateRep.cpp
@@ -272,6 +272,7 @@ void dvmCompilerAddInstructionsToBasicBlock (BasicBlock *bb, const std::vector<M
 
 /**
  * @brief Add instructions to the BasicBlock in a BitVector
+ * @param cUnit the CompilationUnit
  * @param basicBlocks a BitVector containing the BasicBlocks
  * @param toAdd a vector of Instructions to add to bb
  */
@@ -335,6 +336,9 @@ bool dvmCompilerInsertBasicBlockBetween (BasicBlock *newBlock, BasicBlock *paren
 /**
  * @brief Copy a BasicBlock
  * @param cUnit the CompilationUnit
+ * @param old the old BasicBlock
+ * @param addIt do we add the new block to the CompilationUnit's BasicBlock list
+ * @return the new BasicBlock
  */
 BasicBlock *dvmCompilerCopyBasicBlock (CompilationUnit *cUnit, const BasicBlock *old, bool addIt)
 {
diff --git a/vm/compiler/LoopInformation.cpp b/vm/compiler/LoopInformation.cpp
index 3a065a9..55d3847 100644
--- a/vm/compiler/LoopInformation.cpp
+++ b/vm/compiler/LoopInformation.cpp
@@ -217,9 +217,6 @@ LoopInformation *LoopInformation::getLoopInformationByEntry (const BasicBlock *e
     return 0;
 }
 
-/**
- * Go through the BasicBlocks and assign to the loop
- */
 void LoopInformation::fillBasicBlockVector (BasicBlock *current)
 {
 
diff --git a/vm/compiler/LoopInformation.h b/vm/compiler/LoopInformation.h
index b52bcbc..63f086f 100644
--- a/vm/compiler/LoopInformation.h
+++ b/vm/compiler/LoopInformation.h
@@ -76,9 +76,9 @@ class LoopInformation
 
         /**
          * @brief Fill the basicBlock vector with the BasicBlocks composing the loop
-         * @param bb the current BasicBlock
+         * @param current the current BasicBlock
          */
-        void fillBasicBlockVector (BasicBlock *bb);
+        void fillBasicBlockVector (BasicBlock *current);
 
     public:
         /** @brief Constructor */
diff --git a/vm/compiler/Pass.h b/vm/compiler/Pass.h
index 47bf741..dc54616 100644
--- a/vm/compiler/Pass.h
+++ b/vm/compiler/Pass.h
@@ -123,7 +123,7 @@ class Pass
 
         /**
          * @brief Set the data
-         * @param the new data
+         * @param data the new data
          */
         void setData (void *data);
 
diff --git a/vm/compiler/RegisterizationME.cpp b/vm/compiler/RegisterizationME.cpp
index d319996..9d4d6da 100644
--- a/vm/compiler/RegisterizationME.cpp
+++ b/vm/compiler/RegisterizationME.cpp
@@ -98,6 +98,7 @@ static bool getType (const MIR *mir, int vR, RegisterClass &regClass)
 
 /**
  * @brief Select the registers we want to registerize: currently only the entry PHI nodes
+ * @param cUnit the CompilationUnit
  * @param info the LoopInformation
  * @param registers the final vector of registers
  */
@@ -756,6 +757,7 @@ static bool parseBlock (BasicBlock *bb)
 
 /**
  * @brief Check a loop: is it ok to registerize
+ * @param cUnit the CompilationUnit
  * @param info the LoopInformation
  * @return whether it is acceptable for registerization
  */
diff --git a/vm/compiler/codegen/x86/AnalysisO1.cpp b/vm/compiler/codegen/x86/AnalysisO1.cpp
index 84d04cc..d400d99 100644
--- a/vm/compiler/codegen/x86/AnalysisO1.cpp
+++ b/vm/compiler/codegen/x86/AnalysisO1.cpp
@@ -359,8 +359,7 @@ void syncAllRegs() {
 
 /**
  * @brief Looks through all physical registers and determines what is used
- * @param outScratchRegisters is a set that is updated with the unused physical
- * registers
+ * @param outFreeRegisters is a set that is updated with the unused physical registers
  */
 void findFreeRegisters(std::set<PhysicalReg> & outFreeRegisters) {
     // Go through all GPs
@@ -764,6 +763,7 @@ BasicBlock * dvmCompilerArchSpecificNewBB() {
  * @param cUnit the CompilationUnit
  * @param bb the BasicBlock
  * @param file the File in which to dump the BasicBlock
+ * @param beforeMIRs whether this is being called before the MIRs or not
  */
 void dvmCompilerDumpArchSpecificBB(CompilationUnit *cUnit, BasicBlock *bb,
         FILE *file, bool beforeMIRs) {
@@ -860,11 +860,12 @@ static void parseBlock (CompilationUnit *cUnit, BasicBlock *bb)
     handleRegisterizationPrework (cUnit, bb);
 }
 
-/** @brief Pre-process BasicBlocks
- * @detail The function registers the BasicBlock in the method_bbs_sorted
-   It checks the number of BasicBlocks can be handled by the back-end
-   It then also collects information about the BasicBlock such as virtual register usage
-   Finally, it parses the block to perform some pre-code generation tasks
+/** 
+ * @brief Pre-process BasicBlocks
+ * @details The function registers the BasicBlock in the method_bbs_sorted
+ *  It checks the number of BasicBlocks can be handled by the back-end
+ *  It then also collects information about the BasicBlock such as virtual register usage
+ *  Finally, it parses the block to perform some pre-code generation tasks
  * @param cUnit the BasicBlock
  * @param bb the BasicBlock
  * @return -1 if error happened, 0 otherwise
@@ -1578,7 +1579,7 @@ int mergeEntry2(BasicBlock_O1* bb) {
 }
 
 //! \brief update reaching defs for infoBasicBlock[indexToA]
-//! \detail use currentInfo.reachingDefs to update reaching defs for variable A
+//! \details use currentInfo.reachingDefs to update reaching defs for variable A
 //! \param indexToA Index of variable A
 //! \param isBPartiallyOverlapA the type of overlap
 //! \return -1 if error, 0 otherwise
@@ -1693,8 +1694,8 @@ static int updateReachingDefA(int indexToA, OverlapCase isBPartiallyOverlapA) {
 }
 
 //! \brief updateReachingDefB1
-//! \detail Given a variable B @currentInfo, updates its reaching defs
-//! by checking reaching defs of variable A @currentBB->infoBasicBlock[indexToA]
+//! \details Given a variable B in currentInfo, updates its reaching defs
+//! by checking reaching defs of variable A in currentBB->infoBasicBlock[indexToA]
 //! The result is stored in tmpInfo.reachingDefs
 //! \param indexToA Index of variable A
 //! \return -1 if error, 0 otherwise
@@ -1852,7 +1853,7 @@ void updateDefUseTable() {
 }
 
 //! \brief insertAUse
-//! \detail Insert a use at offsetPC of given variable at end of DefUsePair
+//! \details Insert a use at offsetPC of given variable at end of DefUsePair
 //! \param ptr The DefUsePair
 //! \param offsetPC
 //! \param regNum
@@ -1886,7 +1887,7 @@ RegAccessType insertAUse(DefUsePair* ptr, int offsetPC, int regNum, LowOpndRegTy
 }
 
 //! \brief insertADef
-//! \detailsinsert a def to currentBB->defUseTable
+//! \details insert a def to currentBB->defUseTable
 //! update currentBB->defUseTail if necessary
 //! \param offsetPC
 //! \param regNum
@@ -2243,7 +2244,7 @@ int updateXferPoints(void) {
 
 /* @brief update memVRTable[].ranges by browsing the defUseTable
  *
- * @detail each virtual register has a list of live ranges, and
+ * @details each virtual register has a list of live ranges, and
  * each live range has a list of PCs that access the VR
  *
  * @return -1 if error happened, 0 otherwise
@@ -2322,7 +2323,7 @@ static int updateLiveTable(void) {
 /* @brief Add a live range [rangeStart, rangeEnd] to ranges of memVRTable,
  * merge to existing live ranges if necessary
  *
- * @detail ranges are in increasing order of startPC
+ * @details ranges are in increasing order of startPC
  *
  * @param tableIndex index into memVRTable
  * @param rangeStart start of live range
@@ -5303,7 +5304,7 @@ bool isGlueHandled(int glue_reg) {
 //!
 //! \details reset the state of a glue variable to not existent
 //!  (not in physical register nor spilled)
-//! \param reg
+//! \param glue_reg the register to reset
 //!
 //! \return -1 if error happened, 0 otherwise
 int resetGlue(int glue_reg) {
diff --git a/vm/compiler/codegen/x86/AnalysisO1.h b/vm/compiler/codegen/x86/AnalysisO1.h
index a9b2610..6c0dcb0 100644
--- a/vm/compiler/codegen/x86/AnalysisO1.h
+++ b/vm/compiler/codegen/x86/AnalysisO1.h
@@ -15,7 +15,7 @@
  */
 
 
-/*! \file ncg_o1_data.h
+/*! \file AnalysisO1.h
     \brief A header file to define data structures used by register allocator & const folding
 */
 #ifndef _DALVIK_NCG_ANALYSISO1_H
diff --git a/vm/compiler/codegen/x86/BytecodeVisitor.cpp b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
index 9232edc..ca72e50 100644
--- a/vm/compiler/codegen/x86/BytecodeVisitor.cpp
+++ b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
@@ -3126,10 +3126,13 @@ int getVirtualRegInfo(VirtualRegInfo* infoArray, const MIR * currentMIR) {
     }
     return codeSize;
 }
+
 /**
  * @brief Updates infoArray(TempRegInfo) with temporaries accessed by INVOKE_NO_RANGE type
  * @details Allocates both XMM and gp registers for INVOKE_(VIRTUAL,DIRECT,STATIC,INTERFACE,SUPER)
- * @param infoArray, startIndex of infoArray, currentMIR
+ * @param infoArray the array to be filled
+ * @param startIndex the start index of infoArray
+ * @param currentMIR the instruction we are looking at
  * @return j the new index of infoArray
  */
 int updateInvokeNoRange(TempRegInfo* infoArray, int startIndex, const MIR * currentMIR) {
diff --git a/vm/compiler/codegen/x86/CodegenInterface.cpp b/vm/compiler/codegen/x86/CodegenInterface.cpp
index 03cee3f..c324738 100644
--- a/vm/compiler/codegen/x86/CodegenInterface.cpp
+++ b/vm/compiler/codegen/x86/CodegenInterface.cpp
@@ -1721,6 +1721,7 @@ void addNewToConstList(struct ConstInfo** listPtr, int constL, int constH, int r
  * @param constH the higher 32bits
  * @param reg Virtual Register number
  * @param patchAddr The address of memory location to be patched currently
+ * @param offset the offset where to save the constant
  * @return true when it succeeds, false when it fails
  */
 bool saveAddrToConstList(struct ConstInfo** listPtr, int constL, int constH, int reg, char* patchAddr, int offset) {
diff --git a/vm/compiler/codegen/x86/Lower.cpp b/vm/compiler/codegen/x86/Lower.cpp
index 6dec068..0de3c8d 100644
--- a/vm/compiler/codegen/x86/Lower.cpp
+++ b/vm/compiler/codegen/x86/Lower.cpp
@@ -438,10 +438,10 @@ ExecutionMode origMode;
  * @brief Lowers bytecode to native code
  * @param method parent method of trace
  * @param mir bytecode representation
+ * @param dalvikPC the program counter of the instruction
  * @return true when NOT handled and false when it IS handled
  */
-bool lowerByteCodeJit(const Method* method, const MIR * mir,
-        const u2 * dalvikPC) {
+bool lowerByteCodeJit(const Method* method, const MIR * mir, const u2 * dalvikPC) {
     int retCode = lowerByteCodeCanThrowCheck(method, mir, dalvikPC);
     freeShortMap();
     if(retCode >= 0) return false; //handled
@@ -569,11 +569,13 @@ int lowerByteCodeCanThrowCheck(const Method* method, const MIR * mir, const u2 *
     }
     return retCode;
 }
+
 /**
  * @brief Generates native code for the bytecode.
  * @details May update code stream.
  * @param method parent method of trace
  * @param mir bytecode representation
+ * @param dalvikPC the program counter of the instruction
  * @return 0 or greater when handled
  */
 int lowerByteCode(const Method* method, const MIR * mir, const u2 * dalvikPC) {
diff --git a/vm/compiler/codegen/x86/LowerGetPut.cpp b/vm/compiler/codegen/x86/LowerGetPut.cpp
index e799708..3883c79 100644
--- a/vm/compiler/codegen/x86/LowerGetPut.cpp
+++ b/vm/compiler/codegen/x86/LowerGetPut.cpp
@@ -1060,9 +1060,9 @@ int op_iget(const MIR * mir) {
 }
 
 /**
- * @brief Generate native code for bytecodes iget-wide
- * and iget-wide/volatile
+ * @brief Generate native code for bytecodes iget-wide and iget-wide/volatile
  * @param mir bytecode representation
+ * @param isVolatile is the iget a volatile access or not?
  * @return value >= 0 when handled
  */
 int op_iget_wide(const MIR * mir, bool isVolatile) {
@@ -1155,9 +1155,9 @@ int op_iput(const MIR * mir) {
 }
 
 /**
- * @brief Generate native code for bytecodes iput-wide
- * and iput-wide/volatile
+ * @brief Generate native code for bytecodes iput-wide and iput-wide/volatile
  * @param mir bytecode representation
+ * @param isVolatile is the iput a volatile access or not?
  * @return value >= 0 when handled
  */
 int op_iput_wide(const MIR * mir, bool isVolatile) {
@@ -1172,8 +1172,7 @@ int op_iput_wide(const MIR * mir, bool isVolatile) {
 }
 
 /**
- * @brief Generate native code for bytecodes iput-object
- * and iput-object/volatile
+ * @brief Generate native code for bytecodes iput-object and iput-object/volatile
  * @param mir bytecode representation
  * @return value >= 0 when handled
  */
@@ -1445,8 +1444,7 @@ int sget_sput_common(StaticAccess flag, int vA, u2 referenceIndex, bool isObj,
 #undef P_GPR_3
 
 /**
- * @brief Generate native code for bytecodes sget, sget-boolean,
- * sget-byte, sget-char, sget-object, sget-short, sget/volatile and sget-object/volatile
+ * @brief Generate native code for bytecodes sget, sget-boolean, sget-byte, sget-char, sget-object, sget-short, sget/volatile and sget-object/volatile
  * @param mir bytecode representation
  * @return value >= 0 when handled
  */
@@ -1466,9 +1464,9 @@ int op_sget(const MIR * mir) {
 }
 
 /**
- * @brief Generate native code for bytecodes sget-wide
- * and sget-wide/volatile
+ * @brief Generate native code for bytecodes sget-wide and sget-wide/volatile
  * @param mir bytecode representation
+ * @param isVolatile is the sget a volatile access or not?
  * @return value >= 0 when handled
  */
 int op_sget_wide(const MIR * mir, bool isVolatile) {
@@ -1482,8 +1480,7 @@ int op_sget_wide(const MIR * mir, bool isVolatile) {
 }
 
 /**
- * @brief Generate native code for bytecodes sget-object and
- * sget-object/volatile
+ * @brief Generate native code for bytecodes sget-object and sget-object/volatile
  * @param mir bytecode representation
  * @return value >= 0 when handled
  */
@@ -1537,6 +1534,7 @@ int op_sget_short(const MIR * mir) {
  * @brief Generate native code for bytecodes sput, sput-boolean,
  * sput-byte, sput-char, sput-object, sput-short, sput/volatile and sput-object/volatile
  * @param mir bytecode representation
+ * @param isObj is the store an object?
  * @return value >= 0 when handled
  */
 int op_sput(const MIR * mir, bool isObj) {
@@ -1558,6 +1556,7 @@ int op_sput(const MIR * mir, bool isObj) {
  * @brief Generate native code for bytecodes sput-wide
  * and sput-wide/volatile
  * @param mir bytecode representation
+ * @param isVolatile is the sput a volatile access or not?
  * @return value >= 0 when handled
  */
 int op_sput_wide(const MIR * mir, bool isVolatile) {
diff --git a/vm/compiler/codegen/x86/LowerHelper.cpp b/vm/compiler/codegen/x86/LowerHelper.cpp
index 5bb10db..a795123 100644
--- a/vm/compiler/codegen/x86/LowerHelper.cpp
+++ b/vm/compiler/codegen/x86/LowerHelper.cpp
@@ -1800,13 +1800,12 @@ void alu_binary_imm_reg(OpndSize size, ALU_Opcode opc, int imm, int reg, bool is
  * @details Only for 32-bit integers for now
  * @param size The Operand size (Only 32-bit currently)
  * @param opc The alu operation to perform (add or subtract)
- * @param sourceVR The source VR to fetch
+ * @param srcVR The source VR to fetch
  * @param destVR The destination VR to set
  * @param imm The literal value to be added to VR value
  * @param tempReg A temporary register
  * @param isTempPhysical Whether the tempReg is physical
- * @return whether we were successful. If false, caller needs to perform
- *         get_VR, alu_op, set_VR separately
+ * @return whether we were successful. If false, caller needs to perform get_VR, alu_op, set_VR separately
  */
 bool alu_imm_to_VR(OpndSize size, ALU_Opcode opc, int srcVR, int destVR, int imm, int tempReg, bool isTempPhysical) {
     const LowOpndRegType pType = getTypeFromIntSize(size); //gp or xmm
diff --git a/vm/compiler/codegen/x86/LowerJump.cpp b/vm/compiler/codegen/x86/LowerJump.cpp
index 644329d..8b0008c 100644
--- a/vm/compiler/codegen/x86/LowerJump.cpp
+++ b/vm/compiler/codegen/x86/LowerJump.cpp
@@ -516,9 +516,9 @@ OpndSize estOpndSizeFromImm(int target) {
 #endif
     return OpndSize_32;
 }
+
 /*!
 \brief return size of a jump or call instruction
-
 */
 unsigned getJmpCallInstSize(OpndSize size, JmpCall_type type) {
     if(type == JmpCall_uncond) {
@@ -542,9 +542,10 @@ unsigned getJmpCallInstSize(OpndSize size, JmpCall_type type) {
     }
     return 0;
 }
+
 //! \brief Get the offset given a jump target
 //!
-//! \detail check whether a branch target is already handled if yes, return the
+//! \details check whether a branch target is already handled if yes, return the
 //! size of the immediate; otherwise, call insertShortWorklist or insertLabelWorklist.
 //!
 //! If the branch target is not handled, call insertShortWorklist or insertLabelWorklist
@@ -728,7 +729,7 @@ void unconditional_jump_int(int target, OpndSize size) {
 //! This should only be used when instruction scheduling is enabled.
 //! \param cc type of conditional jump
 //! \param targetBlockId id of MIR basic block
-//! \param immediateNeedsAlignedWhether the immediate needs to be aligned
+//! \param immediateNeedsAligned Whether the immediate needs to be aligned
 //! within 16-bytes
 void conditional_jump_block(ConditionCode cc, int targetBlockId,
         bool immediateNeedsAligned) {
@@ -918,11 +919,13 @@ void freeNCGWorklist() {
 
 /*!
 \brief used by bytecode SWITCH
+\param targetPC points to start of the data section
+\param codeInst the code instruction pointer
+\return the offset in native code between add_reg_reg and the data section
 
-targetPC points to start of the data section
 Code sequence for SWITCH
   call ncgGetEIP
-  @codeInst: add_reg_reg %eax, %edx
+  codeInst: add_reg_reg %eax, %edx
   jump_reg %edx
 This function returns the offset in native code between add_reg_reg and the data section
 */
@@ -932,11 +935,11 @@ int getRelativeNCGForSwitch(int targetPC, char* codeInst) {
     int relativeOff = tmpNCG - offsetNCG2;
     return relativeOff;
 }
+
 /*!
 \brief work on methodDataWorklist
-
 */
-int performDataWorklist() {
+int performDataWorklist(void) {
     DataWorklist* ptr = methodDataWorklist;
     if(ptr == NULL) return 0;
 
diff --git a/vm/compiler/codegen/x86/RegisterizationBE.cpp b/vm/compiler/codegen/x86/RegisterizationBE.cpp
index 0634892..824eb2d 100644
--- a/vm/compiler/codegen/x86/RegisterizationBE.cpp
+++ b/vm/compiler/codegen/x86/RegisterizationBE.cpp
@@ -377,7 +377,7 @@ bool AssociationTable::syncCompileTableWithAssociations(AssociationTable & assoc
 
 /**
  * @brief Initialization for satisfyBBAssociations helper: sets up most parameters
- * @param associationToUse the association to compare ourselves with
+ * @param associationsToUse the association to compare ourselves with
  * @param otherVRToPhysicalReg what is the associationsToUse having as associations (updated by the function)
  * @param otherVRs what VRs is the associationsToUse using (updated by the function)
  * @param currentVRToPhysicalReg what is the current association state between VRs to Physical ((updated by the function))
diff --git a/vm/compiler/codegen/x86/RegisterizationBE.h b/vm/compiler/codegen/x86/RegisterizationBE.h
index 8c161a2..577b4d3 100644
--- a/vm/compiler/codegen/x86/RegisterizationBE.h
+++ b/vm/compiler/codegen/x86/RegisterizationBE.h
@@ -138,14 +138,12 @@ public:
     void printToDot(FILE * file);
 
     /**
-     * @typedef Random access const iterator. This does not modify
-     * structure it is iterating.
+     * @brief Random access const iterator. This does not modify structure it is iterating.
      */
     typedef std::map<int, compileTableEntry>::const_iterator const_iterator;
 
     /**
-     * @typedef Random access iterator. This may modify structure it
-     * is iterating.
+     * @brief Random access iterator. This may modify structure it is iterating.
      */
     typedef std::map<int, compileTableEntry>::iterator iterator;
 
diff --git a/vm/compiler/codegen/x86/Scheduler.cpp b/vm/compiler/codegen/x86/Scheduler.cpp
index b2495ea..5bcadaf 100644
--- a/vm/compiler/codegen/x86/Scheduler.cpp
+++ b/vm/compiler/codegen/x86/Scheduler.cpp
@@ -85,7 +85,7 @@ inline const char * getIssuePort(IssuePort port) {
 }
 #endif
 
-//! \def MachineModelEntry
+//! \class MachineModelEntry
 //! \brief Information needed to define the machine model for each x86 mnemonic.
 struct MachineModelEntry {
     //! \brief which port the instruction can execute on
@@ -597,7 +597,7 @@ bool Scheduler::isQueueEmpty() const {
 //! \param regNum is a number corresponding to a physical register or a Dalvik
 //! virtual register. When physical, this is of enum type PhysicalReg.
 //! \param defuse definition, usage, or both
-//! \param edgeLatency Weight to use on the edge.
+//! \param causeOfLatency Weight to use on the edge.
 //! \param op LIR for which to update dependencies
 void Scheduler::updateDependencyGraph(UseDefEntryType type, int regNum,
         LowOpndDefUse defuse, LatencyBetweenNativeInstructions causeOfLatency,
@@ -1979,6 +1979,7 @@ void Scheduler::printStatistics(bool prescheduling) {
 //! \brief Prints dependency graph in dot format
 //! \details Creates dot files in /data/local/tmp with every basic block
 //! that has been scheduled.
+//! \param directoryPath the path to the directory
 //! \param dgfilename Name to use for dot file created
 //! \param startStream The pointer to the start of code cache stream where
 //! the basic block has been encoded
diff --git a/vm/compiler/codegen/x86/StackExtensionX86.cpp b/vm/compiler/codegen/x86/StackExtensionX86.cpp
index d32198b..94f6dc8 100644
--- a/vm/compiler/codegen/x86/StackExtensionX86.cpp
+++ b/vm/compiler/codegen/x86/StackExtensionX86.cpp
@@ -28,11 +28,10 @@ unsigned int dvmArchSpecGetNumberOfScratch (void)
 
 /**
  * @brief Given a stratch register index, it gives the VR register number.
- * @param idx Index of scratch register. Must be in range [0 .. N-1] where
- * N is the maximum number of scratch registers available.
  * @param method Method that contains the MIR for which we want to
  * use scratch register.
- * @param regnum virtual register number (modified by function)
+ * @param idx Index of scratch register. Must be in range [0 .. N-1] where
+ * N is the maximum number of scratch registers available.
  * @return Return virtual register number when it finds one for the index.
  * Otherwise, it returns -1.
  */
diff --git a/vm/compiler/codegen/x86/StackExtensionX86.h b/vm/compiler/codegen/x86/StackExtensionX86.h
index 5b976e7..2df5657 100644
--- a/vm/compiler/codegen/x86/StackExtensionX86.h
+++ b/vm/compiler/codegen/x86/StackExtensionX86.h
@@ -24,8 +24,7 @@ class StackTemporaries
 {
 public:
     /**
-     * @brief Gives the total number of scratch VRs available for
-     * every frame.
+     * @brief Gives the total number of scratch VRs available for every frame.
      * @return Maximum number of scratch VRs.
      */
     static unsigned int getTotalScratchVRs (void)
diff --git a/vm/compiler/codegen/x86/libenc/enc_base.h b/vm/compiler/codegen/x86/libenc/enc_base.h
index 14cdb4c..e88443f 100644
--- a/vm/compiler/codegen/x86/libenc/enc_base.h
+++ b/vm/compiler/codegen/x86/libenc/enc_base.h
@@ -108,7 +108,7 @@ public:
     static bool extAllowed(OpndExt opndExt, OpndExt instExt);
 
     /**
-     * @brief Returns #MnemonicDesc by the given Mnemonic.
+     * @brief Returns MnemonicDesc by the given Mnemonic.
      */
     static const MnemonicDesc * getMnemonicDesc(Mnemonic mn)
     {
diff --git a/vm/compiler/codegen/x86/libenc/enc_defs.h b/vm/compiler/codegen/x86/libenc/enc_defs.h
index ac0bb3b..2f12377 100644
--- a/vm/compiler/codegen/x86/libenc/enc_defs.h
+++ b/vm/compiler/codegen/x86/libenc/enc_defs.h
@@ -685,11 +685,11 @@ inline bool isRegKind(OpndKind kind)
 }
 
 /**
- * @brief Returns #RegName for a given name.
+ * @brief Returns RegName for a given name.
  *
  * Name is case-insensitive.
  * @param regname - string name of a register
- * @return #RegName for the given name, or #RegName_Null if name is invalid
+ * @return RegName for the given name, or RegName_Null if name is invalid
  */
 RegName         getRegName(const char * regname);
 /**
@@ -707,14 +707,14 @@ inline unsigned getRegMask(RegName reg)
     return 1<<(reg&0xff);
 }
 /**
- * @brief Extracts #RegKind from the #RegName.
+ * @brief Extracts OpndKind from the RegName.
  */
 inline OpndKind getRegKind(RegName reg)
 {
     return (OpndKind)(reg>>24);
 }
 /**
- * @brief Extracts #OpndSize from #RegName.
+ * @brief Extracts OpndSize from RegName.
  */
 inline OpndSize getRegSize(RegName reg)
 {
diff --git a/vm/reflect/Annotation.cpp b/vm/reflect/Annotation.cpp
index 942027c..24e9c0b 100644
--- a/vm/reflect/Annotation.cpp
+++ b/vm/reflect/Annotation.cpp
@@ -2272,6 +2272,7 @@ bool dvmEncodedArrayIteratorHasNext(const EncodedArrayIterator* iterator) {
  * The caller must call dvmReleaseTrackedAlloc() on any returned reference.
  *
  * @param value pointer to store decoded value into
+ * @param iterator the iterator
  * @returns true if a value was decoded and the cursor advanced; false if
  * the last value had already been decoded or if there was a problem decoding
  */
diff --git a/vm/reflect/Reflect.h b/vm/reflect/Reflect.h
index 21bb08d..c76e300 100644
--- a/vm/reflect/Reflect.h
+++ b/vm/reflect/Reflect.h
@@ -254,6 +254,7 @@ bool dvmEncodedArrayIteratorHasNext(const EncodedArrayIterator* iterator);
  * The caller must call dvmReleaseTrackedAlloc() on any returned reference.
  *
  * @param value pointer to store decoded value into
+ * @param iterator the iterator
  * @returns true if a value was decoded and the cursor advanced; false if
  * the last value had already been decoded or if there was a problem decoding
  */
-- 
1.7.4.1

