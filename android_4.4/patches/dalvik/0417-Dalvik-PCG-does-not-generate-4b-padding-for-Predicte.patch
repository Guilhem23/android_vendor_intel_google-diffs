From 19bb7697bba7e288c164b04f7d06dd4954db8bd5 Mon Sep 17 00:00:00 2001
From: Yevgeny Rouban <yevgeny.y.rouban@intel.com>
Date: Tue, 26 Nov 2013 18:23:03 +0700
Subject: Dalvik: PCG does not generate 4b padding for Predicted Chain Cells

BZ: 154222

Emitting predicted chaining cells PCG does not align them by 4 bytes as expected
by dvmJitUnchain, which is used by both LCG and PCG. This may cause incorrect
Chain Cell iteration over Predicted and Backward Branch chain cells in dvmJitUnchain.

The fix just adds allignment adjustment to the PCG's function
dvmCompilerPcgEmitPredictedChainingCell

Change-Id: I16e49f0570f0e1eb0b809b92d2ada6565aec0c90
Category: device enablement
Domain: AOSP.Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, need rework
Signed-off-by: Yevgeny Rouban <yevgeny.y.rouban@intel.com>
---
 .../codegen/x86/pcg/ChainingCellException.cpp      |   13 +++++++++----
 1 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/vm/compiler/codegen/x86/pcg/ChainingCellException.cpp b/vm/compiler/codegen/x86/pcg/ChainingCellException.cpp
index 1613a6a..815a47d 100644
--- a/vm/compiler/codegen/x86/pcg/ChainingCellException.cpp
+++ b/vm/compiler/codegen/x86/pcg/ChainingCellException.cpp
@@ -167,8 +167,6 @@ static uint8_t* dvmCompilerPcgEmitPredictedChainingCell (CompilationUnitPCG *cUn
                                               uint8_t *currCachePtr,
                                               size_t freeSpace)
 {
-    const uint8_t *cellBegin = currCachePtr;
-
     // First thing we should check whether there is a reference to our chaining cell
     const CRelocation *relocation = cUnit->findRelocation (blockSymbol);
     if (relocation == 0)
@@ -177,13 +175,20 @@ static uint8_t* dvmCompilerPcgEmitPredictedChainingCell (CompilationUnitPCG *cUn
         return currCachePtr;
     }
 
+    unsigned alignment = (4 - ((u4) currCachePtr & 3)) & 3;
+
     // Make sure we don't overflow the code cache
-    if (freeSpace < PREDICTED_CC_SIZE)
+    if (freeSpace < PREDICTED_CC_SIZE + alignment)
     {
         cUnit->errorHandler->setError (kJitErrorCodeCacheFull);
         return 0;
     }
 
+    // 4-byte align the start of the cell
+    currCachePtr += alignment;
+
+    const uint8_t *cellBegin = currCachePtr;
+
     if (cUnit->checkDebugMask (DebugMaskBytecode) == true)
     {
         ALOGI ("LOWER InvokePredictedChainingCell at offsetPC @%p\n", currCachePtr);
@@ -201,7 +206,7 @@ static uint8_t* dvmCompilerPcgEmitPredictedChainingCell (CompilationUnitPCG *cUn
     intStream[3] = PREDICTED_CHAIN_METHOD_INIT;
     // Rechain count. The initial value of 0 here will trigger chaining upon the first invocation of this callsite.
     intStream[4] = PREDICTED_CHAIN_COUNTER_INIT;
-    currCachePtr += 20;
+    currCachePtr += PREDICTED_CC_SIZE;
 
     if (cUnit->checkDebugMask (DebugMaskBytecode) == true)
     {
-- 
1.7.4.1

