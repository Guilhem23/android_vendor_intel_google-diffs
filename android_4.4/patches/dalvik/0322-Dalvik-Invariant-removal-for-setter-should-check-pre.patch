From 81627f61ca463e731acbedeacf5b5b40c77e48fa Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Thu, 29 Aug 2013 15:34:04 +0700
Subject: Dalvik: Invariant removal for setter should check previous setters

BZ:131484

Invariant removal is able to hoist the setter. However it should be aware
about previous setters to the same memory location. If by some reason the first
setter to the same memory location is not selected to be hoisted then we cannot
hoist the second one because otherwise the last value of this memory will be the
first one (as it is updated in a loop) while it should be the second one.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Idf9f7e9d0e601b739684e36d50ca641412ff2d51
Orig-MCG-Change-Id: I105962e2e49382ed9937b382b070cd747320867b
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Reviewed-on: http://android.intel.com:8080/129711
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Petrochenko, Dmitry <dmitry.petrochenko@intel.com>
Reviewed-by: Provodin, Vitaly A <vitaly.a.provodin@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 vm/compiler/InvariantRemoval.cpp |   31 +++++++++++++++++++++++++++----
 1 files changed, 27 insertions(+), 4 deletions(-)

diff --git a/vm/compiler/InvariantRemoval.cpp b/vm/compiler/InvariantRemoval.cpp
index f06112b..96084c6 100644
--- a/vm/compiler/InvariantRemoval.cpp
+++ b/vm/compiler/InvariantRemoval.cpp
@@ -29,12 +29,15 @@
 
 /**
  * @brief Are the uses of the MIR instruction all defined in the chosen map
+ * @details For setter we also need to check whether all accesses to the same memory
+ * were also in chosen map because memory is also some kind of use for MIR
  * @param cUnit the CompilationUnit
  * @param chosen the chosen map, the MIRs that have been chosen to be hoisted
  * @param mir the MIR instruction we care about
+ * @param isSetter whether the MIR instruction is setter
  * @return whether all of mir's uses' definitions are in chosen
  */
-static bool usesAreInChosen (CompilationUnit *cUnit, std::map<MIR *, bool> &chosen, MIR *mir)
+static bool usesAreInChosen (CompilationUnit *cUnit, std::map<MIR *, bool> &chosen, MIR *mir, bool isSetter)
 {
     //Go through the ssa
     SSARepresentation *ssaRep = mir->ssaRep;
@@ -63,6 +66,22 @@ static bool usesAreInChosen (CompilationUnit *cUnit, std::map<MIR *, bool> &chos
         }
     }
 
+    //If it is a setter we need to ensure that all previous accesses (in reality setters)
+    //to the same memory location are also chosen. We do it by iterating previous MIRs with
+    //the same color (instructions potentially working with the same area).
+    if (isSetter == true)
+    {
+        for (MIR *prev = mir->color.prev; prev != 0; prev = prev->color.prev)
+        {
+            //It must be in the chosen
+            if (chosen.find (prev) == chosen.end ())
+            {
+                //Wasn't there when we looked for it
+                return false;
+            }
+        }
+    }
+
     return true;
 }
 
@@ -128,8 +147,11 @@ static bool findInvariantsInPeelHelper (CompilationUnit *cUnit, BasicBlock *bb)
         //Is it an invariant
         if (mir->invariant == true)
         {
-            //Also do not take it if any of its define is not in the chosen or in the loop
-            if (usesAreInChosen (cUnit, chosen, mir) == true)
+            //Also do not take it if any of its use is not in the chosen
+            //For setters we need to check whether all previous accesses to this
+            //memory are also in chosen.
+            bool isSetter = (dfFlags & DF_IS_SETTER) != 0;
+            if (usesAreInChosen (cUnit, chosen, mir, isSetter) == true)
             {
                 selection->push_back (mir);
                 chosen[mir] = true;
@@ -396,7 +418,8 @@ static void hoistInvariants (CompilationUnit *cUnit, LoopInformation *loopInfo,
         MIR *peeledMir = *iter;
 
         //If we didn't hoist the instruction's dependencies, we are done
-        if (usesAreInChosen (cUnit, chosen, peeledMir) == false)
+        bool isSetter = (dvmCompilerDataFlowAttributes[peeledMir->dalvikInsn.opcode] & DF_IS_SETTER) != 0;
+        if (usesAreInChosen (cUnit, chosen, peeledMir, isSetter) == false)
         {
             continue;
         }
-- 
1.7.4.1

