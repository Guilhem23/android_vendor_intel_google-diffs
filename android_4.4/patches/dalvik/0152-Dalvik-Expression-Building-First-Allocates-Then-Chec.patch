From 366293c9fcc1dbb623a92195b518862f955625d7 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Wed, 24 Apr 2013 10:44:27 -0700
Subject: Dalvik: Expression Building First Allocates Then Checks

BZ: 103318

The expression building sometimes allocates and then checks if there is an
  issue. This results in a risk of allocation without use.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I5312d1d9de5365138731ea87ad94aafa41c04641
Orig-MCG-Change-Id: I49a2eba87d6aa2dd89f91af98c0ad3bf137ea603
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/Expression.cpp |   32 ++++++++++++++++----------------
 1 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/vm/compiler/Expression.cpp b/vm/compiler/Expression.cpp
index 776d638..3c3ff75 100644
--- a/vm/compiler/Expression.cpp
+++ b/vm/compiler/Expression.cpp
@@ -499,18 +499,18 @@ BinaryExpression * BinaryExpression::newExpression (MIR * mir,
         VirtualRegister * assignTo, Expression * lhs, Expression * rhs,
         ExpressionKind expKind, ExpressionType expType)
 {
-    //Create space for the expression
-    void * space = dvmCompilerNew (sizeof(BinaryExpression), false);
-
     //If we don't have all parts of expression, we cannot create it
     if (mir == 0 || assignTo == 0 || lhs == 0 || rhs == 0)
     {
         return 0;
     }
 
+    //Create space for the expression
+    BinaryExpression *result = 0;
+    void * space = dvmCompilerNew (sizeof (*result), false);
+
     //Call constructor
-    BinaryExpression * result = new (space) BinaryExpression (assignTo, lhs,
-            rhs, expKind, expType, mir);
+    result = new (space) BinaryExpression (assignTo, lhs, rhs, expKind, expType, mir);
 
     return result;
 }
@@ -519,18 +519,18 @@ UnaryExpression * UnaryExpression::newExpression (MIR * mir,
         VirtualRegister * assignTo, Expression * operand,
         ExpressionKind expKind, ExpressionType expType)
 {
-    //Create space for the expression
-    void * space = dvmCompilerNew (sizeof(UnaryExpression), false);
-
     //If we don't have all parts of expression, we cannot create it
     if (mir == 0 || assignTo == 0 || operand == 0)
     {
         return 0;
     }
 
+    //Create space for the expression
+    UnaryExpression *result = 0;
+    void * space = dvmCompilerNew (sizeof (*result), false);
+
     //Call constructor
-    UnaryExpression * result = new (space) UnaryExpression (assignTo, operand,
-            expKind, expType, mir);
+    result = new (space) UnaryExpression (assignTo, operand, expKind, expType, mir);
 
     return result;
 }
@@ -538,10 +538,10 @@ UnaryExpression * UnaryExpression::newExpression (MIR * mir,
 ConstantExpression * ConstantExpression::newExpression (int32_t lowInitialValue,
         int32_t highInitialValue, bool wide)
 {
-    //Create space for a new constant
-    void * space = dvmCompilerNew (sizeof(ConstantExpression), false);
+    ConstantExpression *result = 0;
 
-    ConstantExpression * result;
+    //Create space for a new constant
+    void * space = dvmCompilerNew (sizeof (*result), false);
 
     //Call constructor using given initial value
     if (wide == false)
@@ -561,10 +561,10 @@ Expression * VirtualRegister::convertToVR (
         std::map<VirtualRegister *, Expression *> * vrToExpression,
         int lowSsaReg, int highSsaReg, bool wide)
 {
-    //Create space for a VR
-    void * space = dvmCompilerNew (sizeof(VirtualRegister), false);
+    VirtualRegister *result = 0;
 
-    VirtualRegister * result = 0;
+    //Create space for a VR
+    void * space = dvmCompilerNew (sizeof (*result), false);
 
     //Call constructor
     if (wide == false)
-- 
1.7.4.1

