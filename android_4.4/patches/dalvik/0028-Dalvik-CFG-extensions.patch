From c0e183dcd59d4fd566492663c5b4d8044b653349 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Fri, 2 Nov 2012 10:16:39 -0700
Subject: Dalvik: CFG - extensions

BZ: 65936

1) Fixed the extended MIR printout for the CFG dumping:
   - Used the enum names as a normalized name printout for the extended MIR printouts

2) Using the BasicBlock IDs instead of offset
   - BB ids being unique rather than the offset which is not

3) Corrected the use of vC instead of vB for the print out of the Inline Prediction node

4) Added a jump statement in the CFG if the Fallthrough requires it
   - helps understand which are real fallthroughs, which are not

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Id55a23810afa626094127504240866da4f6e6000
Orig-MCG-Change-Id: I5bdcf985c76937fbed45412ef26147b012759c49
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/Dataflow.cpp |   22 ++++++++--------
 vm/compiler/Frontend.cpp |   63 ++++++++++++++++++++++++---------------------
 vm/compiler/Utility.cpp  |   26 ++++++++++++++-----
 3 files changed, 64 insertions(+), 47 deletions(-)

diff --git a/vm/compiler/Dataflow.cpp b/vm/compiler/Dataflow.cpp
index 759f39e..c7bb892 100644
--- a/vm/compiler/Dataflow.cpp
+++ b/vm/compiler/Dataflow.cpp
@@ -966,7 +966,7 @@ void dvmCompilerExtendedDisassembler (const CompilationUnit *cUnit,
         case kMirOpPhi:
             {
                 //Start by putting PHI
-                snprintf (buffer, len, "PHI");
+                snprintf (buffer, len, "kMirOpPhi");
 
                 if (cUnit != NULL && mir != NULL && mir->ssaRep != NULL)
                 {
@@ -1003,7 +1003,7 @@ void dvmCompilerExtendedDisassembler (const CompilationUnit *cUnit,
         case kMirOpNullNRangeUpCheck:
             if (cUnit != NULL && mir != NULL && mir->ssaRep != NULL)
             {
-                snprintf (buffer, len, "Null/Range Up Check: %s[%s], cond reg %s, m: %d, M: %d, b: %d",
+                snprintf (buffer, len, "kMirOpNullNRangeUpCheck: %s[%s], cond reg %s, m: %d, M: %d, b: %d",
                         getSSAName (cUnit, insn->vA, operand0),
                         getSSAName (cUnit, insn->vB, operand1),
                         getSSAName (cUnit, insn->vC, operand2),
@@ -1013,7 +1013,7 @@ void dvmCompilerExtendedDisassembler (const CompilationUnit *cUnit,
             }
             else
             {
-                snprintf (buffer, len, "Null/Range Up Check: v%d[v%d], cond reg v%d, m: %d, M: %d, b: %d",
+                snprintf (buffer, len, "kMirOpNullNRangeUpCheck: v%d[v%d], cond reg v%d, m: %d, M: %d, b: %d",
                         insn->vA,
                         insn->vB,
                         insn->vC,
@@ -1025,7 +1025,7 @@ void dvmCompilerExtendedDisassembler (const CompilationUnit *cUnit,
         case kMirOpNullNRangeDownCheck:
             if (cUnit != NULL && mir != NULL && mir->ssaRep != NULL)
             {
-                snprintf (buffer, len, "Null/Range Down Check: %s[%s], cond reg %s, m: %d, M: %d, b: %d",
+                snprintf (buffer, len, "kMirOpNullNRangeDownCheck: %s[%s], cond reg %s, m: %d, M: %d, b: %d",
                         getSSAName (cUnit, insn->vA, operand0),
                         getSSAName (cUnit, insn->vB, operand1),
                         getSSAName (cUnit, insn->vC, operand2),
@@ -1035,7 +1035,7 @@ void dvmCompilerExtendedDisassembler (const CompilationUnit *cUnit,
             }
             else
             {
-                snprintf (buffer, len, "Null/Range Down Check: v%d[v%d], cond reg v%d, m: %d, M: %d, b: %d",
+                snprintf (buffer, len, "kMirOpNullNRangeDownCheck: v%d[v%d], cond reg v%d, m: %d, M: %d, b: %d",
                         insn->vA,
                         insn->vB,
                         insn->vC,
@@ -1047,30 +1047,30 @@ void dvmCompilerExtendedDisassembler (const CompilationUnit *cUnit,
         case kMirOpLowerBound:
             if (cUnit != NULL && mir != NULL && mir->ssaRep != NULL)
             {
-                snprintf (buffer, len, "Lower Bound: %s, min: %d",
+                snprintf (buffer, len, "kMirOpLowerBound: %s, min: %d",
                         getSSAName (cUnit, mir->dalvikInsn.vB, operand0),
                         mir->dalvikInsn.vB);
             }
             else
             {
-                snprintf (buffer, len, "Lower Bound: v%d, min: %d",
+                snprintf (buffer, len, "kMirOpLowerBound: v%d, min: %d",
                         insn->vA,
                         insn->vB);
             }
             break;
         case kMirOpPunt:
-            snprintf (buffer, len, "Punt");
+            snprintf (buffer, len, "kMirOpPunt");
             break;
         case kMirOpCheckInlinePrediction:
             if (cUnit != NULL && mir != NULL && mir->ssaRep != NULL)
             {
-                snprintf (buffer, len, "Inline Prediction: %s, Class %s",
-                        getSSAName (cUnit, mir->dalvikInsn.vB, operand0),
+                snprintf (buffer, len, "kMirOpCheckInlinePrediction: %s, Class %s",
+                        getSSAName (cUnit, mir->dalvikInsn.vC, operand0),
                         mir->meta.callsiteInfo->classDescriptor);
             }
             else
             {
-                snprintf (buffer, len, "Inline Prediction: v%d, Class %s",
+                snprintf (buffer, len, "kMirOpCheckInlinePrediction: v%d, Class %s",
                         insn->vC,
                         mir->meta.callsiteInfo->classDescriptor);
             }
diff --git a/vm/compiler/Frontend.cpp b/vm/compiler/Frontend.cpp
index 04e1a2e..52a3dad 100644
--- a/vm/compiler/Frontend.cpp
+++ b/vm/compiler/Frontend.cpp
@@ -748,15 +748,21 @@ static FILE *dvmCompilerDumpGetFile (CompilationUnit *cUnit, const char *dirPref
   */
 void dvmDumpBasicBlock (CompilationUnit *cUnit, BasicBlock *bb, FILE *file, bool dominators = false)
 {
+        char blockName[BLOCK_NAME_LEN], bbName[BLOCK_NAME_LEN];
+
         if (bb == NULL)
             return;
+
+        //Get BB's name
+        dvmGetBlockName(bb, bbName);
+
         if (bb->blockType == kEntryBlock) {
             fprintf(file, "  entry [shape=Mdiamond];\n");
         } else if (bb->blockType == kExitBlock) {
             fprintf(file, "  exit [shape=Mdiamond];\n");
         } else if (bb->blockType == kDalvikByteCode) {
-            fprintf(file, "  block%04x [shape=record,label = \"{ \\\n",
-                    bb->startOffset);
+            fprintf(file, "  %s [shape=record,label = \"{ \\\n",
+                    bbName);
             const MIR *mir;
             fprintf(file, "    {block id %d\\l}%s\\\n", bb->id,
                     bb->firstMIRInsn ? " | " : " ");
@@ -786,24 +792,24 @@ void dvmDumpBasicBlock (CompilationUnit *cUnit, BasicBlock *bb, FILE *file, bool
                             switch (value)
                             {
                                 case kMirOpPhi:
-                                    tmp = "PHI";
+                                    tmp = "kMirOpPhi";
                                     break;
                                 case kMirOpNullNRangeUpCheck:
-                                    tmp = "Null/Range Up Check";
+                                    tmp = "kMirOpNullNRangeUpCheck";
                                     break;
                                 case kMirOpNullNRangeDownCheck:
-                                    tmp = "Null/Range Down Check";
+                                    tmp = "kMirOpNullNRangeDownCheck";
                                     break;
                                 case kMirOpLowerBound:
-                                    tmp = "Lower Bound";
+                                    tmp = "kMirOpLowerBound";
                                     break;
                                 case kMirOpPunt:
-                                    tmp = "Punt";
+                                    tmp = "kMirPunt";
                                     break;
                                 case kMirOpCheckInlinePrediction:
                                     {
                                         int len = 0;
-                                        const char *start = "Inline Prediction: ";
+                                        const char *start = "kMirOpCheckInlinePrediction: ";
                                         len = 1 + strlen (start) + strlen (mir->meta.callsiteInfo->classDescriptor);
                                         char *intern = static_cast<char *> (dvmCompilerNew (len, false));
 
@@ -821,31 +827,32 @@ void dvmDumpBasicBlock (CompilationUnit *cUnit, BasicBlock *bb, FILE *file, bool
 
                 fprintf(file, "    {%04x %s\\l}%s\\\n", mir->offset, tmp, mir->next ? " | " : " ");
             }
+
+            //Add information about fallThrough branches
+            if (bb->needFallThroughBranch == true && bb->fallThrough != NULL)
+            {
+                dvmGetBlockName (bb->fallThrough, blockName);
+                fprintf (file, "| FallThrough jmp %s", blockName);
+            }
             fprintf(file, "  }\"];\n\n");
         } else if (bb->blockType == kExceptionHandling) {
-            char blockName[BLOCK_NAME_LEN];
-
             dvmGetBlockName(bb, blockName);
             fprintf(file, "  %s [shape=invhouse];\n", blockName);
         }
 
-        char blockName1[BLOCK_NAME_LEN], blockName2[BLOCK_NAME_LEN];
-
         if (bb->taken) {
-            dvmGetBlockName(bb, blockName1);
-            dvmGetBlockName(bb->taken, blockName2);
+            dvmGetBlockName(bb->taken, blockName);
             fprintf(file, "  %s:s -> %s:n [style=dotted]\n",
-                    blockName1, blockName2);
+                    bbName, blockName);
         }
         if (bb->fallThrough) {
-            dvmGetBlockName(bb, blockName1);
-            dvmGetBlockName(bb->fallThrough, blockName2);
-            fprintf(file, "  %s:s -> %s:n\n", blockName1, blockName2);
+            dvmGetBlockName(bb->fallThrough, blockName);
+            fprintf(file, "  %s:s -> %s:n\n", bbName, blockName);
         }
 
         if (bb->successorBlockList.blockListType != kNotUsed) {
             fprintf(file, "  succ%04x [shape=%s,label = \"{ \\\n",
-                    bb->startOffset,
+                    bb->id,
                     (bb->successorBlockList.blockListType == kCatch) ?
                         "Mrecord" : "record");
             GrowableListIterator iterator;
@@ -865,16 +872,15 @@ void dvmDumpBasicBlock (CompilationUnit *cUnit, BasicBlock *bb, FILE *file, bool
                 fprintf(file, "    {<f%d> %04x: %04x\\l}%s\\\n",
                         succId++,
                         successorBlockInfo->key,
-                        destBlock->startOffset,
+                        destBlock->id,
                         (nextSuccessorBlockInfo != NULL) ? " | " : " ");
 
                 successorBlockInfo = nextSuccessorBlockInfo;
             }
             fprintf(file, "  }\"];\n\n");
 
-            dvmGetBlockName(bb, blockName1);
             fprintf(file, "  %s:s -> succ%04x:n [style=dashed]\n",
-                    blockName1, bb->startOffset);
+                    bbName, bb->id);
 
             if (bb->successorBlockList.blockListType == kPackedSwitch ||
                 bb->successorBlockList.blockListType == kSparseSwitch) {
@@ -891,10 +897,10 @@ void dvmDumpBasicBlock (CompilationUnit *cUnit, BasicBlock *bb, FILE *file, bool
 
                     BasicBlock *destBlock = successorBlockInfo->block;
 
-                    dvmGetBlockName(destBlock, blockName2);
+                    dvmGetBlockName(destBlock, blockName);
                     fprintf(file, "  succ%04x:f%d:e -> %s:n\n",
-                            bb->startOffset, succId++,
-                            blockName2);
+                            bb->id, succId++,
+                            blockName);
                 }
             }
         }
@@ -905,13 +911,12 @@ void dvmDumpBasicBlock (CompilationUnit *cUnit, BasicBlock *bb, FILE *file, bool
          */
         if (dominators == true)
         {
-            dvmGetBlockName(bb, blockName1);
             fprintf(file, "  cfg%s [label=\"%s\", shape=none];\n",
-                    blockName1, blockName1);
+                    bbName, bbName);
             if (bb->iDom) {
-                dvmGetBlockName(bb->iDom, blockName2);
+                dvmGetBlockName(bb->iDom, blockName);
                 fprintf(file, "  cfg%s:s -> cfg%s:n\n\n",
-                        blockName2, blockName1);
+                        blockName, bbName);
             }
         }
 }
diff --git a/vm/compiler/Utility.cpp b/vm/compiler/Utility.cpp
index 2fe94d2..f798245 100644
--- a/vm/compiler/Utility.cpp
+++ b/vm/compiler/Utility.cpp
@@ -393,16 +393,28 @@ void dvmGetBlockName(BasicBlock *bb, char *name)
         case kExitBlock:
             snprintf(name, BLOCK_NAME_LEN, "exit");
             break;
-        case kDalvikByteCode:
-            snprintf(name, BLOCK_NAME_LEN, "block%04x", bb->startOffset);
+         case kDalvikByteCode:
+            snprintf(name, BLOCK_NAME_LEN, "block%04x", bb->id);
+             break;
+         case kChainingCellNormal:
+            snprintf(name, BLOCK_NAME_LEN, "chain%04x", bb->id);
             break;
-        case kChainingCellNormal:
-            snprintf(name, BLOCK_NAME_LEN, "chain%04x", bb->startOffset);
+        case kChainingCellHot:
+            snprintf(name, BLOCK_NAME_LEN, "chainhot%04x", bb->id);
             break;
-        case kExceptionHandling:
-            snprintf(name, BLOCK_NAME_LEN, "exception%04x", bb->startOffset);
+        case kChainingCellInvokePredicted:
+            snprintf(name, BLOCK_NAME_LEN, "chaininvokepred%04x", bb->id);
             break;
-        default:
+        case kChainingCellBackwardBranch:
+            snprintf(name, BLOCK_NAME_LEN, "chainbackward%04x", bb->id);
+            break;
+        case kChainingCellGap:
+            snprintf(name, BLOCK_NAME_LEN, "chain%04x", bb->id);
+             break;
+         case kExceptionHandling:
+            snprintf(name, BLOCK_NAME_LEN, "exception%04x", bb->id);
+             break;
+         default:
             snprintf(name, BLOCK_NAME_LEN, "??");
             break;
     }
-- 
1.7.4.1

