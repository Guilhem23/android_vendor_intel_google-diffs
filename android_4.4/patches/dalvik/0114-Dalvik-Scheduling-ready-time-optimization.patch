From 27be739b064173bb5413d5f1c92433e8b26c2167 Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Tue, 26 Mar 2013 12:15:27 -0700
Subject: Dalvik: Scheduling ready time optimization

BZ: 95916

If there is a dependency between two instructions, we used to wait until parent
finished executing in order for the second instruction to be ready. However,
this is only needed in cases when we have a Read After Write. Whenever we have
a WAW, WAR, or RAR, then we can issue next cycle.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I65c14ca8056cd95d96924691f5219d21b5fcfe3c
Orig-MCG-Change-Id: Ide690718afebfe082e9fe31c4e04ea1839522c1c
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/Schedule.cpp |   15 ++++++++++++---
 1 files changed, 12 insertions(+), 3 deletions(-)

diff --git a/vm/compiler/codegen/x86/Schedule.cpp b/vm/compiler/codegen/x86/Schedule.cpp
index ab9b8f9..2125367 100644
--- a/vm/compiler/codegen/x86/Schedule.cpp
+++ b/vm/compiler/codegen/x86/Schedule.cpp
@@ -1523,15 +1523,24 @@ void Scheduler::updateReadyOps(int chosenIdx, BitVector * scheduledOps,
                 break;
             }
 
+            // If our candidate is a RAW, then we must wait until parent finishes
+            // executing. However, if we have a WAW, WAR, or RAR, then we can issue
+            // next cycle.
+            int readyDelay =
+                    (dependencyAssociation[queuedLIREntries[dst]].predecessorDependencies[k2].dataHazard
+                            == Dependency_RAW) ?
+                            queuedLIREntries[src]->instructionLatency : 1;
+
             // Candidate ready time is the sum of the scheduled time of parent,
             // the latency of parent, and the weight of edge between parent
             // and self
-            int candidateReadyTime = queuedLIREntries[src]->scheduledTime
-                    + queuedLIREntries[src]->instructionLatency
+            int candidateReadyTime = queuedLIREntries[src]->scheduledTime + readyDelay
                     + dependencyAssociation[queuedLIREntries[dst]].predecessorDependencies[k2].edgeLatency;
-            if (readyTime < candidateReadyTime)
+
+            if (readyTime < candidateReadyTime) {
                 // This is ready after ALL predecessors have finished executing
                 readyTime = candidateReadyTime;
+            }
         }
         if (isReady) {
             dvmSetBit(readyOps, dst);
-- 
1.7.4.1

