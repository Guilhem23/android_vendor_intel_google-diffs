From 1d01d4fb6388c8ba80c97f2aa1a615f2fd3e70c3 Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Sun, 21 Jul 2013 16:31:05 -0700
Subject: Dalvik: Address problem with inserting loop preheader

BZ: 124840

In order to insert loop preheader, we iterate through the entry's predecessors.
However, the preheader also becomes a predecessor thus causing inconsistency
with the iterator. This patch adds option to not update entry predecessor
until iteration through existing predecessors is complete.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ie224172c34871cb3f0cc614834e1db9aeeec9316
Orig-MCG-Change-Id: I7561ec7b577cbe177149dec0a346e103fbf9af32
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Reviewed-on: http://android.intel.com:8080/119815
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: Katkov, Serguei I <serguei.i.katkov@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Semukhina, Elena V <elena.v.semukhina@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/BBOptimization.cpp  |   10 +++++++++-
 vm/compiler/CompilerIR.h        |   15 +++++++++++++--
 vm/compiler/IntermediateRep.cpp |    8 ++++++--
 3 files changed, 28 insertions(+), 5 deletions(-)

diff --git a/vm/compiler/BBOptimization.cpp b/vm/compiler/BBOptimization.cpp
index 0f4fba3..29e2b7d 100644
--- a/vm/compiler/BBOptimization.cpp
+++ b/vm/compiler/BBOptimization.cpp
@@ -221,9 +221,17 @@ static void insertPreLoopHeader (CompilationUnit *cUnit, LoopInformation *info,
         // If the type is a backward chaining cell or inserted pre-header, go to the next one
         if ((predBB->blockType != kChainingCellBackwardBranch) && (predBB != preHeader))
         {
-            dvmCompilerInsertBasicBlockBetween (preHeader, predBB, entry);
+            //We do not update entry predecessors because we are iterating through them
+            //Namely this means that we defer setting the pre-header as predecessor of entry until end of loop
+            const bool updateEntryPredecessors = false;
+
+            dvmCompilerInsertBasicBlockBetween (preHeader, predBB, entry, updateEntryPredecessors);
         }
     }
+
+    //Now we finished setting linking all entry predecessors to loop preheader. Thus, we finally just now
+    //make the pre-header the entry's predecessor.
+    dvmCompilerUpdatePredecessors (preHeader, preHeader->fallThrough, entry);
 }
 
 /**
diff --git a/vm/compiler/CompilerIR.h b/vm/compiler/CompilerIR.h
index a24bd3d..d8002da 100644
--- a/vm/compiler/CompilerIR.h
+++ b/vm/compiler/CompilerIR.h
@@ -595,8 +595,19 @@ bool dvmCompilerReplaceChildBasicBlock (BasicBlock *newChild, BasicBlock *parent
 bool dvmCompilerReplaceChildBasicBlock (BasicBlock *newChild, BasicBlock *parent, ChildBlockType childType =
         kChildTypeFallthrough);
 
-/* Insert a BasicBlock between a parent and child */
-bool dvmCompilerInsertBasicBlockBetween (BasicBlock *newBlock, BasicBlock *parent, BasicBlock *child);
+/**
+ * @brief Used to insert a basic block between a parent and its child.
+ * @param newBlock The block to insert in between. The child becomes its fallthrough.
+ * @param parent The parent after which to insert the new block.
+ * @param child The child before which the new block should be inserted.
+ * @param updateChildPredecessors Whether or not to update the child predecessor to include the newBlock.
+ * The user should set this to false when iterating through child's predecessor and would like to prevent
+ * the iterator to go through the new block. When this option is used, the client must ensure itself
+ * that newBlock becomes child's predecessor. (Option set to true by default)
+ * @return Returns whether insertion was successful.
+ */
+bool dvmCompilerInsertBasicBlockBetween (BasicBlock *newBlock, BasicBlock *parent, BasicBlock *child,
+        bool updateChildPredecessors = true);
 
 /* Copy a BasicBlock */
 BasicBlock *dvmCompilerCopyBasicBlock (CompilationUnit *cUnit, const BasicBlock *old);
diff --git a/vm/compiler/IntermediateRep.cpp b/vm/compiler/IntermediateRep.cpp
index a5fe463..cff8843 100644
--- a/vm/compiler/IntermediateRep.cpp
+++ b/vm/compiler/IntermediateRep.cpp
@@ -768,7 +768,8 @@ bool dvmCompilerReplaceChildBasicBlock (BasicBlock *newChild, BasicBlock *parent
     return true;
 }
 
-bool dvmCompilerInsertBasicBlockBetween (BasicBlock *newBlock, BasicBlock *parent, BasicBlock *child)
+bool dvmCompilerInsertBasicBlockBetween (BasicBlock *newBlock, BasicBlock *parent, BasicBlock *child,
+        bool updateChildPredecessors)
 {
     //Paranoid
     if (parent == 0 || child == 0)
@@ -823,9 +824,12 @@ bool dvmCompilerInsertBasicBlockBetween (BasicBlock *newBlock, BasicBlock *paren
     }
 
     //Link to child
-    dvmCompilerUpdatePredecessors (newBlock, newBlock->fallThrough, child);
     newBlock->fallThrough = child;
     newBlock->taken = 0;
+    if (updateChildPredecessors == true)
+    {
+        dvmCompilerUpdatePredecessors (newBlock, newBlock->fallThrough, child);
+    }
 
     //Success
     return true;
-- 
1.7.4.1

