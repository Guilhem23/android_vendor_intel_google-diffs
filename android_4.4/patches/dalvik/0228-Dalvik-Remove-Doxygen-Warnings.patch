From d96c5f4afece189992d80e8ed728b569fcd9f413 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Wed, 10 Jul 2013 09:04:25 -0700
Subject: Dalvik: Remove Doxygen Warnings

BZ: 122659

Remove all Doxygen warnings in the compiler code base (and Global.h).

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Compiler-ME; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ia1bd6efc38c4ab3fed07f89f072ac70a68f3ead6
Orig-MCG-Change-Id: Id308845e582aaadf19d4cb33598ec36905a90a35
Signed-off-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/Globals.h                                  |    3 +-
 vm/compiler/BBOptimization.h                  |    2 +-
 vm/compiler/LoopInformation.cpp               |    1 -
 vm/compiler/LoopInformation.h                 |    8 +--
 vm/compiler/LoopOpt.h                         |    2 +-
 vm/compiler/codegen/x86/AnalysisO1.cpp        |   50 +++++++++++++++----------
 vm/compiler/codegen/x86/BytecodeVisitor.cpp   |    1 +
 vm/compiler/codegen/x86/CodegenInterface.cpp  |    9 ++--
 vm/compiler/codegen/x86/CompileTable.h        |    2 +-
 vm/compiler/codegen/x86/LowerGetPut.cpp       |    2 +-
 vm/compiler/codegen/x86/LowerJump.cpp         |    7 ++-
 vm/compiler/codegen/x86/RegisterizationBE.cpp |    2 +-
 vm/compiler/codegen/x86/Scheduler.cpp         |    2 +-
 vm/compiler/codegen/x86/pcg/Client.cpp        |    2 +-
 vm/compiler/codegen/x86/pcg/LowerALU.h        |   36 ++++++++++--------
 vm/compiler/codegen/x86/pcg/LowerCall.h       |    2 +-
 vm/compiler/codegen/x86/pcg/LowerJump.h       |    2 +-
 vm/compiler/codegen/x86/pcg/LowerMemory.h     |    2 +
 vm/compiler/codegen/x86/pcg/LowerOther.h      |    1 +
 vm/compiler/codegen/x86/pcg/Utility.h         |    2 +-
 20 files changed, 78 insertions(+), 60 deletions(-)

diff --git a/vm/Globals.h b/vm/Globals.h
index e04469b..bb8a884 100644
--- a/vm/Globals.h
+++ b/vm/Globals.h
@@ -794,7 +794,8 @@ enum VTuneInfo {
 #endif
 
 /**
- * @class sPassFramework The Pass framework's entry point
+ * @class sPassFramework
+ * @brief The Pass framework's entry point
  */
 typedef struct sJitFramework
 {
diff --git a/vm/compiler/BBOptimization.h b/vm/compiler/BBOptimization.h
index abfa1da..3938c85 100644
--- a/vm/compiler/BBOptimization.h
+++ b/vm/compiler/BBOptimization.h
@@ -92,5 +92,5 @@ bool dvmCompilerPeel (CompilationUnit *cUnit, LoopInformation *info);
  * @param bb the BasicBlock
  * @return returns whether we changed anything in the BasicBlock
  */
-bool dvmCompilerLocalValueNumbering (CompilationUnit *cunit, BasicBlock *bb);
+bool dvmCompilerLocalValueNumbering (CompilationUnit *cUnit, BasicBlock *bb);
 #endif
diff --git a/vm/compiler/LoopInformation.cpp b/vm/compiler/LoopInformation.cpp
index 82af656..ff9514c 100644
--- a/vm/compiler/LoopInformation.cpp
+++ b/vm/compiler/LoopInformation.cpp
@@ -485,7 +485,6 @@ LoopInformation *LoopInformation::add (LoopInformation *info)
 
 /**
  * @brief Utility function to check whether the current loop corresponds to specified entry
- * @param cUnit the CompilationUnit
  * @param info loop information
  * @param data std::pair where the first is key bb, the second is a place for result
  * @return false is specified bb is an entry of this loop
diff --git a/vm/compiler/LoopInformation.h b/vm/compiler/LoopInformation.h
index 0f1767b..0ccefeb 100644
--- a/vm/compiler/LoopInformation.h
+++ b/vm/compiler/LoopInformation.h
@@ -94,7 +94,6 @@ class LoopInformation
 
         /**
          * @brief Handle the new copies: link any copy going to a BWCC to the preheader
-         * @param info the LoopInformation
          * @param associations the associations between original and copy BasicBlock
          */
         void handleBWCC (std::map<BasicBlock*, BasicBlock *> &associations);
@@ -102,7 +101,6 @@ class LoopInformation
         /**
          * @brief Handle the new copies: link any block to preheader to the entry's copy
          * @param cUnit the CompilationUnit
-         * @param info the LoopInformation
          * @param associations the associations between original and copy BasicBlock
          */
         void handlePredecessor (CompilationUnit *cUnit, std::map<BasicBlock*, BasicBlock *> &associations);
@@ -421,7 +419,7 @@ class LoopInformation
           * @param data user data passed to worker
           * @return false to stop iteration
           */
-         bool iterate (CompilationUnit *cUnit, bool (*func) (CompilationUnit *cUnit, LoopInformation *info, void *data), void *data = 0);
+         bool iterate (CompilationUnit *cUnit, bool (*func) (CompilationUnit *, LoopInformation *, void *), void *data = 0);
 
          /**
           * @brief helper function to iterate over loop information with const cUnit
@@ -430,7 +428,7 @@ class LoopInformation
           * @param data user data passed to worker
           * @return false to stop iteration
           */
-         bool iterateWithConst (const CompilationUnit *cUnit, bool (*func) (const CompilationUnit *cUnit, LoopInformation *info, void *data), void *data = 0);
+         bool iterateWithConst (const CompilationUnit *cUnit, bool (*func) (const CompilationUnit *, LoopInformation *, void *), void *data = 0);
 
          /**
           * @brief helper function to iterate over loop information
@@ -438,7 +436,7 @@ class LoopInformation
           * @param data user data passed to worker
           * @return false to stop iteration
           */
-         bool iterate (bool (*func) (LoopInformation *info, void *data), void *data = 0);
+         bool iterate (bool (*func) (LoopInformation *, void *), void *data = 0);
 };
 
 /**
diff --git a/vm/compiler/LoopOpt.h b/vm/compiler/LoopOpt.h
index 7b9646c..c211480 100644
--- a/vm/compiler/LoopOpt.h
+++ b/vm/compiler/LoopOpt.h
@@ -129,7 +129,7 @@ bool dvmCompilerInsertUserPass (Pass *newPass, const char *name, enum PassInstru
 
 /**
  * @brief Handle User Plugin Library
- * @param name the name of the library
+ * @param fileName the name of the library
  */
 void dvmCompilerHandleUserPlugin (const char *fileName);
 
diff --git a/vm/compiler/codegen/x86/AnalysisO1.cpp b/vm/compiler/codegen/x86/AnalysisO1.cpp
index e2ff0251..efb51ff 100644
--- a/vm/compiler/codegen/x86/AnalysisO1.cpp
+++ b/vm/compiler/codegen/x86/AnalysisO1.cpp
@@ -71,6 +71,7 @@ bool isVirtualReg(int type) {
 /**
  * @brief Check whether the logical type represents a temporary
  * @param type the logical type of the register
+ * @param regNum the register number
  * @return Returns true if we are looking at a temporary, scratch, or hardcoded register.
  */
 bool isTemporary (int type, int regNum)
@@ -1756,11 +1757,14 @@ int mergeEntry2 (BasicBlock_O1* bb, VirtualRegInfo &currentInfo)
     return 0;
 }
 
-//! \brief update reaching defs for infoBasicBlock[indexToA]
-//! \details use currentInfo.reachingDefs to update reaching defs for variable A
-//! \param indexToA Index of variable A
-//! \param isBPartiallyOverlapA the type of overlap
-//! \return -1 if error, 0 otherwise
+/**
+ * @brief update reaching defs for infoBasicBlock[indexToA]
+ * @details use currentInfo.reachingDefs to update reaching defs for variable A
+ * @param currentInfo the current considered VirtualRegInfo
+ * @param indexToA Index of variable A
+ * @param isBPartiallyOverlapA the type of overlap
+ * @return -1 if error, 0 otherwise
+ */
 static int updateReachingDefA (VirtualRegInfo &currentInfo, int indexToA, OverlapCase isBPartiallyOverlapA)
 {
     if(indexToA < 0) return 0;
@@ -1872,12 +1876,16 @@ static int updateReachingDefA (VirtualRegInfo &currentInfo, int indexToA, Overla
     return 0;
 }
 
-//! \brief updateReachingDefB1
-//! \details Given a variable B in currentInfo, updates its reaching defs
-//! by checking reaching defs of variable A in currentBB->infoBasicBlock[indexToA]
-//! The result is stored in tmpInfo.reachingDefs
-//! \param indexToA Index of variable A
-//! \return -1 if error, 0 otherwise
+/**
+ * @brief updateReachingDefB1
+ * @details Given a variable B in currentInfo, updates its reaching defs
+ * by checking reaching defs of variable A in currentBB->infoBasicBlock[indexToA]
+ * The result is stored in tmpInfo.reachingDefs
+ * @param currentInfo the current considered VirtualRegInfo
+ * @param tmpInfo the temporary information
+ * @param indexToA Index of variable A
+ * @return -1 if error, 0 otherwise
+ */
 static int updateReachingDefB1 (VirtualRegInfo &currentInfo, VirtualRegInfo &tmpInfo, int indexToA)
 {
     if(indexToA < 0) return 0;
@@ -2069,14 +2077,16 @@ RegAccessType insertAUse(DefUsePair* ptr, int offsetPC, int regNum, LowOpndRegTy
     return useType;
 }
 
-//! \brief insertADef
-//! \details insert a def to currentBB->defUseTable
-//! update currentBB->defUseTail if necessary
-//! \param offsetPC
-//! \param regNum
-//! \param pType Physical type
-//! \param rType Register access type
-//! \return DefUsePair
+/**
+ * @brief Insert a definition
+ * @details insert a def to currentBB->defUseTable, update currentBB->defUseTail if necessary
+ * @param bb the BasicBlock_O1
+ * @param offsetPC the PC offset
+ * @param regNum the register number
+ * @param pType Physical type
+ * @param rType Register access type
+ * @return the new inserted DefUsePair
+ */
 DefUsePair* insertADef (BasicBlock_O1 *bb, int offsetPC, int regNum, LowOpndRegType pType, RegAccessType rType)
 {
     DefUsePair* ptr = (DefUsePair*)malloc(sizeof(DefUsePair));
@@ -5715,7 +5725,7 @@ void insertFromVirtualInfo (const VirtualRegInfo &regInfo)
 
 /**
  * @brief Updates compile table with temporary information.
- * @param regInfo Information about the temporary.
+ * @param tempRegInfo Information about the temporary.
  */
 static void insertFromTempInfo (const TempRegInfo &tempRegInfo)
 {
diff --git a/vm/compiler/codegen/x86/BytecodeVisitor.cpp b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
index f027f4e..c0f1597 100644
--- a/vm/compiler/codegen/x86/BytecodeVisitor.cpp
+++ b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
@@ -1465,6 +1465,7 @@ int getConstInfo(BasicBlock_O1* bb, const MIR * currentMIR) {
  * @brief Updates infoArray with virtual registers accessed when lowering the bytecode.
  * @param infoArray Must be an array of size MAX_REG_PER_BYTECODE. This is updated by function.
  * @param currentMIR The MIR to examine.
+ * @param updateBBConstraints should we update the BB constraints?
  * @return Returns the number of registers for the bytecode. Returns -1 in case of error.
  */
 int getVirtualRegInfo (VirtualRegInfo* infoArray, const MIR * currentMIR, bool updateBBConstraints)
diff --git a/vm/compiler/codegen/x86/CodegenInterface.cpp b/vm/compiler/codegen/x86/CodegenInterface.cpp
index 865aacc..2c7f12a 100644
--- a/vm/compiler/codegen/x86/CodegenInterface.cpp
+++ b/vm/compiler/codegen/x86/CodegenInterface.cpp
@@ -753,6 +753,7 @@ done:
 }
 
 /**
+ * @class BackwardBranchChainingCellContents
  * @brief Defines the data structure of a Backward Branch Chaining Cell.
  */
 struct __attribute__ ((packed)) BackwardBranchChainingCellContents
@@ -776,10 +777,10 @@ struct __attribute__ ((packed)) BackwardBranchChainingCellContents
     char * loopPreHeaderAddr; //!< Address of loop pre-header block.
 
     /**
-     * @brief Used for unchaining backward branch chaining cells.
-     * @param location This is location where unchaining method can assume
-     * that a Backward Branch CC exists.
-     * @return Returns size of unchained cell.
+     * Doxygen does not like documentation of functions here, so let's just document it but not expose it to doxygen
+     * brief Used for unchaining backward branch chaining cells.
+     * param location This is location where unchaining method can assume that a Backward Branch CC exists.
+     * return Returns size of unchained cell.
      */
     static size_t unchain (u1 * location)
     {
diff --git a/vm/compiler/codegen/x86/CompileTable.h b/vm/compiler/codegen/x86/CompileTable.h
index 62b8eb1..2465b8e 100644
--- a/vm/compiler/codegen/x86/CompileTable.h
+++ b/vm/compiler/codegen/x86/CompileTable.h
@@ -70,7 +70,7 @@ public:
 
     /**
      * @brief Constructs a compile table entry which represents a temporary.
-     * @param vrInfo The temporary info to use for initialization.
+     * @param tempInfo The temporary info to use for initialization.
      */
     CompileTableEntry (const TempRegInfo &tempInfo) :
             regNum (tempInfo.regNum), physicalType (tempInfo.physicalType),
diff --git a/vm/compiler/codegen/x86/LowerGetPut.cpp b/vm/compiler/codegen/x86/LowerGetPut.cpp
index a64dbca..13f27fe 100644
--- a/vm/compiler/codegen/x86/LowerGetPut.cpp
+++ b/vm/compiler/codegen/x86/LowerGetPut.cpp
@@ -15,7 +15,7 @@
  */
 
 
-/*! \file LowerGetPut.cpp
+/*! \file compiler/codegen/x86/LowerGetPut.cpp
     \brief This file lowers the following bytecodes: XGET|PUT_XXX
 */
 #include "libdex/DexOpcodes.h"
diff --git a/vm/compiler/codegen/x86/LowerJump.cpp b/vm/compiler/codegen/x86/LowerJump.cpp
index 6f655cc..df27236 100644
--- a/vm/compiler/codegen/x86/LowerJump.cpp
+++ b/vm/compiler/codegen/x86/LowerJump.cpp
@@ -15,9 +15,10 @@
  */
 
 
-/*! \file LowerJump.cpp
-    \brief This file lowers the following bytecodes: IF_XXX, GOTO
-*/
+/**
+ * @file vm/compiler/codegen/x86/LowerJump.cpp
+ * @brief This file lowers the following bytecodes: IF_XXX, GOTO
+ */
 #include <math.h>
 #include "libdex/DexOpcodes.h"
 #include "libdex/DexFile.h"
diff --git a/vm/compiler/codegen/x86/RegisterizationBE.cpp b/vm/compiler/codegen/x86/RegisterizationBE.cpp
index 1cf4d0f..7f8d8b8 100644
--- a/vm/compiler/codegen/x86/RegisterizationBE.cpp
+++ b/vm/compiler/codegen/x86/RegisterizationBE.cpp
@@ -818,7 +818,7 @@ static bool canHandleMismatch (const AssociationTable &childAssociations,
 
 /**
  * @brief Sets up mapping between virtual registers and their physical registers.
- * @param associationToUse the association to compare ourselves with
+ * @param associationsToUse the association to compare ourselves with
  * @param otherVRToPhysicalReg what is the associationsToUse having as associations (updated by the function)
  * @param currentVRToPhysicalReg what is the current association state between VRs to Physical (updated by the function)
  */
diff --git a/vm/compiler/codegen/x86/Scheduler.cpp b/vm/compiler/codegen/x86/Scheduler.cpp
index ed496bd..0e06436 100644
--- a/vm/compiler/codegen/x86/Scheduler.cpp
+++ b/vm/compiler/codegen/x86/Scheduler.cpp
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-/*! \file Schedule.cpp
+/*! \file Scheduler.cpp
     \brief This file implements the Atom Instruction Scheduler.
     \details Scheduling algorithm implemented is basic block scheduling.
 */
diff --git a/vm/compiler/codegen/x86/pcg/Client.cpp b/vm/compiler/codegen/x86/pcg/Client.cpp
index b659223..dd90f3f 100644
--- a/vm/compiler/codegen/x86/pcg/Client.cpp
+++ b/vm/compiler/codegen/x86/pcg/Client.cpp
@@ -190,7 +190,7 @@ uint32_t CGGetProbabilityOfOverlapFromClient(void *handle1, void *handle2)
  * @details CGAddRelocationToClient passes relocation information back to the client.
  * This routine is called as many times as necessary during the call to
  * CGCompileRoutine.
- * @param clientRountineHandle The clientRoutineHandle identifies the routine for the client,  it is the same handle that was passed to PCG in the call to CGCreateRoutine
+ * @param clientRoutineHandle The clientRoutineHandle identifies the routine for the client,  it is the same handle that was passed to PCG in the call to CGCreateRoutine
  * @param codeOffset gives the location in the code at which to apply the relocation action, it is an offset from the start of the function
  * @param symbol gives the CGSymbol to which the relocation must be made
  * @param relocationType gives the type of relocation.  addend specifies a constant
diff --git a/vm/compiler/codegen/x86/pcg/LowerALU.h b/vm/compiler/codegen/x86/pcg/LowerALU.h
index 9303a91..b8ef0cb 100644
--- a/vm/compiler/codegen/x86/pcg/LowerALU.h
+++ b/vm/compiler/codegen/x86/pcg/LowerALU.h
@@ -75,36 +75,42 @@ void dvmCompilerPcgTranslateConstWide (CompilationUnitPCG *cUnit, MIR *mir, u8 v
  * @brief Translate a 2addr or 3addr LL reg instruction
  * @param cUnit the CompilationUnitPCG
  * @param mir the MIR instruction
+ * @param opcode the opcode
  */
-void dvmCompilerPcgTranslateLLreg (CompilationUnitPCG *cUnit, MIR *mir, const char *dvmCompilerPcgTranslateOpcode);
+void dvmCompilerPcgTranslateLLreg (CompilationUnitPCG *cUnit, MIR *mir, const char *opcode);
 
 /**
  * @brief Translate a LLreg operation
  * @param cUnit the CompilationUnitPCG
- * @param mir the MIR instruction
+ * @param opcode the opcode
+ * @param ssaA the first SSA register
+ * @param ssaB the second SSA register
  */
-void dvmCompilerPcgTranslateLLregOp (CompilationUnitPCG *cUnit, const char *dvmCompilerPcgTranslateOpcode, int ssaA, int ssaB);
+void dvmCompilerPcgTranslateLLregOp (CompilationUnitPCG *cUnit, const char *opcode, int ssaA, int ssaB);
 
 /**
  * @brief Translate a LLreg shift operation
  * @param cUnit the CompilationUnitPCG
  * @param mir the MIR instruction
+ * @param opcode the opcode
  */
-void dvmCompilerPcgTranslateLLregShift (CompilationUnitPCG *cUnit, MIR *mir, const char *dvmCompilerPcgTranslateOpcode);
+void dvmCompilerPcgTranslateLLregShift (CompilationUnitPCG *cUnit, MIR *mir, const char *opcode);
 
 /**
  * @brief Translate a 2addr or 3addr float
  * @param cUnit the CompilationUnitPCG
  * @param mir the MIR instruction
+ * @param opcode the opcode
  */
-void dvmCompilerPcgTranslateFloat (CompilationUnitPCG *cUnit, MIR *mir, const char *dvmCompilerPcgTranslateOpcode);
+void dvmCompilerPcgTranslateFloat (CompilationUnitPCG *cUnit, MIR *mir, const char *opcode);
 
 /**
  * @brief Translate a 2addr or 3addr double
  * @param cUnit the CompilationUnitPCG
  * @param mir the MIR instruction
+ * @param opcode the opcode
  */
-void dvmCompilerPcgTranslateDouble (CompilationUnitPCG *cUnit, MIR *mir, const char *dvmCompilerPcgTranslateOpcode);
+void dvmCompilerPcgTranslateDouble (CompilationUnitPCG *cUnit, MIR *mir, const char *opcode);
 
 /**
  * @brief Translate an integer to a floating point
@@ -134,7 +140,6 @@ void dvmCompilerPcgTranslateFPToInt (CompilationUnitPCG *cUnit, MIR *mir, int32_
  * @brief Translate an float to a double
  * @param cUnit the CompilationUnitPCG
  * @param mir the MIR instruction
- * @param size the size of the floating point
  */
 void dvmCompilerPcgTranslateFloatToDouble (CompilationUnitPCG *cUnit, MIR *mir);
 
@@ -142,7 +147,6 @@ void dvmCompilerPcgTranslateFloatToDouble (CompilationUnitPCG *cUnit, MIR *mir);
  * @brief Translate a double to a float
  * @param cUnit the CompilationUnitPCG
  * @param mir the MIR instruction
- * @param size the size of the floating point
  */
 void dvmCompilerPcgTranslateDoubleToFloat (CompilationUnitPCG *cUnit, MIR *mir);
 
@@ -178,17 +182,17 @@ void dvmCompilerPcgTranslateNegDouble (CompilationUnitPCG *cUnit, MIR *mir);
  * @brief Translate an integer op op instruction: vA = vB op vC
  * @param cUnit the CompilationUnit
  * @param mir the MIR instruction
- * @param dvmCompilerPcgTranslateOpcode the opcode
+ * @param opcode the opcode
  */
-void dvmCompilerPcgTranslateIntOpOp (CompilationUnitPCG *cUnit, MIR *mir, const char *dvmCompilerPcgTranslateOpcode);
+void dvmCompilerPcgTranslateIntOpOp (CompilationUnitPCG *cUnit, MIR *mir, const char *opcode);
 
 /**
  * @brief Translate an integer op op instruction: vA = vB op literal
  * @param cUnit the CompilationUnit
  * @param mir the MIR instruction
- * @param dvmCompilerPcgTranslateOpcode the opcode
+ * @param opcode the opcode
  */
-void dvmCompilerPcgTranslateIntOpLit (CompilationUnitPCG *cUnit, MIR *mir, const char *dvmCompilerPcgTranslateOpcode);
+void dvmCompilerPcgTranslateIntOpLit (CompilationUnitPCG *cUnit, MIR *mir, const char *opcode);
 
 /**
  * @brief Translate the rsub instruction
@@ -201,18 +205,18 @@ void dvmCompilerPcgTranslateRsub (CompilationUnitPCG *cUnit, MIR *mir);
  * @brief Translate an integer operation
  * @param cUnit the CompilationUnit
  * @param mir the MIR instruction
- * @param dvmCompilerPcgTranslateOpcode the opcode
+ * @param opcode the opcode
  */
-void dvmCompilerPcgTranslateIntOp (CompilationUnitPCG *cUnit, MIR *mir, const char *dvmCompilerPcgTranslateOpcode);
+void dvmCompilerPcgTranslateIntOp (CompilationUnitPCG *cUnit, MIR *mir, const char *opcode);
 
 /**
  * @brief Translate the extension of an integer
  * @param cUnit the CompilationUnitPCG
  * @param mir the MIR instruction
- * @param dvmCompilerPcgTranslateOpcode the opcode
+ * @param opcode the opcode
  * @param imm the number of bits
  */
-void dvmCompilerPcgTranslateIntExtend (CompilationUnitPCG *cUnit, MIR *mir, const char *dvmCompilerPcgTranslateOpcode, int imm);
+void dvmCompilerPcgTranslateIntExtend (CompilationUnitPCG *cUnit, MIR *mir, const char *opcode, int imm);
 
 /**
  * @brief Translate the cmp long opcode
diff --git a/vm/compiler/codegen/x86/pcg/LowerCall.h b/vm/compiler/codegen/x86/pcg/LowerCall.h
index b9d55a1..5ad5718 100644
--- a/vm/compiler/codegen/x86/pcg/LowerCall.h
+++ b/vm/compiler/codegen/x86/pcg/LowerCall.h
@@ -109,7 +109,7 @@ void dvmCompilerPcgStoreInvokeArgs (CompilationUnitPCG *cUnit, MIR *mir);
  * @brief Get an invoke target
  * @param cUnit the CompilationUnitPCG
  * @param bb the BasicBlockPCG
- * @param needsCfgArg do we need a CFG arc?
+ * @param needsCfgArc do we need a CFG arc?
  * @return the invoke target
  */
 CGSymbol dvmCompilerPcgGetInvokeTarget (CompilationUnitPCG *cUnit, const BasicBlockPCG *bb, bool *needsCfgArc = 0);
diff --git a/vm/compiler/codegen/x86/pcg/LowerJump.h b/vm/compiler/codegen/x86/pcg/LowerJump.h
index fa78daa..d64973f 100644
--- a/vm/compiler/codegen/x86/pcg/LowerJump.h
+++ b/vm/compiler/codegen/x86/pcg/LowerJump.h
@@ -68,7 +68,7 @@ void dvmCompilerPcgTranslateIfZero (CompilationUnitPCG *cUnit, MIR *mir, const c
  * @param cUnit the CompilationUnitPCG
  * @param mir the MIR instruction
  * @param opSize the size of the operation
- * @param naVal the nan value
+ * @param nanVal the nan value
  */
 void dvmCompilerPcgTranslateIfFp (CompilationUnitPCG *cUnit, MIR *mir, uint32_t opSize, int nanVal);
 
diff --git a/vm/compiler/codegen/x86/pcg/LowerMemory.h b/vm/compiler/codegen/x86/pcg/LowerMemory.h
index 863add1..ac841e2 100644
--- a/vm/compiler/codegen/x86/pcg/LowerMemory.h
+++ b/vm/compiler/codegen/x86/pcg/LowerMemory.h
@@ -77,7 +77,9 @@ void dvmCompilerPcgStoreVirtualReg (CompilationUnitPCG *cUnit, int ssaNum, int s
  * @brief Create a store
  * @brief this relates to 32-bit stores
  * @param base the base register
+ * @param index the index register
  * @param scale the scale
+ * @param ltbase base symbol
  * @param offset the offset
  * @param r what we want to store
  * @return the store
diff --git a/vm/compiler/codegen/x86/pcg/LowerOther.h b/vm/compiler/codegen/x86/pcg/LowerOther.h
index 3447442..78cfe8f 100644
--- a/vm/compiler/codegen/x86/pcg/LowerOther.h
+++ b/vm/compiler/codegen/x86/pcg/LowerOther.h
@@ -41,6 +41,7 @@ void dvmCompilerPcgTranslateMonitorExit (CompilationUnitPCG *cUnit, MIR *mir);
 
 /**
  * @brief Translate the MonitorEnter bytecode
+ * @param cUnit the CompilationUnitPCG
  * @param mir the MIR instruction
  */
 void dvmCompilerPcgTranslateMonitorEnter (CompilationUnitPCG *cUnit, MIR *mir);
diff --git a/vm/compiler/codegen/x86/pcg/Utility.h b/vm/compiler/codegen/x86/pcg/Utility.h
index cd49e2d..4eeb45e 100644
--- a/vm/compiler/codegen/x86/pcg/Utility.h
+++ b/vm/compiler/codegen/x86/pcg/Utility.h
@@ -126,7 +126,7 @@ bool dvmCompilerPcgBlockEndsInInvoke (BasicBlockPCG *bb);
 
 /**
  * @brief Get the ResClasses
- * @parm selfPtr the self pointer
+ * @param selfPtr the self pointer
  */
 CGInst dvmCompilerPcgGetResClasses (CGInst selfPtr);
 
-- 
1.7.4.1

