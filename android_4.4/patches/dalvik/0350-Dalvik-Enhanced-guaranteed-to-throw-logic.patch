From ad745e757b20f2040572a9ba364c4a7544aa64f2 Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Mon, 23 Sep 2013 18:47:43 -0700
Subject: Dalvik: Enhanced guaranteed to throw logic

BZ: 140474

Some optimizations require that the loop not throw in order to apply the pass.
This patch restores enhanced functionality for checking if a loop is guaranteed
to throw. It adds ability to check if null/check elimination has been done and
supports additional getters/setters for throw guarantee via variant logic.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I5f474ae05906b3a94d9bb78db61f40355efda667
Orig-MCG-Change-Id: I2a89c2a958e16b784754d5e586559f66a5e860c6
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Reviewed-on: http://android.intel.com:8080/133812
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Popov, Ivan G <ivan.g.popov@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 vm/compiler/LoopInformation.cpp |   61 ++++++++++++++++++--------------------
 1 files changed, 29 insertions(+), 32 deletions(-)

diff --git a/vm/compiler/LoopInformation.cpp b/vm/compiler/LoopInformation.cpp
index 9ac52cf..ae3b1dd 100644
--- a/vm/compiler/LoopInformation.cpp
+++ b/vm/compiler/LoopInformation.cpp
@@ -1262,10 +1262,10 @@ bool LoopInformation::guaranteedToThrowFirstIteration (const CompilationUnit *cU
             //Get Dalvik instruction
             DecodedInstruction &insn = mir->dalvikInsn;
 
-            int flags = dvmCompilerGetOpcodeFlags (insn.opcode);
+            int dexFlags = dvmCompilerGetOpcodeFlags (insn.opcode);
 
             //If instruction cannot throw, then we continue
-            if ((flags & kInstrCanThrow) == 0)
+            if ((dexFlags & kInstrCanThrow) == 0)
             {
                 continue;
             }
@@ -1287,43 +1287,40 @@ bool LoopInformation::guaranteedToThrowFirstIteration (const CompilationUnit *cU
                 continue;
             }
 
-            bool instanceGetterSetter = false;
+            //Get Dataflow flags
+            int dfFlags = dvmCompilerDataFlowAttributes[insn.opcode];
 
-            //We made it this far so we are looking at variant instructions. Test to see if
-            //it is getter or a setter
-            switch (insn.opcode)
+            //If the bytecode contains null and range checks
+            if ( (dfFlags & DF_HAS_NR_CHECKS) != 0)
             {
-                case OP_IGET:
-                case OP_IGET_WIDE:
-                case OP_IGET_OBJECT:
-                case OP_IGET_BOOLEAN:
-                case OP_IGET_BYTE:
-                case OP_IGET_CHAR:
-                case OP_IGET_SHORT:
-                case OP_IPUT:
-                case OP_IPUT_WIDE:
-                case OP_IPUT_OBJECT:
-                case OP_IPUT_BOOLEAN:
-                case OP_IPUT_BYTE:
-                case OP_IPUT_CHAR:
-                case OP_IPUT_SHORT:
-                case OP_IGET_QUICK:
-                case OP_IGET_WIDE_QUICK:
-                case OP_IGET_OBJECT_QUICK:
-                case OP_IPUT_QUICK:
-                case OP_IPUT_WIDE_QUICK:
-                case OP_IPUT_OBJECT_QUICK:
-                    instanceGetterSetter = true;
-                    break;
-                default:
-                    break;
+                //If we have marked it to not get a null check or bound check, we can ignore it
+                int mask = (MIR_IGNORE_NULL_CHECK | MIR_IGNORE_RANGE_CHECK);
+
+                //We need both ignores to be turned on in order to continue
+                if ( (mir->OptimizationFlags & mask) == mask)
+                {
+                    continue;
+                }
             }
 
+            //If the bytecode contains a null check
+            if ( (dfFlags & DF_HAS_OBJECT_CHECKS) != 0)
+            {
+                //If we have marked it to not get a null check, we can ignore it
+                if ( (mir->OptimizationFlags & MIR_IGNORE_NULL_CHECK) != 0)
+                {
+                    continue;
+                }
+            }
+
+            //Is it a getter or a setter
+            bool isGetterSetter = ( (dfFlags & (DF_IS_SETTER | DF_IS_GETTER) ) != 0);
+
             //If we have an instance getter/setter we can prove that if memory location is invariant,
             //we are guaranteed to throw in the peeled iteration
-            if (instanceGetterSetter == true)
+            if (isGetterSetter == true)
             {
-                bool variant = dvmCompilerCheckVariant (mir, getVariants (), dvmCompilerGetStartUseIndex(insn.opcode));
+                bool variant = dvmCompilerCheckVariant (mir, getVariants (), dvmCompilerGetStartUseIndex (insn.opcode));
 
                 if (variant == false)
                 {
-- 
1.7.4.1

