From e5b8db69f506799030500708e30d05f33331263b Mon Sep 17 00:00:00 2001
From: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Date: Thu, 22 Aug 2013 12:51:30 +0700
Subject: Dalvik: Missing parameter for dvmBumpNoChain function

BZ: 129349

With new switch bytecodes optimization two code blocks
were accidently missed during rewriting major functions.
These two blocks were generating an input parameter for
dvmBumpNoChain function. Without parameter, dvmBumpNoChain
used first value on the stack - return adress from jited
code and crashed due to unexpectedly huge offset value.
This patch adds missed blocks as well as new assert
statement for dvmBumpNoChain function.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Interpreter
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I2e9db1fe481cbd07734fb21431d6051e3dc43ec1
Orig-MCG-Change-Id: Ib446d9f5ad59453c159b909dc25a12d05899ea58
Signed-off-by: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Reviewed-on: http://android.intel.com:8080/126995
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Shou, Yixin <yixin.shou@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: Provodin, Vitaly A <vitaly.a.provodin@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Reviewed-on: http://android.intel.com:8080/128712
Reviewed-by: Solovyev, Roman <roman.solovyev@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/lightcg/LowerJump.cpp |   17 +++++++++++++++++
 vm/interp/Jit.cpp                             |    1 +
 2 files changed, 18 insertions(+), 0 deletions(-)

diff --git a/vm/compiler/codegen/x86/lightcg/LowerJump.cpp b/vm/compiler/codegen/x86/lightcg/LowerJump.cpp
index 9d682cb..325cdba 100644
--- a/vm/compiler/codegen/x86/lightcg/LowerJump.cpp
+++ b/vm/compiler/codegen/x86/lightcg/LowerJump.cpp
@@ -1845,6 +1845,15 @@ static int packedBig(int vA, u2 tSize, s4 firstKey, const s4* entries, const u2*
     // save rPC in EAX
     alu_binary_imm_reg(OpndSize_32, add_opc, (int)dalvikPC, PhysicalReg_EAX, true);
     scratchRegs[0] = PhysicalReg_SCRATCH_2;
+
+#if defined(WITH_JIT_TUNING)
+    /* Fall back to interpreter after resolving address of switch target.
+     * Indicate a kSwitchOverflow. Note: This is not an "overflow". But it helps
+     * count the times we return from a Switch
+     */
+    move_imm_to_mem(OpndSize_32, kSwitchOverflow, 0, PhysicalReg_ESP, true);
+#endif
+
     jumpToInterpNoChain();
     return 0;
 }
@@ -1994,6 +2003,14 @@ static int sparseBig(int vA, u2 tSize, const s4* keys, const s4* entries, const
     // save rPC in EAX
     alu_binary_imm_reg(OpndSize_32, add_opc, (int)dalvikPC, PhysicalReg_EAX, true);
     scratchRegs[0] = PhysicalReg_SCRATCH_2;
+#if defined(WITH_JIT_TUNING)
+    /* Fall back to interpreter after resolving address of switch target.
+     * Indicate a kSwitchOverflow. Note: This is not an "overflow". But it helps
+     * count the times we return from a Switch
+     */
+    move_imm_to_mem(OpndSize_32, kSwitchOverflow, 0, PhysicalReg_ESP, true);
+#endif
+
     jumpToInterpNoChain();
     return 0;
 }
diff --git a/vm/interp/Jit.cpp b/vm/interp/Jit.cpp
index 697976a..473e490 100644
--- a/vm/interp/Jit.cpp
+++ b/vm/interp/Jit.cpp
@@ -454,6 +454,7 @@ void dvmJitStopTranslationRequests()
 /* Convenience function to increment counter from assembly code */
 void dvmBumpNoChain(int from)
 {
+    assert (from < kNoChainExitLast);
     gDvmJit.noChainExit[from]++;
 }
 
-- 
1.7.4.1

