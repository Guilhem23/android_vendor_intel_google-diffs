From 9ed0790ea1b4f564bb39fa20a78955691bdb4d02 Mon Sep 17 00:00:00 2001
From: aleksey.v.ignatenko <avignate@lab-dyn-116-248.ins.intel.com>
Date: Thu, 7 Nov 2013 16:52:25 +0700
Subject: Dalvik: Reset optimization flags for the peeled loop

BZ: 150504

When NR checks are hoisted out of a loop MIR_IGNORE_NULL_CHECK | MIR_IGNORE_RANGE_CHECK
are set. If a loop peeling happens later it will copy those flags to a peeled part.
That's not correct and fixed by the patch.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I147d54d2a31028c8c46350c7b8f4d332f1a06515
Orig-MCG-Change-Id: Ia997dba777bc70012c815cf1abb2a9cc7c7831c1
Signed-off-by: aleksey.v.ignatenko <avignate@lab-dyn-116-248.ins.intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/IntermediateRep.cpp |   15 +++++++++++++++
 vm/compiler/LoopInformation.cpp |    4 ++++
 vm/compiler/PassDriver.cpp      |    3 +++
 vm/compiler/Utility.h           |    3 +++
 4 files changed, 25 insertions(+), 0 deletions(-)

diff --git a/vm/compiler/IntermediateRep.cpp b/vm/compiler/IntermediateRep.cpp
index 44eb7dd..6a5a8b1 100644
--- a/vm/compiler/IntermediateRep.cpp
+++ b/vm/compiler/IntermediateRep.cpp
@@ -843,6 +843,21 @@ bool dvmCompilerInsertBasicBlockBetween (BasicBlock *newBlock, BasicBlock *paren
 }
 
 /**
+ * @brief Reset MIR optimization flags in BasicBlock
+ * @param bb the BasicBlock
+ * @param resetFlags the flags to reset
+ */
+void dvmCompilerResetOptimizationFlags (const BasicBlock *bb, int resetFlags)
+{
+    // reset flags for all MIRs in bb
+    for (MIR *mir = bb->firstMIRInsn; mir != 0; mir = mir->next)
+    {
+        mir->OptimizationFlags &= (~resetFlags);
+    }
+}
+
+
+/**
  * @brief Copy a BasicBlock
  * @param cUnit the CompilationUnit
  * @param old the old BasicBlock
diff --git a/vm/compiler/LoopInformation.cpp b/vm/compiler/LoopInformation.cpp
index 6f4299d..f0303b3 100644
--- a/vm/compiler/LoopInformation.cpp
+++ b/vm/compiler/LoopInformation.cpp
@@ -1576,6 +1576,10 @@ void LoopInformation::peelLoopHelper (CompilationUnit *cUnit)
 
         //Mark it in the association
         associations[bb] = copy;
+
+        //Reset Null and Bound checks flags in a copy
+        int resetFlags = MIR_IGNORE_NULL_CHECK | MIR_IGNORE_RANGE_CHECK;
+        dvmCompilerResetOptimizationFlags (copy, resetFlags);
     }
 
     //Ok we copied everything, now through them again and update child links
diff --git a/vm/compiler/PassDriver.cpp b/vm/compiler/PassDriver.cpp
index 05f6b81..ea6172f 100644
--- a/vm/compiler/PassDriver.cpp
+++ b/vm/compiler/PassDriver.cpp
@@ -93,6 +93,9 @@ START_PASSES
             dvmCompilerVectorize, 0, 0, 0, kOptimizationBasicBlockChange | kLoopStructureChange),
     NEW_PASS ("Invariant_sinking", kAllNodes, 0, dvmCompilerInvariantSinkingGate,
             dvmCompilerInvariantSinking, 0, 0, 0, kOptimizationBasicBlockChange),
+    //Loop could be transformed at this point (e.g. loop peeling), so new opportunities're possible for Checks_Removal
+    NEW_PASS ("Check_Removal", kPredecessorsFirstTraversal, 0, 0,
+                dvmCompilerStartCheckRemoval, dvmCompilerEndCheckRemoval, dvmCompilerCheckRemoval, 0, kOptimizationDefUsesChange),
     //This should be after the last optimization that changes instruction sequence or BB logic
     //Note: reorder is safe and should be after
     //We do registerization for all traces to provide spill information to the BE
diff --git a/vm/compiler/Utility.h b/vm/compiler/Utility.h
index 7d00e26..dbc9c21 100644
--- a/vm/compiler/Utility.h
+++ b/vm/compiler/Utility.h
@@ -107,4 +107,7 @@ void dvmCompilerCommitPendingScratch (CompilationUnit *cUnit);
  */
 bool dvmCompilerDoesContainLoop (GrowableList &blockList, BasicBlock *entry);
 
+/* Reset optimization flags for all MIRs in BasicBlock */
+void dvmCompilerResetOptimizationFlags (const BasicBlock *bb, int resetFlags);
+
 #endif
-- 
1.7.4.1

