From 9a4f7e53f27da8716e8a2d2bfca0d8ce8f1b6521 Mon Sep 17 00:00:00 2001
From: aleksey.v.ignatenko <avignate@nstdrlel243b2.(none)>
Date: Thu, 1 Aug 2013 12:27:37 +0700
Subject: Dalvik: Incorrect resource cleanup sequence during VM shutdown

BZ: 121322

Object gDvm.jdwpState is freed at dvmJdwpShutdown. dvmJdwpShutdown
in turn is called before all daemon threads are stopped that
causes access to Dvm.jdwpState data. The fix moves resource cleanup
after the daemon threads stop: dvmSlayDaemons()

Category: device-enablement
Domain: AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: yes

Change-Id: Ia7e54f00cdea6f33031cbd8b7672f591ad3267d4
Orig-MCG-Change-Id: I36a5158f944454be41b695b5bde182dc49ef30df
Signed-off-by: aleksey.v.ignatenko <avignate@nstdrlel243b2.(none)>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Reviewed-on: http://android.intel.com:8080/124382
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/Init.cpp          |   29 +++++++++++++++++++----------
 vm/jdwp/Jdwp.h       |    2 +-
 vm/jdwp/JdwpMain.cpp |    6 ++++--
 3 files changed, 24 insertions(+), 13 deletions(-)

diff --git a/vm/Init.cpp b/vm/Init.cpp
index f66624e..a43091a 100644
--- a/vm/Init.cpp
+++ b/vm/Init.cpp
@@ -2603,16 +2603,10 @@ void dvmShutdown()
      */
     dvmGcThreadShutdown();
 
-    if (gDvm.jdwpState != NULL)
-        dvmJdwpShutdown(gDvm.jdwpState);
-    free(gDvm.jdwpHost);
-    gDvm.jdwpHost = NULL;
-    free(gDvm.jniTrace);
-    gDvm.jniTrace = NULL;
-    free(gDvm.stackTraceFile);
-    gDvm.stackTraceFile = NULL;
-    free (gDvm.niceName), gDvm.niceName = 0;
-    free (gDvm.extraOptionsFile), gDvm.extraOptionsFile = 0;
+    if (gDvm.jdwpState != NULL) {
+        // don't free jdwpState before daemon threads have been stopped
+        dvmJdwpShutdown(gDvm.jdwpState, false);
+    }
 
     /* tell signal catcher to shut down if it was started */
     dvmSignalCatcherShutdown();
@@ -2637,6 +2631,21 @@ void dvmShutdown()
     if (gDvm.verboseShutdown)
         ALOGD("VM cleaning up");
 
+    // free resources only after daemon threads were stopped
+    // otherwise we can get unpredictable failures
+    if (gDvm.jdwpState != NULL) {
+        free(gDvm.jdwpState);
+        gDvm.jdwpState = NULL;
+    }
+    free(gDvm.jdwpHost);
+    gDvm.jdwpHost = NULL;
+    free(gDvm.jniTrace);
+    gDvm.jniTrace = NULL;
+    free(gDvm.stackTraceFile);
+    gDvm.stackTraceFile = NULL;
+    free (gDvm.niceName), gDvm.niceName = 0;
+    free (gDvm.extraOptionsFile), gDvm.extraOptionsFile = 0;
+
     dvmDebuggerShutdown();
     dvmProfilingShutdown();
     dvmJniShutdown();
diff --git a/vm/jdwp/Jdwp.h b/vm/jdwp/Jdwp.h
index 467cecd..a945ede 100644
--- a/vm/jdwp/Jdwp.h
+++ b/vm/jdwp/Jdwp.h
@@ -118,7 +118,7 @@ JdwpState* dvmJdwpStartup(const JdwpStartupParams* params);
 /*
  * Shut everything down.
  */
-void dvmJdwpShutdown(JdwpState* state);
+void dvmJdwpShutdown(JdwpState* state, bool freeState = true);
 
 /*
  * Returns "true" if a debugger or DDM is connected.
diff --git a/vm/jdwp/JdwpMain.cpp b/vm/jdwp/JdwpMain.cpp
index 55e278d..487ea93 100644
--- a/vm/jdwp/JdwpMain.cpp
+++ b/vm/jdwp/JdwpMain.cpp
@@ -205,7 +205,7 @@ void dvmJdwpResetState(JdwpState* state)
 /*
  * Tell the JDWP thread to shut down.  Frees "state".
  */
-void dvmJdwpShutdown(JdwpState* state)
+void dvmJdwpShutdown(JdwpState* state, bool freeState)
 {
     void* threadReturn;
 
@@ -238,7 +238,9 @@ void dvmJdwpShutdown(JdwpState* state)
     assert(state->netState == NULL);
 
     dvmJdwpResetState(state);
-    free(state);
+    if (freeState) {
+        free(state);
+    }
 }
 
 /*
-- 
1.7.4.1

