From 078f9dc9083042075e8b348d2fc91f349e821708 Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Mon, 22 Jul 2013 13:53:24 +0700
Subject: Dalvik: Add several null checks for safety

BZ: 124793

Add pointer null check to make static checkers to be happy.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I606e739fbc7960e62c0e20e15c2f14454438ca5c
Orig-MCG-Change-Id: Ic16e55c888ca5077fa6accfeb30a1c1e6c2ffa28
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Reviewed-on: http://android.intel.com:8080/124376
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/Checks.cpp       |   49 +++++++++++++++++++++++++++++------------
 vm/compiler/JitProfiling.cpp |    8 +++++-
 2 files changed, 40 insertions(+), 17 deletions(-)

diff --git a/vm/compiler/Checks.cpp b/vm/compiler/Checks.cpp
index 161aa8d..85ebec7 100644
--- a/vm/compiler/Checks.cpp
+++ b/vm/compiler/Checks.cpp
@@ -465,7 +465,7 @@ void initializeData (CompilationUnit *cUnit, SRemoveData **ptrRemoveData, BasicB
 void handleNullCheck (CompilationUnit *cUnit, SRemoveData *removeData, int nullCheck, MIR *mir, STrackers &tracker)
 {
     // Do we have an index? Skip this MIR and log error if arguments are invalid
-    if (nullCheck >= 0 && mir->ssaRep->uses != 0 && nullCheck < mir->ssaRep->numUses)
+    if (nullCheck >= 0 && mir->ssaRep != 0 && mir->ssaRep->uses != 0 && nullCheck < mir->ssaRep->numUses)
     {
         int reg = mir->ssaRep->uses[nullCheck];
 
@@ -545,14 +545,23 @@ void handleNullCheck (CompilationUnit *cUnit, SRemoveData *removeData, int nullC
         if (nullCheck >= 0)
         {
             // Report about invalid agruments
-            if (mir->ssaRep->uses == 0)
-                ALOGE ("JIT_ERROR: handleNullCheck (0x%x): ssaRep->uses is null",
+            if (mir->ssaRep == 0)
+            {
+                ALOGD ("JIT_INFO: handleNullCheck (0x%x): ssaRep is null",
                     mir->dalvikInsn.opcode);
+            }
+            else
+            {
+                if (mir->ssaRep->uses == 0)
+                    ALOGD ("JIT_INFO: handleNullCheck (0x%x): ssaRep->uses is null",
+                        mir->dalvikInsn.opcode);
 
-            if (nullCheck >= mir->ssaRep->numUses)
-                ALOGE ("JIT_ERROR: handleNullCheck (0x%x): nullCheck (%i) >= numUses (%i)",
-                    mir->dalvikInsn.opcode, nullCheck, mir->ssaRep->numUses);
+                if (nullCheck >= mir->ssaRep->numUses)
+                    ALOGD ("JIT_INFO: handleNullCheck (0x%x): nullCheck (%i) >= numUses (%i)",
+                        mir->dalvikInsn.opcode, nullCheck, mir->ssaRep->numUses);
+            }
 
+            assert(mir->ssaRep != 0);
             assert(mir->ssaRep->uses != 0);
             assert(nullCheck < mir->ssaRep->numUses);
         }
@@ -564,6 +573,7 @@ void handleBoundCheck (CompilationUnit *cUnit, SRemoveData *removeData, int null
 {
     // Check the bound check via indexToArrayChecks, skip this MIR and log error if agruments are invalid
     if (boundCheck >= 0
+        && mir->ssaRep != 0
         && mir->ssaRep->uses != 0
         && boundCheck < mir->ssaRep->numUses
         && nullCheck < mir->ssaRep->numUses && nullCheck >= 0)
@@ -666,22 +676,31 @@ void handleBoundCheck (CompilationUnit *cUnit, SRemoveData *removeData, int null
         if (boundCheck >= 0)
         {
             // Report about invalid arguments
-            if (mir->ssaRep->uses == 0)
-                ALOGE ("JIT_ERROR: handleBoundCheck (0x%x): ssaRep->uses is null",
+            if (mir->ssaRep == 0)
+            {
+                ALOGD ("JIT_INFO: handleBoundCheck (0x%x): ssaRep is null",
                     mir->dalvikInsn.opcode);
+            }
+            else
+            {
+                if (mir->ssaRep->uses == 0)
+                    ALOGD ("JIT_INFO: handleBoundCheck (0x%x): ssaRep->uses is null",
+                        mir->dalvikInsn.opcode);
 
-            if (boundCheck >= mir->ssaRep->numUses)
-                ALOGE ("JIT_ERROR: handleBoundCheck (0x%x): boundCheck (%i) >= ssaRep->numUses (%i)",
-                    mir->dalvikInsn.opcode, boundCheck, mir->ssaRep->numUses);
+                if (boundCheck >= mir->ssaRep->numUses)
+                    ALOGD ("JIT_INFO: handleBoundCheck (0x%x): boundCheck (%i) >= ssaRep->numUses (%i)",
+                        mir->dalvikInsn.opcode, boundCheck, mir->ssaRep->numUses);
 
-            if (nullCheck >= 0 && nullCheck >= mir->ssaRep->numUses)
-                ALOGE ("JIT_ERROR: handleBoundCheck (0x%x): nullCheck (%i) >= ssaRep->numUses (%i)",
-                    mir->dalvikInsn.opcode, nullCheck, mir->ssaRep->numUses);
+                if (nullCheck >= 0 && nullCheck >= mir->ssaRep->numUses)
+                    ALOGD ("JIT_INFO: handleBoundCheck (0x%x): nullCheck (%i) >= ssaRep->numUses (%i)",
+                        mir->dalvikInsn.opcode, nullCheck, mir->ssaRep->numUses);
+            }
 
             if (nullCheck < 0)
-                ALOGE ("JIT_ERROR: handleBoundCheck (0x%x): nullCheck (%i) < 0, but boundCheck is %i",
+                ALOGD ("JIT_INFO: handleBoundCheck (0x%x): nullCheck (%i) < 0, but boundCheck is %i",
                     mir->dalvikInsn.opcode, nullCheck, boundCheck);
 
+            assert(mir->ssaRep != 0);
             assert(mir->ssaRep->uses != 0);
             assert(boundCheck < mir->ssaRep->numUses);
             assert(nullCheck >= 0 && nullCheck < mir->ssaRep->numUses);
diff --git a/vm/compiler/JitProfiling.cpp b/vm/compiler/JitProfiling.cpp
index ff85ae6..6b22624 100644
--- a/vm/compiler/JitProfiling.cpp
+++ b/vm/compiler/JitProfiling.cpp
@@ -229,7 +229,7 @@ static MethodCodeMap methodCodeMap;
 ITT_EXTERN_C int JITAPI
 iJIT_NotifyEvent(iJIT_JVM_EVENT event_type, void *EventSpecificData)
 {
-    int ReturnValue;
+    int ReturnValue = 0;
 
     /*
      * This section is for debugging outside of VTune.
@@ -367,7 +367,11 @@ iJIT_NotifyEvent(iJIT_JVM_EVENT event_type, void *EventSpecificData)
         pMethodLoadArgs->method_id = method_id;
     }
 
-    ReturnValue = (int)FUNC_NotifyEvent(event_type, EventSpecificData);
+    // FUNC_NotifyEvent cannot be 0 but let's make static analyzer be happy
+    if (FUNC_NotifyEvent != 0)
+    {
+        ReturnValue = (int)FUNC_NotifyEvent(event_type, EventSpecificData);
+    }
 
     return ReturnValue;
 }
-- 
1.7.4.1

