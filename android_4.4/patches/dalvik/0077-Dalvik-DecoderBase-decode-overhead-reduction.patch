From 88d519ea6b5c7c5dc2b4effc6113e76f7542c26d Mon Sep 17 00:00:00 2001
From: Jussi Kantell <jussi.kantell@intel.com>
Date: Thu, 7 Feb 2013 10:54:46 +0200
Subject: Dalvik: DecoderBase::decode overhead reduction

BZ: 85698

This patch rearranges Mnemonic enum values reflecting
the search frequencies because the menonics are searched
in a linear fashion while decoding x86 instructions.

Also fixed Scheduler implementation not to depend on
the order of JMP and Jcc mnemonic definitions.

Has no effect on common benchmarks but the reduction
of cycles wasted can be verified using SEP.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ice309a4d9455fe59a74a52e1b1051ee7184f03ba
Orig-MCG-Change-Id: Iaf7018b6f35c7d45504caeefc39651beaeaf3b2b
Signed-off-by: Jussi Kantell <jussi.kantell@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/Schedule.cpp          |   50 +++++++++++++-----------
 vm/compiler/codegen/x86/libenc/enc_defs_ext.h |   42 +++++++++++----------
 2 files changed, 49 insertions(+), 43 deletions(-)

diff --git a/vm/compiler/codegen/x86/Schedule.cpp b/vm/compiler/codegen/x86/Schedule.cpp
index 408edea..38abb1d 100644
--- a/vm/compiler/codegen/x86/Schedule.cpp
+++ b/vm/compiler/codegen/x86/Schedule.cpp
@@ -126,6 +126,30 @@ struct MachineModelEntry {
 //! entry, then the schedule selection will not be optimal.
 MachineModelEntry atomMachineModel[Mnemonic_Count*6] = {
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //NULL, Null
+
+    {PORT1,1},{PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //JMP
+
+    {INVP,INVN},{EITHER_PORT,1},{PORT0,1},{EITHER_PORT,1},{PORT0,1},{PORT0,1}, //MOV
+
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_O
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NO
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_B
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NB
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_Z
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NZ
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_BE
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NBE
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_S
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NS
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_P
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NP
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_L
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NL
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_LE
+    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NLE
+
+    {BOTH_PORTS,1},{BOTH_PORTS,1},{EITHER_PORT,2},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //CALL
+
     {INVP,INVN},{EITHER_PORT,1},{PORT0,1},{EITHER_PORT,1},{PORT0,1},{INVP,INVN}, //ADC
     {INVP,INVN},{EITHER_PORT,1},{PORT0,1},{EITHER_PORT,1},{PORT0,1},{INVP,INVN}, //ADD
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{PORT1,5},{BOTH_PORTS,5},{INVP,INVN}, //ADDSD
@@ -133,7 +157,6 @@ MachineModelEntry atomMachineModel[Mnemonic_Count*6] = {
     {INVP,INVN},{EITHER_PORT,1},{PORT0,1},{EITHER_PORT,1},{PORT0,1},{INVP,INVN}, //AND
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //BSF
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //BSR
-    {BOTH_PORTS,1},{BOTH_PORTS,1},{EITHER_PORT,2},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //CALL
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //CMC
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{PORT0,1},{INVP,INVN},{INVP,INVN}, //CWD, CDQ
 
@@ -235,24 +258,6 @@ MachineModelEntry atomMachineModel[Mnemonic_Count*6] = {
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //INC
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //INT3
 
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_O
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NO
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_B
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NB
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_Z
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NZ
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_BE
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NBE
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_S
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NS
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_P
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NP
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_L
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NL
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_LE
-    {PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //Jcc_NLE
-
-    {PORT1,1},{PORT1,1},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //JMP
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{PORT1,1},{INVP,INVN}, //LEA
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //LEAVE
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //LOOP
@@ -260,7 +265,6 @@ MachineModelEntry atomMachineModel[Mnemonic_Count*6] = {
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //LOOPNE
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //LAHF
 
-    {INVP,INVN},{EITHER_PORT,1},{PORT0,1},{EITHER_PORT,1},{PORT0,1},{PORT0,1}, //MOV
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //MOVD
     {INVP,INVN},{PORT0,1},{PORT0,1},{PORT0,1},{PORT0,1},{PORT0,1}, //MOVQ
     {INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN},{INVP,INVN}, //MOVS8
@@ -515,7 +519,7 @@ inline bool isAluOpWithImplicitRegisterUsage(Mnemonic m) {
 //! always end a native basic block.
 inline bool Scheduler::isBasicBlockDelimiter(Mnemonic m) {
     return (m == Mnemonic_JMP || m == Mnemonic_CALL
-            || (m >= Mnemonic_Jcc && m < Mnemonic_JMP) || m == Mnemonic_RET);
+            || (m >= Mnemonic_Jcc && m <= Mnemonic_JG) || m == Mnemonic_RET);
 }
 
 //! \details Defines a mapping between the reason for edge latencies between
@@ -893,8 +897,8 @@ void Scheduler::updateUseDefInformation(LowOp * op) {
 //! operand.
 //! \param op has mnemonic JMP, Jcc, or CALL
 void Scheduler::updateUseDefInformation_imm(LowOp * op) {
-    assert((op->opCode >= Mnemonic_Jcc && op->opCode <= Mnemonic_JMP)
-            || op->opCode == Mnemonic_CALL);
+    assert((op->opCode >= Mnemonic_Jcc && op->opCode <= Mnemonic_JG)
+            || op->opCode == Mnemonic_JMP || op->opCode == Mnemonic_CALL);
     op->instructionLatency = getAtomMnemonicLatency_imm(op->opCode);
     op->portType = getAtomMnemonicPort_imm(op->opCode);
     assert(op->instructionLatency != INVN);
diff --git a/vm/compiler/codegen/x86/libenc/enc_defs_ext.h b/vm/compiler/codegen/x86/libenc/enc_defs_ext.h
index 3592513..f21c18f 100644
--- a/vm/compiler/codegen/x86/libenc/enc_defs_ext.h
+++ b/vm/compiler/codegen/x86/libenc/enc_defs_ext.h
@@ -85,6 +85,27 @@ typedef enum ConditionMnemonic {
 typedef enum Mnemonic {
 
 Mnemonic_NULL=0, Mnemonic_Null=Mnemonic_NULL,
+Mnemonic_JMP,                           // Jump
+Mnemonic_MOV,                           // Move
+Mnemonic_Jcc,                           // Jump if Condition Is Met
+    CCM(J,O),
+    CCM(J,NO),
+    CCM(J,B), CCM(J,NAE), CCM(J,C),
+    CCM(J,NB), CCM(J,AE), CCM(J,NC),
+    CCM(J,Z), CCM(J,E),
+    CCM(J,NZ), CCM(J,NE),
+    CCM(J,BE), CCM(J,NA),
+    CCM(J,NBE), CCM(J,A),
+    CCM(J,S),
+    CCM(J,NS),
+    CCM(J,P), CCM(J,PE),
+    CCM(J,NP), CCM(J,PO),
+    CCM(J,L), CCM(J,NGE),
+    CCM(J,NL), CCM(J,GE),
+    CCM(J,LE), CCM(J,NG),
+    CCM(J,NLE), CCM(J,G),
+Mnemonic_CALL,                          // Call Procedure
+
 Mnemonic_ADC,                           // Add with Carry
 Mnemonic_ADD,                           // Add
 Mnemonic_ADDSD,                         // Add Scalar Double-Precision Floating-Point Values
@@ -94,7 +115,6 @@ Mnemonic_AND,                           // Logical AND
 Mnemonic_BSF,                           // Bit scan forward
 Mnemonic_BSR,                           // Bit scan reverse
 
-Mnemonic_CALL,                          // Call Procedure
 Mnemonic_CMC,                           // Complement Carry Flag
 Mnemonic_CWD, Mnemonic_CDQ=Mnemonic_CWD,// Convert Word to Doubleword/Convert Doubleword to Qua T dword
 Mnemonic_CMOVcc,                        // Conditional Move
@@ -212,31 +232,13 @@ Mnemonic_MUL,                           // Unsigned Multiply
 Mnemonic_IMUL,                          // Signed Multiply
 Mnemonic_INC,                           // Increment by 1
 Mnemonic_INT3,                          // Call break point
-Mnemonic_Jcc,                           // Jump if Condition Is Met
-    CCM(J,O),
-    CCM(J,NO),
-    CCM(J,B), CCM(J,NAE), CCM(J,C),
-    CCM(J,NB), CCM(J,AE), CCM(J,NC),
-    CCM(J,Z), CCM(J,E),
-    CCM(J,NZ), CCM(J,NE),
-    CCM(J,BE), CCM(J,NA),
-    CCM(J,NBE), CCM(J,A),
-    CCM(J,S),
-    CCM(J,NS),
-    CCM(J,P), CCM(J,PE),
-    CCM(J,NP), CCM(J,PO),
-    CCM(J,L), CCM(J,NGE),
-    CCM(J,NL), CCM(J,GE),
-    CCM(J,LE), CCM(J,NG),
-    CCM(J,NLE), CCM(J,G),
-Mnemonic_JMP,                           // Jump
+
 Mnemonic_LEA,                           // Load Effective Address
 Mnemonic_LEAVE,                         // High Level Procedure Exit
 Mnemonic_LOOP,                          // Loop according to ECX counter
 Mnemonic_LOOPE,                          // Loop according to ECX counter
 Mnemonic_LOOPNE, Mnemonic_LOOPNZ = Mnemonic_LOOPNE, // Loop according to ECX
 Mnemonic_LAHF,                          // Load Flags into AH
-Mnemonic_MOV,                           // Move
 Mnemonic_MOVD,                          // Move Double word
 Mnemonic_MOVQ,                          // Move Quadword
 /*Mnemonic_MOVS,                        // Move Data from String to String*/
-- 
1.7.4.1

