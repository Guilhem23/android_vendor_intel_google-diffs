From 61ba50bafc473c394f0c433c2906a314cbde1131 Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Fri, 30 Aug 2013 15:09:36 +0700
Subject: Dalvik: AccumulationSinking should not consider sub-expression re-used in a loop

BZ: 133629

AccumulationSinking optimization should not consider sub-expression which is used
in the loop for other computation then considered one. It includes the case when
sub-expression is used on next iteration of the loop.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I1ed01947ab2241a15a672e89de96aaf9e7f1db44
Orig-MCG-Change-Id: I76b013ce9d496d20fcfea21f9b97019560127e0c
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Reviewed-on: http://android.intel.com:8080/128744
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Provodin, Vitaly A <vitaly.a.provodin@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 vm/compiler/AccumulationSinking.cpp |   30 +++++++++++++++++-------------
 1 files changed, 17 insertions(+), 13 deletions(-)

diff --git a/vm/compiler/AccumulationSinking.cpp b/vm/compiler/AccumulationSinking.cpp
index c8c3198..1a23cf5 100644
--- a/vm/compiler/AccumulationSinking.cpp
+++ b/vm/compiler/AccumulationSinking.cpp
@@ -528,15 +528,10 @@ static bool checkUsage (const MIR *mir)
     {
         SUsedChain *chain = chains[i];
 
-        //Basically, we fail if the chain has a next and if the next is in the same BB
-        if (chain != 0 && chain->nextUse != 0 && chain->nextUse->mir->bb == mir->bb)
+        //Basically, we fail if the chain has a next
+        if (chain != 0 && chain->nextUse != 0)
         {
-            //We ignore the phi node because in the case of an accumulation it is fine to have a nextUse
-            //as a phi node that is in the same BB
-            if (chain->nextUse->mir->dalvikInsn.opcode != static_cast<Opcode> (kMirOpPhi))
-            {
-                return false;
-            }
+            return false;
         }
     }
 
@@ -590,9 +585,17 @@ static void buildExpressions(CompilationUnit *cUnit, LoopInformation *info,
     }
 }
 
+/**
+ * @brief Recursive walker over sub-expression for find a dangling constants
+ * @param expression the expression where to find a dangling constant
+ * @param expressionRef the leaf expressions with dangling constants
+ * @param inductionVariableIncrement the increment value on the chosen IV
+ * @param isRootExpression whether the expression is root one
+ * @return true if dangling constant is found
+ */
 static bool findDanglingConstantsHelper(Expression * expression,
         std::vector< BytecodeExpression *> & expressionRef,
-        const int & inductionVariableIncrement)
+        const int & inductionVariableIncrement, const bool isRootExpression)
 {
     if (expression == 0)
     {
@@ -613,7 +616,8 @@ static bool findDanglingConstantsHelper(Expression * expression,
     const MIR * expressionMir = bytecodeExpr->getMir();
 
     //If check usage returns false, let's be conservative and not accept it.
-    if (checkUsage(expressionMir) == false)
+    //Check only non-root expressions, root expression was checked when we chose it.
+    if (isRootExpression == false && checkUsage(expressionMir) == false)
     {
         return false;
     }
@@ -672,12 +676,12 @@ static bool findDanglingConstantsHelper(Expression * expression,
     {
         //Look for a constant on the right
         foundConstantRight = findDanglingConstantsHelper(rhsChild, expressionRef,
-                inductionVariableIncrement);
+                inductionVariableIncrement, false);
     }
 
     //Look for a constant on the left
     foundConstantLeft = findDanglingConstantsHelper(lhsChild, expressionRef,
-            inductionVariableIncrement);
+            inductionVariableIncrement, false);
 
     return (foundConstantLeft || foundConstantRight);
 }
@@ -732,7 +736,7 @@ static void findDanglingConstants(LoopInformation *info,
         std::vector<BytecodeExpression *> expressionsToRemoveList;
 
         foundDanglingConstant = findDanglingConstantsHelper(expression,
-                expressionsToRemoveList, increment);
+                expressionsToRemoveList, increment, true);
 
         if (foundDanglingConstant == true)
         {
-- 
1.7.4.1

