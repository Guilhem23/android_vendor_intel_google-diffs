From 2773539ffd4aa431f1755e99a8f6d386d9f5e371 Mon Sep 17 00:00:00 2001
From: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Date: Fri, 24 May 2013 15:34:52 +0700
Subject: Dalvik: The Hprof should skip freed class objects

BZ: 104780

There is another dangerous case that might bother Hprof while dumping heap objects.
In addition to the case when object has a NULL class, there a case when it is a
ClassObject and it was freed by dvmFreeClassInnards function. Such object has no
description and can't be dumped in a regular way. Thus, to avoid crashes, this patch
adds an additional test that checks whether the class object is freed or not.

Category: device-enablement
Domain: AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: yes

Change-Id: I03da9ed6921826dd5017c3984ebc5e6fb7f2c7f3
Orig-MCG-Change-Id: I99583de119270c38cbed4759bfe8b9f3db6a2281
Signed-off-by: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/hprof/HprofHeap.cpp |   20 +++++++++++++++-----
 1 files changed, 15 insertions(+), 5 deletions(-)

diff --git a/vm/hprof/HprofHeap.cpp b/vm/hprof/HprofHeap.cpp
index 8c34ff3..dd8bdf4 100644
--- a/vm/hprof/HprofHeap.cpp
+++ b/vm/hprof/HprofHeap.cpp
@@ -256,11 +256,21 @@ int hprofDumpHeapObject(hprof_context_t *ctx, const Object *obj)
 
     clazz = obj->clazz;
 
-    if (clazz == NULL) {
-        /* This object will bother HprofReader, because it has a NULL
-         * class, so just don't dump it. It could be
-         * gDvm.unlinkedJavaLangClass or it could be an object just
-         * allocated which hasn't been initialized yet.
+    if (clazz == NULL ||
+        (dvmIsClassObject(obj) && ((ClassObject *) obj)->descriptor == NULL))
+    {
+        /* There are two dangerous cases when this object will bother
+         * HprofReader. First, it has a NULL class. Second, it is a
+         * ClassObject and it has a NULL descriptor. The reasons for
+         * such cases listed bellow:
+         *
+         *   1. A NULL class: It could be gDvm.unlinkedJavaLangClass or
+         *      it could be an object just allocated which hasn't been
+         *      initialized yet.
+         *
+         *   2. A NULL descriptor in ClassObject: It could be freed by
+         *      dvmFreeClassInnards() due to linkage error or other
+         *      reasons.
          */
     } else {
         if (dvmIsClassObject(obj)) {
-- 
1.7.4.1

