From 212c0f13724e633b9bde8958b82eff7997dcaba7 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Thu, 28 Feb 2013 18:31:52 -0800
Subject: Dalvik: Null checking tries to set an extra bit

BZ: 90198

The Null Check pass sets a BitVector using dvmSetInitialBits and provides a
   number of bits one too big.
This can lead to an overflow case. The following patch sets the number of bits
   requested correctly.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ic6dff486b5cc1391e6ece9feb07b2995b8a4d512
Orig-MCG-Change-Id: Ic55271f77733f8910c70f8ee8fd47c367e9b3364
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/Checks.cpp |    5 ++++-
 1 files changed, 4 insertions(+), 1 deletions(-)

diff --git a/vm/compiler/Checks.cpp b/vm/compiler/Checks.cpp
index 97b2f0c..7057bbd 100644
--- a/vm/compiler/Checks.cpp
+++ b/vm/compiler/Checks.cpp
@@ -312,9 +312,12 @@ void initializeNullChecks (CompilationUnit *cUnit, SRemoveData *removeData, BitV
     //Ok if we don't have this, it is because we have a backward branch, ignore it
     if (elem != NULL)
     {
+        //Paranoid
+        assert (cUnit->numSSARegs > 0);
+
         //In this case, for the null handling, we are going to be setting every bit to a potential handled
         //The intersection code will remove all the false positives
-        dvmSetInitialBits (tempNullCheck, cUnit->numSSARegs);
+        dvmSetInitialBits (tempNullCheck, cUnit->numSSARegs - 1);
 
         /* tempNullCheck = tempNullCheck ^ constants already checked */
         dvmIntersectBitVectors(tempNullCheck, tempNullCheck, elem);
-- 
1.7.4.1

