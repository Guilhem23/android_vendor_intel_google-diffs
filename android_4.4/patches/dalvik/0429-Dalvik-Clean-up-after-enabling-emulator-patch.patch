From 0e814067a251abd7903e2f3e4640f6f5a3bd5925 Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Fri, 13 Dec 2013 13:47:00 +0700
Subject: Dalvik: Clean-up after enabling emulator patch

BZ: 158789

Clean-up after enabling emulator patch according to comment to that patch.
Enable emulator patch is here: http://android.intel.com:8080/#/c/149240/

Change-Id: Ib3a1fc840e70cc633b657fd2a785a2efc27ac0a2
Category: device enablement
Domain: AOSP.Dalvik-Compiler-ME; AOSP.Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, need rework
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/Init.cpp                       |    2 +-
 vm/alloc/HeapBitmap.cpp           |    6 ++++
 vm/alloc/HeapBitmap.h             |    6 ++++
 vm/alloc/MarkSweep.cpp            |    9 ++++--
 vm/compiler/Compiler.h            |   16 -----------
 vm/compiler/IntermediateRep.cpp   |   51 ------------------------------------
 vm/compiler/SSATransformation.cpp |   21 ++++++++-------
 vm/compiler/Utility.cpp           |   52 +++++++++++++++++++++++++++++++++++++
 vm/compiler/Utility.h             |   16 +++++++++++
 9 files changed, 98 insertions(+), 81 deletions(-)

diff --git a/vm/Init.cpp b/vm/Init.cpp
index b3a5b96..fe8ddcc 100644
--- a/vm/Init.cpp
+++ b/vm/Init.cpp
@@ -167,7 +167,7 @@ static void usage(const char* progName)
     dvmFprintf(stderr, "  -Xjitcheckcg\n");
     dvmFprintf(stderr, "  -Xjitverbose\n");
 #ifdef ARCH_IA32
-    dvmFprintf(stderr, "  -Xjittablesize:decimalvalue\n");
+    dvmFprintf(stderr, "  -Xjittablesize:<decimalvalue>\n");
     dvmFprintf(stderr, "  -Xjitbackendoption:key=value[,key=value,...] (Provide option passing to the backend\n");
     dvmFprintf(stderr, "  -Xjitbackendstring:value (Provide a string to the backend for post-processing\n");
     dvmFprintf(stderr, "  -Xjit[no]scheduling (Turn on/off Atom Instruction Scheduling)\n");
diff --git a/vm/alloc/HeapBitmap.cpp b/vm/alloc/HeapBitmap.cpp
index bfaccf6..0693acc 100644
--- a/vm/alloc/HeapBitmap.cpp
+++ b/vm/alloc/HeapBitmap.cpp
@@ -202,10 +202,16 @@ void dvmHeapBitmapScanWalk(HeapBitmap *bitmap,
  *
  * This implementation contains the TLA version if requested or not
  */
+#ifdef WITH_TLA
 void dvmHeapBitmapSweepWalk(const HeapBitmap *liveHb, const HeapBitmap *markHb,
                             uintptr_t base, uintptr_t max,
                             BitmapSweepCallback *callback, void *callbackArg,
                             bool withTLA, bool isConcurrent, mspace msp)
+#else
+void dvmHeapBitmapSweepWalk(const HeapBitmap *liveHb, const HeapBitmap *markHb,
+                            uintptr_t base, uintptr_t max,
+                            BitmapSweepCallback *callback, void *callbackArg)
+#endif
 {
     assert(liveHb != NULL);
     assert(liveHb->bits != NULL);
diff --git a/vm/alloc/HeapBitmap.h b/vm/alloc/HeapBitmap.h
index 0319f51..ac99eaf 100644
--- a/vm/alloc/HeapBitmap.h
+++ b/vm/alloc/HeapBitmap.h
@@ -146,8 +146,14 @@ void dvmHeapBitmapScanWalk(HeapBitmap *bitmap,
  * by directly comparing address; when moving to the objects from another private buffer or
  * the object allocated by dlmalloc, call dvmTLARecyclePrivateBuffer() to recycle current private buffer
  */
+#ifdef WITH_TLA
 void dvmHeapBitmapSweepWalk(const HeapBitmap *liveHb, const HeapBitmap *markHb,
                             uintptr_t base, uintptr_t max,
                             BitmapSweepCallback *callback, void *callbackArg,
                             bool withTLA, bool isConcurrent, mspace msp);
+#else
+void dvmHeapBitmapSweepWalk(const HeapBitmap *liveHb, const HeapBitmap *markHb,
+                            uintptr_t base, uintptr_t max,
+                            BitmapSweepCallback *callback, void *callbackArg);
+#endif
 #endif  // DALVIK_HEAP_BITMAP_H_
diff --git a/vm/alloc/MarkSweep.cpp b/vm/alloc/MarkSweep.cpp
index 9bde005..c1ad6ad 100644
--- a/vm/alloc/MarkSweep.cpp
+++ b/vm/alloc/MarkSweep.cpp
@@ -999,7 +999,6 @@ void dvmHeapSweepUnmarkedObjects(bool isPartial, bool isConcurrent,
     prevMark = dvmHeapSourceGetLiveBits();
 
     bool withTLA = false;
-    mspace spaceForTLA = 0;
 
 #ifdef WITH_TLA
     bool resultIntercept = false;
@@ -1012,7 +1011,6 @@ void dvmHeapSweepUnmarkedObjects(bool isPartial, bool isConcurrent,
 
         /* Diable TLAMalloc */
         resultIntercept = dvmTLADisableMalloc();
-        spaceForTLA = dvmHeapSourceGetHeapMsp();
     }
 #endif
 
@@ -1022,9 +1020,14 @@ void dvmHeapSweepUnmarkedObjects(bool isPartial, bool isConcurrent,
          *   - Depending on compilation options and command-line options, we might want TLA
          *     Reflect that via the last arguments
          */
+#ifdef WITH_TLA
         dvmHeapBitmapSweepWalk (prevLive, prevMark, base[i], max[i],
                                 sweepBitmapCallback, &ctx,
-                                withTLA, isConcurrent, spaceForTLA);
+                                withTLA, isConcurrent, dvmHeapSourceGetHeapMsp());
+#else
+        dvmHeapBitmapSweepWalk (prevLive, prevMark, base[i], max[i],
+                                sweepBitmapCallback, &ctx);
+#endif
     }
 
 #ifdef WITH_TLA
diff --git a/vm/compiler/Compiler.h b/vm/compiler/Compiler.h
index f3aab6b..1e5e1fa 100644
--- a/vm/compiler/Compiler.h
+++ b/vm/compiler/Compiler.h
@@ -371,22 +371,6 @@ MIR *dvmCompilerFindLowestMIRInColor (MIR *elem);
 bool dvmCompilerBuildDefUseChain (CompilationUnit *cUnit, BasicBlock *bb);
 
 /**
- * @brief Removes all bytecode blocks that have no predecessors
- * @param cUnit the Compilation Unit
- * @param bb the Basic Block
- * @return Returns whether we changed anything for the basic block
- */
-bool dvmCompilerRemoveUnreachableBlocks (CompilationUnit *cUnit, BasicBlock *bb);
-
-/**
- * @brief Get the used virtual registers in the BasicBlock and fill cUnit->usedVRs
- * @param cUnit the CompilationUnit
- * @param bb the BasicBlock
- * @return returns whether we changed any field in the BasicBlock structure and would like a second call on it
- */
-bool dvmCompilerFillUsedVector (CompilationUnit *cUnit, BasicBlock *bb);
-
-/**
  * @brief Checks if the opcode is a conditional branch.
  * @param opcode The opcode to check which may be an extended one
  * @return Returns whether we are looking at a conditional branch
diff --git a/vm/compiler/IntermediateRep.cpp b/vm/compiler/IntermediateRep.cpp
index 0fbea94..de3e9a1 100644
--- a/vm/compiler/IntermediateRep.cpp
+++ b/vm/compiler/IntermediateRep.cpp
@@ -1760,54 +1760,3 @@ void dvmCompilerUpdatePredecessors (BasicBlock *parent, BasicBlock *oldChild, Ba
         dvmCompilerSetBit (newChild->predecessors, parent->id);
     }
 }
-
-bool dvmCompilerRemoveUnreachableBlocks (CompilationUnit *cUnit, BasicBlock *bb)
-{
-    //Get the predecessors for this block
-    unsigned int predecessorCount = dvmCountSetBits (bb->predecessors);
-
-    //If it has no predecessors and it is a bytecode type block, then we can remove it without repercussion
-    if (predecessorCount == 0 && bb->blockType == kDalvikByteCode)
-    {
-        //Remove the block
-        dvmCompilerHideBasicBlock (cUnit->blockList, bb);
-
-        //We changed the CFG
-        return true;
-    }
-
-    //We've done nothing
-    return false;
-}
-
-bool dvmCompilerFillUsedVector (CompilationUnit *cUnit, BasicBlock *bb)
-{
-    for (MIR *mir = bb->firstMIRInsn; mir != 0; mir = mir->next)
-    {
-        //Get SSA
-        SSARepresentation *ssaRep = mir->ssaRep;
-
-        if (ssaRep == 0)
-        {
-            continue;
-        }
-
-        //Go through the uses
-        int numUses = ssaRep->numUses;
-
-        for (int i = 0; i < numUses; i++)
-        {
-            //Get use
-            int ssaNum = ssaRep->uses[i];
-
-            //Get VR
-            int vr = dvmExtractSSARegister (cUnit, ssaNum);
-
-            //Set the bit in the used VRs' bitvector
-            dvmSetBit (cUnit->usedVRs, vr);
-        }
-    }
-
-    //Function did not instructions in the BB
-    return false;
-}
diff --git a/vm/compiler/SSATransformation.cpp b/vm/compiler/SSATransformation.cpp
index 7d253a3..6cb7f5c 100644
--- a/vm/compiler/SSATransformation.cpp
+++ b/vm/compiler/SSATransformation.cpp
@@ -1154,19 +1154,20 @@ bool dvmCompilerCalculateBasicBlockInformation (CompilationUnit *cUnit, bool fil
             kAllNodes,
             false /* isIterative */);
 
-#ifdef ARCH_IA32
-    //Finally, find the induction variables
-    dvmCompilerFindInductionVariables (cUnit, cUnit->loopInformation);
+    if (cUnit->loopInformation != 0)
+    {
+        //Finally, find the induction variables
+        dvmCompilerFindInductionVariables (cUnit, cUnit->loopInformation);
 
-    //Do memory aliasing
-    dvmCompilerMemoryAliasing (cUnit);
+        //Do memory aliasing
+        dvmCompilerMemoryAliasing (cUnit);
 
-    //Do Local Value Numbering
-    dvmCompilerLocalValueNumbering (cUnit);
+        //Do Local Value Numbering
+        dvmCompilerLocalValueNumbering (cUnit);
 
-    //Do invariant detection in a loop
-    dvmCompilerVariant (cUnit);
-#endif
+        //Do invariant detection in a loop
+        dvmCompilerVariant (cUnit);
+    }
 
     return true;
 }
diff --git a/vm/compiler/Utility.cpp b/vm/compiler/Utility.cpp
index 328b12e..c58721c 100644
--- a/vm/compiler/Utility.cpp
+++ b/vm/compiler/Utility.cpp
@@ -15,6 +15,7 @@
  */
 
 #include "Dalvik.h"
+#include "Dataflow.h"
 #include "CompilerInternals.h"
 #include "Utility.h"
 
@@ -1106,3 +1107,54 @@ bool dvmCompilerDoesContainLoop (GrowableList &blockList, BasicBlock *entry)
 
     return foundLoop;
 }
+
+bool dvmCompilerRemoveUnreachableBlocks (CompilationUnit *cUnit, BasicBlock *bb)
+{
+    //Get the predecessors for this block
+    unsigned int predecessorCount = dvmCountSetBits (bb->predecessors);
+
+    //If it has no predecessors and it is a bytecode type block, then we can remove it without repercussion
+    if (predecessorCount == 0 && bb->blockType == kDalvikByteCode)
+    {
+        //Remove the block
+        dvmCompilerHideBasicBlock (cUnit->blockList, bb);
+
+        //We changed the CFG
+        return true;
+    }
+
+    //We've done nothing
+    return false;
+}
+
+bool dvmCompilerFillUsedVector (CompilationUnit *cUnit, BasicBlock *bb)
+{
+    for (MIR *mir = bb->firstMIRInsn; mir != 0; mir = mir->next)
+    {
+        //Get SSA
+        SSARepresentation *ssaRep = mir->ssaRep;
+
+        if (ssaRep == 0)
+        {
+            continue;
+        }
+
+        //Go through the uses
+        int numUses = ssaRep->numUses;
+
+        for (int i = 0; i < numUses; i++)
+        {
+            //Get use
+            int ssaNum = ssaRep->uses[i];
+
+            //Get VR
+            int vr = dvmExtractSSARegister (cUnit, ssaNum);
+
+            //Set the bit in the used VRs' bitvector
+            dvmSetBit (cUnit->usedVRs, vr);
+        }
+    }
+
+    //Function did not instructions in the BB
+    return false;
+}
diff --git a/vm/compiler/Utility.h b/vm/compiler/Utility.h
index dbc9c21..8fbfa9c 100644
--- a/vm/compiler/Utility.h
+++ b/vm/compiler/Utility.h
@@ -110,4 +110,20 @@ bool dvmCompilerDoesContainLoop (GrowableList &blockList, BasicBlock *entry);
 /* Reset optimization flags for all MIRs in BasicBlock */
 void dvmCompilerResetOptimizationFlags (const BasicBlock *bb, int resetFlags);
 
+/**
+ * @brief Removes all bytecode blocks that have no predecessors
+ * @param cUnit the Compilation Unit
+ * @param bb the Basic Block
+ * @return Returns whether we changed anything for the basic block
+ */
+bool dvmCompilerRemoveUnreachableBlocks (CompilationUnit *cUnit, BasicBlock *bb);
+
+/**
+ * @brief Get the used virtual registers in the BasicBlock and fill cUnit->usedVRs
+ * @param cUnit the CompilationUnit
+ * @param bb the BasicBlock
+ * @return returns whether we changed any field in the BasicBlock structure and would like a second call on it
+ */
+bool dvmCompilerFillUsedVector (CompilationUnit *cUnit, BasicBlock *bb);
+
 #endif
-- 
1.7.4.1

