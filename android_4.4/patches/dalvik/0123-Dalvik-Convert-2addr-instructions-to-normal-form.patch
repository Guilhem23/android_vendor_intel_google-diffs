From a6ab81b5b6aacdd2ee68b4530e5aa67ba421a29d Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Thu, 4 Apr 2013 14:23:33 -0700
Subject: Dalvik: Convert 2addr instructions to normal form

BZ: 98771

Some optimizations rewrite instructions to use different virtual registers.
Since 2addr forms cannot be rewritten because the first operand overlaps the
destination, they are now converted to normal form.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I5938f6f6ce947d3c7b7e328a5d48144919417c7c
Orig-MCG-Change-Id: Iaf81944304237e82dbfe9274930b76f859abbc1e
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/BBOptimization.cpp              |  149 +++++++++++++++++++++++++++
 vm/compiler/BBOptimization.h                |    8 ++
 vm/compiler/LoopOpt.cpp                     |    6 +-
 vm/compiler/codegen/x86/BytecodeVisitor.cpp |  105 ++++++++++---------
 4 files changed, 215 insertions(+), 53 deletions(-)

diff --git a/vm/compiler/BBOptimization.cpp b/vm/compiler/BBOptimization.cpp
index 3314a08..ad14586 100644
--- a/vm/compiler/BBOptimization.cpp
+++ b/vm/compiler/BBOptimization.cpp
@@ -1071,3 +1071,152 @@ void dvmCompilerReorder (CompilationUnit *cUnit, Pass *pass)
         id++;
     }
 }
+
+/**
+ * @brief Converts the 2addr opcodes to their normal equivalents.
+ * @param opcode The instruction opcode.
+ * @return Returns the normal form if 2addr instruction is found.
+ * Otherwise, it returns the same opcode as function argument passed.
+ */
+static Opcode convertFrom2addr (Opcode opcode)
+{
+    Opcode result = opcode;
+
+    switch (opcode)
+    {
+        case OP_ADD_INT_2ADDR:
+            result = OP_ADD_INT;
+            break;
+        case OP_SUB_INT_2ADDR:
+            result = OP_SUB_INT;
+            break;
+        case OP_MUL_INT_2ADDR:
+            result = OP_MUL_INT;
+            break;
+        case OP_DIV_INT_2ADDR:
+            result = OP_DIV_INT;
+            break;
+        case OP_REM_INT_2ADDR:
+            result = OP_REM_INT;
+            break;
+        case OP_AND_INT_2ADDR:
+            result = OP_AND_INT;
+            break;
+        case OP_OR_INT_2ADDR:
+            result = OP_OR_INT;
+            break;
+        case OP_XOR_INT_2ADDR:
+            result = OP_XOR_INT;
+            break;
+        case OP_SHL_INT_2ADDR:
+            result = OP_SHL_INT;
+            break;
+        case OP_SHR_INT_2ADDR:
+            result = OP_SHR_INT;
+            break;
+        case OP_USHR_INT_2ADDR:
+            result = OP_USHR_INT;
+            break;
+        case OP_ADD_LONG_2ADDR:
+            result = OP_ADD_LONG;
+            break;
+        case OP_SUB_LONG_2ADDR:
+            result = OP_SUB_LONG;
+            break;
+        case OP_MUL_LONG_2ADDR:
+            result = OP_MUL_LONG;
+            break;
+        case OP_DIV_LONG_2ADDR:
+            result = OP_DIV_LONG;
+            break;
+        case OP_REM_LONG_2ADDR:
+            result = OP_REM_LONG;
+            break;
+        case OP_AND_LONG_2ADDR:
+            result = OP_AND_LONG;
+            break;
+        case OP_OR_LONG_2ADDR:
+            result = OP_OR_LONG;
+            break;
+        case OP_XOR_LONG_2ADDR:
+            result = OP_XOR_LONG;
+            break;
+        case OP_SHL_LONG_2ADDR:
+            result = OP_SHL_LONG;
+            break;
+        case OP_SHR_LONG_2ADDR:
+            result = OP_SHR_LONG;
+            break;
+        case OP_USHR_LONG_2ADDR:
+            result = OP_USHR_LONG;
+            break;
+        case OP_ADD_FLOAT_2ADDR:
+            result = OP_ADD_FLOAT;
+            break;
+        case OP_SUB_FLOAT_2ADDR:
+            result = OP_SUB_FLOAT;
+            break;
+        case OP_MUL_FLOAT_2ADDR:
+            result = OP_MUL_FLOAT;
+            break;
+        case OP_DIV_FLOAT_2ADDR:
+            result = OP_DIV_FLOAT;
+            break;
+        case OP_REM_FLOAT_2ADDR:
+            result = OP_REM_FLOAT;
+            break;
+        case OP_ADD_DOUBLE_2ADDR:
+            result = OP_ADD_DOUBLE;
+            break;
+        case OP_SUB_DOUBLE_2ADDR:
+            result = OP_SUB_DOUBLE;
+            break;
+        case OP_MUL_DOUBLE_2ADDR:
+            result = OP_MUL_DOUBLE;
+            break;
+        case OP_DIV_DOUBLE_2ADDR:
+            result = OP_DIV_DOUBLE;
+            break;
+        case OP_REM_DOUBLE_2ADDR:
+            result = OP_REM_DOUBLE;
+            break;
+        default:
+            break;
+    }
+
+    return result;
+}
+
+bool dvmCompilerConvert2addr (CompilationUnit *cUnit, BasicBlock *bb)
+{
+    bool result = false;
+
+    //Go through each MIR
+    for (MIR *mir = bb->firstMIRInsn; mir != 0; mir = mir->next)
+    {
+        //Get local copy of current opcode
+        Opcode currentOpcode = mir->dalvikInsn.opcode;
+
+        //Check if we can convert this opcode to the non-2addr form
+        Opcode newOpcode = convertFrom2addr (currentOpcode);
+
+        //When they aren't equal, it means we found a 2addr which we converted
+        if (currentOpcode != newOpcode)
+        {
+            //Update opcode
+            mir->dalvikInsn.opcode = newOpcode;
+
+            //vA is always the destination register. However, for 2addr form
+            //vA is also the first source register while in the other case vB
+            //is the first source register. Thus we want to copy the operands.
+            mir->dalvikInsn.vC = mir->dalvikInsn.vB;
+            mir->dalvikInsn.vB = mir->dalvikInsn.vA;
+
+            //We have at least one update
+            result = true;
+        }
+
+    }
+
+    return result;
+}
diff --git a/vm/compiler/BBOptimization.h b/vm/compiler/BBOptimization.h
index 875098e..6057ed9 100644
--- a/vm/compiler/BBOptimization.h
+++ b/vm/compiler/BBOptimization.h
@@ -71,4 +71,12 @@ void dvmCompilerFormOldLoop (CompilationUnit *cUnit, Pass *pass);
  */
 void dvmCompilerReorder (CompilationUnit *cUnit, Pass *pass);
 
+/**
+ * @brief Converts the bytecodes that use the 2addr opcode to their normal equivalents.
+ * @details For example, it converts "add-int/2addr v1, v2" to "add-int v1, v1, v2".
+ * @param cUnit the CompilationUnit
+ * @param bb the BasicBlock
+ * @return Returns whether anything was changed in the BasicBlock.
+ */
+bool dvmCompilerConvert2addr (CompilationUnit *cUnit, BasicBlock *bb);
 #endif
diff --git a/vm/compiler/LoopOpt.cpp b/vm/compiler/LoopOpt.cpp
index f9af3b8..a5b20ec 100644
--- a/vm/compiler/LoopOpt.cpp
+++ b/vm/compiler/LoopOpt.cpp
@@ -28,7 +28,6 @@
  * @brief Static functions defined below
  */
 static void handlePassFlag (CompilationUnit *cUnit, Pass *pass);
-static bool clearPHIInformationHelper (CompilationUnit *cUnit, BasicBlock *bb);
 static void clearPHIInformation (CompilationUnit *cUnit);
 
 /**
@@ -55,6 +54,9 @@ START_PASSES
                 dvmCompilerFormOldLoop, 0, 0, 0, kOptimizationBasicBlockChange),
     NEW_PASS ("Check Removal", kAllNodes, 0, 0,
                 dvmCompilerStartCheckRemoval, dvmCompilerEndCheckRemoval, dvmCompilerCheckRemoval, 0, 0),
+    //The 2addr pass should come before any pass that need register rewriting.
+    NEW_PASS ("Convert 2addr to normal", kAllNodes, 0, 0,
+                0, 0, dvmCompilerConvert2addr, 0, kOptimizationBasicBlockChange),
     //Memory Aliasing only works on one basic block so let's try to merge first
     //For the moment, no pass will create new blocks, etc. so this is fine up here
     //Otherwise, we might want to duplicate the merge or make the gate for memory aliasing smarter
@@ -208,7 +210,7 @@ void dvmCompilerLoopOptimizationDriver (CompilationUnit *cUnit)
  * @param bb the BasicBlock
  * @return whether we changed something to the BasicBlock
  */
-bool clearPHIInformationHelper (CompilationUnit *cUnit, BasicBlock *bb)
+static bool clearPHIInformationHelper (CompilationUnit *cUnit, BasicBlock *bb)
 {
     bool res = false;
 
diff --git a/vm/compiler/codegen/x86/BytecodeVisitor.cpp b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
index d0e4f5e..e19877d 100644
--- a/vm/compiler/codegen/x86/BytecodeVisitor.cpp
+++ b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
@@ -5253,16 +5253,32 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
 
     case OP_ADD_LONG:
     case OP_ADD_LONG_2ADDR:
+        vA = currentMIR->dalvikInsn.vA;
+
+        //In the case of OP_ADD_LONG, we use vB otherwise we use vA
+        if (inst_op == OP_ADD_LONG)
+        {
+            v1 = currentMIR->dalvikInsn.vB;
+        }
+        else
+        {
+            v1 = vA;
+        }
+
         infoArray[0].regNum = 1;
         infoArray[0].refCount = 3; //define, update, use
         infoArray[0].physicalType = LowOpndRegType_gp;
-        if (inst_op == OP_ADD_LONG)
+        if (vA != v1)
+        {
             infoArray[0].shareWithVR = false;
+        }
         infoArray[1].regNum = 2;
         infoArray[1].refCount = 3; //define, use
         infoArray[1].physicalType = LowOpndRegType_gp;
-        if (inst_op == OP_ADD_LONG)
+        if (vA != v1)
+        {
             infoArray[1].shareWithVR = false;
+        }
         return 2;
     case OP_SUB_LONG:
     case OP_AND_LONG:
@@ -5272,6 +5288,7 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
     case OP_AND_LONG_2ADDR:
     case OP_OR_LONG_2ADDR:
     case OP_XOR_LONG_2ADDR:
+        //In the case of non 2ADDR, we use vB otherwise we use vA
         if(inst_op == OP_ADD_LONG || inst_op == OP_SUB_LONG || inst_op == OP_AND_LONG ||
            inst_op == OP_OR_LONG || inst_op == OP_XOR_LONG) {
             vA = currentMIR->dalvikInsn.vA;
@@ -5292,6 +5309,7 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
 
     case OP_SHL_LONG:
     case OP_SHL_LONG_2ADDR:
+        //In the case of non 2ADDR, we use vB and vC otherwise we use vA
         if(inst_op == OP_SHL_LONG) {
             vA = currentMIR->dalvikInsn.vA;
             v1 = currentMIR->dalvikInsn.vB;
@@ -5396,11 +5414,21 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
             return 3;
          }
 
-    case OP_MUL_LONG: //general purpose register
-        vA = currentMIR->dalvikInsn.vA;//INST_AA(inst);
-        v1 = currentMIR->dalvikInsn.vB;
+    case OP_MUL_LONG:
+    case OP_MUL_LONG_2ADDR:
+        if(inst_op == OP_MUL_LONG)
+        {
+            v1 = currentMIR->dalvikInsn.vB;
+        }
+        else
+        {
+            //For 2addr form, the destination is also first operand
+            v1 = currentMIR->dalvikInsn.vA;
+        }
         v2 = currentMIR->dalvikInsn.vC;
-        if (v1 != v2){  // when the multuplicands are not the same
+
+        if (v1 != v2) // when the multiplicands are not the same
+        {
            infoArray[0].regNum = 1;
            infoArray[0].refCount = 6;
            infoArray[0].physicalType = LowOpndRegType_gp;
@@ -5418,7 +5446,9 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
            infoArray[4].refCount = 2; //for mul_opc
            infoArray[4].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
            return 5;
-        } else {        // when square of a number is to be computed
+        }
+        else // when square of a number is to be computed
+        {
            infoArray[0].regNum = 1;
            infoArray[0].refCount = 8;
            infoArray[0].physicalType = LowOpndRegType_gp;
@@ -5431,42 +5461,6 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
            infoArray[2].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
            return 3;
          }
-
-    case OP_MUL_LONG_2ADDR:
-        v1 = currentMIR->dalvikInsn.vA;
-        v2 = currentMIR->dalvikInsn.vB;
-        if (v1 != v2){  // when the multuplicands are not the same
-          infoArray[0].regNum = 1;
-          infoArray[0].refCount = 6;
-          infoArray[0].physicalType = LowOpndRegType_gp;
-          infoArray[0].shareWithVR = false;
-          infoArray[1].regNum = 2;
-          infoArray[1].refCount = 3;
-          infoArray[1].physicalType = LowOpndRegType_gp;
-          infoArray[2].regNum = 3;
-          infoArray[2].refCount = 3;
-          infoArray[2].physicalType = LowOpndRegType_gp;
-          infoArray[3].regNum = PhysicalReg_EAX;
-          infoArray[3].refCount = 2+1; //for mul_opc
-          infoArray[3].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
-          infoArray[4].regNum = PhysicalReg_EDX;
-          infoArray[4].refCount = 2; //for mul_opc
-          infoArray[4].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
-          return 5;
-        } else {    // when square of a number is to be computed
-          infoArray[0].regNum = 1;
-          infoArray[0].refCount = 8;
-          infoArray[0].physicalType = LowOpndRegType_gp;
-          infoArray[0].shareWithVR = false;
-          infoArray[1].regNum = PhysicalReg_EAX;
-          infoArray[1].refCount = 2+1; //for mul_opc
-          infoArray[1].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
-          infoArray[2].regNum = PhysicalReg_EDX;
-          infoArray[2].refCount = 3+1; //for mul_opc
-          infoArray[2].physicalType = LowOpndRegType_gp | LowOpndRegType_hard;
-          return 3;
-        }
-
     case OP_DIV_LONG:
     case OP_REM_LONG:
     case OP_DIV_LONG_2ADDR:
@@ -5508,17 +5502,26 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
     case OP_DIV_FLOAT_2ADDR:
     case OP_DIV_DOUBLE:
     case OP_DIV_DOUBLE_2ADDR:
+        vA = currentMIR->dalvikInsn.vA;
+        //In the case of non 2ADDR, we use vB and vC otherwise we use vA
+        if (inst_op == OP_ADD_FLOAT || inst_op == OP_SUB_FLOAT
+                || inst_op == OP_MUL_FLOAT || inst_op == OP_ADD_DOUBLE
+                || inst_op == OP_SUB_DOUBLE || inst_op == OP_MUL_DOUBLE
+                || inst_op == OP_DIV_FLOAT || inst_op == OP_DIV_DOUBLE)
+        {
+            v1 = currentMIR->dalvikInsn.vB;
+        }
+        else
+        {
+            v1 = vA;
+        }
         infoArray[0].regNum = 1;
         infoArray[0].refCount = 3;
         infoArray[0].physicalType = LowOpndRegType_xmm;
-        //for ALU ops with 2ADDR, the temp variable can share the same physical
-        //reg as the virtual register, since the content of VR is updated by
-        //the content of the temp variable
-        if(inst_op == OP_ADD_FLOAT || inst_op == OP_SUB_FLOAT ||
-           inst_op == OP_MUL_FLOAT || inst_op == OP_ADD_DOUBLE ||
-           inst_op == OP_SUB_DOUBLE || inst_op == OP_MUL_DOUBLE ||
-           inst_op == OP_DIV_FLOAT || inst_op == OP_DIV_DOUBLE)
-        infoArray[0].shareWithVR = false;
+        if(vA != v1)
+        {
+            infoArray[0].shareWithVR = false;
+        }
         infoArray[1].regNum = 2;
         infoArray[1].refCount = 2;
         infoArray[1].physicalType = LowOpndRegType_xmm;
-- 
1.7.4.1

