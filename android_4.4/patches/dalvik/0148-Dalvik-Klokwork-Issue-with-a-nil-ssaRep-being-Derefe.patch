From b017bcd18b52c955cb7629e6403fce249ee05082 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Wed, 24 Apr 2013 06:53:40 -0700
Subject: Dalvik: Klokwork: Issue with a nil ssaRep being Derefenced

BZ: 103309

There is a risk of dereferencing a nil ssaRep pointer.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I1f7bf651c81b94df3b1bf65d9e10430850b19111
Orig-MCG-Change-Id: I61a71c4251a1e993640c6b5698edce0b1489aaba
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/BBOptimization.cpp |   90 +++++++++++++++++++++++----------------
 1 files changed, 53 insertions(+), 37 deletions(-)

diff --git a/vm/compiler/BBOptimization.cpp b/vm/compiler/BBOptimization.cpp
index 6fecf53..71539c0 100644
--- a/vm/compiler/BBOptimization.cpp
+++ b/vm/compiler/BBOptimization.cpp
@@ -1850,6 +1850,12 @@ static void handleLocalValueNumbering (MIR *mir,
                                        std::map<SLocalValueNumberingAssociation, unsigned int> &associations,
                                        std::map<unsigned int, unsigned int> &ssaAssociations)
 {
+    //Static value to give a unique number to the hash
+    static int hashValue = 0;
+
+    //What hash value are we giving to the mir instruction
+    int hash = 0;
+
     //Get DecodedInstruction
     DecodedInstruction &insn = mir->dalvikInsn;
 
@@ -1905,53 +1911,63 @@ static void handleLocalValueNumbering (MIR *mir,
             //Add to the vector
             association.uses.push_back (tmp);
         }
-    }
 
-    //Add the constant if there is one (default value 0)
-    association.constant = 0;
-    //Get flags first
-    int flags = dvmCompilerDataFlowAttributes[opcode];
+        //Add the constant if there is one (default value 0)
+        association.constant = 0;
+        //Get flags first
+        int flags = dvmCompilerDataFlowAttributes[opcode];
 
-    //If vB is being used, vC might be a constant
-    if ( (flags & (DF_UB | DF_UB_WIDE)) != 0)
-    {
-        //If vC is not being used, it's the constant, otherwise there is no constant
-        if ( (flags & (DF_UC | DF_UC_WIDE)) == 0)
+        //If vB is being used, vC might be a constant
+        if ( (flags & (DF_UB | DF_UB_WIDE)) != 0)
         {
-            association.constant = insn.vC;
+            //If vC is not being used, it's the constant, otherwise there is no constant
+            if ( (flags & (DF_UC | DF_UC_WIDE)) == 0)
+            {
+                association.constant = insn.vC;
+            }
+        }
+        else
+        {
+            //Otherwise vB is the constant
+            association.constant = insn.vB;
         }
-    }
-    else
-    {
-        //Otherwise vB is the constant
-        association.constant = insn.vB;
-    }
 
-    //Can we find it in the map?
-    std::map<SLocalValueNumberingAssociation, unsigned int>::const_iterator it;
-    it = associations.find (association);
+        //Can we find it in the map?
+        std::map<SLocalValueNumberingAssociation, unsigned int>::const_iterator it;
+        it = associations.find (association);
 
-    //If found, get its color
-    int hash = 0;
-    if (it != associations.end ())
-    {
-        hash = it->second;
+        //If found, get its color
+        if (it != associations.end ())
+        {
+            hash = it->second;
+        }
+        else
+        {
+            //Otherwise the hash value is the map's size
+            hash = hashValue;
+
+            //Next hash value
+            hashValue++;
+
+            //Put it in the map
+            associations[association] = hash;
+        }
+
+        //Set the hash for the defines
+        int numDefs = ssaRep->numDefs;
+        int *defs = ssaRep->defs;
+        for (int i = 0; i < numDefs; i++)
+        {
+            ssaAssociations[defs[i]] = hash;
+        }
     }
     else
     {
-        //Otherwise the hash value is the map's size
-        hash = associations.size ();
+        //No SSA Representation, get a new hashValue
+        hash = hashValue;
 
-        //Put it in the map
-        associations[association] = hash;
-    }
-
-    //Set the hash for the defines
-    int numDefs = ssaRep->numDefs;
-    int *defs = ssaRep->defs;
-    for (int i = 0; i < numDefs; i++)
-    {
-        ssaAssociations[defs[i]] = hash;
+        //Next hash value
+        hashValue++;
     }
 
     //Also set the instruction color
-- 
1.7.4.1

