From a733200e48ca39e064128c7e65046539fcc041cf Mon Sep 17 00:00:00 2001
From: Qiming Shi <qiming.shi@intel.com>
Date: Mon, 29 Jul 2013 15:59:19 +0800
Subject: Dalvik: Compiler Arena Trimming

BZ: 76472

The Compiler Arena heap needs a rewrite to handle shrinking its usage after
  large trace compilation
Also provided a reset system to actually free the arena (in current
  implementation, we keep one block except if a full flush is done)
The system uses a calculated average to determine how many blocks to keep but it
  is changeable via dalvik options -Xjitarenatrimstyle and -Xjitarenatrimvalue

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: If9b6572c9eae03fd594551b757a34822f59edd31
Orig-MCG-Change-Id: I78d012e56968cc5edca62a781b64900f91b7ce71
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/Init.cpp                   |   51 +++++++++++++++++++
 vm/compiler/CompilerUtility.h |   22 ++++++++
 vm/compiler/Utility.cpp       |  110 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 183 insertions(+), 0 deletions(-)

diff --git a/vm/Init.cpp b/vm/Init.cpp
index f0407e7..c151564 100644
--- a/vm/Init.cpp
+++ b/vm/Init.cpp
@@ -38,6 +38,10 @@
 #include "Hash.h"
 #include "JniConstants.h"
 
+#ifdef ARCH_IA32
+#include "compiler/CompilerUtility.h"
+#endif
+
 #if defined(WITH_JIT)
 #include "compiler/codegen/Optimizer.h"
 #endif
@@ -151,6 +155,8 @@ static void usage(const char* progName)
     dvmFprintf(stderr, "  -Xjitcheckcg\n");
     dvmFprintf(stderr, "  -Xjitverbose\n");
     dvmFprintf(stderr, "  -Xjit[no]scheduling (Turn on/off Atom Instruction Scheduling)\n");
+    dvmFprintf(stderr, "  -Xjitarenatrimstyle:<none|onlyOne|average|user> select arena triming style\n");
+    dvmFprintf(stderr, "  -Xjitarenatrimvalue:<value> the value for the user based arena trim style\n");
 #if defined(VTUNE_DALVIK)
     dvmFprintf(stderr, "  -Xjitsepdalvik\n");
     dvmFprintf(stderr, "  -Xjitvtuneinfo:{none,jit,dex,src}\n");
@@ -1155,6 +1161,51 @@ static int processOptions(int argc, const char* const argv[],
             gDvmJit.scheduling = true;
         } else if (strncmp(argv[i], "-Xjitnoscheduling", 17) == 0) {
             gDvmJit.scheduling = false;
+        } else if (strncmp (argv[i], "-Xjitarenatrimstyle:", 20) == 0) {
+            const char *style = argv[i] + 20;
+            const char *acceptedStyles[] = {"none", "onlyOne", "average", "user"};
+            unsigned int nbr = sizeof (acceptedStyles) / sizeof (acceptedStyles[0]);
+            unsigned int idx;
+
+            for (idx = 0; idx < nbr; idx++)
+            {
+                //We use strlen on our elements, never trust a user input
+                if (strncmp (acceptedStyles[idx], style, strlen (acceptedStyles[idx])) == 0)
+                {
+                    //The char* array is mapped to the enum
+                    ArenaTrimStyle elem = static_cast<ArenaTrimStyle> (idx);
+
+                    dvmFprintf (stderr, "Setting Arena Style to: %s", acceptedStyles[idx]);
+                    setArenaTrimStyle (elem);
+                    break;
+                }
+            }
+
+            //Error message:
+            if (idx == nbr)
+            {
+                dvmFprintf (stderr, "Unknown value for option %s, accepted values are:", argv[i]);
+
+                for (idx = 0; idx < nbr; idx++)
+                {
+                    dvmFprintf (stderr, "\t- %s\n", acceptedStyles[idx]);
+                }
+            }
+        } else if (strncmp (argv[i], "-Xjitarenatrimvalue:", 20) == 0) {
+            char *endptr = NULL;
+            //Get requested style
+            long res = strtol (argv[i] + 20, &endptr, 0);
+
+            //Error checking: basic ones first
+            if (endptr != NULL && *endptr == '\0' && res != LONG_MIN && res != LONG_MAX && res > 0)
+            {
+                dvmFprintf (stderr, "Setting Arena value to: %ld\n", res);
+                setArenaTrimUserValue (res);
+            }
+            else
+            {
+                dvmFprintf (stderr, "Refusing option for %s, it is not a valid number: must be only a strictly positive number\n", argv[i]);
+            }
 #if defined(VTUNE_DALVIK)
         } else if (strncmp(argv[i], "-Xjitsepdalvik", 14) == 0) {
             gDvmJit.vtuneInfo = kVTuneInfoNativeCode;
diff --git a/vm/compiler/CompilerUtility.h b/vm/compiler/CompilerUtility.h
index faca03d..532b550 100644
--- a/vm/compiler/CompilerUtility.h
+++ b/vm/compiler/CompilerUtility.h
@@ -76,5 +76,27 @@ void dvmGetBlockName(struct BasicBlock *bb, char *name);
 void dvmCompilerCacheFlush(long start, long end, long flags);
 void dvmCompilerCacheClear(char *start, size_t size);
 
+#ifdef ARCH_IA32
+
+/**
+ * @brief Set the trim user value
+ * @param value the value we want
+ */
+void setArenaTrimUserValue (unsigned int value);
+
+/** @brief Triming style */
+enum ArenaTrimStyle {
+    ARENA_NONE,        /**< @brief No trimming */
+    ARENA_ALL_BUT_ONE, /**< @brief All but one block */
+    ARENA_AVERAGE,     /**< @brief Until the current average */
+    ARENA_USER_DEFINED /**< @brief User defined */
+    };
+
+/**
+ * @brief Set the arena trim style
+ * @param value the value we want
+ */
+void setArenaTrimStyle (ArenaTrimStyle value);
+#endif
 
 #endif  // DALVIK_COMPILER_UTILITY_H_
diff --git a/vm/compiler/Utility.cpp b/vm/compiler/Utility.cpp
index f798245..3ab75ea 100644
--- a/vm/compiler/Utility.cpp
+++ b/vm/compiler/Utility.cpp
@@ -20,6 +20,33 @@
 static ArenaMemBlock *arenaHead, *currentArena;
 static int numArenaBlocks;
 
+#ifdef ARCH_IA32
+
+#define ARENA_LOG(...)
+
+//A few additional information for the arena: the current average being used
+/** @brief The number of blocks per trace as an accumulator */
+static unsigned long blocksPerTraceAccum;
+/** @brief The number of traces compiled */
+static unsigned long traceCounter;
+
+/** @brief Which arena triming style is in use */
+static ArenaTrimStyle arenaTrimStyle = ARENA_NONE;
+
+/** @brief If a user defined a trimed value: minimum will always be one to simplify allocation */
+static unsigned int arenaTrimUserValue = 1;
+
+void setArenaTrimUserValue (unsigned int value)
+{
+    arenaTrimUserValue = value;
+}
+
+void setArenaTrimStyle (ArenaTrimStyle value)
+{
+    arenaTrimStyle = value;
+}
+#endif
+
 /* Allocate the initial memory block for arena-based allocation */
 bool dvmCompilerHeapInit(void)
 {
@@ -54,6 +81,11 @@ retry:
         }
         return ptr;
     } else {
+#ifdef ARCH_IA32
+        //Augment the number of blocks used
+        blocksPerTraceAccum++;
+#endif
+
         /*
          * See if there are previously allocated arena blocks before the last
          * reset
@@ -95,6 +127,84 @@ void dvmCompilerArenaReset(void)
         block->bytesAllocated = 0;
     }
     currentArena = arenaHead;
+
+#ifdef ARCH_IA32
+    //In IA32 case, we want to trim a bit the arena after use depending on a style
+    int keepHowMany = 0;
+    switch (arenaTrimStyle)
+    {
+        case ARENA_NONE:
+            //We are done then
+            return;
+        case ARENA_ALL_BUT_ONE:
+            keepHowMany = 1;
+            break;
+        case ARENA_AVERAGE:
+            //Calculate average first
+            //If for some reason traceCounter overflows, let us reset here
+            if (traceCounter == 0)
+            {
+                blocksPerTraceAccum = 1;
+                keepHowMany = 1;
+            }
+            else
+            {
+                keepHowMany = blocksPerTraceAccum / traceCounter;
+                ARENA_LOG ("Arena: calculating the average: %lu / %lu = %d", blocksPerTraceAccum, traceCounter, keepHowMany);
+            }
+
+            //Augment this now, a reset is as good a way of measuring the average trip count
+            traceCounter++;
+            //Blocks Per trace accum goes up at least once, let increment it here.
+            //Technically the only reason it wouldn't go to at least 1 is if no dvmCompilerNew was called in between resets but, for the average,
+            //we can leave it thinking at least one block was necessary
+            blocksPerTraceAccum++;
+            break;
+        case ARENA_USER_DEFINED:
+            keepHowMany = arenaTrimUserValue;
+            break;
+        default:
+            break;
+    }
+
+    //Be paranoid on the value: we want at least one
+    keepHowMany = (keepHowMany < 1) ? 1 : keepHowMany;
+
+    //Go forward in the link list until we have hit as many elements
+    block = arenaHead;
+
+    ArenaMemBlock *last = arenaHead;
+
+    unsigned int cnt = keepHowMany;
+    while (block != NULL && cnt > 0)
+    {
+        last = block;
+        block = block->next;
+        cnt--;
+    }
+
+    //Let's be paranoid
+    if (last != NULL)
+    {
+        //Unlink last
+        last->next = NULL;
+    }
+
+    //This is the cut off spot
+    cnt = 0;
+    while (block != NULL)
+    {
+        ArenaMemBlock *next = block->next;
+
+        //Free it and go to next
+        free (block), block = next;
+
+        cnt++;
+    }
+
+    ARENA_LOG ("Arena: triming and only kept %d block(s), %d removed", keepHowMany, cnt);
+
+#endif
 }
 
 /* Growable List initialization */
-- 
1.7.4.1

