From 2228e4234787d8810d5f301bdf0c693130e6cc51 Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Wed, 11 Sep 2013 14:32:23 +0700
Subject: Dalvik: Filtering loop utility does not clean predecessors for unhiding block

BZ: 136811

Filtering loop utility uses data flow traversal to clean up predecessors info.
After that it traverses itself the CFG and fills predecessors info.
during traversal it can unhide one basic block to make it normal chaining cell.
It does not take into account that predecessors info was not cleaned before
because the basic block was hidden. As result we get incorrect CFG leading to
crash later.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I00670a01833ba5ad8a8b0c3cc50dfcf1f3817107
Orig-MCG-Change-Id: Id83cdcecd5be414dcf07dd847589e063b53d0fe7
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Reviewed-on: http://android.intel.com:8080/131282
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Popov, Ivan G <ivan.g.popov@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 vm/compiler/Loop.cpp |    4 ++++
 1 files changed, 4 insertions(+), 0 deletions(-)

diff --git a/vm/compiler/Loop.cpp b/vm/compiler/Loop.cpp
index aa8a221..c9f8559 100644
--- a/vm/compiler/Loop.cpp
+++ b/vm/compiler/Loop.cpp
@@ -1790,6 +1790,8 @@ bool dvmCompilerFilterLoopBlocks(CompilationUnit *cUnit)
                     bb->taken->blockType = kChainingCellNormal;
                     normalChainingAdded = true;
                     bb->taken->hidden = false;
+                    //We unhide some BB, so we need to clear its predecessor info
+                    clearPredecessorVector (cUnit, bb->taken);
                 }
                 dvmCompilerSetBit(bb->taken->predecessors, bb->id);
             }
@@ -1809,6 +1811,8 @@ bool dvmCompilerFilterLoopBlocks(CompilationUnit *cUnit)
                     bb->fallThrough->blockType = kChainingCellNormal;
                     normalChainingAdded = true;
                     bb->fallThrough->hidden = false;
+                    //We unhide some BB, so we need to clear its predecessor info
+                    clearPredecessorVector (cUnit, bb->fallThrough);
                 }
                 dvmCompilerSetBit(bb->fallThrough->predecessors, bb->id);
             }
-- 
1.7.4.1

