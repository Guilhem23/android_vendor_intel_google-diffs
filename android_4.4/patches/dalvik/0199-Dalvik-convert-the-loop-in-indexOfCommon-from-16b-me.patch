From 20bb9eb00193a3d283c2afab34f88371218f0729 Mon Sep 17 00:00:00 2001
From: Jussi Kantell <jussi.kantell@intel.com>
Date: Thu, 6 Jun 2013 14:17:52 +0300
Subject: Dalvik: convert the loop in indexOfCommon from 16b mem accesses to 32b

BZ:  114241

Original loop was accessing the string content 16 at a time. This patch
changes the access to using 32b. Seems to bring tangible improvements:
-CFM String subscore improves 2-5%
-RLBenchmark SQLite total measured runtime drops from 23.5s to 22.5s.

Category: device-enablement
Domain: AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: If85ee1da28baec04f7a6197f257fc7d76f02c8c3
Orig-MCG-Change-Id: I2949895e58bae8bec2ccbb9115eaf5a1e70f1fba
Signed-off-by: Jussi Kantell <jussi.kantell@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/InlineNative.cpp |   30 +++++++++++++++++++++++++++++-
 1 files changed, 29 insertions(+), 1 deletions(-)

diff --git a/vm/InlineNative.cpp b/vm/InlineNative.cpp
index 00c1e95..e6fd0b8 100644
--- a/vm/InlineNative.cpp
+++ b/vm/InlineNative.cpp
@@ -474,15 +474,43 @@ static inline int indexOfCommon(Object* strObj, int ch, int start)
         start++;
     }
 #else
-    /* 16-bit loop, slightly better on ARM */
     const u2* ptr = chars + start;
     const u2* endPtr = chars + count;
+
+#if defined(ARCH_IA32)
+    /* 32-bit loop, better on IA32 */
+   const u4 lowmask  = ch;
+   const u4 highmask = lowmask << 16;
+
+   const u2* safeEndPtr = endPtr;
+   // Odd number of 16b chars, must not do the last 32b fetch
+   if ( (endPtr - ptr) & 0x1 )
+      safeEndPtr--;
+
+   while ( ptr < safeEndPtr ) {
+      const u4 candidate = *((u4*)ptr);
+
+      if ( ((0x0000ffff & candidate) == lowmask) )
+         return ptr - chars;
+
+      if ( ((0xffff0000 & candidate) == highmask ) )
+         return ptr - chars + 1;
+
+      ptr += 2;
+   }
+
+   if ( ptr < endPtr && *ptr == ch )
+         return ptr - chars;
+#else
+    /* 16-bit loop, slightly better on ARM */
     while (ptr < endPtr) {
         if (*ptr++ == ch)
             return (ptr-1) - chars;
     }
 #endif
 
+#endif
+
     return -1;
 }
 
-- 
1.7.4.1

