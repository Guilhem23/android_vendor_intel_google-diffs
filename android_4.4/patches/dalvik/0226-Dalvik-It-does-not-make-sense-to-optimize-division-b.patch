From f36efef7baf0769f3d87abd798874b311340ccaf Mon Sep 17 00:00:00 2001
From: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Date: Tue, 9 Jul 2013 17:49:29 +0700
Subject: Dalvik: It does not make sense to optimize division by constant when it's a zero

BZ: 121944

There is an optimization that uses an algorithm from Hacker's Delight for
division by constant. This algorithm fails to calculate helper values for
zero divisor. Actually, it does not make sense to use this optimization for
zero division at all. This patch filters the optimization's cases for non-zero
constants.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ifcd8ac1d8aeca3bd4571684372bf6663480f62d6
Orig-MCG-Change-Id: Ic1221614b7b365cffb08c14373a720b3f1306a88
Signed-off-by: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/BytecodeVisitor.cpp |    3 ++-
 vm/compiler/codegen/x86/Lower.cpp           |    3 +++
 vm/compiler/codegen/x86/LowerAlu.cpp        |    2 +-
 3 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/vm/compiler/codegen/x86/BytecodeVisitor.cpp b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
index 2e5537d..f027f4e 100644
--- a/vm/compiler/codegen/x86/BytecodeVisitor.cpp
+++ b/vm/compiler/codegen/x86/BytecodeVisitor.cpp
@@ -5393,7 +5393,8 @@ int getTempRegInfo(TempRegInfo* infoArray, const MIR * currentMIR) { //returns a
 
         //If we have a constant, we can use a multiplication approach instead.
         //However, we currently do not handle case of -1 constant so we take the divide path.
-        if (isConst == VR_IS_CONSTANT && tmpvalue != -1)
+        //It also does not make sense to optimize division by zero.
+        if (isConst == VR_IS_CONSTANT && tmpvalue != -1 && tmpvalue != 0)
         {
             int magic, shift;
             calculateMagicAndShift(tmpvalue, &magic, &shift);
diff --git a/vm/compiler/codegen/x86/Lower.cpp b/vm/compiler/codegen/x86/Lower.cpp
index 19de2f8..d1693db 100644
--- a/vm/compiler/codegen/x86/Lower.cpp
+++ b/vm/compiler/codegen/x86/Lower.cpp
@@ -1219,6 +1219,9 @@ int getLabelOffset (unsigned int blockId) {
  * @return void
  */
 void calculateMagicAndShift(int divisor, int* magic, int* shift) {
+    //It does not make sense to calculate magic and shift for zero divisor
+    assert (divisor != 0);
+
     int p = 31;
     unsigned abs_d, abs_nc, delta, quotient1, remainder1, quotient2, remainder2, tmp;
     const unsigned two31 = 1 << p;
diff --git a/vm/compiler/codegen/x86/LowerAlu.cpp b/vm/compiler/codegen/x86/LowerAlu.cpp
index 754b1d0..d794405 100644
--- a/vm/compiler/codegen/x86/LowerAlu.cpp
+++ b/vm/compiler/codegen/x86/LowerAlu.cpp
@@ -839,7 +839,7 @@ int common_div_rem_int(bool isRem, int vA, int v1, int v2) {
     // Handle the case where the divisor is a constant at compile time
     int divisor[2];
     int isConst = isVirtualRegConstant(v2, LowOpndRegType_gp, divisor, false);
-    if (isConst > 0){
+    if (isConst > 0 && divisor[0] != 0) {
         int magic;
         int shift;
         calculateMagicAndShift(divisor[0], &magic, &shift);
-- 
1.7.4.1

