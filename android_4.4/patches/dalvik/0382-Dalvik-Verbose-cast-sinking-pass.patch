From 2f847b26258389c850002d43b44ee65e9762239f Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Thu, 24 Oct 2013 13:23:33 -0700
Subject: Dalvik: Verbose cast sinking pass

BZ: 147543

The cast sinking pass has been updated to be more verbose about the reason why
it ends up rejecting a cast for sinking. This is useful for pass debugging and
can be enabled via command line flag:
-Xjitdebugpasses:Sink_Casts

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Iadf8c2815281af01145d4b065d1c2a277ee0d5c4
Orig-MCG-Change-Id: I9333afa646145a1df05a5a7d173c4be23002c1c5
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/SinkCastOpt.cpp |   26 ++++++++++++++++++++++++++
 1 files changed, 26 insertions(+), 0 deletions(-)

diff --git a/vm/compiler/SinkCastOpt.cpp b/vm/compiler/SinkCastOpt.cpp
index 7c69517..d6b0cb8 100644
--- a/vm/compiler/SinkCastOpt.cpp
+++ b/vm/compiler/SinkCastOpt.cpp
@@ -357,6 +357,7 @@ static bool fillDependencyFromOthers (CompilationUnit *cUnit, LoopInformation *i
         if (ssaRep == 0)
         {
             //Something went wrong
+            SINK_CAST_LOG (cUnit, "Found bad ssa for phi while filling dependencies", reportSinkCastFailure);
             return true;
         }
 
@@ -373,6 +374,7 @@ static bool fillDependencyFromOthers (CompilationUnit *cUnit, LoopInformation *i
             if (ssaRep->numDefs != 1 || ssaRep->defs == 0)
             {
                 //Something went wrong
+                SINK_CAST_LOG (cUnit, "Found bad ssa while filling dependencies", reportSinkCastFailure);
                 return true;
             }
 
@@ -406,6 +408,8 @@ static bool fillDependencyFromOthers (CompilationUnit *cUnit, LoopInformation *i
                 //If there is a usage in instruction we do not support => no chances to sink
                 if (isInstructionSafeForCastSinking (cUnit, info, next) == false)
                 {
+                    SINK_CAST_LOG (cUnit, "While filling dependencies found instruction affected by sinking",
+                            reportSinkCastFailure);
                     return true;
                 }
 
@@ -426,6 +430,7 @@ static bool fillDependencyFromOthers (CompilationUnit *cUnit, LoopInformation *i
                     if (next->ssaRep == 0)
                     {
                         //Something went wrong
+                        SINK_CAST_LOG (cUnit, "Found missing ssa while filling dependencies", reportSinkCastFailure);
                         return true;
                     }
                     if (defAddedForCheck.find (next->ssaRep) == defAddedForCheck.end ())
@@ -467,6 +472,7 @@ static void considerCastsForSinking (CompilationUnit *cUnit, LoopInformation *in
     // if current cast mir is not supported for cast sinking optimization
     if (isCastSinkable(mir) == false)
     {
+        SINK_CAST_LOG (cUnit, "Unsupported cast for sinking", reportSinkCastFailure);
         return;
     }
 
@@ -475,12 +481,14 @@ static void considerCastsForSinking (CompilationUnit *cUnit, LoopInformation *in
 
     if (ssaRep == 0)
     {
+        SINK_CAST_LOG (cUnit, "Missing ssa representation for considered cast", reportSinkCastFailure);
         return;
     }
 
     //Klocwork checks
     if (ssaRep->numDefs != 1 || ssaRep->defs == 0 || ssaRep->usedNext == 0)
     {
+        SINK_CAST_LOG (cUnit, "Bad ssa representation for considered cast", reportSinkCastFailure);
         return;
     }
 
@@ -507,6 +515,8 @@ static void considerCastsForSinking (CompilationUnit *cUnit, LoopInformation *in
                 if (next->dalvikInsn.opcode != static_cast<Opcode> (kMirOpPhi) && (isOpcodeConditionalBranch == false))
                 {
                     vrOkToSinkDependsOn.erase (vr);
+
+                    SINK_CAST_LOG (cUnit, "The cast is skipped because use is not if or phi", reportSinkCastFailure);
                     return;
                 }
 
@@ -516,6 +526,8 @@ static void considerCastsForSinking (CompilationUnit *cUnit, LoopInformation *in
                    //Check if the nextUse allows a valid cast sinking
                    if (checkValidCastingForIV(cUnit, info, next, mir) == false)
                    {
+                       SINK_CAST_LOG (cUnit, "The cast is skipped because it was determined it was not valid IV cast",
+                               reportSinkCastFailure);
                        vrOkToSinkDependsOn.erase (vr);
                        return;
                    }
@@ -529,6 +541,8 @@ static void considerCastsForSinking (CompilationUnit *cUnit, LoopInformation *in
                 {
                     if (next != info->getPhiInstruction (cUnit, vr))
                     {
+                        SINK_CAST_LOG (cUnit, "The cast is skipped because its phi node use is not the main one for loop",
+                                reportSinkCastFailure);
                         vrOkToSinkDependsOn.erase (vr);
                         return;
                     }
@@ -538,6 +552,8 @@ static void considerCastsForSinking (CompilationUnit *cUnit, LoopInformation *in
                     //if there are any dependancy and return false if no chances to sink
                     if (fillDependencyFromOthers (cUnit, info, next, vr, vrOkToSinkDependsOn) == true)
                     {
+                        SINK_CAST_LOG (cUnit, "Dependency analysis deemed cast not safe for sinking",
+                                reportSinkCastFailure);
                         vrOkToSinkDependsOn.erase (vr);
                         return;
                     }
@@ -653,6 +669,7 @@ static bool tryCastSinking (CompilationUnit *cUnit, LoopInformation *info, void
             if (removed == true)
             {
                 //Now add it to exits
+                SINK_CAST_LOG (cUnit, mir->dalvikInsn.opcode, reportSunkCast);
                 info->addInstructionToExits (cUnit, mir);
 
                 //Now we need to clean dependancy data
@@ -673,6 +690,10 @@ static bool tryCastSinking (CompilationUnit *cUnit, LoopInformation *info, void
                     }
                 }
             }
+            else
+            {
+                SINK_CAST_LOG (cUnit, "Failed to remove cast from its block", reportSinkCastFailure);
+            }
         }
 
         okToSink.clear ();
@@ -703,6 +724,11 @@ static bool tryCastSinking (CompilationUnit *cUnit, LoopInformation *info, void
         }
     }
 
+    if (potentialOkToSink.empty () == false)
+    {
+        SINK_CAST_LOG (cUnit, "Casts potentially considered for sinking were not all sunk", reportSinkCastFailure);
+    }
+
     //We have successfully attempted to sink casts
     return true;
 }
-- 
1.7.4.1

