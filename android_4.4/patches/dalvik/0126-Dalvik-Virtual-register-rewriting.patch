From b0f912e3400cc8183a2d31d8ed42c92081accb28 Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Mon, 8 Apr 2013 13:08:28 -0700
Subject: Dalvik: Virtual register rewriting

BZ: 98764

Adds capability for doing rewriting of virtual registers used by an instruction.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ic20895bd2acc7856255014efbe77d5b09278c10b
Orig-MCG-Change-Id: I9bea645f7ed2b9f4ec7540e8356cb48bb9731d57
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/CompilerIR.h        |   76 +++++++++++
 vm/compiler/IntermediateRep.cpp |  265 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 341 insertions(+), 0 deletions(-)

diff --git a/vm/compiler/CompilerIR.h b/vm/compiler/CompilerIR.h
index 55145c7..09d0fe4 100644
--- a/vm/compiler/CompilerIR.h
+++ b/vm/compiler/CompilerIR.h
@@ -364,6 +364,53 @@ typedef struct CompilationUnit {
     std::map<int, int> *constantValues; // Constant values map using the ssa register as a key
 }CompilationUnit;
 
+/**
+ * @brief Used for holding the rewrite rule for updating a MIR's operands.
+ */
+class MirRewriteRule
+{
+public:
+    /**
+     * @brief Constructor
+     * @param mir The MIR to update
+     * @param oldVR The VR to rewrite
+     * @param newVR The VR to use as replacement after rewrite
+     */
+    MirRewriteRule (MIR * mir, int oldVR, int newVR) :
+            mir (mir), oldVR (oldVR), newVR (newVR)
+    {
+    }
+
+    /**
+     * @brief Returns the mir that needs updated.
+     */
+    MIR *getMir (void) const
+    {
+        return mir;
+    }
+
+    /**
+     * @brief Returns the VR to rewrite.
+     */
+    int getOldVR (void) const
+    {
+        return oldVR;
+    }
+
+    /**
+     * @brief Returns the VR to use as replacement after rewrite.
+     */
+    int getNewVR (void) const
+    {
+        return newVR;
+    }
+
+private:
+    MIR * mir;      //!< The MIR to update
+    int oldVR;      //!< The VR to rewrite
+    int newVR;      //!< The VR to use as replacement after rewrite.
+};
+
 #if defined(WITH_SELF_VERIFICATION)
 #define HEAP_ACCESS_SHADOW(_state) cUnit->heapMemOp = _state
 #else
@@ -416,4 +463,33 @@ void dvmCompilerUpdatePredecessors(BasicBlock *parent, BasicBlock *oldChild, Bas
 /* Debug Utilities */
 void dvmCompilerDumpCompilationUnit(CompilationUnit *cUnit);
 
+/**
+ * @brief Used to rewrite a MIR's def register with a new register.
+ * @details Also ensures to fix all of the uses of the def. This is guaranteed to
+ * not rewrite unless it will succeed.
+ * @param mir the MIR to rewrite
+ * @param oldVR the old VR that we want to rewrite
+ * @param newVR the new VR we want to use
+ * @return Returns true if successfully rewrote with the given rewrite rules.
+ */bool dvmCompilerRewriteMirDef (MIR *mir, int oldVR, int newVR);
+
+/**
+ * @brief Used to rewrite multiple MIRs' define register with a new register.
+ * @details Also ensures to fix all of the uses of the def. This is guaranteed to
+ * not rewrite unless it will succeed.
+ * @param rewriteList List of rewrite rules which contains MIRs whose def
+ * register must be rewritten.
+ * @return Returns true if successfully rewrote with the given rewrite rules.
+ */bool dvmCompilerRewriteMirDef (const std::vector<MirRewriteRule> &rewriteList);
+
+/**
+ * @brief Rewrite the uses of a MIR.
+ * @details This is guaranteed to not rewrite unless it will succeed.
+ * @brief dalvikInsn The dalvik instruction to update.
+ * @param oldVR the old VR that we want to rewrite
+ * @param newVR the new VR we want to use
+ * @return whether the rewrite was successful
+ */bool dvmCompilerRewriteMirUses (DecodedInstruction &dalvikInsn, int oldVR,
+        int newVR);
+
 #endif  // DALVIK_VM_COMPILER_IR_H_
diff --git a/vm/compiler/IntermediateRep.cpp b/vm/compiler/IntermediateRep.cpp
index 8c7442a..082952a 100644
--- a/vm/compiler/IntermediateRep.cpp
+++ b/vm/compiler/IntermediateRep.cpp
@@ -16,6 +16,8 @@
 
 #include "Dalvik.h"
 #include "CompilerInternals.h"
+#include "Dataflow.h"
+#include <map>
 
 /* Allocate a new basic block */
 BasicBlock *dvmCompilerNewBB(BBType blockType, int blockId)
@@ -340,3 +342,266 @@ MIR *dvmCompilerFindLowestMIRInColor (MIR *elem)
 
     return elem;
 }
+
+/*
+ * @brief Generates a move MIR.
+ * @param sourceVR The virtual register to move from.
+ * @param destVR The virtual register to move to.
+ * @param wide Flag if we want a wide move. Both registers must be wide if
+ * this flag is set.
+ * @return Returns the mir that represents the desired move.
+ */
+static MIR *generateMove (int sourceVR, int destVR, bool wide)
+{
+    MIR *mir = dvmCompilerNewMIR ();
+
+    //Decide on the move opcode based on wideness
+    mir->dalvikInsn.opcode = wide ? OP_MOVE_WIDE : OP_MOVE;
+
+    //Update operands
+    mir->dalvikInsn.vA = static_cast<u4> (destVR);
+    mir->dalvikInsn.vB = static_cast<u4> (sourceVR);
+
+    //Return the newly generated mir
+    return mir;
+}
+
+bool dvmCompilerRewriteMirUses (DecodedInstruction &dalvikInsn, int oldVR,
+        int newVR)
+{
+    //Get dataflow flags
+    int dfAttributes = dvmCompilerDataFlowAttributes[dalvikInsn.opcode];
+
+    u4 oldVRU4 = oldVR;
+    u4 newVRU4 = newVR;
+
+    //If we have a instruction that is range form, we cannot rewrite the
+    //operand and therefore we fail immediately
+    if ((dfAttributes & DF_FORMAT_3RC) != 0)
+    {
+        return false;
+    }
+
+    //Check if the first use overlaps the def for this MIR. If it does
+    //and the VR we are rewriting is this operand, we should reject.
+    if ((dfAttributes & (DF_UA | DF_UA_WIDE)) != 0
+            && (dfAttributes & DF_HAS_DEFS) != 0
+            && dalvikInsn.vA == oldVRU4)
+    {
+        return false;
+    }
+
+    //Be pessimistic and assume we won't find operand
+    bool foundOperand = false;
+
+    //Now check if it is format35c which may have multiple uses.
+    bool format35c = ((dfAttributes & DF_FORMAT_35C) != 0);
+
+    if (format35c == true)
+    {
+        //The number of arguments is guaranteed to be in vA for this format
+        u4 count = dalvikInsn.vA;
+
+        //Go through each of the operands to look for a match for the old VR.
+        for (u4 operand = 0; operand < count; operand++)
+        {
+            //If we found a match, update it now
+            if (dalvikInsn.arg[operand] == oldVRU4)
+            {
+                //Update the operand and mark it as found
+                dalvikInsn.arg[operand] = newVRU4;
+                foundOperand = true;
+            }
+        }
+    }
+
+    //Check if vA matches operand we are looking for.
+    if ( ( (dfAttributes & DF_UA) || (dfAttributes & DF_UA_WIDE)) && (dalvikInsn.vA == oldVRU4))
+    {
+        dalvikInsn.vA = newVRU4;
+        foundOperand = true;
+    }
+
+    //Check if vB matches operand we are looking for.
+    if ((dfAttributes & DF_B_IS_REG) != 0 && dalvikInsn.vB == oldVRU4)
+    {
+        dalvikInsn.vB = newVRU4;
+        foundOperand = true;
+    }
+
+    //Check if vC matches operand we are looking for. If we have 35c form,
+    //the "this" pointer might be in vC and also in arg[0]. Since we don't
+    //know who will use this decoded instruction, we try to update vC as well.
+    if (((dfAttributes & DF_C_IS_REG) != 0 || format35c == true)
+            && dalvikInsn.vC == oldVRU4)
+    {
+        dalvikInsn.vC = newVRU4;
+        foundOperand = true;
+    }
+
+    //If we did not find operand we failed the rewrite
+    return foundOperand;
+}
+
+/**
+ * @brief Fixes the uses when the VR previously defined changed.
+ * @param rewriteRules The rewrite rules for current update.
+ * @param chain The first link in chain of uses.
+ * @param newDecodedInst Updated by function to contain the rewritten
+ * instruction for each mir.
+ * @return Returns true if all uses were rewritten correctly.
+ */
+static bool rewriteUses (const MirRewriteRule &rewriteRules, SUsedChain *chain,
+        std::map<MIR *, DecodedInstruction> &newDecodedInst)
+{
+    //Walk the chain
+    for (; chain != 0; chain = chain->nextUse)
+    {
+        MIR *mir = chain->mir;
+
+        //Make a copy of the dalvik instruction that can be updated
+        DecodedInstruction dalvikInsn = mir->dalvikInsn;
+
+        //Call the rewrite helper function
+        bool res = dvmCompilerRewriteMirUses (dalvikInsn,
+                rewriteRules.getOldVR (), rewriteRules.getNewVR ());
+
+        //If we failed, fail everything
+        if (res == false)
+        {
+            return false;
+        }
+
+        //Keep track of this rewrite in order to commit it later
+        newDecodedInst[mir] = dalvikInsn;
+    }
+
+    //If we make it here, we succeeded
+    return true;
+}
+
+//Rewrite Mir for one instruction
+bool dvmCompilerRewriteMirDef (MIR *mir, int oldVR, int newVR)
+{
+    MirRewriteRule rewriteIt (mir, oldVR, newVR);
+
+    //Create vector
+    std::vector<MirRewriteRule> rewrites;
+    rewrites.push_back (rewriteIt);
+
+    //Call generic function
+    return dvmCompilerRewriteMirDef (rewrites);
+}
+
+
+bool dvmCompilerRewriteMirDef (const std::vector<MirRewriteRule> &rewriteList)
+{
+    //Used to keep track of the rewritten instruction before we commit it
+    std::map<MIR *, DecodedInstruction> newDecodedInst;
+
+    //Initialize iterator for our rewrite list
+    std::vector<MirRewriteRule>::const_iterator iter;
+
+    //Iterate through all of the MIRs we need to rewrite
+    for (iter = rewriteList.begin (); iter != rewriteList.end (); iter++)
+    {
+        const MirRewriteRule &rewrite = (*iter);
+
+        //Get the MIR to be rewritten
+        MIR *mir = rewrite.getMir ();
+
+        //Paranoid
+        assert (mir != 0);
+
+        //Get a local copy of the decoded instruction
+        DecodedInstruction dalvikInsn = mir->dalvikInsn;
+
+        //Get dataflow flags
+        int dfAttributes = dvmCompilerDataFlowAttributes[dalvikInsn.opcode];
+
+        //Check to see if we have defs for this MIR
+        if ((dfAttributes & DF_HAS_DEFS) == 0)
+        {
+            //This function can only rewrite the defs
+            return false;
+        }
+
+        //Check to make sure that the define matches desired VR to replace
+        if (mir->dalvikInsn.vA != static_cast<u4> (rewrite.getOldVR ()))
+        {
+            return false;
+        }
+
+        //Check if use overlaps the define
+        if ((dfAttributes & (DF_UA | DF_UA_WIDE)) != 0)
+        {
+            //We should be able to fix this scenario but for now reject it
+            return false;
+        }
+
+        //Now that we know we are fine to do the replacement, let's do it
+        dalvikInsn.vA = static_cast<u4> (rewrite.getNewVR ());
+
+        //Keep track of this rewrite in order to commit it later
+        newDecodedInst[mir] = dalvikInsn;
+
+        //Get local copy of ssa representation
+        SSARepresentation *ssaRep = mir->ssaRep;
+
+        //We want to be able to find the uses
+        if (ssaRep == 0 || ssaRep->numDefs == 0 || ssaRep->usedNext == 0)
+        {
+            return false;
+        }
+
+        //Follow the uses of the first def. When we get here we know we have
+        //at least one def.
+        SUsedChain *chain = ssaRep->usedNext[0];
+
+        //Now fix the uses of this updated define
+        bool success = rewriteUses (rewrite, chain, newDecodedInst);
+
+        //No use to keep going if we failed
+        if (success == false)
+        {
+            return false;
+        }
+
+        //If we have a wide VR, check whether we can rewrite the uses.
+        //Technically we need to fail rewriting the uses because the
+        //wide part of the VR should never appear as an operand. But we can
+        //be nice and even if this scenario happens, we can fix the uses.
+        if (ssaRep->numDefs >= 2)
+        {
+            //Prepare the wide part of the old and new VRs
+            int oldVRWide = rewrite.getOldVR () + 1;
+            int newVRWide = rewrite.getNewVR () + 1;
+
+            //Create the rewrite rules for the wide part
+            MirRewriteRule rewriteWide (mir, oldVRWide, newVRWide);
+
+            //Get the chain for the wide define
+            chain = ssaRep->usedNext[1];
+
+            //Now try to rewrite the uses of the wide part.
+            //Don't affect success whether or not we fail here.
+            rewriteUses (rewriteWide, chain, newDecodedInst);
+        }
+    }
+
+    //We can commit our rewrites if we succeed all of them. We only make it
+    //to this point if we have succeeded.
+    std::map<MIR *, DecodedInstruction>::const_iterator updateIter;
+    for (updateIter = newDecodedInst.begin ();
+            updateIter != newDecodedInst.end (); updateIter++)
+    {
+        MIR *mir = updateIter->first;
+        const DecodedInstruction &dalvikInsn = updateIter->second;
+
+        //Rewrite the decoded instruction for the mir
+        mir->dalvikInsn = dalvikInsn;
+    }
+
+    //If we make it here, we succeeded
+    return true;
+}
-- 
1.7.4.1

