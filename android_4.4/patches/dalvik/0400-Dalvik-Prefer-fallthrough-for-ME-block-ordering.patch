From ee41a358291ed17b56d0ea48b35dd4971bcc1e88 Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Tue, 12 Nov 2013 14:11:13 -0800
Subject: Dalvik: Prefer fallthrough for ME block ordering

BZ: 151569

The block ordering algorithm used to prefer the taken branch. However, it
makes most sense to pick the fallthrough for at least two cases: predicted
inlining and loops. In the general case, if fallthrough is picked first,
the unconditional branch can be eliminated.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I889fedf9094a27dfc7227d1e855586328230c615
Orig-MCG-Change-Id: Ic16697788a7d3f7abd78bbfdb0854ed8afd5deb7
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/BBOptimization.cpp |   17 ++++++++++-------
 1 files changed, 10 insertions(+), 7 deletions(-)

diff --git a/vm/compiler/BBOptimization.cpp b/vm/compiler/BBOptimization.cpp
index c77d1be..1cf8a59 100644
--- a/vm/compiler/BBOptimization.cpp
+++ b/vm/compiler/BBOptimization.cpp
@@ -21,6 +21,7 @@
 #include "LoopInformation.h"
 #include "PassDriver.h"
 #include "Utility.h"
+#include <algorithm>
 
 /**
  * @brief Helper function to dvmCompilerMergeBasicBlocks
@@ -684,9 +685,13 @@ static void reorderHelper (CompilationUnit *cUnit, BasicBlock *bb)
     BasicBlock *taken = bb->taken;
     BasicBlock *fallThrough = bb->fallThrough;
 
-    //Now we prefer Bytecodes but for the moment we have no idea which is the "hot" path
-    BasicBlock *childFirst = taken,
-               *childSecond = fallThrough;
+    //We do not actually know which one is the "hot" path but we prefer the fallthrough.
+    //The reason we do that is because there are two cases when we know this decision helps:
+    // 1) Predicted inlining - The inlined path is always fallthrough after devirtualization check.
+    // 2) Loops - The taken branch always goes to an exit point until chained by interpreter to
+    // go directly to the loop head. In normal execution, the taken block is never really hit.
+    BasicBlock *childFirst = fallThrough,
+               *childSecond = taken;
 
     //If we can have a preference
     if (childFirst != 0 && childSecond != 0)
@@ -696,8 +701,7 @@ static void reorderHelper (CompilationUnit *cUnit, BasicBlock *bb)
         {
             if (childSecond->blockType == kDalvikByteCode)
             {
-                childFirst = fallThrough;
-                childSecond = taken;
+                std::swap (childFirst, childSecond);
             }
         }
         else
@@ -705,8 +709,7 @@ static void reorderHelper (CompilationUnit *cUnit, BasicBlock *bb)
             //Otherwise the first child is code but is it empty?
             if (childFirst->firstMIRInsn == 0)
             {
-                childFirst = fallThrough;
-                childSecond = taken;
+                std::swap (childFirst, childSecond);
             }
         }
     }
-- 
1.7.4.1

