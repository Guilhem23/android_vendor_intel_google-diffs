From 67dc51f08e6f59848133dbab212d4b9e8e083f21 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Fri, 26 Jul 2013 16:08:59 -0700
Subject: Dalvik: Remove Compiler Warnings and White Spaces

BZ: 126474

Removes a compiler warning in AnalysisO1.cpp and one in AccumulationSinking.cpp
Removes white spaces in InvariantRemoval.cpp and LowerAlu.cpp.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I4634ad80b7b30284aa756f90e73e3bed6274fe1b
Orig-MCG-Change-Id: I5b2a1a17f84c6afdaa24240bc6b82e9c8c1a1992
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Reviewed-on: http://android.intel.com:8080/123665
Reviewed-by: Popov, Ivan G <ivan.g.popov@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/AccumulationSinking.cpp            |    2 +-
 vm/compiler/InvariantRemoval.cpp               |    6 +++---
 vm/compiler/codegen/x86/lightcg/AnalysisO1.cpp |    3 ++-
 vm/compiler/codegen/x86/lightcg/LowerAlu.cpp   |    2 +-
 4 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/vm/compiler/AccumulationSinking.cpp b/vm/compiler/AccumulationSinking.cpp
index 05bbc58..157b18d 100644
--- a/vm/compiler/AccumulationSinking.cpp
+++ b/vm/compiler/AccumulationSinking.cpp
@@ -222,7 +222,7 @@ enum PositionInWideVR {
  */
 static PositionInWideVR getPhiPositionInWideVR (CompilationUnit *cUnit, MIR* phi, BitVector *seen = 0)
 {
-    assert (phi->dalvikInsn.opcode == kMirOpPhi);
+    assert (phi->dalvikInsn.opcode == static_cast<Opcode> (kMirOpPhi));
 
     assert (phi->ssaRep != 0);
     assert (phi->ssaRep->numDefs == 1);
diff --git a/vm/compiler/InvariantRemoval.cpp b/vm/compiler/InvariantRemoval.cpp
index 4ef32cd..1034e92 100644
--- a/vm/compiler/InvariantRemoval.cpp
+++ b/vm/compiler/InvariantRemoval.cpp
@@ -427,9 +427,9 @@ static void hoistInvariants (CompilationUnit *cUnit, LoopInformation *loopInfo,
         {
             //If we successfully rewrite selected MIRs to use temporary, we will need
             //to have a move from the temp back to original register at all loop exits.
-            //Since the problem is simplified by the pass' gate and we have only one BB 
-            //with one backward branch and one loop exit block, those are the only places 
-            //we need to sink. 
+            //Since the problem is simplified by the pass' gate and we have only one BB
+            //with one backward branch and one loop exit block, those are the only places
+            //we need to sink.
             //And since all exit points are dominated by the single BB, we just need to
             //figure out if the ssa we replaced is the last define live out of the single
             //BB. If it is, then we need to generate a move.
diff --git a/vm/compiler/codegen/x86/lightcg/AnalysisO1.cpp b/vm/compiler/codegen/x86/lightcg/AnalysisO1.cpp
index bbd420f..84809b6 100644
--- a/vm/compiler/codegen/x86/lightcg/AnalysisO1.cpp
+++ b/vm/compiler/codegen/x86/lightcg/AnalysisO1.cpp
@@ -2952,9 +2952,10 @@ void dumpPartToMem(int reg /*xmm physical reg*/, int vA, bool isLow) {
         move_ss_reg_to_mem_noalloc(reg, true,
                                    4*vA, PhysicalReg_FP, true, MemoryAccess_VR, vA);
     } else {
+#ifdef SPILL_IN_THREAD
         int k = getSpillIndex (OpndSize_64);
+
         //H, L in 4*k+4 & 4*k
-#ifdef SPILL_IN_THREAD
         get_self_pointer(PhysicalReg_SCRATCH_1, isScratchPhysical);
         saveToSpillRegion_with_self(OpndSize_64, PhysicalReg_SCRATCH_1, isScratchPhysical, reg, 4*k);
         //update low 32 bits of xmm reg from 4*k+4
diff --git a/vm/compiler/codegen/x86/lightcg/LowerAlu.cpp b/vm/compiler/codegen/x86/lightcg/LowerAlu.cpp
index 8678217..6955bb0 100644
--- a/vm/compiler/codegen/x86/lightcg/LowerAlu.cpp
+++ b/vm/compiler/codegen/x86/lightcg/LowerAlu.cpp
@@ -906,7 +906,7 @@ int common_div_rem_int(bool isRem, int vA, int v1, int v2) {
             }
         }
     } else { //It is a general case. Both divisor and numerator are variables.
- 
+
         //Find out Numerator | Denominator
         move_reg_to_reg(OpndSize_32, PhysicalReg_EAX, true, 3, false);
         alu_binary_reg_reg(OpndSize_32, or_opc, 2, false, 3, false);
-- 
1.7.4.1

