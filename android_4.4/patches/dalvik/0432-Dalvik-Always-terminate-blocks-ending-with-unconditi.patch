From 009957455899fc371f839a4decc7b943d563b0c1 Mon Sep 17 00:00:00 2001
From: Udayan Banerji <udayan.banerji@intel.com>
Date: Mon, 16 Dec 2013 22:05:10 -0800
Subject: Dalvik: Always terminate blocks ending with unconditional throws

BZ: 159382

When creating method CFGs, we might want to ignore unreachable catch
blocks. The CFG should still terminate blocks ending at "throw".

Previously, the block termination at throw happened only when processing
catch blocks. This patch fixes that.

Change-Id: I60356f681242e6accfbb50e9545e5b9c3159dace
Category: device enablement
Domain: AOSP.Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, need rework
Signed-off-by: Udayan Banerji <udayan.banerji@intel.com>
---
 vm/compiler/Frontend.cpp |   15 ++++++++++++++-
 1 files changed, 14 insertions(+), 1 deletions(-)

diff --git a/vm/compiler/Frontend.cpp b/vm/compiler/Frontend.cpp
index a0f2c85..dcdd44f 100644
--- a/vm/compiler/Frontend.cpp
+++ b/vm/compiler/Frontend.cpp
@@ -1754,13 +1754,26 @@ bool dvmCompilerBuildCFG (const Method *method, GrowableList *blockList, BasicBl
             processCanSwitch (blockList, curBlock, insn, method->insns, curOffset, width, flags);
         }
         curOffset += width;
+
+        //Should we create the next block if not found
+        bool shouldCreate = false;
+
+        //Generally we would like to continue in the same block. However, for unconditional throws,
+        //we would like to terminate the current block even if we ignored the catch blocks, i.e.,
+        //the tryBlockAddr == 0
+        if ((flags & kInstrCanThrow) != 0 && (flags & kInstrCanContinue) == 0 && tryBlockAddr == 0)
+        {
+            shouldCreate = true;
+        }
+
         BasicBlock *nextBlock = findBlock (blockList, curOffset,
                                            /* split */
                                            false,
                                            /* create */
-                                           false,
+                                           shouldCreate,
                                            /* immedPredBlockP */
                                            NULL);
+
         if (nextBlock) {
             /*
              * The next instruction could be the target of a previously parsed
-- 
1.7.4.1

