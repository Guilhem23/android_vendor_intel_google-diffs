From d87f30e6203aef05d724bb38714557d4592dff76 Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Wed, 3 Apr 2013 13:10:29 -0700
Subject: Dalvik: Remove false dependencies between memory accesses of constants section

BZ: 98038

Section of trace containing constants is never updated at runtime. Thus,
memory accesses to that section can be disambiguated and it is safe to
reorder the reads.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I01f9899b78046562a38952664408062086f957e4
Orig-MCG-Change-Id: Idea15213c6126e724f62ed99e49dbe2c971802f3
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/Lower.h         |    4 +++-
 vm/compiler/codegen/x86/LowerHelper.cpp |   17 +++++++++++------
 vm/compiler/codegen/x86/Schedule.cpp    |   13 +++++++++++++
 3 files changed, 27 insertions(+), 7 deletions(-)

diff --git a/vm/compiler/codegen/x86/Lower.h b/vm/compiler/codegen/x86/Lower.h
index f48c1fb..05e5044 100644
--- a/vm/compiler/codegen/x86/Lower.h
+++ b/vm/compiler/codegen/x86/Lower.h
@@ -191,7 +191,9 @@ enum MemoryAccessType {
     //! \brief access spill region
     MemoryAccess_SPILL,
     //! \brief unclassified memory access
-    MemoryAccess_Unknown
+    MemoryAccess_Unknown,
+    //! \brief access to read-only constant section
+    MemoryAccess_Constants,
 };
 
 //! \enum UseDefEntryType
diff --git a/vm/compiler/codegen/x86/LowerHelper.cpp b/vm/compiler/codegen/x86/LowerHelper.cpp
index 2cea551..4263ab1 100644
--- a/vm/compiler/codegen/x86/LowerHelper.cpp
+++ b/vm/compiler/codegen/x86/LowerHelper.cpp
@@ -1369,7 +1369,8 @@ void compare_VR_reg_all(OpndSize size,
                 if (storedAddr == true) {
                     int dispAddr =  getGlobalDataAddr("64bits");
                     dump_mem_reg(m, ATOM_NORMAL, OpndSize_32, dispAddr, PhysicalReg_Null, true,
-                                     MemoryAccess_VR, vA, reg, isPhysical, pType, &(gCompilationUnit->constListHead));
+                                     MemoryAccess_Constants, vA, reg, isPhysical, pType,
+                                     &(gCompilationUnit->constListHead));
                 } else {
                     writeBackConstVR(vA, tmpValue[0]);
                     dump_mem_reg(m, ATOM_NORMAL, size, 4*vA, PhysicalReg_FP, true, MemoryAccess_VR, vA, reg, isPhysical, pType, NULL);
@@ -1414,7 +1415,8 @@ void compare_VR_reg_all(OpndSize size,
                 if (storedAddr == true) {
                     int dispAddr =  getGlobalDataAddr("64bits");
                     dump_mem_reg(m, ATOM_NORMAL_ALU, OpndSize_64, dispAddr, PhysicalReg_Null, true,
-                                     MemoryAccess_VR, vA, reg, isPhysical, LowOpndRegType_xmm, &(gCompilationUnit->constListHead));
+                                     MemoryAccess_Constants, vA, reg, isPhysical, LowOpndRegType_xmm,
+                                     &(gCompilationUnit->constListHead));
                 } else {
                     writeBackConstVR(vA, tmpValue[0]);
                     writeBackConstVR(vA+1, tmpValue[1]);
@@ -1999,7 +2001,8 @@ void alu_sd_binary_VR_reg(ALU_Opcode opc, int vA, int reg, bool isPhysical, bool
             if (storedAddr == true){
                 int dispAddr =  getGlobalDataAddr("64bits");
                 dump_mem_reg(m, ATOM_NORMAL_ALU, OpndSize_32, dispAddr, PhysicalReg_Null, true,
-                                   MemoryAccess_VR, vA, reg, isPhysical, LowOpndRegType_xmm, &(gCompilationUnit->constListHead));
+                                   MemoryAccess_Constants, vA, reg, isPhysical, LowOpndRegType_xmm,
+                                   &(gCompilationUnit->constListHead));
             } else {
                  writeBackConstVR(vA, tmpValue[0]);
                  dump_mem_reg(m, ATOM_NORMAL_ALU, OpndSize_32, 4*vA, PhysicalReg_FP, true,
@@ -2033,7 +2036,7 @@ void alu_sd_binary_VR_reg(ALU_Opcode opc, int vA, int reg, bool isPhysical, bool
             if (storedAddr == true){
                 int dispAddr =  getGlobalDataAddr("64bits");
                 dump_mem_reg(m, ATOM_NORMAL_ALU, OpndSize_64, dispAddr, PhysicalReg_Null, true,
-                       MemoryAccess_VR, vA, reg, isPhysical, LowOpndRegType_xmm, &(gCompilationUnit->constListHead));
+                       MemoryAccess_Constants, vA, reg, isPhysical, LowOpndRegType_xmm, &(gCompilationUnit->constListHead));
             } else {
                 writeBackConstVR(vA, tmpValue[0]);
                 writeBackConstVR(vA+1, tmpValue[1]);
@@ -2524,7 +2527,8 @@ void get_virtual_reg_all(int vR, OpndSize size, int reg, bool isPhysical, Mnemon
                 if (storedAddr == true){
                     int dispAddr =  getGlobalDataAddr("64bits");
                     dump_mem_reg(m, ATOM_NORMAL, size, dispAddr, PhysicalReg_Null, true,
-                                       MemoryAccess_VR, vR, reg, isPhysical, pType, &(gCompilationUnit->constListHead));
+                                       MemoryAccess_Constants, vR, reg, isPhysical, pType,
+                                       &(gCompilationUnit->constListHead));
                 } else {
                     //VR is not mapped to a register but in memory
                     writeBackConstVR(vR, tmpValue[0]);
@@ -2560,7 +2564,8 @@ void get_virtual_reg_all(int vR, OpndSize size, int reg, bool isPhysical, Mnemon
                 if (storedAddr == true){
                     int dispAddr =  getGlobalDataAddr("64bits");
                     dump_mem_reg(m, ATOM_NORMAL, size, dispAddr, PhysicalReg_Null, true,
-                                       MemoryAccess_VR, vR, reg, isPhysical, pType, &(gCompilationUnit->constListHead));
+                                       MemoryAccess_Constants, vR, reg, isPhysical, pType,
+                                       &(gCompilationUnit->constListHead));
                 } else {
                     //VR is not mapped to a register but in memory
                     writeBackConstVR(vR, tmpValue[0]);
diff --git a/vm/compiler/codegen/x86/Schedule.cpp b/vm/compiler/codegen/x86/Schedule.cpp
index cd5df2b..b2495ea 100644
--- a/vm/compiler/codegen/x86/Schedule.cpp
+++ b/vm/compiler/codegen/x86/Schedule.cpp
@@ -804,6 +804,19 @@ void Scheduler::updateDependencyGraphForMem(LowOpndMem & mOpnd, LowOpndDefUse de
     int index = mOpnd.index;
     bool is64 = false;
 
+    // We know that if we have an access to the memory holding constants
+    // then it is okay to reorder instructions accessing that since it
+    // is not updated at runtime. Thus, we don't add any dependencies for
+    // this operand.
+    if (mType == MemoryAccess_Constants)
+    {
+        // All accesses to the constants section should be done with
+        // null base register
+        assert(mOpnd.m_base.regNum == PhysicalReg_Null);
+
+        return;
+    }
+
     // Update dependency on registers used
     updateDependencyGraph(UseDefType_Reg, mOpnd.m_base.regNum,
             LowOpndDefUse_Use, Latency_Agen_stall, op);
-- 
1.7.4.1

