From c5143f67135c0cd9ca95eeb25c84ade09c68805e Mon Sep 17 00:00:00 2001
From: wangzuo <zuo.wang@intel.com>
Date: Sun, 10 Nov 2013 13:56:00 -0500
Subject: Dalvik: Fix the memory leak issue for TLA patch

BZ: 150162

TLA has two ways to reuse the recycled slots. If all slots in a private
buffer are recycled in last GC, TLA directly recycles the private buffer.
If only a few slots in a private buffer are recycled in last GC, TLA inserts
those slots into the free slot list by calling reBuildSlotList(). The function
reBuildSlotList() does not works correctly due to a code implementation bug:
a temporal pointer "headSlotList" is passed as parameter to the insertNode() function.
A correct way is taking "&(block->headSlotList)" as parameter since insertNode()
updates "block->headSlotList" after each insert action.

Category: device-enablement
Domain: AOSP-Dalvik-GC
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I00556bebb1d5e7cb3a655eb1bfbc7e9ccfb99ccd
Orig-MCG-Change-Id: Icf5c3dbc56022bdbfbb4ef9be3836ef33d976a56
Signed-off-by: Wang Zuo <zuo.wang@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/alloc/ThreadLocalAllocator.cpp |   29 +++++++++++++----------------
 1 files changed, 13 insertions(+), 16 deletions(-)

diff --git a/vm/alloc/ThreadLocalAllocator.cpp b/vm/alloc/ThreadLocalAllocator.cpp
index fd585e5..b2542dd 100644
--- a/vm/alloc/ThreadLocalAllocator.cpp
+++ b/vm/alloc/ThreadLocalAllocator.cpp
@@ -751,29 +751,26 @@ static void buildSlotList (void* startDataPos, unsigned int sizeOffset)
  */
 static void rebuildSlotList (void** smallObjectBuffer, unsigned int numPtrs, unsigned int tableIndex, unsigned int sizeOffset, unsigned int blockIndex)
 {
+    //Get the head of the block lists
+    void *head = getTraversalBlockHead (tableIndex,sizeOffset);
+
+    //Paranoid
+    assert (head != 0);
+
+    //Now get the block we care about
+    BlockTraversalStructure *block = getTraversalBlock (head, blockIndex);
+
+    //Paranoid
+    assert (block != 0);
+
     //Walk the number of pointers
     while (numPtrs > 0)
     {
         //Decrement it now because we are going to use it -1 afterwards and when it hits 0, we will handle the last case before exiting the loop
         numPtrs--;
 
-        //Get the head of the block lists
-        void *head = getTraversalBlockHead (tableIndex,sizeOffset);
-
-        //Paranoid
-        assert (head != 0);
-
-        //Now get the block we care about
-        BlockTraversalStructure *block = getTraversalBlock (head, blockIndex);
-
-        //Paranoid
-        assert (block != 0);
-
-        //Get the slot head list
-        void *headSlotList = block->headSlotList;
-
         //Now insert a node here
-        insertNode (&headSlotList, smallObjectBuffer[numPtrs]);
+        insertNode (&(block->headSlotList), smallObjectBuffer[numPtrs]);
     }
 }
 
-- 
1.7.4.1

