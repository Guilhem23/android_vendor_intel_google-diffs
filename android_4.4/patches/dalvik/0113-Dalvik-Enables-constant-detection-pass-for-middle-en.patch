From 2b4a71bb7a48cbdf70fd38eb8e34ec70c5274434 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Fri, 8 Mar 2013 14:50:21 -0800
Subject: Dalvik: Enables constant detection pass for middle end

BZ: 92851

The constant detection pass becomes enabled with this patch.
This allows detection of virtual registers that hold constant values
resulting from const and move bytecodes.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ib63357e7bee1557b18df30b1c28eccbd988bf9ab
Orig-MCG-Change-Id: Iec1308fc83296dfcf53f5eccd67b1a653d5fb115
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/Checks.cpp            |    2 +-
 vm/compiler/CompilerIR.h          |    5 +++--
 vm/compiler/Dataflow.cpp          |   12 +++++++++---
 vm/compiler/Frontend.cpp          |    8 ++++++++
 vm/compiler/Loop.cpp              |    5 -----
 vm/compiler/SSATransformation.cpp |   16 ++++++++++++++++
 6 files changed, 37 insertions(+), 11 deletions(-)

diff --git a/vm/compiler/Checks.cpp b/vm/compiler/Checks.cpp
index 7057bbd..adc82df 100644
--- a/vm/compiler/Checks.cpp
+++ b/vm/compiler/Checks.cpp
@@ -951,7 +951,7 @@ void handleIndexHoist (CompilationUnit *cUnit, SRemoveData *removeData, MIR *mir
                         else
                         {
                             boundCheck->dalvikInsn.arg[0] = MIR_BOUND_CHECK_CST;
-                            boundCheck->dalvikInsn.arg[1] = cUnit->constantValues[indexReg];
+                            boundCheck->dalvikInsn.arg[1] = (*cUnit->constantValues)[indexReg];
                         }
 
                         boundCheck->dalvikInsn.vC = 0;
diff --git a/vm/compiler/CompilerIR.h b/vm/compiler/CompilerIR.h
index f938d51..8dc69b3 100644
--- a/vm/compiler/CompilerIR.h
+++ b/vm/compiler/CompilerIR.h
@@ -303,7 +303,6 @@ typedef struct CompilationUnit {
     int *dalvikToSSAMap;                // length == method->registersSize
     int *ssaSubScripts;                 // Subscript definition counters for each Dalvik Register
     BitVector *isConstantV;             // length == numSSAReg
-    int *constantValues;                // length == numSSAReg
 
     /* Data structure for loop analysis and optimizations */
 #ifndef ARCH_IA32
@@ -344,7 +343,9 @@ typedef struct CompilationUnit {
     bool printSSANames;
     void *blockLabelList;
     bool quitLoopMode;                  // cold path/complex bytecode
-} CompilationUnit;
+
+    std::map<int, int> *constantValues; // Constant values map using the ssa register as a key
+}CompilationUnit;
 
 #if defined(WITH_SELF_VERIFICATION)
 #define HEAP_ACCESS_SHADOW(_state) cUnit->heapMemOp = _state
diff --git a/vm/compiler/Dataflow.cpp b/vm/compiler/Dataflow.cpp
index 2f63f95..75ef05e 100644
--- a/vm/compiler/Dataflow.cpp
+++ b/vm/compiler/Dataflow.cpp
@@ -1648,7 +1648,7 @@ bool dvmCompilerDoSSAConversion(CompilationUnit *cUnit, BasicBlock *bb)
 static void setConstant(CompilationUnit *cUnit, int ssaReg, int value)
 {
     dvmSetBit(cUnit->isConstantV, ssaReg);
-    cUnit->constantValues[ssaReg] = value;
+    (*cUnit->constantValues)[ssaReg] = value;
 }
 
 bool dvmCompilerDoConstantPropagation(CompilationUnit *cUnit, BasicBlock *bb)
@@ -1712,10 +1712,10 @@ bool dvmCompilerDoConstantPropagation(CompilationUnit *cUnit, BasicBlock *bb)
             /* Move a register holding a constant to another register */
             if (i == mir->ssaRep->numUses) {
                 setConstant(cUnit, mir->ssaRep->defs[0],
-                            cUnit->constantValues[mir->ssaRep->uses[0]]);
+                            (*cUnit->constantValues)[mir->ssaRep->uses[0]]);
                 if (dfAttributes & DF_DA_WIDE) {
                     setConstant(cUnit, mir->ssaRep->defs[1],
-                                cUnit->constantValues[mir->ssaRep->uses[1]]);
+                                (*cUnit->constantValues)[mir->ssaRep->uses[1]]);
                 }
             }
         }
@@ -1968,6 +1968,12 @@ void dvmInitializeSSAConversion(CompilationUnit *cUnit)
         cUnit->dalvikToSSAMap[i] = i;
     }
 
+    // Constant propagation: allocate the vector if required
+    if (cUnit->isConstantV == 0)
+    {
+        cUnit->isConstantV = dvmCompilerAllocBitVector(cUnit->numSSARegs, true);
+    }
+
     /*
      * Allocate the BasicBlockDataFlow structure for the entry and code blocks
      */
diff --git a/vm/compiler/Frontend.cpp b/vm/compiler/Frontend.cpp
index 9618f93..27b8fdd 100644
--- a/vm/compiler/Frontend.cpp
+++ b/vm/compiler/Frontend.cpp
@@ -1389,6 +1389,10 @@ bool dvmCompileMethod(const Method *method, JitTranslationInfo *info)
 
     cUnit.jitMode = kJitMethod;
 
+    //Set the constant values
+    std::map<int, int> constantValues;
+    cUnit.constantValues = &constantValues;
+
     /* Initialize the block list */
     dvmInitGrowableList(&cUnit.blockList, 4);
 
@@ -2082,6 +2086,10 @@ bool dvmCompileTrace(JitTraceDescription *desc, int numMaxInsts,
     compilationId++;
     memset(&cUnit, 0, sizeof(CompilationUnit));
 
+    //Set the constant values
+    std::map<int, int> constantValues;
+    cUnit.constantValues = &constantValues;
+
 #if defined(WITH_JIT_TUNING)
     /* Locate the entry to store compilation statistics for this method */
     methodStats = dvmCompilerAnalyzeMethodBody(desc->method, false);
diff --git a/vm/compiler/Loop.cpp b/vm/compiler/Loop.cpp
index 2a9cc01..9b03dd7 100644
--- a/vm/compiler/Loop.cpp
+++ b/vm/compiler/Loop.cpp
@@ -1236,11 +1236,6 @@ bool dvmCompilerLoopOpt(CompilationUnit *cUnit)
         (LoopAnalysis *)dvmCompilerNew(sizeof(LoopAnalysis), true);
     cUnit->loopAnalysis = loopAnalysis;
 
-    /* Constant propagation */
-    cUnit->isConstantV = dvmCompilerAllocBitVector(cUnit->numSSARegs, false);
-    cUnit->constantValues =
-        (int *)dvmCompilerNew(sizeof(int) * cUnit->numSSARegs,
-                              true);
     dvmCompilerDataFlowAnalysisDispatcher(cUnit,
                                           dvmCompilerDoConstantPropagation,
                                           kAllNodes,
diff --git a/vm/compiler/SSATransformation.cpp b/vm/compiler/SSATransformation.cpp
index ed3ed2e..2341dc1 100644
--- a/vm/compiler/SSATransformation.cpp
+++ b/vm/compiler/SSATransformation.cpp
@@ -927,6 +927,22 @@ bool dvmCompilerBuildLoop(CompilationUnit *cUnit, bool filter)
     //We suppose here that SSA has been done already
     dvmCompilerDataFlowAnalysisDispatcher (cUnit, buildDefUseChain, kBreadthFirstTraversal, false);
 
+    //Now we want to handle the constant values of the trace
+    //First clear the BitVector
+    if (cUnit->isConstantV != 0)
+    {
+        dvmClearAllBits (cUnit->isConstantV);
+    }
+
+    //Clear the constants
+    cUnit->constantValues->clear ();
+
+    //Finally, get the constant information and set the cUnit correctly
+    dvmCompilerDataFlowAnalysisDispatcher(cUnit,
+                                          dvmCompilerDoConstantPropagation,
+                                          kAllNodes,
+                                          false /* isIterative */);
+
     //Just for safety, reset walkData
     cUnit->walkData = 0;
 
-- 
1.7.4.1

