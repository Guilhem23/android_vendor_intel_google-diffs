From 56906d41b83f7a2b583fce2eca9981bb4d0197d3 Mon Sep 17 00:00:00 2001
From: Dmitry Petrochenko <dmitry.petrochenko@intel.com>
Date: Thu, 15 Aug 2013 16:54:07 +0700
Subject: Dalvik: Pass information about volatiles to PCG

BZ: 130878

PCG introduced volatile memory reference support. This patch implements
passing information about volatiles to PCG in glue layer.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ib37b5e93565a4ab19e5391cce6c9f3171270bd9e
Orig-MCG-Change-Id: Ieda8d440a6ce7f04bb09c192f27ea74714e39d85
Signed-off-by: Dmitry Petrochenko <dmitry.petrochenko@intel.com>
Reviewed-on: http://android.intel.com:8080/125707
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: Provodin, Vitaly A <vitaly.a.provodin@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Kreitzer, David L <david.l.kreitzer@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/pcg/LowerGetPut.cpp |   12 ++++++++----
 1 files changed, 8 insertions(+), 4 deletions(-)

diff --git a/vm/compiler/codegen/x86/pcg/LowerGetPut.cpp b/vm/compiler/codegen/x86/pcg/LowerGetPut.cpp
index 2a5a59d..56a976d 100644
--- a/vm/compiler/codegen/x86/pcg/LowerGetPut.cpp
+++ b/vm/compiler/codegen/x86/pcg/LowerGetPut.cpp
@@ -306,7 +306,8 @@ bool dvmCompilerPcgTranslateSgetSput (CompilationUnitPCG *cUnit, MIR *mir, bool
             dvmCompilerPcgSetVirtualReg (cUnit, ssaRep->defs[0], opcode, 8, call);
         }
         else {
-            CGInst load = CGCreateNewInst (opcode, "m", addr, objectSize, (void*)1);
+            const char *opDescr = (isVolatile == true) ? "v" : "m";
+            CGInst load = CGCreateNewInst (opcode, opDescr, addr, objectSize, (void*)1);
             dvmCompilerPcgSetVirtualReg (cUnit, ssaNum, opcode, objectSize, load);
         }
     }
@@ -340,7 +341,8 @@ bool dvmCompilerPcgTranslateSgetSput (CompilationUnitPCG *cUnit, MIR *mir, bool
             CGSetRreg(spIl, "esp");
         }
         else {
-            CGCreateNewInst (opcode, "mr", addr, objectSize, (void*)1, A);
+            const char *opDescr = (isVolatile == true) ? "vr" : "mr";
+            CGCreateNewInst (opcode, opDescr, addr, objectSize, (void*)1, A);
             if (isObj == true)
             {
                 CGInst clazzInst = dvmCompilerPcgCreateSimpleLoad (fieldPtrInst, OFFSETOF_MEMBER (Field,clazz));
@@ -455,7 +457,8 @@ void dvmCompilerPcgTranslateIgetIput (CompilationUnitPCG *cUnit, MIR *mir, bool
         else
         {
             CGAddr addr = CGCreateAddr (B, fieldOffsetInst, 1, CGSymbolInvalid, 0);
-            CGInst load = CGCreateNewInst (opcode, "m", addr, memSize, (void*)1);
+            const char *opDescr = (isVolatile == true) ? "v" : "m";
+            CGInst load = CGCreateNewInst (opcode, opDescr, addr, memSize, (void*)1);
             dvmCompilerPcgSetVirtualReg (cUnit, ssaRep->defs[0], opcode, memSize, load);
         }
     }
@@ -485,7 +488,8 @@ void dvmCompilerPcgTranslateIgetIput (CompilationUnitPCG *cUnit, MIR *mir, bool
             CGSetRreg(spIl, "esp");
         }
         else {
-            CGCreateNewInst (opcode, "mr", addr, memSize, (void*)1, A);
+            const char *opDescr = (isVolatile == true) ? "vr" : "mr";
+            CGCreateNewInst (opcode, opDescr, addr, memSize, (void*)1, A);
             if (isObj == true)
             {
                 dvmCompilerPcgTranslateMarkCard (cUnit, A, B);
-- 
1.7.4.1

