From 9af0e80e762969ea5143516c820dc29273b5b439 Mon Sep 17 00:00:00 2001
From: WeiTang <wei.a.tang@intel.com>
Date: Thu, 13 Jun 2013 17:45:32 +0800
Subject: Dalvik: Klokwork Issues with the DDDO optimization

BZ: 115786

Fixing a klokwork issue with the DDDO Optimization

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ic9e4bc1f95639a401a2f60cb51dc8ec189f2cc2e
Orig-MCG-Change-Id: I945703ca6c858620b62829d98122af2c63ba45e3
Signed-off-by: WeiTang <wei.a.tang@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/DualDoubleDivOpt.cpp |   24 ++++++++++++++++++------
 1 files changed, 18 insertions(+), 6 deletions(-)

diff --git a/vm/compiler/DualDoubleDivOpt.cpp b/vm/compiler/DualDoubleDivOpt.cpp
index 401a14c..f2dc0e7 100755
--- a/vm/compiler/DualDoubleDivOpt.cpp
+++ b/vm/compiler/DualDoubleDivOpt.cpp
@@ -371,16 +371,21 @@ Dependency DualDoubleDivOpt::determineDependency(unsigned int pOutVRegIndex,
  */
 inline MIR* DualDoubleDivOpt::nextMIR(MIR* pMIR)
 {
-    BasicBlock* aBasicBlock = pMIR->bb;
+    BasicBlock* aBasicBlock;
+
+    if (pMIR != NULL) {
+        aBasicBlock = pMIR->bb;
+    }
+    else {
+        return NULL;
+    }
+
     if (aBasicBlock == NULL) {
         // No block
         return NULL;
     }
 
-    MIR* aMIR = pMIR;
-    if (aMIR != NULL) {
-        aMIR = aMIR->next;
-    }
+    MIR* aMIR = pMIR->next;
     while (aMIR == NULL)
     {
         // Try the next block
@@ -476,7 +481,7 @@ bool DualDoubleDivOpt::undoableMoveBefore(MIR* pItem, MIR* pItemAfter)
     assert(pItem);
     assert(pItemAfter);
     MIR* aMIR = nextMIR(pItem);
-    while (aMIR != pItemAfter)
+    while (aMIR != NULL && aMIR != pItemAfter)
     {
         Dependency aDependency = determineDependency(pItem->dalvikInsn.vA,
                 aMIR->dalvikInsn);
@@ -486,6 +491,13 @@ bool DualDoubleDivOpt::undoableMoveBefore(MIR* pItem, MIR* pItemAfter)
 
         aMIR = nextMIR(aMIR);
     }
+
+    // aMIR shouldn't equal NULL. If this happens,
+    // we only return false to cancel the optimization.
+    if(aMIR == NULL) {
+        return false;
+    }
+
     addUndo(pItem->next, pItemAfter);
     dvmCompilerRemoveMIR(pItem);
     dvmCompilerInsertMIRBefore(pItemAfter->bb, pItemAfter, pItem);
-- 
1.7.4.1

