From 4df00429252e433522c0db99ebaf19542ceec53b Mon Sep 17 00:00:00 2001
From: Mark Mendell <mark.p.mendell@intel.com>
Date: Wed, 6 Nov 2013 09:59:19 -0800
Subject: Dalvik: Add -Xjitdebugdumpcfg option to dump CFG

BZ: 150258

Add -Xjitdebugdumpcfg option to dump CFG after each loop opt pass
removed tabs

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I6d241365a903d5ad90a74df25d83dd47049b2525
Orig-MCG-Change-Id: Ic2b8f88e038867f0bf7d4566ab6d41c224d7a780
Signed-off-by: Mark Mendell <mark.p.mendell@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/Globals.h               |    3 +++
 vm/Init.cpp                |    4 ++++
 vm/compiler/PassDriver.cpp |   11 +++++++++++
 3 files changed, 18 insertions(+), 0 deletions(-)

diff --git a/vm/Globals.h b/vm/Globals.h
index 345cd38..fe7be10 100644
--- a/vm/Globals.h
+++ b/vm/Globals.h
@@ -1102,6 +1102,9 @@ struct DvmJitGlobals {
     /* Used to control verbosity for all passes */
     bool debugAllPasses;
 
+    /* Used to dump Control Flow Graph after each loop optimization pass */
+    bool debugDumpCFGAfterLoopOpt;
+
     /* Per-process debug flag toggled when receiving a SIGUSR2 */
     bool receivedSIGUSR2;
 
diff --git a/vm/Init.cpp b/vm/Init.cpp
index 5c0c5bb..3e0bf21 100644
--- a/vm/Init.cpp
+++ b/vm/Init.cpp
@@ -181,6 +181,7 @@ static void usage(const char* progName)
     dvmFprintf(stderr, "  -Xjitdebugpasses:<value> (Enable verbosity for optimization passes. The full name of the pass must "
             "be included with each pass name separated by comma so use -Xjitlooppasses to get a list)\n");
     dvmFprintf(stderr, "  -Xjitdebugallpasses (Used to enable verbosity for all optimization passes)\n");
+    dvmFprintf(stderr, "  -Xjitdebugdumpcfg (dump CFG after each loop optimization pass if jitdebugpasses or jitdebugallpasses set)\n");
     dvmFprintf(stderr, "  -Xjitlooppasses (Prints the loop passes available)\n");
     dvmFprintf(stderr, "  -Xjitregisterization:<value> Request a maximum of registerization requests\n");
     dvmFprintf(stderr, "  -Xjitdisableinlining Disables all method inlining\n");
@@ -1704,6 +1705,9 @@ int processOptions(int argc, const char* const argv[], bool ignoreUnrecognized)
         } else if (strncmp (argv[i], "-Xjitdebugallpasses", sizeof ("-Xjitdebugallpasses")) == 0) {
             //Set the flag to true for debugging all
             gDvmJit.debugAllPasses = true;
+        } else if (strncmp (argv[i], "-Xjitdebugdumpcfg", sizeof ("-Xjitdebugdumpcfg")) == 0) {
+            //Set the flag to true for dumping cfgs
+            gDvmJit.debugDumpCFGAfterLoopOpt = true;
         } else if (strncmp(argv[i], "-Xjitlooppasses", 15) == 0) {
             //Simply call the loop pass printer
             dvmCompilerPrintPassNames ();
diff --git a/vm/compiler/PassDriver.cpp b/vm/compiler/PassDriver.cpp
index 57d05c3..05f6b81 100644
--- a/vm/compiler/PassDriver.cpp
+++ b/vm/compiler/PassDriver.cpp
@@ -282,6 +282,8 @@ void dvmCompilerLaunchPassDriver (CompilationUnit *cUnit)
         {
             cUnit->printPass = true;
         }
+        bool dumpCFGAfterOpt = (cUnit->printPass == true && gDvmJit.debugDumpCFGAfterLoopOpt == true);
+
 
         //Do we have a general gate defined?
         bool (*generalGate) (const CompilationUnit *, Pass *) = gDvmJit.jitFramework.generalGate;
@@ -300,6 +302,15 @@ void dvmCompilerLaunchPassDriver (CompilationUnit *cUnit)
         {
             //Apply the pass (Ignore the return value of this call)
             dvmCompilerRunPass (cUnit, curPass);
+            if (dumpCFGAfterOpt == true)
+            {
+                ALOGD("Compilation unit's CFG after pass %s",  curPass->getName().c_str());
+                dvmCompilerDumpCompilationUnit(cUnit);
+                ALOGD("End Compilation unit's CFG after pass %s",  curPass->getName().c_str());
+            }
+        } else if (dumpCFGAfterOpt == true)
+        {
+            ALOGD("Loop optimization pass %s not applied - gate returned false",  curPass->getName().c_str());
         }
 
         //Now restore the printPass flag. For explanation why we restore it, please see description of when we save.
-- 
1.7.4.1

