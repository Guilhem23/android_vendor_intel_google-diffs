From 9674f5a68fadb17bb0bee10801e8ecd8e607c6f6 Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Mon, 8 Jul 2013 17:25:44 -0700
Subject: Dalvik: Lingering temporaries may add register pressure

BZ: 122049

The live range for a backend temporary is a single bytecode. Thus at the end
of the bytecode it is okay to free all of the temporaries because they will
no longer be used. However, in case when reference count is non-zero, it may
be possible to leave a lingering temporary with physical register. This patch
ensures that no lingering temporaries are left.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I48da558efc0f7fddd9668266a7530df9a0b43c0f
Orig-MCG-Change-Id: Ie26f48f67b46e8eb9c9110b0473ae941bdf41186
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/AnalysisO1.cpp |   36 +++++++++++++++++++------------
 1 files changed, 22 insertions(+), 14 deletions(-)

diff --git a/vm/compiler/codegen/x86/AnalysisO1.cpp b/vm/compiler/codegen/x86/AnalysisO1.cpp
index efb51ff..b5a00d9 100644
--- a/vm/compiler/codegen/x86/AnalysisO1.cpp
+++ b/vm/compiler/codegen/x86/AnalysisO1.cpp
@@ -1569,19 +1569,6 @@ int codeGenBasicBlock(const Method* method, BasicBlock_O1* bb)
 
             updateConstInfo(bb);
             freeShortMap();
-            freeReg(false); //may dump GL VR to memory (this is necessary)
-
-            //after each bytecode, make sure non-VRs have refCount of zero
-            for(k = 0; k < compileTable.size (); k++) {
-                if(compileTable[k].isTemporary ()) {
-#ifdef PRINT_WARNING
-                    if(compileTable[k].refCount > 0) {
-                        ALOGW("refCount for a temporary reg %d %d is %d after a bytecode", compileTable[k].regNum, compileTable[k].physicalType, compileTable[k].refCount);
-                    }
-#endif
-                    compileTable[k].refCount = 0;
-                }
-            }
         } else { //isConst
             //if this bytecode is the target of a jump, the mapFromBCtoNCG should be updated
             offsetNCG = stream - streamMethodStart;
@@ -1589,8 +1576,29 @@ int codeGenBasicBlock(const Method* method, BasicBlock_O1* bb)
 #ifdef DEBUG_COMPILE_TABLE
             ALOGI("Bytecode %s generates a constant and has no side effect\n", dexGetOpcodeName(mir->dalvikInsn.opcode));
 #endif
-            freeReg(false); //may dump GL VR to memory (this is necessary)
         }
+
+        //After each bytecode, make sure the temporaries have refCount of zero.
+        for(k = 0; k < compileTable.size (); k++)
+        {
+            if(compileTable[k].isTemporary ())
+            {
+#ifdef PRINT_WARNING
+                //If warnings are enabled, we need to print a message because remaining ref count greater
+                //than zero means that bytecode visitor reference counts are not correct
+                if (compileTable[k].refCount > 0)
+                {
+                    ALOGD ("JIT_INFO: refCount for a temporary reg %d %d is %d after a bytecode", compileTable[k].regNum,
+                            compileTable[k].physicalType, compileTable[k].refCount);
+                }
+#endif
+                compileTable[k].updateRefCount (0);
+            }
+        }
+
+        //Now that we updated reference counts, let's clear the physical register associations
+        freeReg (false);
+
 #ifdef DEBUG_COMPILE_TABLE
         ALOGI("After one bytecode BB %d (num of VRs %d)", bb->bb_index, bb->infoBasicBlock.size ());
 #endif
-- 
1.7.4.1

