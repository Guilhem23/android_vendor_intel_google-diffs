From bd1e0f3a4166e634ceccba07dc71ba830a94d658 Mon Sep 17 00:00:00 2001
From: Yang Chang <yang.chang@intel.com>
Date: Mon, 22 Apr 2013 14:36:16 +0800
Subject: Dalvik: Revert GC changes in "Scratch virtual registers"

BZ: 102300

GC changes done in "Scratch virtual registers" is a place holder, which
doesn't take precise GC into consideration. A better design is needed if
the new scratch virtual registers can be live outside JIT traces. So far,
they are only trace local so there's still no need to let GC know their
existence.

Category: device-enablement
Domain: AOSP-Dalvik-GC
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Idfb200e228b44f64139bba4a1eb6fb3d7c50903c
Orig-MCG-Change-Id: Id5f06c2635a264cf2e59c7c3225a49fe348d3083
Signed-off-by: Yang Chang <yang.chang@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/alloc/Copying.cpp |   37 ++++---------------------------------
 vm/alloc/Visit.cpp   |   28 +++-------------------------
 2 files changed, 7 insertions(+), 58 deletions(-)

diff --git a/vm/alloc/Copying.cpp b/vm/alloc/Copying.cpp
index c50838d..0e8e811 100644
--- a/vm/alloc/Copying.cpp
+++ b/vm/alloc/Copying.cpp
@@ -1635,8 +1635,6 @@ static void scavengeThreadStack(Thread *thread)
             if (regVector == NULL) {
                 /*
                  * There are no roots to scavenge.  Skip over the entire frame.
-                 * We do not need to take into account the temporaries because
-                 * they are part of the StackSaveArea.
                  */
                 framePtr += method->registersSize;
             } else {
@@ -1649,18 +1647,7 @@ static void scavengeThreadStack(Thread *thread)
                  * A '1' bit indicates a live reference.
                  */
                 u2 bits = 1 << 1;
-
-                int totalRegisters = method->registersSize;
-#ifdef WITH_JIT
-                /*
-                 * We want to scan through temporary registers as well but
-                 * for now since they are just live within a trace, we do
-                 * not have to scan them.
-                 */
-                totalRegisters += 0; //dvmArchSpecGetNumberOfScratch ();
-#endif
-
-                for (int i = totalRegisters - 1; i >= 0; i--) {
+                for (int i = method->registersSize - 1; i >= 0; i--) {
                     u4 rval = *framePtr;
 
                     bits >>= 1;
@@ -1678,7 +1665,7 @@ static void scavengeThreadStack(Thread *thread)
                         if ((rval & 0x3) != 0 || !dvmIsValidObject((Object*) rval)) {
                             /* this is very bad */
                             ALOGE("PGC: invalid ref in reg %d: 0x%08x",
-                                    totalRegisters - 1 - i, rval);
+                                method->registersSize-1 - i, rval);
                         } else
 #endif
                         {
@@ -1695,7 +1682,7 @@ static void scavengeThreadStack(Thread *thread)
                         if (dvmIsValidObject((Object*) rval)) {
                             /* this is normal, but we feel chatty */
                             ALOGD("PGC: ignoring valid ref in reg %d: 0x%08x",
-                                    totalRegisters - 1 - i, rval);
+                                 method->registersSize-1 - i, rval);
                         }
 #endif
                     }
@@ -1795,11 +1782,6 @@ static void pinThreadStack(const Thread *thread)
                 }
             }
             shorty = method->shorty+1;      // skip return value
-
-            /*
-             * We don't need to pin the temporaries on frame since the native
-             * code won't touch that area.
-             */
             for (int i = method->registersSize - 1; i >= 0; i--, framePtr++) {
                 switch (*shorty++) {
                 case 'L':
@@ -1837,18 +1819,7 @@ static void pinThreadStack(const Thread *thread)
                 /*
                  * No register info for this frame, conservatively pin.
                  */
-
-                unsigned int totalRegisters = method->registersSize;
-#ifdef WITH_JIT
-                /*
-                 * Since we do not have native method, we should conservatively
-                 * pin the temporaries as well. However, for now temporaries are
-                 * not live out of compiled traces so we can skip them.
-                 */
-                totalRegisters += 0; //dvmArchSpecGetNumberOfScratch ();
-#endif
-
-                for (unsigned int i = 0; i < totalRegisters; ++i) {
+                for (int i = 0; i < method->registersSize; ++i) {
                     u4 regValue = framePtr[i];
                     if (regValue != 0 && (regValue & 0x3) == 0 && dvmIsValidObject((Object *)regValue)) {
                         pinObject((Object *)regValue);
diff --git a/vm/alloc/Visit.cpp b/vm/alloc/Visit.cpp
index 9339838..f6b5088 100644
--- a/vm/alloc/Visit.cpp
+++ b/vm/alloc/Visit.cpp
@@ -106,18 +106,7 @@ static void visitThreadStack(RootVisitor *visitor, Thread *thread, void *arg)
                  * info for the current PC.  Perform a conservative
                  * scan.
                  */
-
-                unsigned int totalRegisters = method->registersSize;
-#ifdef WITH_JIT
-                /*
-                 * We want to scan through temporary registers as well but
-                 * for now since they are just live within a trace, we do
-                 * not have to scan them.
-                 */
-                totalRegisters += 0; //dvmArchSpecGetNumberOfScratch ();
-#endif
-
-                for (unsigned int i = 0; i < totalRegisters; ++i) {
+                for (size_t i = 0; i < method->registersSize; ++i) {
                     if (dvmIsValidObject((Object *)fp[i])) {
                         (*visitor)(&fp[i], threadId, ROOT_JAVA_FRAME, arg);
                     }
@@ -132,18 +121,7 @@ static void visitThreadStack(RootVisitor *visitor, Thread *thread, void *arg)
                  * A '1' bit indicates a live reference.
                  */
                 u2 bits = 1 << 1;
-
-                unsigned int totalRegisters = method->registersSize;
-#ifdef WITH_JIT
-                /*
-                 * We want to scan through temporary registers as well but
-                 * for now since they are just live within a trace, we do
-                 * not have to scan them.
-                 */
-                totalRegisters += 0; //dvmArchSpecGetNumberOfScratch ();
-#endif
-
-                for (unsigned int i = 0; i < totalRegisters; ++i) {
+                for (size_t i = 0; i < method->registersSize; ++i) {
                     bits >>= 1;
                     if (bits == 1) {
                         /* set bit 9 so we can tell when we're empty */
@@ -157,7 +135,7 @@ static void visitThreadStack(RootVisitor *visitor, Thread *thread, void *arg)
                         if (fp[i] != 0 && !dvmIsValidObject((Object *)fp[i])) {
                             /* this is very bad */
                             ALOGE("PGC: invalid ref in reg %d: %#x",
-                                    totalRegisters - 1 - i, fp[i]);
+                                 method->registersSize - 1 - i, fp[i]);
                             ALOGE("PGC: %s.%s addr %#x",
                                  method->clazz->descriptor, method->name,
                                  saveArea->xtra.currentPc - method->insns);
-- 
1.7.4.1

