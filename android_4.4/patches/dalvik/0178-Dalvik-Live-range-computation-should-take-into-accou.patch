From 04e1a521a15d307d8301076d1c3df3756bf362f7 Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Mon, 27 May 2013 11:40:45 +0700
Subject: Dalvik: Live range computation should take into account bail outs

BZ: 101299

Registearization uses live range analysis for basic blocks to
avoid redundant spills for dead registers. Live range analysis
should take into account that some MIR implementation may result
in bail out from JIT code when all VRs must be up to date.
So these bail out points represent the fake uses for all VRs.
The patch adds these fake uses to live range analysis.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ie27a4c21564fe062347d996968f5d863d1af5c9e
Orig-MCG-Change-Id: Ib445fdb68badc67547c55109d02e86ef755311fe
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/CompilerIR.h               |    2 +
 vm/compiler/Dataflow.cpp               |   40 +++++----
 vm/compiler/Frontend.cpp               |   13 +++
 vm/compiler/LoopOpt.cpp                |    5 +-
 vm/compiler/Pass.h                     |    3 +-
 vm/compiler/codegen/CodegenFactory.cpp |   12 +++
 vm/compiler/codegen/CompilerCodegen.h  |    6 +
 vm/compiler/codegen/x86/AnalysisO1.cpp |  159 ++++++++++++++++++++++++++++++++
 8 files changed, 220 insertions(+), 20 deletions(-)

diff --git a/vm/compiler/CompilerIR.h b/vm/compiler/CompilerIR.h
index e527d58..50ae364 100644
--- a/vm/compiler/CompilerIR.h
+++ b/vm/compiler/CompilerIR.h
@@ -145,8 +145,10 @@ typedef enum {
     kMIRInlinedPred,                    // Invoke is inlined via prediction
     kMIRCallee,                         // Instruction is inlined from callee
     kMIRInvokeMethodJIT,                // Callee is JIT'ed as a whole method
+    kMIRIgnoreBailOut,                  // Instruction is safe (no bail out from JIT code)
 } MIROptimizationFlagPositons;
 
+#define MIR_IGNORE_BAIL_OUT_CHECK       (1 << kMIRIgnoreBailOut)
 #define MIR_IGNORE_NULL_CHECK           (1 << kMIRIgnoreNullCheck)
 #define MIR_NULL_CHECK_ONLY             (1 << kMIRNullCheckOnly)
 #define MIR_IGNORE_RANGE_CHECK          (1 << kMIRIgnoreRangeCheck)
diff --git a/vm/compiler/Dataflow.cpp b/vm/compiler/Dataflow.cpp
index a31d09e..be2e260 100644
--- a/vm/compiler/Dataflow.cpp
+++ b/vm/compiler/Dataflow.cpp
@@ -1413,24 +1413,30 @@ bool dvmCompilerFindLocalLiveIn(CompilationUnit *cUnit, BasicBlock *bb)
             dvmCompilerDataFlowAttributes[mir->dalvikInsn.opcode];
         DecodedInstruction *dInsn = &mir->dalvikInsn;
 
-        if (dfAttributes & DF_HAS_USES) {
-            if (dfAttributes & DF_UA) {
-                handleUse(useV, defV, dInsn->vA);
-            } else if (dfAttributes & DF_UA_WIDE) {
-                handleUse(useV, defV, dInsn->vA);
-                handleUse(useV, defV, dInsn->vA + 1);
-            }
-            if (dfAttributes & DF_UB) {
-                handleUse(useV, defV, dInsn->vB);
-            } else if (dfAttributes & DF_UB_WIDE) {
-                handleUse(useV, defV, dInsn->vB);
-                handleUse(useV, defV, dInsn->vB + 1);
+        if (backendCanBailOut(cUnit, mir) == true) {
+            for (int i = 0; i < cUnit->method->registersSize; i++) {
+                handleUse(useV, defV, i);
             }
-            if (dfAttributes & DF_UC) {
-                handleUse(useV, defV, dInsn->vC);
-            } else if (dfAttributes & DF_UC_WIDE) {
-                handleUse(useV, defV, dInsn->vC);
-                handleUse(useV, defV, dInsn->vC + 1);
+        } else {
+            if (dfAttributes & DF_HAS_USES) {
+                if (dfAttributes & DF_UA) {
+                    handleUse(useV, defV, dInsn->vA);
+                } else if (dfAttributes & DF_UA_WIDE) {
+                    handleUse(useV, defV, dInsn->vA);
+                    handleUse(useV, defV, dInsn->vA + 1);
+                }
+                if (dfAttributes & DF_UB) {
+                    handleUse(useV, defV, dInsn->vB);
+                } else if (dfAttributes & DF_UB_WIDE) {
+                    handleUse(useV, defV, dInsn->vB);
+                    handleUse(useV, defV, dInsn->vB + 1);
+                }
+                if (dfAttributes & DF_UC) {
+                    handleUse(useV, defV, dInsn->vC);
+                } else if (dfAttributes & DF_UC_WIDE) {
+                    handleUse(useV, defV, dInsn->vC);
+                    handleUse(useV, defV, dInsn->vC + 1);
+                }
             }
         }
         if (dfAttributes & DF_HAS_DEFS) {
diff --git a/vm/compiler/Frontend.cpp b/vm/compiler/Frontend.cpp
index 5992e93..ab5ba9d 100644
--- a/vm/compiler/Frontend.cpp
+++ b/vm/compiler/Frontend.cpp
@@ -800,9 +800,22 @@ void dvmDumpBasicBlock (CompilationUnit *cUnit, BasicBlock *bb, FILE *file, bool
             //Then dump any architecture specific information
             dvmCompilerDumpArchSpecificBB (cUnit, bb, file, true);
 
+            //Dump live ins
+            if (bb->dataFlowInfo != 0) {
+                dvmDumpBitVectorDotFormat (file, "Live Ins: ", bb->dataFlowInfo->liveInV, true, false);
+            }
+
             //Then dump the instructions if any
             dumpMIRInstructions (cUnit, bb, file);
 
+            //Dump live outs
+            if (bb->dataFlowInfo != 0) {
+                dvmDumpBitVectorDotFormat (file, "Live Outs: ", bb->dataFlowInfo->liveOutV, true, false);
+            }
+
+            //Again dump any architecture specific information
+            dvmCompilerDumpArchSpecificBB (cUnit, bb, file, false);
+
             //Finally, dump spill requests
             dvmDumpBitVectorDotFormat (file, "Write Backs: ", bb->requestWriteBack, true, true);
 
diff --git a/vm/compiler/LoopOpt.cpp b/vm/compiler/LoopOpt.cpp
index 39ad51f..cde15de 100644
--- a/vm/compiler/LoopOpt.cpp
+++ b/vm/compiler/LoopOpt.cpp
@@ -58,7 +58,7 @@ START_PASSES
     NEW_PASS ("Old_Loop_Formation", kAllNodesAndNew, 0, dvmCompilerTraceIsLoopOldSystem,
                 dvmCompilerFormOldLoop, 0, 0, 0, kOptimizationBasicBlockChange),
     NEW_PASS ("Check_Removal", kAllNodes, 0, 0,
-                dvmCompilerStartCheckRemoval, dvmCompilerEndCheckRemoval, dvmCompilerCheckRemoval, 0, 0),
+                dvmCompilerStartCheckRemoval, dvmCompilerEndCheckRemoval, dvmCompilerCheckRemoval, 0, kOptimizationDefUsesChange),
     //The 2addr pass should come before any pass that need register rewriting.
     NEW_PASS ("Convert_2addr_to_normal", kAllNodes, 0, 0,
                 0, 0, dvmCompilerConvert2addr, 0, kOptimizationBasicBlockChange),
@@ -163,7 +163,8 @@ bool dvmCompilerCalculateBasicBlockInformation (CompilationUnit *cUnit, bool fil
   */
 void handlePassFlag (CompilationUnit *cUnit, Pass *pass)
 {
-    if (pass->getFlag (kOptimizationBasicBlockChange) == true)
+    if ((pass->getFlag (kOptimizationBasicBlockChange) == true) ||
+            (pass->getFlag (kOptimizationDefUsesChange) == true))
     {
         dvmCompilerCalculateBasicBlockInformation (cUnit, false);
     }
diff --git a/vm/compiler/Pass.h b/vm/compiler/Pass.h
index 2a36f37..cc2ccdc 100644
--- a/vm/compiler/Pass.h
+++ b/vm/compiler/Pass.h
@@ -32,7 +32,8 @@ typedef bool (*fctWorkPtr) (CompilationUnit *, BasicBlock *);
 enum OptimizationFlag
 {
     kOptimizationBasicBlockChange = 1,   /**< @brief Recalculate BasicBlock information */
-    kLoopStructureChange = 2,            /**< @brief Recalculate LoopInformation nest information */
+    kLoopStructureChange          = 2,   /**< @brief Recalculate LoopInformation nest information */
+    kOptimizationDefUsesChange    = 4,   /**< @brief Additonal information about def-uses discovered */
 };
 
 /**
diff --git a/vm/compiler/codegen/CodegenFactory.cpp b/vm/compiler/codegen/CodegenFactory.cpp
index 56f1345..c942ec5 100644
--- a/vm/compiler/codegen/CodegenFactory.cpp
+++ b/vm/compiler/codegen/CodegenFactory.cpp
@@ -300,4 +300,16 @@ BasicBlock * dvmCompilerArchSpecificNewBB(void) {
     // Empty stub since non x86 do not use a specialized BasicBlock
     return NULL;
 }
+
+/**
+ * @brief Architecture specific checker for possible bail out to VM
+ * @details Returns true for x86 if bail out from JIT code is possible
+ * @param cUnit the CompilationUnit
+ * @param mir the MIR to check
+ * @return true if bail out possible
+ */
+bool backendCanBailOut(CompilationUnit *cUnit, MIR *mir) {
+    // non x86 do not use a fake uses
+    return false;
+}
 #endif
diff --git a/vm/compiler/codegen/CompilerCodegen.h b/vm/compiler/codegen/CompilerCodegen.h
index e08eaef..d5df9b9 100644
--- a/vm/compiler/codegen/CompilerCodegen.h
+++ b/vm/compiler/codegen/CompilerCodegen.h
@@ -90,4 +90,10 @@ BasicBlock *dvmCompilerArchSpecificNewBB();
  */
 void dvmCompilerDumpArchSpecificBB(CompilationUnit *cUnit, BasicBlock *bb, FILE *file, bool beforeMIRs = false);
 
+/*
+ * Implemented in the codegen/<target>/ArchUtility.c
+ * Tells whether backend can bail out from JIT code for this mir.
+ */
+bool backendCanBailOut(CompilationUnit *cUnit, MIR *mir);
+
 #endif  // DALVIK_VM_COMPILERCODEGEN_H_
diff --git a/vm/compiler/codegen/x86/AnalysisO1.cpp b/vm/compiler/codegen/x86/AnalysisO1.cpp
index fb73eec..af2690d 100644
--- a/vm/compiler/codegen/x86/AnalysisO1.cpp
+++ b/vm/compiler/codegen/x86/AnalysisO1.cpp
@@ -884,6 +884,165 @@ static bool isEnoughRegisterization (CompilationUnit *cUnit, RegisterClass reg,
 }
 
 /**
+ * @brief Backend specific checker for possible bail out to VM
+ * @details Returns true if bail out from JIT code is possible
+ *          A bit complex logic:
+ *              If someone proved that bail out is not possible we trust him
+ *              Handle not special cases
+ *              Handle special cases: null check elimination, bound check elimination.
+ * @param cUnit the CompilationUnit
+ * @param mir the MIR to check
+ * @return true if bail out from JIT code is possible
+ */
+bool backendCanBailOut(CompilationUnit *cUnit, MIR *mir)
+{
+    if ((mir->OptimizationFlags & MIR_IGNORE_BAIL_OUT_CHECK) != 0) {
+        return false;
+    }
+
+    /* We miss here some entries which makes sense only for method JIT
+     * TODO: update table if method JIT is enabled
+     */
+    switch (mir->dalvikInsn.opcode) {
+
+    /* Monitor enter/exit - there is a call to dvmLockObject */
+    case OP_MONITOR_ENTER:
+    case OP_MONITOR_EXIT:
+        return true;
+
+    /* possible call to class resolution */
+    case OP_CHECK_CAST:
+    case OP_INSTANCE_OF:
+    case OP_SGET:
+    case OP_SGET_WIDE:
+    case OP_SGET_OBJECT:
+    case OP_SGET_BOOLEAN:
+    case OP_SGET_BYTE:
+    case OP_SGET_CHAR:
+    case OP_SGET_SHORT:
+    case OP_SPUT:
+    case OP_SPUT_WIDE:
+    case OP_SPUT_OBJECT:
+    case OP_SPUT_BOOLEAN:
+    case OP_SPUT_BYTE:
+    case OP_SPUT_CHAR:
+    case OP_SPUT_SHORT:
+    case OP_SGET_VOLATILE:
+    case OP_SPUT_VOLATILE:
+    case OP_SGET_WIDE_VOLATILE:
+    case OP_SPUT_WIDE_VOLATILE:
+    case OP_SGET_OBJECT_VOLATILE:
+    case OP_SPUT_OBJECT_VOLATILE:
+        return true;
+
+    /* memory allocation */
+    case OP_NEW_INSTANCE:
+    case OP_NEW_ARRAY:
+    case OP_FILLED_NEW_ARRAY:
+    case OP_FILLED_NEW_ARRAY_RANGE:
+        return true;
+
+    /* implicit throw */
+    case OP_THROW:
+    case OP_THROW_VERIFICATION_ERROR:
+        return true;
+
+    /* invocation */
+    case OP_INVOKE_VIRTUAL:
+    case OP_INVOKE_SUPER:
+    case OP_INVOKE_DIRECT:
+    case OP_INVOKE_STATIC:
+    case OP_INVOKE_INTERFACE:
+    case OP_INVOKE_VIRTUAL_RANGE:
+    case OP_INVOKE_SUPER_RANGE:
+    case OP_INVOKE_DIRECT_RANGE:
+    case OP_INVOKE_STATIC_RANGE:
+    case OP_INVOKE_INTERFACE_RANGE:
+    case OP_EXECUTE_INLINE:
+    case OP_EXECUTE_INLINE_RANGE:
+    case OP_INVOKE_OBJECT_INIT_RANGE:
+    case OP_INVOKE_VIRTUAL_QUICK:
+    case OP_INVOKE_VIRTUAL_QUICK_RANGE:
+    case OP_INVOKE_SUPER_QUICK:
+    case OP_INVOKE_SUPER_QUICK_RANGE:
+        return true;
+
+    /* Division By Zero */
+    case OP_DIV_INT:
+    case OP_REM_INT:
+    case OP_DIV_LONG:
+    case OP_REM_LONG:
+    case OP_DIV_INT_2ADDR:
+    case OP_REM_INT_2ADDR:
+    case OP_DIV_LONG_2ADDR:
+    case OP_REM_LONG_2ADDR:
+        return true;
+
+    case OP_DIV_INT_LIT16:
+    case OP_REM_INT_LIT16:
+    case OP_DIV_INT_LIT8:
+    case OP_REM_INT_LIT8:
+        return mir->dalvikInsn.vC == 0;
+
+    /* Access an Array index */
+    case OP_AGET:
+    case OP_AGET_WIDE:
+    case OP_AGET_OBJECT:
+    case OP_AGET_BOOLEAN:
+    case OP_AGET_BYTE:
+    case OP_AGET_CHAR:
+    case OP_AGET_SHORT:
+    case OP_APUT:
+    case OP_APUT_WIDE:
+    case OP_APUT_OBJECT:
+    case OP_APUT_BOOLEAN:
+    case OP_APUT_BYTE:
+    case OP_APUT_CHAR:
+    case OP_APUT_SHORT:
+        return ((mir->OptimizationFlags & MIR_IGNORE_RANGE_CHECK) == 0) || ((mir->OptimizationFlags & MIR_IGNORE_NULL_CHECK) == 0);
+
+    /* Access Object field */
+    case OP_ARRAY_LENGTH:
+    case OP_IGET:
+    case OP_IGET_WIDE:
+    case OP_IGET_OBJECT:
+    case OP_IGET_BOOLEAN:
+    case OP_IGET_BYTE:
+    case OP_IGET_CHAR:
+    case OP_IGET_SHORT:
+    case OP_IPUT:
+    case OP_IPUT_WIDE:
+    case OP_IPUT_OBJECT:
+    case OP_IPUT_BOOLEAN:
+    case OP_IPUT_BYTE:
+    case OP_IPUT_CHAR:
+    case OP_IPUT_SHORT:
+    case OP_IGET_VOLATILE:
+    case OP_IPUT_VOLATILE:
+    case OP_IGET_OBJECT_VOLATILE:
+    case OP_IGET_WIDE_VOLATILE:
+    case OP_IPUT_WIDE_VOLATILE:
+    case OP_IGET_QUICK:
+    case OP_IGET_WIDE_QUICK:
+    case OP_IGET_OBJECT_QUICK:
+    case OP_IPUT_QUICK:
+    case OP_IPUT_WIDE_QUICK:
+    case OP_IPUT_OBJECT_QUICK:
+    case OP_IPUT_OBJECT_VOLATILE:
+        return (mir->OptimizationFlags & MIR_IGNORE_NULL_CHECK) == 0;
+
+    default:
+        /* All other cases do not bail out
+         * For non-trace JIT the following opcodes should be checked:
+         * OP_CONST_STRING, OP_CONST_STRING_JUMBO, OP_CONST_CLASS.
+         */
+        break;
+    }
+
+    return false;
+}
+
+/**
  * @brief Handles registerization decision before lowering.
  * @details If registerization is disabled, set the writeBack vector to all 1s.
  * Registerization extended MIRs are then removed in order to only registerize
-- 
1.7.4.1

