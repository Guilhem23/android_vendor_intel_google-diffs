From c13924f76dcc4b2e66ec590c651e29e627e133cf Mon Sep 17 00:00:00 2001
From: skyasara <sushma.kyasaralli.thimmappa@intel.com>
Date: Tue, 19 Feb 2013 13:19:47 -0800
Subject: Dalvik: Addressed klocwork issues

BZ: 87879

The patch fixes the NULL pointer derefering issue, detected by klocwork.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I6d4c1e6d6cd203a95abbcaee057bbdad8bf1e4b8
Orig-MCG-Change-Id: Ieb8cd396012b1553755025ac74f6d26943aa50a2
Signed-off-by: skyasara <sushma.kyasaralli.thimmappa@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/BitVector.cpp             |    7 +++++++
 vm/compiler/JitProfiling.cpp |   23 ++++++++++++-----------
 2 files changed, 19 insertions(+), 11 deletions(-)

diff --git a/vm/BitVector.cpp b/vm/BitVector.cpp
index 13ef1b7..ced3f5d 100644
--- a/vm/BitVector.cpp
+++ b/vm/BitVector.cpp
@@ -86,6 +86,13 @@ BitVector* dvmAllocBitVector(unsigned int startBits, bool expandable, bool fromC
     else
     {
         bv = (BitVector*) malloc(sizeof(BitVector));
+
+        //Paranoid
+        if (bv == 0)
+        {
+            return 0;
+        }
+
         bv->isFromCompiler = false;
         bv->storage = (u4*) calloc(count, sizeof(u4));
     }
diff --git a/vm/compiler/JitProfiling.cpp b/vm/compiler/JitProfiling.cpp
index 27145b6..45cbffc 100644
--- a/vm/compiler/JitProfiling.cpp
+++ b/vm/compiler/JitProfiling.cpp
@@ -173,15 +173,6 @@ ITT_EXTERN_C int JITAPI iJIT_NotifyEvent(iJIT_JVM_EVENT event_type, void *EventS
             // initialize the stack.
             threadStack = (pThreadStack) calloc (sizeof(ThreadStack), 1);
 
-            // That's not good if we failed to allocate threadStack.
-            // However, it doesn't affect us now and it only affects the readers of
-            // threadLocalStorageHandle. Thus we can allow it to be set to NULL
-            // and users of it must check that it has been initialized.
-            if (threadStack != NULL) {
-                threadStack->TopStack = INIT_TOP_Stack;
-                threadStack->CurrentStack = INIT_TOP_Stack;
-            }
-
 #if ITT_PLATFORM==ITT_PLATFORM_WIN
             TlsSetValue(threadLocalStorageHandle,(void*)threadStack);
 #else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */
@@ -189,8 +180,18 @@ ITT_EXTERN_C int JITAPI iJIT_NotifyEvent(iJIT_JVM_EVENT event_type, void *EventS
 #endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */
         }
 
-        // decrease the stack.
-        ((piJIT_Method_NIDS) EventSpecificData)->stack_id = (threadStack->CurrentStack)--;
+        // That's not good if we failed to allocate threadStack.
+        // However, it doesn't affect us now and it only affects the readers of
+        // threadLocalStorageHandle. Thus we can allow it to be set to NULL
+        // and users of it must check that it has been initialized.
+        if (threadStack != NULL) {
+            threadStack->TopStack = INIT_TOP_Stack;
+            threadStack->CurrentStack = INIT_TOP_Stack;
+
+            // decrease the stack.
+            ((piJIT_Method_NIDS) EventSpecificData)->stack_id = (threadStack->CurrentStack)--;
+        }
+
     }
 
     /* This section is performed when method leave event occurs
-- 
1.7.4.1

