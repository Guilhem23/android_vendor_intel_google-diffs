From 50a8aea7ba4bcbf9fed70ffe051e04bd5a2a9379 Mon Sep 17 00:00:00 2001
From: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Date: Mon, 3 Jun 2013 18:43:31 +0700
Subject: Dalvik: GOTOs which point to hot chaining cells should be aligned

BZ: 110757

There are basic blocks which's last instruction is GOTO that points to
hot chaining cell block. In this case, GOTO's target should be aligned
to avoid corruptions of the offset while chaining as well as failed
assert. This patch contains missed alignments of GOTOs offsets for two
cases, depending on whether the scheduling is enabled or not.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I4fd432a874b4f148f40da8d6769957a2a47ceb8b
Orig-MCG-Change-Id: If8e5689e0092e72e92f27b4d1a4a63c9ea8c176b
Signed-off-by: Vladimir Kostyukov <vladimir.kostyukov@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/CodegenInterface.cpp |    3 +++
 vm/compiler/codegen/x86/LowerJump.cpp        |    6 +++++-
 2 files changed, 8 insertions(+), 1 deletions(-)

diff --git a/vm/compiler/codegen/x86/CodegenInterface.cpp b/vm/compiler/codegen/x86/CodegenInterface.cpp
index e23e042..11ca705 100644
--- a/vm/compiler/codegen/x86/CodegenInterface.cpp
+++ b/vm/compiler/codegen/x86/CodegenInterface.cpp
@@ -577,6 +577,9 @@ LowOp* jumpToBasicBlock(char* instAddr, int targetId,
         // If target is chaining cell, we must align the immediate
         unconditional_jump_block(targetId, immediateNeedsAligned);
     } else {
+        if (immediateNeedsAligned == true) {
+            alignOffset(1);
+        }
         int relativeNCG = getRelativeNCG(targetId, JmpCall_uncond, &unknown, &size);
         unconditional_jump_int(relativeNCG, size);
     }
diff --git a/vm/compiler/codegen/x86/LowerJump.cpp b/vm/compiler/codegen/x86/LowerJump.cpp
index 398ef5b..eb09d0f 100644
--- a/vm/compiler/codegen/x86/LowerJump.cpp
+++ b/vm/compiler/codegen/x86/LowerJump.cpp
@@ -1176,6 +1176,7 @@ int common_goto(s4 targetBlockId) {
     bool unknown;
     int retCode = 0;
     OpndSize size;
+    bool needAlignment = doesJumpToBBNeedAlignment(traceCurrentBB->taken);
 
     // We call it with false because we want to actually want to update
     // association tables of children and handle ME spill requests
@@ -1186,8 +1187,11 @@ int common_goto(s4 targetBlockId) {
     if(gDvmJit.scheduling) {
         // Assuming that gotos never go to chaining cells because they are not
         // part of the bytecode and are just for trace transitions
-        unconditional_jump_block((int)targetBlockId, false);
+        unconditional_jump_block((int)targetBlockId, needAlignment);
     } else {
+        if (needAlignment == true) {
+            alignOffset(1);
+        }
         int relativeNCG = getRelativeNCG(targetBlockId, JmpCall_uncond, &unknown, &size);
         unconditional_jump_int(relativeNCG, size);
     }
-- 
1.7.4.1

