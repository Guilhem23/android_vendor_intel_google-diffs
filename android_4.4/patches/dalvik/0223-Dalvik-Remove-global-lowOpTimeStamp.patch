From d3d4da7eb46216bba101f97bda4050b62f7d31c8 Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Mon, 8 Jul 2013 17:03:14 -0700
Subject: Dalvik: Remove global lowOpTimeStamp

BZ: 122033

The global lowOpTimeStamp is not updated properly but yet it still
holds semantic meaning because it affects the freeTimeStamp of a
register. This patch removes the global and its unintended side-effects.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I36b75c8eaf7ab6d0dd874c93f1779dd433bc6dd9
Orig-MCG-Change-Id: I90c33516e9f7947da5f5f1dc39c08a6a6e79d862
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/AnalysisO1.cpp |    6 ------
 vm/compiler/codegen/x86/Lower.cpp      |    1 -
 vm/compiler/codegen/x86/Lower.h        |    1 -
 3 files changed, 0 insertions(+), 8 deletions(-)

diff --git a/vm/compiler/codegen/x86/AnalysisO1.cpp b/vm/compiler/codegen/x86/AnalysisO1.cpp
index 7c6f531..a0d862b 100644
--- a/vm/compiler/codegen/x86/AnalysisO1.cpp
+++ b/vm/compiler/codegen/x86/AnalysisO1.cpp
@@ -359,9 +359,6 @@ void syncAllRegs() {
         }
         if(!stillUsed && allRegs[k].isUsed) {
             allRegs[k].isUsed = false;
-            allRegs[k].freeTimeStamp = lowOpTimeStamp; /* TODO Semantics of code that uses freeTimeStamp might
-                                                          not be correct because value of lowOpTimeStamp is not
-                                                          being updated when each x86 instruction is emitted. */
         }
     }
     return;
@@ -1182,7 +1179,6 @@ void startOfTraceO1(const Method* method, int exceptionBlockId, CompilationUnit
     compileTable.clear ();
     currentBB = NULL;
     currentUnit = cUnit;
-    lowOpTimeStamp = 0;
 
     /* initialize data structure allRegs */
     initializeAllRegs();
@@ -1211,8 +1207,6 @@ void startOfTraceO1(const Method* method, int exceptionBlockId, CompilationUnit
        BasicBlock defined in vm/compiler by JIT
        BasicBlock_O1 defined in o1 */
 int codeGenBasicBlockJit(const Method* method, BasicBlock* bb) {
-    lowOpTimeStamp = 0; //reset time stamp at start of a basic block
-
     // For x86, the BasicBlock should be the specialized one
     currentBB = reinterpret_cast<BasicBlock_O1 *> (bb);
 
diff --git a/vm/compiler/codegen/x86/Lower.cpp b/vm/compiler/codegen/x86/Lower.cpp
index a84c98a..19de2f8 100644
--- a/vm/compiler/codegen/x86/Lower.cpp
+++ b/vm/compiler/codegen/x86/Lower.cpp
@@ -55,7 +55,6 @@ char* streamStart = NULL; //start of the Pure CodeItem?, not include the global
 char* streamCode = NULL; //start of the Pure CodeItem?, not include the global symbols
 char* streamMethodStart; //start of the method
 char* stream; //current stream pointer
-int lowOpTimeStamp = 0;
 Method* currentMethod = NULL;
 int currentExceptionBlockIdx = -1;
 BasicBlock* traceCurrentBB = NULL;
diff --git a/vm/compiler/codegen/x86/Lower.h b/vm/compiler/codegen/x86/Lower.h
index 46c4a7c..fb666ee 100644
--- a/vm/compiler/codegen/x86/Lower.h
+++ b/vm/compiler/codegen/x86/Lower.h
@@ -596,7 +596,6 @@ extern char* streamCode;
 extern char* streamMethodStart; //start of the method
 extern char* stream; //current stream pointer
 extern char* streamMisPred;
-extern int lowOpTimeStamp;
 extern Method* currentMethod;
 extern int currentExceptionBlockIdx;
 
-- 
1.7.4.1

