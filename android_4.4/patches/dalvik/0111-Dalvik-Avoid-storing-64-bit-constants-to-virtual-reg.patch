From 6da58dcf58854d3b6d4534e78f52f4d2a89fede6 Mon Sep 17 00:00:00 2001
From: Bijoy Jose <bijoy.a.jose@intel.com>
Date: Mon, 1 Apr 2013 11:43:38 -0700
Subject: Dalvik: Avoid storing 64 bit constants to virtual registers when they can be read from constant data section of JIT trace.

BZ: 96283

Previously, we used to update virtual registers with constants only when
they are being operating on. With constant initialization applied for 64
bit constants, we do not read these VRs for these operations. With
registerization handling preserving state of VRs at end of basic block,
we can avoid writing of 64 bit constants into VRs.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I278f6fd40107a3a3ce9a9262b4a3ff5c834b3995
Orig-MCG-Change-Id: Ib259714911c0008b81a54b251d41ba673fe0ee00
Signed-off-by: Bijoy Jose <bijoy.a.jose@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/LowerHelper.cpp |   45 ++++++++++++++----------------
 1 files changed, 21 insertions(+), 24 deletions(-)

diff --git a/vm/compiler/codegen/x86/LowerHelper.cpp b/vm/compiler/codegen/x86/LowerHelper.cpp
index 896f0de..aa9ce9d 100644
--- a/vm/compiler/codegen/x86/LowerHelper.cpp
+++ b/vm/compiler/codegen/x86/LowerHelper.cpp
@@ -1329,11 +1329,10 @@ void compare_VR_reg_all(OpndSize size,
 #ifdef DEBUG_NCG_O1
                 ALOGI("VR is const and SS in compare_VR_reg");
 #endif
-                writeBackConstVR(vA, tmpValue[0]);
                 bool storedAddr = false;
+
                 if((gDvmJit.disableOpt & (1 << kElimConstInitOpt)) == false){
                     tmpValue[1] = 0;// set higher 32 bits to zero
-
                     // create a new record of a constant
                     addNewToConstList(&(gCompilationUnit->constListHead), tmpValue[0], tmpValue[1], vA);
 
@@ -1360,6 +1359,7 @@ void compare_VR_reg_all(OpndSize size,
                     dump_mem_reg(m, ATOM_NORMAL, OpndSize_32, dispAddr, PhysicalReg_Null, true,
                                      MemoryAccess_VR, vA, reg, isPhysical, pType, &(gCompilationUnit->constListHead));
                 } else {
+                    writeBackConstVR(vA, tmpValue[0]);
                     dump_mem_reg(m, ATOM_NORMAL, size, 4*vA, PhysicalReg_FP, true, MemoryAccess_VR, vA, reg, isPhysical, pType, NULL);
                 }
                 return;
@@ -1375,15 +1375,13 @@ void compare_VR_reg_all(OpndSize size,
 #ifdef DEBUG_NCG_O1
                 ALOGI("VR is const and 64 bits in compare_VR_reg");
 #endif
-                writeBackConstVR(vA, tmpValue[0]);
-                writeBackConstVR(vA+1, tmpValue[1]);
-
                 bool storedAddr = false;
-                if((gDvmJit.disableOpt & (1 << kElimConstInitOpt)) == false){
 
+                if((gDvmJit.disableOpt & (1 << kElimConstInitOpt)) == false){
                     // create a new record of a constant
                     addNewToConstList(&(gCompilationUnit->constListHead), tmpValue[0], tmpValue[1], vA);
                     const int offset = 4; // offset is 4 for COMISD
+
                     // save mem access location in constList
                     storedAddr = saveAddrToConstList(&(gCompilationUnit->constListHead), tmpValue[0], tmpValue[1], vA, stream, offset);
 
@@ -1406,6 +1404,8 @@ void compare_VR_reg_all(OpndSize size,
                     dump_mem_reg(m, ATOM_NORMAL_ALU, OpndSize_64, dispAddr, PhysicalReg_Null, true,
                                      MemoryAccess_VR, vA, reg, isPhysical, LowOpndRegType_xmm, &(gCompilationUnit->constListHead));
                 } else {
+                    writeBackConstVR(vA, tmpValue[0]);
+                    writeBackConstVR(vA+1, tmpValue[1]);
                     dump_mem_reg(m, ATOM_NORMAL, size, 4*vA, PhysicalReg_FP, true,
                                     MemoryAccess_VR, vA, reg, isPhysical, pType, NULL);
                 }
@@ -1960,14 +1960,11 @@ void alu_sd_binary_VR_reg(ALU_Opcode opc, int vA, int reg, bool isPhysical, bool
         int tmpValue[2];
         int isConst = isVirtualRegConstant(vA, type, tmpValue,
                           true/*updateRefCount*/);
-        if(isConst == 3 && !isSD) {
-            //isConst can be 0 or 3, mem32, use xmm
-            writeBackConstVR(vA, tmpValue[0]);
-
+        if(isConst == 3 && !isSD) {            //isConst can be 0 or 3, mem32, use xmm
             bool storedAddr = false;
+
             if((gDvmJit.disableOpt & (1 << kElimConstInitOpt)) == false){
                 tmpValue[1] = 0;// set higher 32 bits to zero
-
                 // create a new record of a constant
                 addNewToConstList(&(gCompilationUnit->constListHead), tmpValue[0], tmpValue[1], vA);
 
@@ -1992,20 +1989,19 @@ void alu_sd_binary_VR_reg(ALU_Opcode opc, int vA, int reg, bool isPhysical, bool
                 dump_mem_reg(m, ATOM_NORMAL_ALU, OpndSize_32, dispAddr, PhysicalReg_Null, true,
                                    MemoryAccess_VR, vA, reg, isPhysical, LowOpndRegType_xmm, &(gCompilationUnit->constListHead));
             } else {
+                 writeBackConstVR(vA, tmpValue[0]);
                  dump_mem_reg(m, ATOM_NORMAL_ALU, OpndSize_32, 4*vA, PhysicalReg_FP, true,
                                 MemoryAccess_VR, vA, reg, isPhysical, LowOpndRegType_xmm, NULL);
             }
             return;
         }
         if(isConst == 3 && isSD) {
-            writeBackConstVR(vA, tmpValue[0]);
-            writeBackConstVR(vA+1, tmpValue[1]);
-
             bool storedAddr = false;
-            if((gDvmJit.disableOpt & (1 << kElimConstInitOpt)) == false){
 
+            if((gDvmJit.disableOpt & (1 << kElimConstInitOpt)) == false){
                 // create a new record of a constant
                 addNewToConstList(&(gCompilationUnit->constListHead), tmpValue[0], tmpValue[1], vA);
+
                 const int offset = 4; // offset is 4 for OPC_(ADD,SUB,MUL,DIV) double operations
                 // save mem access location in constList
                 storedAddr = saveAddrToConstList(&(gCompilationUnit->constListHead), tmpValue[0], tmpValue[1], vA, stream, offset);
@@ -2027,6 +2023,8 @@ void alu_sd_binary_VR_reg(ALU_Opcode opc, int vA, int reg, bool isPhysical, bool
                 dump_mem_reg(m, ATOM_NORMAL_ALU, OpndSize_64, dispAddr, PhysicalReg_Null, true,
                        MemoryAccess_VR, vA, reg, isPhysical, LowOpndRegType_xmm, &(gCompilationUnit->constListHead));
             } else {
+                writeBackConstVR(vA, tmpValue[0]);
+                writeBackConstVR(vA+1, tmpValue[1]);
                 dump_mem_reg(m, ATOM_NORMAL_ALU, OpndSize_64, 4*vA, PhysicalReg_FP, true,
                        MemoryAccess_VR, vA, reg, isPhysical, LowOpndRegType_xmm, NULL);
             }
@@ -2488,13 +2486,10 @@ void get_virtual_reg_all(u2 vR, OpndSize size, int reg, bool isPhysical, Mnemoni
         isConst = isVirtualRegConstant(vR, type, tmpValue, true/*updateRefCount*/);
         if(isConst == 3) {
             if(m == Mnemonic_MOVSS) { //load 32 bits from VR
-                //VR is not mapped to a register but in memory
-                writeBackConstVR(vR, tmpValue[0]);
-
                 bool storedAddr = false;
+
                 if((gDvmJit.disableOpt & (1 << kElimConstInitOpt)) == false){
                     tmpValue[1] = 0;// set higher 32 bits to zero
-
                     // create a new record of a constant
                     addNewToConstList(&(gCompilationUnit->constListHead), tmpValue[0], tmpValue[1], vR);
 
@@ -2519,19 +2514,18 @@ void get_virtual_reg_all(u2 vR, OpndSize size, int reg, bool isPhysical, Mnemoni
                     dump_mem_reg(m, ATOM_NORMAL, size, dispAddr, PhysicalReg_Null, true,
                                        MemoryAccess_VR, vR, reg, isPhysical, pType, &(gCompilationUnit->constListHead));
                 } else {
-                //temporary reg has "pType" (which is xmm)
+                    //VR is not mapped to a register but in memory
+                    writeBackConstVR(vR, tmpValue[0]);
+                    //temporary reg has "pType" (which is xmm)
                     dump_mem_reg(m, ATOM_NORMAL, size, 4*vR, PhysicalReg_FP, true,
                                        MemoryAccess_VR, vR, reg, isPhysical, pType, NULL);
                 }
                 return;
             }
             else if(m == Mnemonic_MOVSD || size == OpndSize_64) {
-                //VR is not mapped to a register but in memory
-                writeBackConstVR(vR, tmpValue[0]);
-                writeBackConstVR(vR+1, tmpValue[1]);
                 bool storedAddr = false;
-                if((gDvmJit.disableOpt & (1 << kElimConstInitOpt)) == false){
 
+                if((gDvmJit.disableOpt & (1 << kElimConstInitOpt)) == false){
                     // create a new record of a constant
                     addNewToConstList(&(gCompilationUnit->constListHead), tmpValue[0], tmpValue[1], vR);
 
@@ -2556,6 +2550,9 @@ void get_virtual_reg_all(u2 vR, OpndSize size, int reg, bool isPhysical, Mnemoni
                     dump_mem_reg(m, ATOM_NORMAL, size, dispAddr, PhysicalReg_Null, true,
                                        MemoryAccess_VR, vR, reg, isPhysical, pType, &(gCompilationUnit->constListHead));
                 } else {
+                    //VR is not mapped to a register but in memory
+                    writeBackConstVR(vR, tmpValue[0]);
+                    writeBackConstVR(vR+1, tmpValue[1]);
                     dump_mem_reg(m, ATOM_NORMAL, size, 4*vR, PhysicalReg_FP, true,
                                        MemoryAccess_VR, vR, reg, isPhysical, pType, NULL);
                 }
-- 
1.7.4.1

