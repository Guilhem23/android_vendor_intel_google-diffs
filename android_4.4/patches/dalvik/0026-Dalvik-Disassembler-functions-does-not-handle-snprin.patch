From 4fdcaf330e53807e7c799de83421ee8b07a7a65f Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Mon, 29 Oct 2012 16:31:48 -0700
Subject: Dalvik: Disassembler functions does not handle snprintf well

BZ: 65163

Disassembler functions does not handle snprintf well

The functions do not handle the size parameter throughout the function.
The following fix updates the remaining length available
I didn't entirely fix the dvmCompilerFullDisassembler function (the PHI part) because
it is handled by the latest 60166 patch. Fixing it here would provoke a conflict between both.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I41f1a868bbbdf4eaca623167d4a43a2787bbe0f7
Orig-MCG-Change-Id: Ia7d0c36244d4d16e3cee3bc990b03a21a8c03e67
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/Dataflow.cpp |   64 +++++++++++++++++++++++++++++++---------------
 1 files changed, 43 insertions(+), 21 deletions(-)

diff --git a/vm/compiler/Dataflow.cpp b/vm/compiler/Dataflow.cpp
index 48d65fa..759f39e 100644
--- a/vm/compiler/Dataflow.cpp
+++ b/vm/compiler/Dataflow.cpp
@@ -840,16 +840,19 @@ char *dvmCompilerGetDalvikDisassembly(const DecodedInstruction *insn,
         strcat(buffer, note);
 
     /* For branches, decode the instructions to print out the branch targets */
+    int len = strlen (buffer);
+    int left = sizeof (buffer) - len;
+
     if (flags & kInstrCanBranch) {
         InstructionFormat dalvikFormat = dexGetFormatFromOpcode(insn->opcode);
         int offset = 0;
         switch (dalvikFormat) {
             case kFmt21t:
-                snprintf(buffer + strlen(buffer), 256, " v%d,", insn->vA);
+                snprintf(buffer + len, left, " v%d,", insn->vA);
                 offset = (int) insn->vB;
                 break;
             case kFmt22t:
-                snprintf(buffer + strlen(buffer), 256, " v%d, v%d,",
+                snprintf(buffer + len, left, " v%d, v%d,",
                          insn->vA, insn->vB);
                 offset = (int) insn->vC;
                 break;
@@ -864,35 +867,41 @@ char *dvmCompilerGetDalvikDisassembly(const DecodedInstruction *insn,
                 dvmAbort();
                 break;
         }
-        snprintf(buffer + strlen(buffer), 256, " (%c%x)",
+
+        len = strlen (buffer);
+        left = sizeof (buffer) - len;
+        snprintf(buffer + len, left, " (%c%x)",
                  offset > 0 ? '+' : '-',
                  offset > 0 ? offset : -offset);
     } else if (dfAttributes & DF_FORMAT_35C) {
         unsigned int i;
         for (i = 0; i < insn->vA; i++) {
             if (i != 0) strcat(buffer, ",");
-            snprintf(buffer + strlen(buffer), 256, " v%d", insn->arg[i]);
+
+            len = strlen (buffer);
+            left = sizeof (buffer) - len;
+            snprintf(buffer + len, left, " v%d", insn->arg[i]);
         }
     }
     else if (dfAttributes & DF_FORMAT_3RC) {
-        snprintf(buffer + strlen(buffer), 256,
+        snprintf(buffer + len, left,
                  " v%d..v%d", insn->vC, insn->vC + insn->vA - 1);
     }
     else {
         if (dfAttributes & DF_A_IS_REG) {
-            snprintf(buffer + strlen(buffer), 256, " v%d", insn->vA);
+            snprintf(buffer + len, left, " v%d", insn->vA);
         }
         if (dfAttributes & DF_B_IS_REG) {
-            snprintf(buffer + strlen(buffer), 256, ", v%d", insn->vB);
+            snprintf(buffer + len, left, ", v%d", insn->vB);
         }
         else if ((int)opcode < (int)kMirOpFirst) {
-            snprintf(buffer + strlen(buffer), 256, ", (#%d)", insn->vB);
+            snprintf(buffer + len, left, ", (#%d)", insn->vB);
         }
         if (dfAttributes & DF_C_IS_REG) {
-            snprintf(buffer + strlen(buffer), 256, ", v%d", insn->vC);
+            snprintf(buffer + len, left, ", v%d", insn->vC);
         }
         else if ((int)opcode < (int)kMirOpFirst) {
-            snprintf(buffer + strlen(buffer), 256, ", (#%d)", insn->vC);
+            snprintf(buffer + len, left, ", (#%d)", insn->vC);
         }
     }
     int length = strlen(buffer) + 1;
@@ -1085,6 +1094,7 @@ char *dvmCompilerFullDisassembler(const CompilationUnit *cUnit,
     int dfAttributes = dvmCompilerDataFlowAttributes[opcode];
     char *ret;
     int length;
+    int offset, left;
     OpcodeFlags flags;
 
     buffer[0] = 0;
@@ -1096,18 +1106,20 @@ char *dvmCompilerFullDisassembler(const CompilationUnit *cUnit,
     }
 
     flags = dexGetFlagsFromOpcode((Opcode)opcode);
+    offset = strlen (buffer);
+    left = sizeof (buffer) - offset;
     /* For branches, decode the instructions to print out the branch targets */
     if (flags & kInstrCanBranch) {
         InstructionFormat dalvikFormat = dexGetFormatFromOpcode(insn->opcode);
         int delta = 0;
         switch (dalvikFormat) {
             case kFmt21t:
-                snprintf(buffer + strlen(buffer), 256, " %s, ",
+                snprintf(buffer + offset, left, " %s, ",
                          getSSAName(cUnit, mir->ssaRep->uses[0], operand0));
                 delta = (int) insn->vB;
                 break;
             case kFmt22t:
-                snprintf(buffer + strlen(buffer), 256, " %s, %s, ",
+                snprintf(buffer + offset, left, " %s, %s, ",
                          getSSAName(cUnit, mir->ssaRep->uses[0], operand0),
                          getSSAName(cUnit, mir->ssaRep->uses[1], operand1));
                 delta = (int) insn->vC;
@@ -1122,13 +1134,15 @@ char *dvmCompilerFullDisassembler(const CompilationUnit *cUnit,
                 dvmAbort();
                 break;
         }
-        snprintf(buffer + strlen(buffer), 256, " %04x",
+        snprintf(buffer + offset, left, " %04x",
                  mir->offset + delta);
     } else if (dfAttributes & (DF_FORMAT_35C | DF_FORMAT_3RC)) {
         unsigned int i;
         for (i = 0; i < insn->vA; i++) {
             if (i != 0) strcat(buffer, ",");
-            snprintf(buffer + strlen(buffer), 256, " %s",
+            offset = strlen (buffer);
+            left = sizeof (buffer) - offset;
+            snprintf(buffer + offset, left, " %s",
                      getSSAName(cUnit, mir->ssaRep->uses[i], operand0));
         }
     } else {
@@ -1136,42 +1150,50 @@ char *dvmCompilerFullDisassembler(const CompilationUnit *cUnit,
         if (mir->ssaRep->numDefs) {
 
             for (udIdx = 0; udIdx < mir->ssaRep->numDefs; udIdx++) {
-                snprintf(buffer + strlen(buffer), 256, " %s",
+                offset = strlen (buffer);
+                left = sizeof (buffer) - offset;
+                snprintf(buffer + offset, left, " %s",
                          getSSAName(cUnit, mir->ssaRep->defs[udIdx], operand0));
             }
             strcat(buffer, ",");
         }
         if (mir->ssaRep->numUses) {
             /* No leading ',' for the first use */
-            snprintf(buffer + strlen(buffer), 256, " %s",
+            offset = strlen (buffer);
+            left = sizeof (buffer) - offset;
+            snprintf(buffer + offset, left, " %s",
                      getSSAName(cUnit, mir->ssaRep->uses[0], operand0));
             for (udIdx = 1; udIdx < mir->ssaRep->numUses; udIdx++) {
-                snprintf(buffer + strlen(buffer), 256, ", %s",
+                offset = strlen (buffer);
+                left = sizeof (buffer) - offset;
+                snprintf(buffer + offset, left, ", %s",
                          getSSAName(cUnit, mir->ssaRep->uses[udIdx], operand0));
             }
         }
         if (opcode < kMirOpFirst) {
             InstructionFormat dalvikFormat =
                 dexGetFormatFromOpcode((Opcode)opcode);
+            offset = strlen (buffer);
+            left = sizeof (buffer) - offset;
             switch (dalvikFormat) {
                 case kFmt11n:        // op vA, #+B
                 case kFmt21s:        // op vAA, #+BBBB
                 case kFmt21h:        // op vAA, #+BBBB00000[00000000]
                 case kFmt31i:        // op vAA, #+BBBBBBBB
                 case kFmt51l:        // op vAA, #+BBBBBBBBBBBBBBBB
-                    snprintf(buffer + strlen(buffer), 256, " #%#x", insn->vB);
+                    snprintf(buffer + offset, left, " #%#x", insn->vB);
                     break;
                 case kFmt21c:        // op vAA, thing@BBBB
                 case kFmt31c:        // op vAA, thing@BBBBBBBB
-                    snprintf(buffer + strlen(buffer), 256, " @%#x", insn->vB);
+                    snprintf(buffer + offset, left, " @%#x", insn->vB);
                     break;
                 case kFmt22b:        // op vAA, vBB, #+CC
                 case kFmt22s:        // op vA, vB, #+CCCC
-                    snprintf(buffer + strlen(buffer), 256, " #%#x", insn->vC);
+                    snprintf(buffer + offset, left, " #%#x", insn->vC);
                     break;
                 case kFmt22c:        // op vA, vB, thing@CCCC
                 case kFmt22cs:       // [opt] op vA, vB, field offset CCCC
-                    snprintf(buffer + strlen(buffer), 256, " @%#x", insn->vC);
+                    snprintf(buffer + offset, left, " @%#x", insn->vC);
                     break;
                     /* No need for special printing */
                 default:
-- 
1.7.4.1

