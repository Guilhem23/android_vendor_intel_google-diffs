From 604e46c37027952536bb0cd1bf6d6894ba2741f9 Mon Sep 17 00:00:00 2001
From: Dmitry Petrochenko <dmitry.petrochenko@intel.com>
Date: Wed, 27 Mar 2013 15:12:56 +0700
Subject: Dalvik: Dump ALU mnemonics in alu_imm_to_VR with ATOM_NORMAL_ALU flag

BZ: 94855

The alu_imm_to_VR is an utility function which handles only ALU
mnemonics. But in some cases it used general dump_xx functions,
which had pre-defined ATOM_NORMAL flag and it caused assert failures
in updateUseDefXX functions (Schedule.cpp), which expect one of the
following: MOV mnemonic, CMP mnemonic or ALU mnemonic (add, sub etc.).
Two new utility functions created: dump_imm_mem_noalloc_alu,
dump_imm_reg_noalloc_alu. The alu_imm_to_VR now uses new utility
functions and updateUseDefXX asserts sees the information indicating
that mnemonic came from alu_imm_to_VR and it is an ALU mnemonic.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I1eedaec2b0af4d27b2fc8c005e2104c356fa9d95
Orig-MCG-Change-Id: I1aed579ef665807b2795508aace08e59687c750a
Signed-off-by: Dmitry Petrochenko <dmitry.petrochenko@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/LowerHelper.cpp |   18 +++++++++++++++---
 1 files changed, 15 insertions(+), 3 deletions(-)

diff --git a/vm/compiler/codegen/x86/LowerHelper.cpp b/vm/compiler/codegen/x86/LowerHelper.cpp
index 4222ce6..2cea551 100644
--- a/vm/compiler/codegen/x86/LowerHelper.cpp
+++ b/vm/compiler/codegen/x86/LowerHelper.cpp
@@ -998,6 +998,12 @@ LowOpImmReg* dump_imm_reg_noalloc(Mnemonic m, OpndSize size, int imm, int reg,
             type, false);
 }
 
+LowOpImmReg* dump_imm_reg_noalloc_alu(Mnemonic m, OpndSize size, int imm, int reg,
+        bool isPhysical, LowOpndRegType type) {
+    return lower_imm_to_reg(m, ATOM_NORMAL_ALU, size, imm, reg, true /*isPhysical*/,
+            type, false);
+}
+
 //!update fields of LowOp and generate a x86 instruction that takes one immediate and one reg operand
 
 //!
@@ -1054,6 +1060,12 @@ LowOpImmMem* dump_imm_mem_noalloc(Mnemonic m, OpndSize size, int imm, int disp,
             true /*isBasePhysical*/, mType, mIndex, false);
 }
 
+LowOpImmMem* dump_imm_mem_noalloc_alu(Mnemonic m, OpndSize size, int imm, int disp,
+        int base_reg, bool isBasePhysical, MemoryAccessType mType, int mIndex) {
+    return lower_imm_to_mem(m, ATOM_NORMAL_ALU, size, imm, disp, base_reg,
+            true /*isBasePhysical*/, mType, mIndex, false);
+}
+
 //!update fields of LowOp and generate a x86 instruction that takes one immediate and one mem operand
 
 //!
@@ -1879,7 +1891,7 @@ bool alu_imm_to_VR(OpndSize size, ALU_Opcode opc, int srcVR, int destVR, int imm
 
             case SRC_IN_MEMORY:
                 if (caseDest == DEST_SAME_AS_SRC) {
-                    dump_imm_mem_noalloc(alu_mn, size, imm, 4*destVR, PhysicalReg_FP, true, MemoryAccess_VR, destVR);
+                    dump_imm_mem_noalloc_alu(alu_mn, size, imm, 4*destVR, PhysicalReg_FP, true, MemoryAccess_VR, destVR);
                     return true; //Successfully updated
                 }
                 else if (caseDest == DEST_IN_MEMORY) {
@@ -1890,7 +1902,7 @@ bool alu_imm_to_VR(OpndSize size, ALU_Opcode opc, int srcVR, int destVR, int imm
                     //Load srcVR to regDest, and then add the constant
                     //Note that with MOVE_OPT on, this is as good as get_VR, add / sub , set_VR
                     dump_mem_reg_noalloc(Mnemonic_MOV, size, 4*srcVR, PhysicalReg_FP, true, MemoryAccess_VR, srcVR, regDest, true, pType);
-                    dump_imm_reg_noalloc(alu_mn, size, imm, regDest, true, pType);
+                    dump_imm_reg_noalloc_alu(alu_mn, size, imm, regDest, true, pType);
                     updateRefCount(destVR, pType);
                     updateVirtualReg(destVR, pType);
                     return true; //Successfully updated
@@ -1899,7 +1911,7 @@ bool alu_imm_to_VR(OpndSize size, ALU_Opcode opc, int srcVR, int destVR, int imm
 
             case SRC_IS_ALLOCATED:
                 if (caseDest == DEST_SAME_AS_SRC) {
-                    dump_imm_reg_noalloc(alu_mn, size, imm, regSrc, true, pType);
+                    dump_imm_reg_noalloc_alu(alu_mn, size, imm, regSrc, true, pType);
                     //We have to reduce refCounts twice. Let's call the VR with
                     //different names, even though srcVR == destVR
                     updateRefCount(srcVR, pType);
-- 
1.7.4.1

