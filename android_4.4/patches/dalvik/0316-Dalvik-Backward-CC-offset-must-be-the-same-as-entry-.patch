From 5a337df6999bf711ca670b85bb30e3fdf31f0beb Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Wed, 28 Aug 2013 13:21:06 +0700
Subject: Dalvik: Backward CC offset must be the same as entry one

BZ: 133132

The offset of Backward Branch basic block should be the same
as loop entry, because this offset is used by Interpreter to
determine the next byte code to execute.

The first bytecode of loop entry is exactly the next bytecode
after chaining cell.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Icde6363e21a157bbaff18041c1398e066e1c5636
Orig-MCG-Change-Id: Id5e7f89be841a647e774c0d45dd879d945f13097
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Reviewed-on: http://android.intel.com:8080/128184
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: Hartley, Timothy D <timothy.d.hartley@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Petrochenko, Dmitry <dmitry.petrochenko@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Solovyev, Roman <roman.solovyev@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 vm/compiler/BBOptimization.cpp |    5 ++++-
 1 files changed, 4 insertions(+), 1 deletions(-)

diff --git a/vm/compiler/BBOptimization.cpp b/vm/compiler/BBOptimization.cpp
index 89307ca..0f4fba3 100644
--- a/vm/compiler/BBOptimization.cpp
+++ b/vm/compiler/BBOptimization.cpp
@@ -591,7 +591,10 @@ bool dvmCompilerFormLoopWorker (CompilationUnit *cUnit, LoopInformation *info, v
                      tailBlock = dvmCompilerGetNextBasicBlockViaBitVector (bvIterator, cUnit->blockList))
     {
         BasicBlock *backward = dvmCompilerNewBBinCunit(cUnit, kChainingCellBackwardBranch);
-        backward->startOffset = tailBlock->startOffset;
+        // It is very important to set correct offset which will be used during unchaining
+        // Backward offset corresponds to entry offset where we plan to jump because it is a
+        // next instruction we will execute
+        backward->startOffset = entry->startOffset;
 
         dvmCompilerInsertBasicBlockBetween (backward, tailBlock, entry);
     }
-- 
1.7.4.1

