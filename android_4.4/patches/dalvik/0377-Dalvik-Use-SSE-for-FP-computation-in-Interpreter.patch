From 0cae11a888ae02035334eb3cadca3d4fffba8b1b Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Thu, 3 Oct 2013 18:46:19 +0700
Subject: Dalvik: Use SSE for FP computation in Interpreter

BZ: 141365

Interpreter suffers from double rounding issue due to usage of
FPU instruction. This patch inroduces the usage of SSE instruction
for FP computation. Other bytecodes like CMP, NEG and conversion
does not suffer from double rounding issue because they produce
the exact result.

Category: device-enablement
Domain: AOSP-Dalvik-Interpreter
Origin: internal
Upstream-Candidate: yes

Change-Id: I4e04ed2f69cccd68e1be9fd60e4ce4c5630ce9ba
Orig-MCG-Change-Id: Ibfdeaa1ab7664cce795c0c4a030fb1a542120319
Signed-off-by: vladimir.a.ivanov <vladimir.a.ivanov@intel.com>
Reviewed-on: http://android.intel.com:8080/139582
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Semukhina, Elena V <elena.v.semukhina@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/mterp/out/InterpAsm-x86.S       |  327 +++++++++++++-----------------------
 vm/mterp/x86/OP_ADD_DOUBLE.S       |   16 +--
 vm/mterp/x86/OP_ADD_DOUBLE_2ADDR.S |   15 +--
 vm/mterp/x86/OP_ADD_FLOAT.S        |    2 +-
 vm/mterp/x86/OP_ADD_FLOAT_2ADDR.S  |    2 +-
 vm/mterp/x86/OP_DIV_DOUBLE.S       |    2 +-
 vm/mterp/x86/OP_DIV_DOUBLE_2ADDR.S |    2 +-
 vm/mterp/x86/OP_DIV_FLOAT.S        |    2 +-
 vm/mterp/x86/OP_DIV_FLOAT_2ADDR.S  |    2 +-
 vm/mterp/x86/OP_MUL_DOUBLE.S       |   16 +--
 vm/mterp/x86/OP_MUL_DOUBLE_2ADDR.S |   17 +--
 vm/mterp/x86/OP_MUL_FLOAT.S        |    2 +-
 vm/mterp/x86/OP_MUL_FLOAT_2ADDR.S  |    2 +-
 vm/mterp/x86/OP_SUB_DOUBLE.S       |   16 +--
 vm/mterp/x86/OP_SUB_DOUBLE_2ADDR.S |   17 +--
 vm/mterp/x86/OP_SUB_FLOAT.S        |    2 +-
 vm/mterp/x86/OP_SUB_FLOAT_2ADDR.S  |    2 +-
 vm/mterp/x86/sseBinop.S            |    9 +
 vm/mterp/x86/sseBinop2Addr.S       |   10 +
 19 files changed, 161 insertions(+), 302 deletions(-)
 create mode 100644 vm/mterp/x86/sseBinop.S
 create mode 100644 vm/mterp/x86/sseBinop2Addr.S

diff --git a/vm/mterp/out/InterpAsm-x86.S b/vm/mterp/out/InterpAsm-x86.S
index d414df1..c81556d 100644
--- a/vm/mterp/out/InterpAsm-x86.S
+++ b/vm/mterp/out/InterpAsm-x86.S
@@ -6192,84 +6192,60 @@ dvmAsmInstructionStartCode = .L_OP_NOP
     .balign 16
 .L_OP_ADD_FLOAT: /* 0xa6 */
 /* File: x86/OP_ADD_FLOAT.S */
-/* File: x86/binflop.S */
-    /*
-     * Generic 32-bit binary float operation.
-     *
-     * For: add-fp, sub-fp, mul-fp, div-fp
-     */
-    /* binop vAA, vBB, vCC */
-    movzbl   2(rPC),%eax          # eax<- CC
-    movzbl   3(rPC),%ecx          # ecx<- BB
-    flds    (rFP,%eax,4)         # vCC to fp stack
-    fadds   (rFP,%ecx,4)         # ex: faddp
-    FETCH_INST_OPCODE 2 %ecx
+/* File: x86/sseBinop.S */
+    movzbl      2(rPC),%ecx                # ecx<- BB
+    movzbl      3(rPC),%eax                # eax<- CC
+    movss       (rFP, %ecx, 4),%xmm0       # %xmm0 <- 1st src
+    addss      (rFP,%eax,4),%xmm0
+    FETCH_INST_OPCODE 2 %eax
+    movss      %xmm0,(rFP, rINST, 4)  # vAA<- %xmm0
     ADVANCE_PC 2
-    fstps   (rFP,rINST,4)         # %st to vAA
-    GOTO_NEXT_R %ecx
+    GOTO_NEXT_R %eax
 
 
 /* ------------------------------ */
     .balign 16
 .L_OP_SUB_FLOAT: /* 0xa7 */
 /* File: x86/OP_SUB_FLOAT.S */
-/* File: x86/binflop.S */
-    /*
-     * Generic 32-bit binary float operation.
-     *
-     * For: add-fp, sub-fp, mul-fp, div-fp
-     */
-    /* binop vAA, vBB, vCC */
-    movzbl   2(rPC),%eax          # eax<- CC
-    movzbl   3(rPC),%ecx          # ecx<- BB
-    flds    (rFP,%eax,4)         # vCC to fp stack
-    fsubs   (rFP,%ecx,4)         # ex: faddp
-    FETCH_INST_OPCODE 2 %ecx
+/* File: x86/sseBinop.S */
+    movzbl      2(rPC),%ecx                # ecx<- BB
+    movzbl      3(rPC),%eax                # eax<- CC
+    movss       (rFP, %ecx, 4),%xmm0       # %xmm0 <- 1st src
+    subss      (rFP,%eax,4),%xmm0
+    FETCH_INST_OPCODE 2 %eax
+    movss      %xmm0,(rFP, rINST, 4)  # vAA<- %xmm0
     ADVANCE_PC 2
-    fstps   (rFP,rINST,4)         # %st to vAA
-    GOTO_NEXT_R %ecx
+    GOTO_NEXT_R %eax
 
 
 /* ------------------------------ */
     .balign 16
 .L_OP_MUL_FLOAT: /* 0xa8 */
 /* File: x86/OP_MUL_FLOAT.S */
-/* File: x86/binflop.S */
-    /*
-     * Generic 32-bit binary float operation.
-     *
-     * For: add-fp, sub-fp, mul-fp, div-fp
-     */
-    /* binop vAA, vBB, vCC */
-    movzbl   2(rPC),%eax          # eax<- CC
-    movzbl   3(rPC),%ecx          # ecx<- BB
-    flds    (rFP,%eax,4)         # vCC to fp stack
-    fmuls   (rFP,%ecx,4)         # ex: faddp
-    FETCH_INST_OPCODE 2 %ecx
+/* File: x86/sseBinop.S */
+    movzbl      2(rPC),%ecx                # ecx<- BB
+    movzbl      3(rPC),%eax                # eax<- CC
+    movss       (rFP, %ecx, 4),%xmm0       # %xmm0 <- 1st src
+    mulss      (rFP,%eax,4),%xmm0
+    FETCH_INST_OPCODE 2 %eax
+    movss      %xmm0,(rFP, rINST, 4)  # vAA<- %xmm0
     ADVANCE_PC 2
-    fstps   (rFP,rINST,4)         # %st to vAA
-    GOTO_NEXT_R %ecx
+    GOTO_NEXT_R %eax
 
 
 /* ------------------------------ */
     .balign 16
 .L_OP_DIV_FLOAT: /* 0xa9 */
 /* File: x86/OP_DIV_FLOAT.S */
-/* File: x86/binflop.S */
-    /*
-     * Generic 32-bit binary float operation.
-     *
-     * For: add-fp, sub-fp, mul-fp, div-fp
-     */
-    /* binop vAA, vBB, vCC */
-    movzbl   2(rPC),%eax          # eax<- CC
-    movzbl   3(rPC),%ecx          # ecx<- BB
-    flds    (rFP,%eax,4)         # vCC to fp stack
-    fdivs   (rFP,%ecx,4)         # ex: faddp
-    FETCH_INST_OPCODE 2 %ecx
+/* File: x86/sseBinop.S */
+    movzbl      2(rPC),%ecx                # ecx<- BB
+    movzbl      3(rPC),%eax                # eax<- CC
+    movss       (rFP, %ecx, 4),%xmm0       # %xmm0 <- 1st src
+    divss      (rFP,%eax,4),%xmm0
+    FETCH_INST_OPCODE 2 %eax
+    movss      %xmm0,(rFP, rINST, 4)  # vAA<- %xmm0
     ADVANCE_PC 2
-    fstps   (rFP,rINST,4)         # %st to vAA
-    GOTO_NEXT_R %ecx
+    GOTO_NEXT_R %eax
 
 
 /* ------------------------------ */
@@ -6297,78 +6273,60 @@ dvmAsmInstructionStartCode = .L_OP_NOP
     .balign 16
 .L_OP_ADD_DOUBLE: /* 0xab */
 /* File: x86/OP_ADD_DOUBLE.S */
-   /*
-    * File: OP_ADD_DOUBLE.S
-    */
-
-    movzbl   2(rPC),%eax                # eax<- BB
-    movzbl   3(rPC),%ecx                # ecx<- CC
-    movq     (rFP, %eax, 4), %xmm0      # %xmm0<- vBB
-    movq     (rFP, %ecx, 4), %xmm1      # %xmm1<- vCC
-    FETCH_INST_OPCODE 2 %ecx
-    addsd    %xmm1, %xmm0
+/* File: x86/sseBinop.S */
+    movzbl      2(rPC),%ecx                # ecx<- BB
+    movzbl      3(rPC),%eax                # eax<- CC
+    movsd       (rFP, %ecx, 4),%xmm0       # %xmm0 <- 1st src
+    addsd      (rFP,%eax,4),%xmm0
+    FETCH_INST_OPCODE 2 %eax
+    movsd      %xmm0,(rFP, rINST, 4)  # vAA<- %xmm0
     ADVANCE_PC 2
-    movq     %xmm0, (rFP, rINST, 4)     # vAA<- vBB * vCC
-    GOTO_NEXT_R %ecx
+    GOTO_NEXT_R %eax
 
 
 /* ------------------------------ */
     .balign 16
 .L_OP_SUB_DOUBLE: /* 0xac */
 /* File: x86/OP_SUB_DOUBLE.S */
-   /*
-    * File: OP_SUB_DOUBLE.S
-    */
-
-    movzbl   2(rPC),%eax                # eax<- BB
-    movzbl   3(rPC),%ecx                # ecx<- CC
-    # TODO: movsd?
-    movq        (rFP, %eax, 4), %xmm0   # %xmm0<- vBB
-    movq        (rFP, %ecx, 4), %xmm1   # %xmm1<- vCC
-    FETCH_INST_OPCODE 2 %ecx
-    subsd       %xmm1, %xmm0
+/* File: x86/sseBinop.S */
+    movzbl      2(rPC),%ecx                # ecx<- BB
+    movzbl      3(rPC),%eax                # eax<- CC
+    movsd       (rFP, %ecx, 4),%xmm0       # %xmm0 <- 1st src
+    subsd      (rFP,%eax,4),%xmm0
+    FETCH_INST_OPCODE 2 %eax
+    movsd      %xmm0,(rFP, rINST, 4)  # vAA<- %xmm0
     ADVANCE_PC 2
-    movq        %xmm0, (rFP, rINST, 4)  # vAA<- vBB - vCC
-    GOTO_NEXT_R %ecx
+    GOTO_NEXT_R %eax
+
 
 /* ------------------------------ */
     .balign 16
 .L_OP_MUL_DOUBLE: /* 0xad */
 /* File: x86/OP_MUL_DOUBLE.S */
-   /*
-    * File: OP_MUL_DOUBLE.S
-    */
-
-    movzbl   2(rPC),%eax                # eax<- BB
-    movzbl   3(rPC),%ecx                # ecx<- CC
-    # TODO: movsd?
-    movq        (rFP, %eax, 4), %xmm0   # %xmm0<- vBB
-    movq        (rFP, %ecx, 4), %xmm1   # %xmm1<- vCC
-    FETCH_INST_OPCODE 2 %ecx
-    mulsd       %xmm1, %xmm0
+/* File: x86/sseBinop.S */
+    movzbl      2(rPC),%ecx                # ecx<- BB
+    movzbl      3(rPC),%eax                # eax<- CC
+    movsd       (rFP, %ecx, 4),%xmm0       # %xmm0 <- 1st src
+    mulsd      (rFP,%eax,4),%xmm0
+    FETCH_INST_OPCODE 2 %eax
+    movsd      %xmm0,(rFP, rINST, 4)  # vAA<- %xmm0
     ADVANCE_PC 2
-    movq        %xmm0, (rFP, rINST, 4)  # vAA<- vBB * vCC
-    GOTO_NEXT_R %ecx
+    GOTO_NEXT_R %eax
+
 
 /* ------------------------------ */
     .balign 16
 .L_OP_DIV_DOUBLE: /* 0xae */
 /* File: x86/OP_DIV_DOUBLE.S */
-/* File: x86/binflop.S */
-    /*
-     * Generic 32-bit binary float operation.
-     *
-     * For: add-fp, sub-fp, mul-fp, div-fp
-     */
-    /* binop vAA, vBB, vCC */
-    movzbl   2(rPC),%eax          # eax<- CC
-    movzbl   3(rPC),%ecx          # ecx<- BB
-    fldl    (rFP,%eax,4)         # vCC to fp stack
-    fdivl   (rFP,%ecx,4)         # ex: faddp
-    FETCH_INST_OPCODE 2 %ecx
+/* File: x86/sseBinop.S */
+    movzbl      2(rPC),%ecx                # ecx<- BB
+    movzbl      3(rPC),%eax                # eax<- CC
+    movsd       (rFP, %ecx, 4),%xmm0       # %xmm0 <- 1st src
+    divsd      (rFP,%eax,4),%xmm0
+    FETCH_INST_OPCODE 2 %eax
+    movsd      %xmm0,(rFP, rINST, 4)  # vAA<- %xmm0
     ADVANCE_PC 2
-    fstpl   (rFP,rINST,4)         # %st to vAA
-    GOTO_NEXT_R %ecx
+    GOTO_NEXT_R %eax
 
 
 /* ------------------------------ */
@@ -7030,22 +6988,15 @@ dvmAsmInstructionStartCode = .L_OP_NOP
     .balign 16
 .L_OP_ADD_FLOAT_2ADDR: /* 0xc6 */
 /* File: x86/OP_ADD_FLOAT_2ADDR.S */
-/* File: x86/binflop2addr.S */
-    /*
-     * Generic 32-bit binary float operation.
-     *
-     * For: add-fp, sub-fp, mul-fp, div-fp
-     */
-
-    /* binop/2addr vA, vB */
-    movzx   rINSTbl,%ecx           # ecx<- A+
-    andb    $0xf,%cl              # ecx<- A
-    flds    (rFP,%ecx,4)          # vAA to fp stack
-    sarl    $4,rINST             # rINST<- B
-    fadds   (rFP,rINST,4)         # ex: faddp
+/* File: x86/sseBinop2Addr.S */
+    movzx       rINSTbl,%ecx            # ecx<- A+
+    andl        $0xf,%ecx               # ecx<- A
+    movss      (rFP, %ecx, 4), %xmm0   # %xmm0 <- 1st src
+    sarl        $4,rINST               # rINST<- B
+    addss      (rFP,rINST,4), %xmm0
     FETCH_INST_OPCODE 1 %eax
+    movss      %xmm0, (rFP, %ecx, 4)    # vAA<- %xmm0
     ADVANCE_PC 1
-    fstps    (rFP,%ecx,4)         # %st to vA
     GOTO_NEXT_R %eax
 
 
@@ -7053,22 +7004,15 @@ dvmAsmInstructionStartCode = .L_OP_NOP
     .balign 16
 .L_OP_SUB_FLOAT_2ADDR: /* 0xc7 */
 /* File: x86/OP_SUB_FLOAT_2ADDR.S */
-/* File: x86/binflop2addr.S */
-    /*
-     * Generic 32-bit binary float operation.
-     *
-     * For: add-fp, sub-fp, mul-fp, div-fp
-     */
-
-    /* binop/2addr vA, vB */
-    movzx   rINSTbl,%ecx           # ecx<- A+
-    andb    $0xf,%cl              # ecx<- A
-    flds    (rFP,%ecx,4)          # vAA to fp stack
-    sarl    $4,rINST             # rINST<- B
-    fsubs   (rFP,rINST,4)         # ex: faddp
+/* File: x86/sseBinop2Addr.S */
+    movzx       rINSTbl,%ecx            # ecx<- A+
+    andl        $0xf,%ecx               # ecx<- A
+    movss      (rFP, %ecx, 4), %xmm0   # %xmm0 <- 1st src
+    sarl        $4,rINST               # rINST<- B
+    subss      (rFP,rINST,4), %xmm0
     FETCH_INST_OPCODE 1 %eax
+    movss      %xmm0, (rFP, %ecx, 4)    # vAA<- %xmm0
     ADVANCE_PC 1
-    fstps    (rFP,%ecx,4)         # %st to vA
     GOTO_NEXT_R %eax
 
 
@@ -7076,22 +7020,15 @@ dvmAsmInstructionStartCode = .L_OP_NOP
     .balign 16
 .L_OP_MUL_FLOAT_2ADDR: /* 0xc8 */
 /* File: x86/OP_MUL_FLOAT_2ADDR.S */
-/* File: x86/binflop2addr.S */
-    /*
-     * Generic 32-bit binary float operation.
-     *
-     * For: add-fp, sub-fp, mul-fp, div-fp
-     */
-
-    /* binop/2addr vA, vB */
-    movzx   rINSTbl,%ecx           # ecx<- A+
-    andb    $0xf,%cl              # ecx<- A
-    flds    (rFP,%ecx,4)          # vAA to fp stack
-    sarl    $4,rINST             # rINST<- B
-    fmuls   (rFP,rINST,4)         # ex: faddp
+/* File: x86/sseBinop2Addr.S */
+    movzx       rINSTbl,%ecx            # ecx<- A+
+    andl        $0xf,%ecx               # ecx<- A
+    movss      (rFP, %ecx, 4), %xmm0   # %xmm0 <- 1st src
+    sarl        $4,rINST               # rINST<- B
+    mulss      (rFP,rINST,4), %xmm0
     FETCH_INST_OPCODE 1 %eax
+    movss      %xmm0, (rFP, %ecx, 4)    # vAA<- %xmm0
     ADVANCE_PC 1
-    fstps    (rFP,%ecx,4)         # %st to vA
     GOTO_NEXT_R %eax
 
 
@@ -7099,22 +7036,15 @@ dvmAsmInstructionStartCode = .L_OP_NOP
     .balign 16
 .L_OP_DIV_FLOAT_2ADDR: /* 0xc9 */
 /* File: x86/OP_DIV_FLOAT_2ADDR.S */
-/* File: x86/binflop2addr.S */
-    /*
-     * Generic 32-bit binary float operation.
-     *
-     * For: add-fp, sub-fp, mul-fp, div-fp
-     */
-
-    /* binop/2addr vA, vB */
-    movzx   rINSTbl,%ecx           # ecx<- A+
-    andb    $0xf,%cl              # ecx<- A
-    flds    (rFP,%ecx,4)          # vAA to fp stack
-    sarl    $4,rINST             # rINST<- B
-    fdivs   (rFP,rINST,4)         # ex: faddp
+/* File: x86/sseBinop2Addr.S */
+    movzx       rINSTbl,%ecx            # ecx<- A+
+    andl        $0xf,%ecx               # ecx<- A
+    movss      (rFP, %ecx, 4), %xmm0   # %xmm0 <- 1st src
+    sarl        $4,rINST               # rINST<- B
+    divss      (rFP,rINST,4), %xmm0
     FETCH_INST_OPCODE 1 %eax
+    movss      %xmm0, (rFP, %ecx, 4)    # vAA<- %xmm0
     ADVANCE_PC 1
-    fstps    (rFP,%ecx,4)         # %st to vA
     GOTO_NEXT_R %eax
 
 
@@ -7143,81 +7073,64 @@ dvmAsmInstructionStartCode = .L_OP_NOP
     .balign 16
 .L_OP_ADD_DOUBLE_2ADDR: /* 0xcb */
 /* File: x86/OP_ADD_DOUBLE_2ADDR.S */
-   /*
-    * File: OP_ADD_DOUBLE_2ADDR.S
-    */
-
+/* File: x86/sseBinop2Addr.S */
     movzx       rINSTbl,%ecx            # ecx<- A+
-    andb        $0xf,%cl               # ecx<- A
+    andl        $0xf,%ecx               # ecx<- A
+    movsd      (rFP, %ecx, 4), %xmm0   # %xmm0 <- 1st src
     sarl        $4,rINST               # rINST<- B
-    movq        (rFP, rINST, 4), %xmm1  # %xmm1<- vB
-    movq        (rFP, %ecx, 4), %xmm0   # %xmm0<- vA
+    addsd      (rFP,rINST,4), %xmm0
     FETCH_INST_OPCODE 1 %eax
-    addsd       %xmm1, %xmm0            # %xmm0<- vA op vB
+    movsd      %xmm0, (rFP, %ecx, 4)    # vAA<- %xmm0
     ADVANCE_PC 1
-    movq        %xmm0, (rFP, %ecx, 4)   # vA<- %xmm0; result
     GOTO_NEXT_R %eax
 
+
+
 /* ------------------------------ */
     .balign 16
 .L_OP_SUB_DOUBLE_2ADDR: /* 0xcc */
 /* File: x86/OP_SUB_DOUBLE_2ADDR.S */
-   /*
-    * File: OP_SUB_DOUBLE_2ADDR.S
-    */
-
+/* File: x86/sseBinop2Addr.S */
     movzx       rINSTbl,%ecx            # ecx<- A+
-    andb        $0xf,%cl               # ecx<- A
+    andl        $0xf,%ecx               # ecx<- A
+    movsd      (rFP, %ecx, 4), %xmm0   # %xmm0 <- 1st src
     sarl        $4,rINST               # rINST<- B
-    # TODO: movsd?
-    movq        (rFP, rINST, 4), %xmm1  # %xmm1<- vB
-    movq        (rFP, %ecx, 4), %xmm0   # %xmm0<- vA
+    subsd      (rFP,rINST,4), %xmm0
     FETCH_INST_OPCODE 1 %eax
-    subsd       %xmm1, %xmm0            # %xmm0<- vA op vB
+    movsd      %xmm0, (rFP, %ecx, 4)    # vAA<- %xmm0
     ADVANCE_PC 1
-    movq        %xmm0, (rFP, %ecx, 4)   # vA<- %xmm0; result
     GOTO_NEXT_R %eax
 
+
 /* ------------------------------ */
     .balign 16
 .L_OP_MUL_DOUBLE_2ADDR: /* 0xcd */
 /* File: x86/OP_MUL_DOUBLE_2ADDR.S */
-   /*
-    * File: OP_MUL_DOUBLE_2ADDR.S
-    */
-
+/* File: x86/sseBinop2Addr.S */
     movzx       rINSTbl,%ecx            # ecx<- A+
-    andb        $0xf,%cl               # ecx<- A
+    andl        $0xf,%ecx               # ecx<- A
+    movsd      (rFP, %ecx, 4), %xmm0   # %xmm0 <- 1st src
     sarl        $4,rINST               # rINST<- B
-    # TODO: movsd?
-    movq        (rFP, rINST, 4), %xmm1  # %xmm1<- vB
-    movq        (rFP, %ecx, 4), %xmm0   # %xmm0<- vA
+    mulsd      (rFP,rINST,4), %xmm0
     FETCH_INST_OPCODE 1 %eax
-    mulsd       %xmm1, %xmm0            # %xmm0<- vA op vB
+    movsd      %xmm0, (rFP, %ecx, 4)    # vAA<- %xmm0
     ADVANCE_PC 1
-    movq        %xmm0, (rFP, %ecx, 4)   # vA<- %xmm0; result
     GOTO_NEXT_R %eax
 
+
 /* ------------------------------ */
     .balign 16
 .L_OP_DIV_DOUBLE_2ADDR: /* 0xce */
 /* File: x86/OP_DIV_DOUBLE_2ADDR.S */
-/* File: x86/binflop2addr.S */
-    /*
-     * Generic 32-bit binary float operation.
-     *
-     * For: add-fp, sub-fp, mul-fp, div-fp
-     */
-
-    /* binop/2addr vA, vB */
-    movzx   rINSTbl,%ecx           # ecx<- A+
-    andb    $0xf,%cl              # ecx<- A
-    fldl    (rFP,%ecx,4)          # vAA to fp stack
-    sarl    $4,rINST             # rINST<- B
-    fdivl   (rFP,rINST,4)         # ex: faddp
+/* File: x86/sseBinop2Addr.S */
+    movzx       rINSTbl,%ecx            # ecx<- A+
+    andl        $0xf,%ecx               # ecx<- A
+    movsd      (rFP, %ecx, 4), %xmm0   # %xmm0 <- 1st src
+    sarl        $4,rINST               # rINST<- B
+    divsd      (rFP,rINST,4), %xmm0
     FETCH_INST_OPCODE 1 %eax
+    movsd      %xmm0, (rFP, %ecx, 4)    # vAA<- %xmm0
     ADVANCE_PC 1
-    fstpl    (rFP,%ecx,4)         # %st to vA
     GOTO_NEXT_R %eax
 
 
diff --git a/vm/mterp/x86/OP_ADD_DOUBLE.S b/vm/mterp/x86/OP_ADD_DOUBLE.S
index 27a47c1..47743b5 100644
--- a/vm/mterp/x86/OP_ADD_DOUBLE.S
+++ b/vm/mterp/x86/OP_ADD_DOUBLE.S
@@ -1,14 +1,2 @@
-   /*
-    * File: OP_ADD_DOUBLE.S
-    */
-
-    movzbl   2(rPC),%eax                # eax<- BB
-    movzbl   3(rPC),%ecx                # ecx<- CC
-    movq     (rFP, %eax, 4), %xmm0      # %xmm0<- vBB
-    movq     (rFP, %ecx, 4), %xmm1      # %xmm1<- vCC
-    FETCH_INST_OPCODE 2 %ecx
-    addsd    %xmm1, %xmm0
-    ADVANCE_PC 2
-    movq     %xmm0, (rFP, rINST, 4)     # vAA<- vBB * vCC
-    GOTO_NEXT_R %ecx
-
+%verify "executed"
+%include "x86/sseBinop.S" {"instr":"adds","suff":"d"}
diff --git a/vm/mterp/x86/OP_ADD_DOUBLE_2ADDR.S b/vm/mterp/x86/OP_ADD_DOUBLE_2ADDR.S
index d917578..1e8f8ce 100644
--- a/vm/mterp/x86/OP_ADD_DOUBLE_2ADDR.S
+++ b/vm/mterp/x86/OP_ADD_DOUBLE_2ADDR.S
@@ -1,14 +1,3 @@
-   /*
-    * File: OP_ADD_DOUBLE_2ADDR.S
-    */
+%verify "executed"
+%include "x86/sseBinop2Addr.S" {"instr":"adds","suff":"d"}
 
-    movzx       rINSTbl,%ecx            # ecx<- A+
-    andb        $$0xf,%cl               # ecx<- A
-    sarl        $$4,rINST               # rINST<- B
-    movq        (rFP, rINST, 4), %xmm1  # %xmm1<- vB
-    movq        (rFP, %ecx, 4), %xmm0   # %xmm0<- vA
-    FETCH_INST_OPCODE 1 %eax
-    addsd       %xmm1, %xmm0            # %xmm0<- vA op vB
-    ADVANCE_PC 1
-    movq        %xmm0, (rFP, %ecx, 4)   # vA<- %xmm0; result
-    GOTO_NEXT_R %eax
diff --git a/vm/mterp/x86/OP_ADD_FLOAT.S b/vm/mterp/x86/OP_ADD_FLOAT.S
index 61a6f68..1fd260b 100644
--- a/vm/mterp/x86/OP_ADD_FLOAT.S
+++ b/vm/mterp/x86/OP_ADD_FLOAT.S
@@ -1,2 +1,2 @@
 %verify "executed"
-%include "x86/binflop.S" {"instr":"fadds","load":"flds","store":"fstps"}
+%include "x86/sseBinop.S" {"instr":"adds","suff":"s"}
diff --git a/vm/mterp/x86/OP_ADD_FLOAT_2ADDR.S b/vm/mterp/x86/OP_ADD_FLOAT_2ADDR.S
index fd61457..e157e22 100644
--- a/vm/mterp/x86/OP_ADD_FLOAT_2ADDR.S
+++ b/vm/mterp/x86/OP_ADD_FLOAT_2ADDR.S
@@ -1,2 +1,2 @@
 %verify "executed"
-%include "x86/binflop2addr.S" {"instr":"fadds","load":"flds","store":"fstps"}
+%include "x86/sseBinop2Addr.S" {"instr":"adds","suff":"s"}
diff --git a/vm/mterp/x86/OP_DIV_DOUBLE.S b/vm/mterp/x86/OP_DIV_DOUBLE.S
index 8ccff2e..0fc98a8 100644
--- a/vm/mterp/x86/OP_DIV_DOUBLE.S
+++ b/vm/mterp/x86/OP_DIV_DOUBLE.S
@@ -1,2 +1,2 @@
 %verify "executed"
-%include "x86/binflop.S" {"instr":"fdivl","load":"fldl","store":"fstpl"}
+%include "x86/sseBinop.S" {"instr":"divs","suff":"d"}
diff --git a/vm/mterp/x86/OP_DIV_DOUBLE_2ADDR.S b/vm/mterp/x86/OP_DIV_DOUBLE_2ADDR.S
index 60a0072..43b7e04 100644
--- a/vm/mterp/x86/OP_DIV_DOUBLE_2ADDR.S
+++ b/vm/mterp/x86/OP_DIV_DOUBLE_2ADDR.S
@@ -1,2 +1,2 @@
 %verify "executed"
-%include "x86/binflop2addr.S" {"instr":"fdivl","load":"fldl","store":"fstpl"}
+%include "x86/sseBinop2Addr.S" {"instr":"divs","suff":"d"}
diff --git a/vm/mterp/x86/OP_DIV_FLOAT.S b/vm/mterp/x86/OP_DIV_FLOAT.S
index 740e26e..a88bc76 100644
--- a/vm/mterp/x86/OP_DIV_FLOAT.S
+++ b/vm/mterp/x86/OP_DIV_FLOAT.S
@@ -1,2 +1,2 @@
 %verify "executed"
-%include "x86/binflop.S" {"instr":"fdivs","load":"flds","store":"fstps"}
+%include "x86/sseBinop.S" {"instr":"divs","suff":"s"}
diff --git a/vm/mterp/x86/OP_DIV_FLOAT_2ADDR.S b/vm/mterp/x86/OP_DIV_FLOAT_2ADDR.S
index 2ed12b6..9ce1da2 100644
--- a/vm/mterp/x86/OP_DIV_FLOAT_2ADDR.S
+++ b/vm/mterp/x86/OP_DIV_FLOAT_2ADDR.S
@@ -1,2 +1,2 @@
 %verify "executed"
-%include "x86/binflop2addr.S" {"instr":"fdivs","load":"flds","store":"fstps"}
+%include "x86/sseBinop2Addr.S" {"instr":"divs","suff":"s"}
diff --git a/vm/mterp/x86/OP_MUL_DOUBLE.S b/vm/mterp/x86/OP_MUL_DOUBLE.S
index 7d74f78..46146da 100644
--- a/vm/mterp/x86/OP_MUL_DOUBLE.S
+++ b/vm/mterp/x86/OP_MUL_DOUBLE.S
@@ -1,14 +1,2 @@
-   /*
-    * File: OP_MUL_DOUBLE.S
-    */
-
-    movzbl   2(rPC),%eax                # eax<- BB
-    movzbl   3(rPC),%ecx                # ecx<- CC
-    # TODO: movsd?
-    movq        (rFP, %eax, 4), %xmm0   # %xmm0<- vBB
-    movq        (rFP, %ecx, 4), %xmm1   # %xmm1<- vCC
-    FETCH_INST_OPCODE 2 %ecx
-    mulsd       %xmm1, %xmm0
-    ADVANCE_PC 2
-    movq        %xmm0, (rFP, rINST, 4)  # vAA<- vBB * vCC
-    GOTO_NEXT_R %ecx
+%verify "executed"
+%include "x86/sseBinop.S" {"instr":"muls","suff":"d"}
diff --git a/vm/mterp/x86/OP_MUL_DOUBLE_2ADDR.S b/vm/mterp/x86/OP_MUL_DOUBLE_2ADDR.S
index d277689..469714b 100644
--- a/vm/mterp/x86/OP_MUL_DOUBLE_2ADDR.S
+++ b/vm/mterp/x86/OP_MUL_DOUBLE_2ADDR.S
@@ -1,15 +1,2 @@
-   /*
-    * File: OP_MUL_DOUBLE_2ADDR.S
-    */
-
-    movzx       rINSTbl,%ecx            # ecx<- A+
-    andb        $$0xf,%cl               # ecx<- A
-    sarl        $$4,rINST               # rINST<- B
-    # TODO: movsd?
-    movq        (rFP, rINST, 4), %xmm1  # %xmm1<- vB
-    movq        (rFP, %ecx, 4), %xmm0   # %xmm0<- vA
-    FETCH_INST_OPCODE 1 %eax
-    mulsd       %xmm1, %xmm0            # %xmm0<- vA op vB
-    ADVANCE_PC 1
-    movq        %xmm0, (rFP, %ecx, 4)   # vA<- %xmm0; result
-    GOTO_NEXT_R %eax
+%verify "executed"
+%include "x86/sseBinop2Addr.S" {"instr":"muls","suff":"d"}
diff --git a/vm/mterp/x86/OP_MUL_FLOAT.S b/vm/mterp/x86/OP_MUL_FLOAT.S
index 5515c4f..bc3911d 100644
--- a/vm/mterp/x86/OP_MUL_FLOAT.S
+++ b/vm/mterp/x86/OP_MUL_FLOAT.S
@@ -1,2 +1,2 @@
 %verify "executed"
-%include "x86/binflop.S" {"instr":"fmuls","load":"flds","store":"fstps"}
+%include "x86/sseBinop.S" {"instr":"muls","suff":"s"}
diff --git a/vm/mterp/x86/OP_MUL_FLOAT_2ADDR.S b/vm/mterp/x86/OP_MUL_FLOAT_2ADDR.S
index c8a3bf7..59ba0b5 100644
--- a/vm/mterp/x86/OP_MUL_FLOAT_2ADDR.S
+++ b/vm/mterp/x86/OP_MUL_FLOAT_2ADDR.S
@@ -1,2 +1,2 @@
 %verify "executed"
-%include "x86/binflop2addr.S" {"instr":"fmuls","load":"flds","store":"fstps"}
+%include "x86/sseBinop2Addr.S" {"instr":"muls","suff":"s"}
diff --git a/vm/mterp/x86/OP_SUB_DOUBLE.S b/vm/mterp/x86/OP_SUB_DOUBLE.S
index cf84a65..46329f2 100644
--- a/vm/mterp/x86/OP_SUB_DOUBLE.S
+++ b/vm/mterp/x86/OP_SUB_DOUBLE.S
@@ -1,14 +1,2 @@
-   /*
-    * File: OP_SUB_DOUBLE.S
-    */
-
-    movzbl   2(rPC),%eax                # eax<- BB
-    movzbl   3(rPC),%ecx                # ecx<- CC
-    # TODO: movsd?
-    movq        (rFP, %eax, 4), %xmm0   # %xmm0<- vBB
-    movq        (rFP, %ecx, 4), %xmm1   # %xmm1<- vCC
-    FETCH_INST_OPCODE 2 %ecx
-    subsd       %xmm1, %xmm0
-    ADVANCE_PC 2
-    movq        %xmm0, (rFP, rINST, 4)  # vAA<- vBB - vCC
-    GOTO_NEXT_R %ecx
+%verify "executed"
+%include "x86/sseBinop.S" {"instr":"subs","suff":"d"}
diff --git a/vm/mterp/x86/OP_SUB_DOUBLE_2ADDR.S b/vm/mterp/x86/OP_SUB_DOUBLE_2ADDR.S
index 05dce86..e0f9485 100644
--- a/vm/mterp/x86/OP_SUB_DOUBLE_2ADDR.S
+++ b/vm/mterp/x86/OP_SUB_DOUBLE_2ADDR.S
@@ -1,15 +1,2 @@
-   /*
-    * File: OP_SUB_DOUBLE_2ADDR.S
-    */
-
-    movzx       rINSTbl,%ecx            # ecx<- A+
-    andb        $$0xf,%cl               # ecx<- A
-    sarl        $$4,rINST               # rINST<- B
-    # TODO: movsd?
-    movq        (rFP, rINST, 4), %xmm1  # %xmm1<- vB
-    movq        (rFP, %ecx, 4), %xmm0   # %xmm0<- vA
-    FETCH_INST_OPCODE 1 %eax
-    subsd       %xmm1, %xmm0            # %xmm0<- vA op vB
-    ADVANCE_PC 1
-    movq        %xmm0, (rFP, %ecx, 4)   # vA<- %xmm0; result
-    GOTO_NEXT_R %eax
+%verify "executed"
+%include "x86/sseBinop2Addr.S" {"instr":"subs","suff":"d"}
diff --git a/vm/mterp/x86/OP_SUB_FLOAT.S b/vm/mterp/x86/OP_SUB_FLOAT.S
index 99d11c6..a93ad38 100644
--- a/vm/mterp/x86/OP_SUB_FLOAT.S
+++ b/vm/mterp/x86/OP_SUB_FLOAT.S
@@ -1,2 +1,2 @@
 %verify "executed"
-%include "x86/binflop.S" {"instr":"fsubs","load":"flds","store":"fstps"}
+%include "x86/sseBinop.S" {"instr":"subs","suff":"s"}
diff --git a/vm/mterp/x86/OP_SUB_FLOAT_2ADDR.S b/vm/mterp/x86/OP_SUB_FLOAT_2ADDR.S
index 013334a..ee76574 100644
--- a/vm/mterp/x86/OP_SUB_FLOAT_2ADDR.S
+++ b/vm/mterp/x86/OP_SUB_FLOAT_2ADDR.S
@@ -1,2 +1,2 @@
 %verify "executed"
-%include "x86/binflop2addr.S" {"instr":"fsubs","load":"flds","store":"fstps"}
+%include "x86/sseBinop2Addr.S" {"instr":"subs","suff":"s"}
diff --git a/vm/mterp/x86/sseBinop.S b/vm/mterp/x86/sseBinop.S
new file mode 100644
index 0000000..d79a357
--- /dev/null
+++ b/vm/mterp/x86/sseBinop.S
@@ -0,0 +1,9 @@
+%default {"instr":"","suff":""}
+    movzbl      2(rPC),%ecx                # ecx<- BB
+    movzbl      3(rPC),%eax                # eax<- CC
+    movs${suff}       (rFP, %ecx, 4),%xmm0       # %xmm0 <- 1st src
+    ${instr}${suff}      (rFP,%eax,4),%xmm0
+    FETCH_INST_OPCODE 2 %eax
+    movs${suff}      %xmm0,(rFP, rINST, 4)  # vAA<- %xmm0
+    ADVANCE_PC 2
+    GOTO_NEXT_R %eax
diff --git a/vm/mterp/x86/sseBinop2Addr.S b/vm/mterp/x86/sseBinop2Addr.S
new file mode 100644
index 0000000..69447c6
--- /dev/null
+++ b/vm/mterp/x86/sseBinop2Addr.S
@@ -0,0 +1,10 @@
+%default {"instr":"","suff":""}
+    movzx       rINSTbl,%ecx            # ecx<- A+
+    andl        $$0xf,%ecx               # ecx<- A
+    movs${suff}      (rFP, %ecx, 4), %xmm0   # %xmm0 <- 1st src
+    sarl        $$4,rINST               # rINST<- B
+    ${instr}${suff}      (rFP,rINST,4), %xmm0
+    FETCH_INST_OPCODE 1 %eax
+    movs${suff}      %xmm0, (rFP, %ecx, 4)    # vAA<- %xmm0
+    ADVANCE_PC 1
+    GOTO_NEXT_R %eax
-- 
1.7.4.1

