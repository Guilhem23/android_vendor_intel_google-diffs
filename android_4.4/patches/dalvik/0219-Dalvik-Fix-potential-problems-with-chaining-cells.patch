From c26c9b255804db11bc41532a560f04ba8f0a3797 Mon Sep 17 00:00:00 2001
From: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Date: Thu, 13 Jun 2013 13:54:15 -0700
Subject: Dalvik: Fix potential problems with chaining cells

BZ: 116024

Two chaining cell problems are being addressed:
-All chaining cells expect that there is one jump to them which needs
to be patched at runtime and generation of that jump is now ensured.
-Generation of jump through fallthrough mechanism is now no longer
counted as start of chaining cells region. This prevents unchaining
from starting from wrong place and unchaining bogus data in a possibly
fatal way.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I61d2172913cb5bad54fca3c48087d3b478eb17c9
Orig-MCG-Change-Id: I0674f832caadf86065be727fde82ce4375ddb7de
Signed-off-by: Razvan A Lupusoru <razvan.a.lupusoru@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/CodegenInterface.cpp |   30 +++++++++++++++++++++----
 1 files changed, 25 insertions(+), 5 deletions(-)

diff --git a/vm/compiler/codegen/x86/CodegenInterface.cpp b/vm/compiler/codegen/x86/CodegenInterface.cpp
index 7e82a01..3a59d0d 100644
--- a/vm/compiler/codegen/x86/CodegenInterface.cpp
+++ b/vm/compiler/codegen/x86/CodegenInterface.cpp
@@ -1647,14 +1647,23 @@ static void handleFallThroughBranch (CompilationUnit *cUnit, BasicBlock *bb, Bas
     //Get next fall through
     BasicBlock *nextFallThrough = *ptrNextFallThrough;
 
-    //We need a fallthrough branch if we had a next and it isn't the current BasicBlock
-    bool needFallThroughBranch = (nextFallThrough != 0 && bb != nextFallThrough);
+    //Check if the jump needs alignment. If it needs alignment it means it will be patched at runtime
+    //and thus we cannot skip generating this jump
+    bool jumpNeedsAlignment = false;
+    if (nextFallThrough != 0)
+    {
+        jumpNeedsAlignment = doesJumpToBBNeedAlignment (nextFallThrough);
+    }
+
+    //We need a fallthrough branch if we had a next and it isn't the current BasicBlock or jump is needed
+    bool needFallThroughBranch = (nextFallThrough != 0 && (jumpNeedsAlignment == true || bb != nextFallThrough));
 
     if (needFallThroughBranch == true)
     {
-        jumpToBasicBlock(stream, nextFallThrough->id,
-                doesJumpToBBNeedAlignment(nextFallThrough));
+        //Generate the jump now
+        jumpToBasicBlock (stream, nextFallThrough->id, jumpNeedsAlignment);
     }
+
     //Clear it
     *ptrNextFallThrough = 0;
 }
@@ -2121,7 +2130,7 @@ static void compilerMIR2LIRJit(CompilationUnit_O1 *cUnit, JitTranslationInfo *in
         print_stream_ptr = stream;
     }
 
-    char* streamChainingStart = (char*)stream;
+    char* streamChainingStart = 0;
     /* Handle the chaining cells in predefined order */
 
     for (i = 0; i < kChainingCellGap; i++) {
@@ -2135,6 +2144,17 @@ static void compilerMIR2LIRJit(CompilationUnit_O1 *cUnit, JitTranslationInfo *in
         //First handle fallthrough branch
         handleFallThroughBranch (cUnit, 0, &nextFallThrough);
 
+        //If we haven't initialized the start of the chaining cells we do it now
+        if (streamChainingStart == 0)
+        {
+            //Stream has been updated because handleFallThroughBranch always generates jumps which
+            //forces scheduler to update the stream pointer. Thus we can use it here.
+            assert (singletonPtr<Scheduler>()->isQueueEmpty() == true);
+
+            //Initialize the beginning of the chaining cells
+            streamChainingStart = stream;
+        }
+
         if (cUnit->printMe && print_stream_ptr < stream) {
             // If there is any code before the chaining cell block and the
             // last recorded block, make it a separate code block.
-- 
1.7.4.1

