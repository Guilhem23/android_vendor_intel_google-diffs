From a59fdcfd08e94b979bba983ca5da750a67f2f175 Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Mon, 16 Sep 2013 13:24:54 +0700
Subject: Dalvik: Loop formation misses the case when tail block comes to entry by both links

BZ: 138629

Loop formation does not expect that tail block comes to loop entry
by both taken and fallThrough. It can happen it you have continue
statement at the end of the loop for example.

As a bonus, Remove_Gotos optimization is extended to eliminate
conditional instruction at the end of basic block if both
taken and fallThrough lead to the same basic block.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I169b060d83192c6315915a7b2c89cc33f8a71c96
Orig-MCG-Change-Id: I0f6e73af7b224137a556139dd45aea0efbd4087c
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Reviewed-on: http://android.intel.com:8080/133005
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Popov, Ivan G <ivan.g.popov@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 vm/compiler/BBOptimization.cpp |   29 ++++++++++++++++++++++++++++-
 1 files changed, 28 insertions(+), 1 deletions(-)

diff --git a/vm/compiler/BBOptimization.cpp b/vm/compiler/BBOptimization.cpp
index ed9ce71..29dfd9f 100644
--- a/vm/compiler/BBOptimization.cpp
+++ b/vm/compiler/BBOptimization.cpp
@@ -564,7 +564,7 @@ static BasicBlock *handleTopLoop (CompilationUnit *cUnit, LoopInformation *info)
             {
                 tailblock->taken = newBB;
             }
-            else
+            if (tailblock->fallThrough == entry)
             {
                 tailblock->fallThrough = newBB;
             }
@@ -1348,6 +1348,16 @@ bool dvmCompilerLocalValueNumbering (CompilationUnit *cunit, BasicBlock *bb)
     return false;
 }
 
+/**
+ * @brief This optimization removes redundant goto and conditional instruction
+ * @details Goto instruction at the end of basic block can be safely removed if it leads
+ * to dalvik code basic block.
+ * Any conditional instruction at the end of basic block can be safely removed if both
+ * taken and fallthrough leads to dalvik code basick block.
+ * @param cUnit Compilation context
+ * @param bb Basic block to consider
+ * @return false always indicating that no need to re-traverse CFG
+ */
 bool dvmCompilerRemoveGoto (CompilationUnit *cUnit, BasicBlock *bb)
 {
 //Get last instruction
@@ -1374,6 +1384,23 @@ bool dvmCompilerRemoveGoto (CompilationUnit *cUnit, BasicBlock *bb)
                 }
             }
         }
+
+        // Handle conditional instruction
+        if (insn.opcode >= OP_IF_EQ && insn.opcode <= OP_IF_LEZ)
+        {
+            if (bb->taken != 0 && bb->fallThrough == bb->taken)
+            {
+                //If the taken goes to a bytecode, then we can remove the if
+                if (bb->taken->blockType == kDalvikByteCode)
+                {
+                    //Remove the MIR
+                    dvmCompilerRemoveMIR(bb, lastMIR);
+
+                    //FallThrough clean taken branch
+                    bb->taken = 0;
+                }
+            }
+        }
     }
     return false;
 }
-- 
1.7.4.1

