From 257ba9805590b88020948c36f35c8d18ae947298 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Thu, 7 Mar 2013 11:09:41 -0800
Subject: Dalvik: Middle-end usedef chain refinement

BZ: 92849

Small update on the data structure used for usedef chains.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I00515fa1e30a7988669a734e77f772e29bd9129f
Orig-MCG-Change-Id: I428bc0dfe3e087b78cbcef328010b6c51f164096
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/Dataflow.h            |    9 ++---
 vm/compiler/SSATransformation.cpp |   16 ++++++++--
 vm/compiler/SSAWalkData.cpp       |   56 +++++++++++++++++++++++++++++++++++-
 vm/compiler/SSAWalkData.h         |   29 ++++++++++++++++++-
 4 files changed, 98 insertions(+), 12 deletions(-)

diff --git a/vm/compiler/Dataflow.h b/vm/compiler/Dataflow.h
index daa097b..23f6707 100644
--- a/vm/compiler/Dataflow.h
+++ b/vm/compiler/Dataflow.h
@@ -114,12 +114,11 @@ typedef struct BasicBlockDataFlow {
  */
 typedef struct sUsedChain
 {
-    MIR *prevUse;       /**< @brief MIR containing the previous use */
-    MIR *mir;           /**< @brief MIR containing the current use */
-    MIR *nextUse;       /**< @brief MIR containing the next use */
-    BasicBlock *bb;     /**< @brief BasicBlock containing the current use (mir field) */
+    struct sUsedChain *prevUse;        /**< @brief Chain containing the previous use */
+    MIR *mir;                          /**< @brief MIR containing the current use */
+    struct sUsedChain *nextUse;        /**< @brief Chain containing the next use */
 
-    struct sUsedChain *nextChain;   /**< @brief Used internally by the chain builder */
+    struct sUsedChain *nextChain;      /**< @brief Used internally by the chain builder */
 }SUsedChain;
 
 /**
diff --git a/vm/compiler/SSATransformation.cpp b/vm/compiler/SSATransformation.cpp
index 091dc27..ed3ed2e 100644
--- a/vm/compiler/SSATransformation.cpp
+++ b/vm/compiler/SSATransformation.cpp
@@ -790,21 +790,27 @@ static bool buildDefUseChain (CompilationUnit *cUnit, BasicBlock *bb)
 
                 //Set its mir and bb
                 elem->mir = insn;
-                elem->bb = bb;
 
                 //Get the last use for this element
                 SUsedChain *last = data->getLastChain (value);
 
                 //Set defWhere for this instruction
                 MIR *defined = data->getDefinition (value);
+
                 ssaRep->defWhere[i] = defined;
 
+                //In case there is no define yet, let's remember it to handle it afterwards
+                if (defined == 0)
+                {
+                    data->addNoDefine (insn, i);
+                }
+
                 //If we have one
                 if (last != 0)
                 {
                     //Link it
-                    last->nextUse = insn;
-                    elem->prevUse = last->mir;
+                    last->nextUse = elem;
+                    elem->prevUse = last;
                 }
                 else
                 {
@@ -923,5 +929,9 @@ bool dvmCompilerBuildLoop(CompilationUnit *cUnit, bool filter)
 
     //Just for safety, reset walkData
     cUnit->walkData = 0;
+
+    //Finally any value without a definition might have one now, handle them now
+    data.handleNoDefinitions ();
+
     return true;
 }
diff --git a/vm/compiler/SSAWalkData.cpp b/vm/compiler/SSAWalkData.cpp
index 629c006..0b86417 100644
--- a/vm/compiler/SSAWalkData.cpp
+++ b/vm/compiler/SSAWalkData.cpp
@@ -49,6 +49,11 @@ SUsedChain *SSAWalkData::getUsedChain (void)
         freeChains = freeChains->nextChain;
     }
 
+    //Reset it
+    res->nextUse = 0;
+    res->prevUse = 0;
+    res->mir = 0;
+
     return res;
 }
 
@@ -67,7 +72,54 @@ void SSAWalkData::setDefinition (MIR *insn, int value)
     definitions[value] = insn;
 }
 
-MIR *SSAWalkData::getDefinition (int value)
+MIR *SSAWalkData::getDefinition (int value) const
+{
+    std::map<int, MIR *>::const_iterator it = definitions.find (value);
+
+    //If not found, return 0
+    if (it == definitions.end ())
+    {
+        return 0;
+    }
+
+    //Otherwise, we can return it
+    return it->second;
+}
+
+void SSAWalkData::handleNoDefinitions (void) const
+{
+    //Go through each no definition
+    for (std::vector<SWalkDataNoDefine>::const_iterator it = noDefine.begin ();
+                                                          it != noDefine.end ();
+                                                          it++)
+    {
+        //Get local versions
+        const SWalkDataNoDefine &info = *it;
+        MIR * mir = info.mir;
+        int idx = info.index;
+
+        SSARepresentation *ssaRep = mir->ssaRep;
+
+        //Paranoid
+        if (ssaRep == 0 || idx >= ssaRep->numUses)
+        {
+            continue;
+        }
+
+        //Get use value
+        int value = ssaRep->uses[idx];
+
+        //Set defWhere for this instruction
+        MIR *defined = getDefinition (value);
+
+        //Set it now
+        ssaRep->defWhere[idx] = defined;
+    }
+}
+
+void SSAWalkData::addNoDefine (MIR *mir, int idx)
 {
-    return definitions[value];
+    //Create the data and set it
+    SWalkDataNoDefine info = {mir, idx};
+    noDefine.push_back (info);
 }
diff --git a/vm/compiler/SSAWalkData.h b/vm/compiler/SSAWalkData.h
index 45e7b14..0aa548d 100644
--- a/vm/compiler/SSAWalkData.h
+++ b/vm/compiler/SSAWalkData.h
@@ -22,6 +22,16 @@
 #include "Dataflow.h"
 
 /**
+ * @class SWalkDataNoDefine
+ * @brief Used as a helper structure to handle SSA registers without a definition during the parsing
+ */
+typedef struct sWalkDataNoDefine
+{
+    MIR *mir;   /**< @brief the MIR containing the use without a definition */
+    int index;  /**< @brief the index in the ssaRep->uses array for the SSA register */
+}SWalkDataNoDefine;
+
+/**
  * @class SSAWalkData
  * @brief SSAWalkData contains any data required inter BasicBlock
  */
@@ -65,9 +75,21 @@ class SSAWalkData
           /**
            * @brief Get the instruction containing the definition
            * @param value the SSA register
-           * @return the MIR containing the definition
+           * @return the MIR containing the definition, 0 if none found
            */
-          MIR *getDefinition (int value);
+          MIR *getDefinition (int value) const;
+
+          /**
+           * @brief Handle the SSA registers without a definition during the parsing
+           */
+          void handleNoDefinitions (void) const;
+
+          /**
+           * @brief Add a SSA register that does not have a definition during the parsing
+           * @param mir the MIR containing the SSA register without definition
+           * @param idx the index in the ssaRep->uses array for the register
+           */
+          void addNoDefine (MIR  *mir, int idx);
 
     protected:
           /** @brief Association SSA register <-> where it is defined */
@@ -81,6 +103,9 @@ class SSAWalkData
 
           /** @brief Current free chain node */
           SUsedChain *freeChains;
+
+          /** @brief Any MIR not having a defintion during the parsing */
+          std::vector<SWalkDataNoDefine> noDefine;
 };
 
 #endif
-- 
1.7.4.1

