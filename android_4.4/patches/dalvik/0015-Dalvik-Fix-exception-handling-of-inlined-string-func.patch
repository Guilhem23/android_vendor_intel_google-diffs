From ceec71a787ff6f3cc9ec8a8f03eb6fd098f43408 Mon Sep 17 00:00:00 2001
From: Johnnie Birch <johnnie.l.birch.jr@intel.com>
Date: Tue, 19 Jun 2012 10:11:21 -0700
Subject: Dalvik: Fix exception handling of inlined string functions

BZ: 75820

Exceptions for inlined functions: INLINE_STRING_LENGTH,
INLINE_STRING_IS_EMPTY, and INLINE_STRING_FASTINDEXOF_II are not
setup/initialized correctly in the JIT before being passed to the
FI. This patch corrects this issue by jumping to the correct
exception handling code in the JIT before handling the exception
in the FI.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I453c8c76c3ca6a9f0615dea3c10a965f9f469d54
Orig-MCG-Change-Id: I7bbc21ca19a108ba3854bafbfaad5af8ebf8f6e0
Signed-off-by: Johnnie Birch <johnnie.l.birch.jr@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/LowerInvoke.cpp |   18 +++++++++++++++---
 vm/compiler/codegen/x86/LowerJump.cpp   |    2 +-
 2 files changed, 16 insertions(+), 4 deletions(-)

diff --git a/vm/compiler/codegen/x86/LowerInvoke.cpp b/vm/compiler/codegen/x86/LowerInvoke.cpp
index 10bc197..ae2bbca 100644
--- a/vm/compiler/codegen/x86/LowerInvoke.cpp
+++ b/vm/compiler/codegen/x86/LowerInvoke.cpp
@@ -978,7 +978,11 @@ int op_execute_inline(bool isRange) {
             compare_imm_reg(OpndSize_32, 0, 1, false);
             conditional_jump(Condition_NE, ".do_inlined_string_length", true);
             scratchRegs[0] = PhysicalReg_SCRATCH_1;
-            jumpToExceptionThrown(1/*exception number*/);
+            rememberState(1);
+            constVREndOfBB();
+            beforeCall("exception"); //dump GG, GL VRs
+            unconditional_jump("common_errNullObject", false);
+            goToState(1);
             insertLabel(".do_inlined_string_length", true);
             move_mem_to_reg(OpndSize_32, 0x14, 1, false, 2, false);
             get_self_pointer(3, false);
@@ -989,7 +993,11 @@ int op_execute_inline(bool isRange) {
             compare_imm_reg(OpndSize_32, 0, 1, false);
             conditional_jump(Condition_NE, ".do_inlined_string_length", true);
             scratchRegs[0] = PhysicalReg_SCRATCH_1;
-            jumpToExceptionThrown(1/*exception number*/);
+            rememberState(1);
+            constVREndOfBB();
+            beforeCall("exception"); //dump GG, GL VRs
+            unconditional_jump("common_errNullObject", false);
+            goToState(1);
             insertLabel(".do_inlined_string_length", true);
             compare_imm_mem(OpndSize_32, 0, 0x14, 1, false);
             conditional_jump(Condition_E, ".inlined_string_length_return_true",
@@ -1060,7 +1068,11 @@ int op_execute_inline(bool isRange) {
             conditional_jump(Condition_NE, ".do_inlined_string_fastIndexof",
                              true);
             scratchRegs[0] = PhysicalReg_SCRATCH_1;
-            jumpToExceptionThrown(1/*exception number*/);
+            rememberState(1);
+            constVREndOfBB();
+            beforeCall("exception"); //dump GG, GL VRs
+            unconditional_jump("common_errNullObject", false);
+            goToState(1);
             insertLabel(".do_inlined_string_fastIndexof", true);
             move_mem_to_reg(OpndSize_32, 0x14, 1, false, 4, false);
             move_mem_to_reg(OpndSize_32, 0x8, 1, false, 5, false);
diff --git a/vm/compiler/codegen/x86/LowerJump.cpp b/vm/compiler/codegen/x86/LowerJump.cpp
index cb27d66..b181763 100644
--- a/vm/compiler/codegen/x86/LowerJump.cpp
+++ b/vm/compiler/codegen/x86/LowerJump.cpp
@@ -983,7 +983,7 @@ int common_if(s4 tmp, ConditionCode cc_next, ConditionCode cc) {
 int common_errNullObject() {
     insertLabel("common_errNullObject", false);
     move_imm_to_reg(OpndSize_32, 0, PhysicalReg_EAX, true);
-    move_imm_to_reg(OpndSize_32, LstrNullPointerException, PhysicalReg_ECX, true);
+    move_imm_to_reg(OpndSize_32, (int) gDvm.exNullPointerException, PhysicalReg_ECX, true);
     unconditional_jump("common_throw", false);
     return 0;
 }
-- 
1.7.4.1

