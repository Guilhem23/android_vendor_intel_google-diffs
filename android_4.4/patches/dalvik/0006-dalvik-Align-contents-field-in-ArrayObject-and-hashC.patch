From 9efff5ca39d32869e5faab84a4f61233b428022e Mon Sep 17 00:00:00 2001
From: Zhenghua Wang <zhenghua.wang@intel.com>
Date: Wed, 22 Feb 2012 19:13:50 +0800
Subject: dalvik: Align contents field in ArrayObject and hashCode() return positive values

BZ: 24670

Port patch 20568
This patch makes the fields offset in ArrayObject the same as in ARM
version of Dalvik VM. Some applications contain native code that depends on
this offset assumption. It is needed to support Houdini.

Port patch 33817
Some apps like miliao assume that hashCode() always reutrn positive values.
Though this is true on virtually all arm devices, it is actually a wrong
assumption according to Java standard. This patch makes sure that we are in
compliant with arm devices.

Category: device-enablement
Domain: AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Iec62ef5b340e331345124afa6e70325f2dc80e63
Orig-MCG-Change-Id: I60122d056ea84f7d226e2c925e3044e94149eed4
Signed-off-by: Zhenghua Wang <zhenghua.wang@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 Android.mk     |   17 +++++++++--------
 vm/Dvm.mk      |   13 +++++++++++++
 vm/Sync.cpp    |   13 ++++++++++++-
 vm/oo/Object.h |    4 ++++
 4 files changed, 38 insertions(+), 9 deletions(-)

diff --git a/Android.mk b/Android.mk
index 7b8927c..4196c95 100644
--- a/Android.mk
+++ b/Android.mk
@@ -14,14 +14,6 @@
 
 LOCAL_PATH := $(call my-dir)
 
-ifeq ($(WITH_HOUDINI),)
-  ifeq ($(TARGET_ARCH_VARIANT),x86-atom)
-    WITH_HOUDINI := true
-  else
-    WITH_HOUDINI := false
-  endif
-endif
-
 WITH_JIT := $(strip $(WITH_JIT))
 ifeq ($(WITH_JIT),)
   ifeq ($(TARGET_ARCH),x86)
@@ -31,6 +23,15 @@ ifeq ($(WITH_JIT),)
   endif
 endif
 
+WITH_POSITIVE_HASH := $(strip $(WITH_POSITIVE_HASH))
+ifeq ($(WITH_POSITIVE_HASH),)
+  ifeq ($(TARGET_ARCH),x86)
+    WITH_POSITIVE_HASH := true
+  else
+    WITH_POSITIVE_HASH := false
+  endif
+endif
+
 subdirs := $(addprefix $(LOCAL_PATH)/,$(addsuffix /Android.mk, \
 		libdex \
 		vm \
diff --git a/vm/Dvm.mk b/vm/Dvm.mk
index 42c04b7..09a1363 100644
--- a/vm/Dvm.mk
+++ b/vm/Dvm.mk
@@ -37,6 +37,19 @@ endif
 # Optional features.  These may impact the size or performance of the VM.
 #
 
+# Setting WITH_POSITIVE_HASH to true makes sure that hashCode()
+# always return positive values. Though this is not necessary
+# according to Java standard, many android apps make such
+# assumption because it's true on virtually every arm device.
+# On contrary, x86 devices may have negative hashCode.
+#
+ifeq ($(WITH_POSITIVE_HASH), true)
+  LOCAL_CFLAGS += -DWITH_POSITIVE_HASH
+endif
+
+# Houdini support
+LOCAL_CFLAGS += -DMTERP_NO_UNALIGN_64
+
 # Make a debugging version when building the simulator (if not told
 # otherwise) and when explicitly asked.
 dvm_make_debug_vm := false
diff --git a/vm/Sync.cpp b/vm/Sync.cpp
index f42004c..dd110e0 100644
--- a/vm/Sync.cpp
+++ b/vm/Sync.cpp
@@ -1218,7 +1218,18 @@ void dvmThreadInterrupt(Thread* thread)
 #ifndef WITH_COPYING_GC
 u4 dvmIdentityHashCode(Object *obj)
 {
-    return (u4)obj;
+#ifdef WITH_POSITIVE_HASH
+    /*
+     * Clear the most significant bit of obj so that hashCode()
+     * always return positive values. Though this is not necessary
+     * according to Java standard, many android apps make such
+     * assumption because it's true on virtually every arm device.
+     * On contrary, x86 devices may have negative obj.
+     */
+    return (u4)obj & 0x7fffffff;
+#else
+    return (u4)obj
+#endif
 }
 #else
 /*
diff --git a/vm/oo/Object.h b/vm/oo/Object.h
index 034f74f..01e5e8c 100644
--- a/vm/oo/Object.h
+++ b/vm/oo/Object.h
@@ -270,6 +270,10 @@ struct ArrayObject : Object {
     /* number of elements; immutable after init */
     u4              length;
 
+#ifdef MTERP_NO_UNALIGN_64
+    u4              dummy;      /* padding to get 'contents' at offset 16 */
+#endif
+
     /*
      * Array contents; actual size is (length * sizeof(type)).  This is
      * declared as u8 so that the compiler inserts any necessary padding
-- 
1.7.4.1

