From 0439311ebc12c091b1ada83075b5e28838b87523 Mon Sep 17 00:00:00 2001
From: Dong-Yuan Chen <dong-yuan.chen@intel.com>
Date: Sat, 17 Aug 2013 22:16:26 -0700
Subject: Dalvik: Fix registerization

BZ: 128541

Fix ME registerization which detects registerization requests basing on
uses however is able to look into defs as well. So patch fixes that.

Fix BE registerization to update compileTable correctly in case of
swap two VRs.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Ief81655b74a0e6fb9db07dbd96d6199bb147a662
Orig-MCG-Change-Id: I9ccce7356654644f32b6d2fe96bd38938db4cd61
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Reviewed-on: http://android.intel.com:8080/125068
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Semukhina, Elena V <elena.v.semukhina@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Reviewed-on: http://android.intel.com:8080/125992
---
 vm/compiler/RegisterizationME.cpp                  |    2 +-
 vm/compiler/codegen/CodegenFactory.cpp             |    3 ++-
 vm/compiler/codegen/CompilerCodegen.h              |    2 +-
 .../codegen/x86/lightcg/CodegenInterface.cpp       |    8 ++++++--
 .../codegen/x86/lightcg/RegisterizationBE.cpp      |    5 +++--
 5 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/vm/compiler/RegisterizationME.cpp b/vm/compiler/RegisterizationME.cpp
index cbfff4a..c4db994 100644
--- a/vm/compiler/RegisterizationME.cpp
+++ b/vm/compiler/RegisterizationME.cpp
@@ -79,7 +79,7 @@ static bool getType (const MIR *mir, int vR, RegisterClass &regClass)
     }
 
     //Ok now find out about this one
-    bool res = dvmCompilerFindRegClass (firstUse, vR, regClass);
+    bool res = dvmCompilerFindRegClass (firstUse, vR, regClass, true);
 
     if (res == false)
     {
diff --git a/vm/compiler/codegen/CodegenFactory.cpp b/vm/compiler/codegen/CodegenFactory.cpp
index c942ec5..2291809 100644
--- a/vm/compiler/codegen/CodegenFactory.cpp
+++ b/vm/compiler/codegen/CodegenFactory.cpp
@@ -269,11 +269,12 @@ static void storeValueWide(CompilationUnit *cUnit, RegLocation rlDest,
 
 #ifndef ARCH_IA32
 //For non x86, to let it compile
-bool dvmCompilerFindRegClass (MIR *mir, int vR, RegisterClass &regClass)
+bool dvmCompilerFindRegClass (MIR *mir, int vR, RegisterClass &regClass, bool onlyUse)
 {
     (void) mir;
     (void) vR;
     (void) regClass;
+    (void) onlyUse;
     return false;
 }
 
diff --git a/vm/compiler/codegen/CompilerCodegen.h b/vm/compiler/codegen/CompilerCodegen.h
index 889d42b..3040062 100644
--- a/vm/compiler/codegen/CompilerCodegen.h
+++ b/vm/compiler/codegen/CompilerCodegen.h
@@ -59,7 +59,7 @@ bool dvmJitPatchInlineCache(void *cellPtr, void *contentPtr);
 void dvmCompilerCodegenDump(CompilationUnit *cUnit);
 
 /* Implemented in the codegen/<target>/CodegenInterface.c */
-bool dvmCompilerFindRegClass(MIR *mir, int vr, RegisterClass &regClass);
+bool dvmCompilerFindRegClass(MIR *mir, int vr, RegisterClass &regClass, bool onlyUse = false);
 
 /* Implemented in the codegen/<target>/Assembler.c */
 void dvmCompilerPatchInlineCache(void);
diff --git a/vm/compiler/codegen/x86/lightcg/CodegenInterface.cpp b/vm/compiler/codegen/x86/lightcg/CodegenInterface.cpp
index c067168..6365709 100644
--- a/vm/compiler/codegen/x86/lightcg/CodegenInterface.cpp
+++ b/vm/compiler/codegen/x86/lightcg/CodegenInterface.cpp
@@ -2681,7 +2681,7 @@ void dvmCompilerCacheFlush(long start, long end, long flags) {
   /* cacheflush is needed for ARM, but not for IA32 (coherent icache) */
 }
 
-bool dvmCompilerFindRegClass (MIR *mir, int vR, RegisterClass &regClass)
+bool dvmCompilerFindRegClass (MIR *mir, int vR, RegisterClass &regClass, bool onlyUse)
 {
     //Get information about the VRs in current bytecode
     VirtualRegInfo infoByteCode[MAX_REG_PER_BYTECODE];
@@ -2696,7 +2696,11 @@ bool dvmCompilerFindRegClass (MIR *mir, int vR, RegisterClass &regClass)
     int entry;
     for (entry = 0; entry < numVRs; entry++) {
         if (infoByteCode[entry].regNum == vR) {
-            break;
+            // We found out vR if we are interested in use or def or if access is not def
+            if ((onlyUse == false) || (infoByteCode[entry].accessType != REGACCESS_D))
+            {
+                break;
+            }
         }
     }
 
diff --git a/vm/compiler/codegen/x86/lightcg/RegisterizationBE.cpp b/vm/compiler/codegen/x86/lightcg/RegisterizationBE.cpp
index 77f86e1..edc7f29 100644
--- a/vm/compiler/codegen/x86/lightcg/RegisterizationBE.cpp
+++ b/vm/compiler/codegen/x86/lightcg/RegisterizationBE.cpp
@@ -1027,7 +1027,7 @@ static bool findRegistersToMove (const std::set<int> &virtualRegistersRegToReg,
  */
 static bool moveRegisters (std::map<PhysicalReg, PhysicalReg> &regToRegMoves,
                            const std::set<PhysicalReg> &scratchRegs,
-                           const std::map<int, PhysicalReg> &currentVRToPhysicalReg)
+                           std::map<int, PhysicalReg> currentVRToPhysicalReg)
 {
     std::map<PhysicalReg, PhysicalReg>::const_iterator regToRegIter;
 
@@ -1168,7 +1168,7 @@ static bool moveRegisters (std::map<PhysicalReg, PhysicalReg> &regToRegMoves,
 
             // We have moved from reg to reg, but we must also update the
             // entry in the compile table
-            std::map<int, PhysicalReg>::const_iterator currentVRToRegIter;
+            std::map<int, PhysicalReg>::iterator currentVRToRegIter;
             for (currentVRToRegIter = currentVRToPhysicalReg.begin ();
                     currentVRToRegIter != currentVRToPhysicalReg.end (); currentVRToRegIter++)
             {
@@ -1178,6 +1178,7 @@ static bool moveRegisters (std::map<PhysicalReg, PhysicalReg> &regToRegMoves,
                 if (oldReg == source)
                 {
                     updatePhysicalRegForVR (VR, source, dest);
+                    currentVRToRegIter->second = dest;
                 }
             }
 
-- 
1.7.4.1

