From 3924cb586b2f25bcae22299e6fa0dd3ab3eeccb9 Mon Sep 17 00:00:00 2001
From: vladimir.a.ivanov <vladimir.a.ivanov@intel.com>
Date: Fri, 10 Jan 2014 10:27:36 +0700
Subject: Dalvik: invariants should not be removed from instruction set before all checks done

BZ: 159541

According to the logic implemented in the method 'sinkInvariants' the code tries to
select any setters that can be moved and remove the original instruction from their
location as side effect. After that it checks remaining instructions for possible
exceptions and returns if it is possible. Proposed fix do selection and removing
as 2 steps.

Change-Id: Ib6f96072bd722e1df56bb4246a68ac59ee5a2222
Category: device enablement
Domain: AOSP.Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, need rework
Signed-off-by: vladimir.a.ivanov <vladimir.a.ivanov@intel.com>
---
 vm/compiler/InvariantRemoval.cpp |   36 ++++++++++++++++++++++++++++--------
 1 files changed, 28 insertions(+), 8 deletions(-)

diff --git a/vm/compiler/InvariantRemoval.cpp b/vm/compiler/InvariantRemoval.cpp
index 1dcecfa..572b70b 100644
--- a/vm/compiler/InvariantRemoval.cpp
+++ b/vm/compiler/InvariantRemoval.cpp
@@ -1170,8 +1170,7 @@ static bool whetherDominatesBasicBlock (CompilationUnit *cUnit, BasicBlock *bb,
 }
 
 /**
- * @brief Tries to select invariant setters for sinking. Remove instruction if it can be sunk and put it into
- * selection vector returned.
+ * @brief Tries to select invariant setters for sinking. Put instructions into selection vector returned.
  * @details This function iterates over given setters/getters and checks whether it can be sunk from the loop.
  * The setter/getter can be sunk if it is not volatile instruction, otherwise according to specification
  * other threads should see the value in memory immidiately. Also the instruction should be executed
@@ -1299,12 +1298,8 @@ static std::set<MIR *> selectInvariants (CompilationUnit *cUnit, LoopInformation
             //Finally we should check that noone is touching the same memory.
             //However, right now we only accept when we have solely one iput so we don't need to check now.
 
-            //Try to remove it from its original location
-            if (dvmCompilerRemoveMIR (mir) == true)
-            {
-                //We succeeded removing it so lets add it to our selections
-                selections.insert (mir);
-            }
+            //Add it to selection list
+            selections.insert (mir);
         }
     }
 
@@ -1382,6 +1377,23 @@ static void handleNullCheckHoisting (CompilationUnit *cUnit, LoopInformation *in
 }
 
 /**
+ * @brief try to remove selected MIRs from original locations
+ * @param selections set of selected MIRs for removing
+ * @return returns true if all MIR's were successfully removed
+ */
+static bool removeSelectedMirs(std::set<MIR *> selections)
+{
+    for (std::set<MIR *>::iterator mirs = selections.begin(); mirs != selections.end(); ++mirs)
+    {
+        if (dvmCompilerRemoveMIR(*mirs) != true)
+        {
+            return false;
+        }
+    }
+    return true;
+}
+
+/**
  * @brief This is per-loop function for Invariant Sinking optimization. It drives the optimization and
  * works as a gate for specific loop.
  * @details For the given loop this function checks whether the optimization can be applied in general,
@@ -1453,6 +1465,14 @@ static bool sinkInvariants (CompilationUnit *cUnit, LoopInformation *info, void
         return true;
     }
 
+    //Try to remove selected MIR's from its original location
+    if (removeSelectedMirs(selections) != true)
+    {
+        //We can't remove some MIR's unexpectedly. Stop compilation.
+        cUnit->quitLoopMode = true;
+        return true;
+    }
+
     //Sixth generate any needed null checks
     handleNullCheckHoisting (cUnit, info, selections);
 
-- 
1.7.4.1

