From a4998ce66c662b0803b1c064a0a07de0ee0bbc61 Mon Sep 17 00:00:00 2001
From: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Date: Tue, 12 Feb 2013 13:23:57 -0800
Subject: Dalvik: Null Check Can Be Wrong

BZ: 86496

There is a case where if the current BasicBlock only has predecessors
  not handled, it will consider that all the VRs are null checked.

Checks.cpp:
 - Fixes the issues by moving down the initialization until we know a
     predecessor has null check information

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-ME
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I97f23d2bc9f1eaa3a9ac8889955dc4fcc3f954d6
Orig-MCG-Change-Id: Ieb434002f61fab3d4cbaacbca88c5dccecd739d3
Signed-off-by: Jean Christophe Beyler <jean.christophe.beyler@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/Checks.cpp |    8 ++++----
 1 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/vm/compiler/Checks.cpp b/vm/compiler/Checks.cpp
index b4e645d..c295e8c 100644
--- a/vm/compiler/Checks.cpp
+++ b/vm/compiler/Checks.cpp
@@ -306,16 +306,16 @@ void initializeIndexToArray (CompilationUnit *cUnit, SRemoveData *removeData,
 
 void initializeNullChecks (CompilationUnit *cUnit, SRemoveData *removeData, BitVector *tempNullCheck, BasicBlock *predBB)
 {
-    //In this case, for the null handling, we are going to be setting every bit to a potential handled
-    //The intersection code will remove all the false positives
-    dvmSetInitialBits (tempNullCheck, cUnit->numSSARegs);
-
     //First handle the NULL check bitvector
     BitVector *elem = removeData->nullChecks[predBB->id];
 
     //Ok if we don't have this, it is because we have a backward branch, ignore it
     if (elem != NULL)
     {
+        //In this case, for the null handling, we are going to be setting every bit to a potential handled
+        //The intersection code will remove all the false positives
+        dvmSetInitialBits (tempNullCheck, cUnit->numSSARegs);
+
         /* tempNullCheck = tempNullCheck ^ constants already checked */
         dvmIntersectBitVectors(tempNullCheck, tempNullCheck, elem);
     }
-- 
1.7.4.1

