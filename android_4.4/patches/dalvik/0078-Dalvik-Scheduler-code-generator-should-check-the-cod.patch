From c185fe20f0471fbd7b750f9c29fada55bcecd108 Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Thu, 14 Feb 2013 15:32:13 +0700
Subject: Dalvik: Scheduler code generator should check the code cache full condition

BZ: 84121

Scheduler does not check the code cache full condition as a result
it is able to generate the code to memory out of code cache bound. That leads to SIGSEGV.
The patch adds a code cache full condition check to Scheduler code generator.
Specifically, it does not generate the code if some error happens and
it check the code cache full condition after code generation and sets an error if needed.

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: Id8f7796bc81a7e2f1d9035ac96f62c09652d7ebc
Orig-MCG-Change-Id: I7029d79b2d2a202475e702d0cefe9dd85af8353c
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 vm/compiler/codegen/x86/Schedule.cpp |    8 ++++++++
 1 files changed, 8 insertions(+), 0 deletions(-)

diff --git a/vm/compiler/codegen/x86/Schedule.cpp b/vm/compiler/codegen/x86/Schedule.cpp
index 38abb1d..7d28044 100644
--- a/vm/compiler/codegen/x86/Schedule.cpp
+++ b/vm/compiler/codegen/x86/Schedule.cpp
@@ -1223,6 +1223,8 @@ void Scheduler::updateUseDefInformation_mem_to_fp(LowOpMemReg * op) {
 //! code stream by making calls to the encoder.
 //! \param op to be encoded and placed into code stream.
 void Scheduler::generateAssembly(LowOp * op) {
+    if(IS_ANY_JIT_ERROR_SET())
+        return;
     if (op->numOperands == 0) {
         stream = encoder_return(stream);
     } else if (op->numOperands == 1) {
@@ -1383,6 +1385,12 @@ void Scheduler::generateAssembly(LowOp * op) {
                     memreg_op->memDest.m_base.isPhysical,
                     memreg_op->regSrc.regType, stream);
     }
+    if(gDvmJit.codeCacheByteUsed + (stream - streamStart) +
+       CODE_CACHE_PADDING > gDvmJit.codeCacheSize) {
+        ALOGE("JIT_ERROR: Code cache full after Scheduler::generateAssembly (trace uses %uB)", (stream - streamStart));
+        SET_JIT_ERROR(kJitErrorCodeCacheFull);
+        gDvmJit.codeCacheFull = true;
+    }
 }
 
 //! \brief Figures out which LowOps are ready after an instruction at chosenIdx
-- 
1.7.4.1

