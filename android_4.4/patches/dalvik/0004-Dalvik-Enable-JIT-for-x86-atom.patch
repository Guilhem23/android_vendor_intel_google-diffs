From 4ed4235ccc8a5f5f836dc93b45052abd8fb7463e Mon Sep 17 00:00:00 2001
From: Qiming Shi <qiming.shi@intel.com>
Date: Mon, 29 Jul 2013 15:22:42 +0800
Subject: Dalvik: Enable JIT for x86-atom

BZ: 72705

Key changes to vm/compiler/Compiler.h to commit out PROTECT_CODE_CACHE
macros and vm/compiler/codegen/x86-atom/CodegenInterface.cpp to not abort
when in dvmCompilerMethodMIR2LIR(CompilationUnit *cUnit)

Category: device-enablement
Domain: AOSP-Dalvik-Compiler-CG; AOSP-Dalvik-Compiler-ME; AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: no, needs rework

Change-Id: I57802985ed5dbf96bb3d8113b4925a0652a34205
Orig-MCG-Change-Id: I84b4fca19f612fbf3bdfbe34b3ec143b7e9cea8f
Signed-off-by: Qiming Shi <qiming.shi@intel.com>
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
---
 Android.mk                            |   17 +++++++++
 vm/Android.mk                         |   33 +++++++++++++++++-
 vm/Dvm.mk                             |   60 +++++++++++++++++++-------------
 vm/Globals.h                          |    3 ++
 vm/ReconfigureDvm.mk                  |   20 +++++++++++
 vm/compiler/Compiler.cpp              |    4 +-
 vm/compiler/Compiler.h                |    5 +++
 vm/compiler/codegen/CompilerCodegen.h |    4 --
 8 files changed, 115 insertions(+), 31 deletions(-)

diff --git a/Android.mk b/Android.mk
index 140509c..7b8927c 100644
--- a/Android.mk
+++ b/Android.mk
@@ -14,6 +14,23 @@
 
 LOCAL_PATH := $(call my-dir)
 
+ifeq ($(WITH_HOUDINI),)
+  ifeq ($(TARGET_ARCH_VARIANT),x86-atom)
+    WITH_HOUDINI := true
+  else
+    WITH_HOUDINI := false
+  endif
+endif
+
+WITH_JIT := $(strip $(WITH_JIT))
+ifeq ($(WITH_JIT),)
+  ifeq ($(TARGET_ARCH),x86)
+    WITH_JIT := true
+  else
+    WITH_JIT := false
+  endif
+endif
+
 subdirs := $(addprefix $(LOCAL_PATH)/,$(addsuffix /Android.mk, \
 		libdex \
 		vm \
diff --git a/vm/Android.mk b/vm/Android.mk
index e5d5448..66951a5 100644
--- a/vm/Android.mk
+++ b/vm/Android.mk
@@ -43,6 +43,14 @@ host_smp_flag := -DANDROID_SMP=1
 WITH_JIT := true
 include $(LOCAL_PATH)/ReconfigureDvm.mk
 
+ifeq ($(dvm_arch_variant),x86-atom)
+  $(info [TARGET] Building with x86-atom fast interpreter)
+  LOCAL_CFLAGS += -DMTERP_STUB
+endif
+ifeq ($(WITH_JIT),true)
+  $(info [TARGET] Building with JIT)
+endif
+
 # Overwrite default settings
 LOCAL_MODULE := libdvm
 LOCAL_CFLAGS += $(target_smp_flag)
@@ -94,7 +102,6 @@ LOCAL_ASFLAGS := $(LOCAL_CFLAGS)
 LOCAL_MODULE := libdvm_interp
 include $(BUILD_SHARED_LIBRARY)
 
-
 #
 # Build for the host.
 #
@@ -108,9 +115,30 @@ ifeq ($(WITH_HOST_DALVIK),true)
     dvm_arch := $(HOST_ARCH)
     # Note: HOST_ARCH_VARIANT isn't defined.
     dvm_arch_variant := $(HOST_ARCH)
+
     WITH_JIT := true
+
+    # Use TARGET_ARCH_VARIANT for HOST build if HOST_ARCH is x86
+    ifeq ($(HOST_ARCH),x86)
+        dvm_arch_variant := $(TARGET_ARCH_VARIANT)
+        ifeq ($(DALVIK_FI),x86)
+            dvm_arch_variant := $(DALVIK_FI)
+        endif
+        ifeq ($(DALVIK_FI),x86-atom)
+            dvm_arch_variant := $(DALVIK_FI)
+        endif
+    endif
+
     include $(LOCAL_PATH)/Dvm.mk
 
+    ifeq ($(dvm_arch_variant),x86-atom)
+      $(info [HOST] Building with x86-atom fast interpreter)
+      LOCAL_CFLAGS += -DMTERP_STUB
+    endif
+    ifeq ($(WITH_JIT),true)
+      $(info [HOST] Building with JIT)
+    endif
+
     LOCAL_SHARED_LIBRARIES += libnativehelper libcrypto-host libssl-host libicuuc-host libicui18n-host
 
     LOCAL_LDLIBS := -lpthread -ldl
@@ -137,6 +165,9 @@ ifeq ($(WITH_HOST_DALVIK),true)
     LOCAL_CFLAGS += $(host_smp_flag)
     # TODO: split out the asflags.
     LOCAL_ASFLAGS := $(LOCAL_CFLAGS)
+    # To enable assert in host mode, uncomment the following line
+    # LOCAL_CFLAGS += -UNDEBUG -DDEBUG=1 -DLOG_NDEBUG=1 -DWITH_DALVIK_ASSERT
+    LOCAL_CFLAGS += -Wa,--noexecstack
     LOCAL_MODULE_TAGS := optional
     LOCAL_MODULE := libdvm
 
diff --git a/vm/Dvm.mk b/vm/Dvm.mk
index 6e398b7..42c04b7 100644
--- a/vm/Dvm.mk
+++ b/vm/Dvm.mk
@@ -299,31 +299,43 @@ ifeq ($(dvm_arch),x86)
     ifeq ($(WITH_JIT),true)
       LOCAL_CFLAGS += -DARCH_IA32
       LOCAL_SRC_FILES += \
-                compiler/codegen/x86/LowerAlu.cpp \
-                compiler/codegen/x86/LowerConst.cpp \
-                compiler/codegen/x86/LowerMove.cpp \
-                compiler/codegen/x86/Lower.cpp \
-                compiler/codegen/x86/LowerHelper.cpp \
-                compiler/codegen/x86/LowerJump.cpp \
-                compiler/codegen/x86/LowerObject.cpp \
-                compiler/codegen/x86/AnalysisO1.cpp \
-                compiler/codegen/x86/BytecodeVisitor.cpp \
-                compiler/codegen/x86/NcgAot.cpp \
-                compiler/codegen/x86/CodegenInterface.cpp \
-                compiler/codegen/x86/LowerInvoke.cpp \
-                compiler/codegen/x86/LowerReturn.cpp \
-                compiler/codegen/x86/NcgHelper.cpp \
-                compiler/codegen/x86/LowerGetPut.cpp
-
-      # need apache harmony x86 encoder/decoder
-      LOCAL_C_INCLUDES += \
-                dalvik/vm/compiler/codegen/x86/libenc
-      LOCAL_SRC_FILES += \
-                compiler/codegen/x86/libenc/enc_base.cpp \
-                compiler/codegen/x86/libenc/dec_base.cpp \
-                compiler/codegen/x86/libenc/enc_wrapper.cpp \
-                compiler/codegen/x86/libenc/enc_tabl.cpp
+	      compiler/codegen/$(dvm_arch_variant)/LowerAlu.cpp \
+              compiler/codegen/$(dvm_arch_variant)/LowerConst.cpp \
+              compiler/codegen/$(dvm_arch_variant)/LowerMove.cpp \
+              compiler/codegen/$(dvm_arch_variant)/Lower.cpp \
+              compiler/codegen/$(dvm_arch_variant)/LowerHelper.cpp \
+              compiler/codegen/$(dvm_arch_variant)/LowerJump.cpp \
+              compiler/codegen/$(dvm_arch_variant)/LowerObject.cpp \
+              compiler/codegen/$(dvm_arch_variant)/AnalysisO1.cpp \
+              compiler/codegen/$(dvm_arch_variant)/BytecodeVisitor.cpp \
+              compiler/codegen/$(dvm_arch_variant)/NcgAot.cpp \
+              compiler/codegen/$(dvm_arch_variant)/CodegenInterface.cpp \
+              compiler/codegen/$(dvm_arch_variant)/LowerInvoke.cpp \
+              compiler/codegen/$(dvm_arch_variant)/LowerReturn.cpp \
+              compiler/codegen/$(dvm_arch_variant)/NcgHelper.cpp \
+              compiler/codegen/$(dvm_arch_variant)/LowerGetPut.cpp
+      ifeq ($(dvm_arch_variant),x86-atom)
+        # Intel x86-atom JIT support
+        LOCAL_SRC_FILES += \
+                compiler/codegen/x86-atom/NullCheckElim.cpp \
+                compiler/codegen/x86-atom/NcgCodegenO1.cpp \
+                compiler/codegen/x86-atom/Schedule.cpp \
+                compiler/codegen/x86-atom/DataFlow.cpp \
+                compiler/codegen/x86-atom/GlueOpt.cpp
+        LOCAL_C_INCLUDES += \
+                hardware/intel/apache-harmony
+        LOCAL_STATIC_LIBRARIES += \
+                libenc
+      else # Intel x86 JIT support
+        LOCAL_C_INCLUDES += \
+	        dalvik/vm/compiler/codegen/x86/libenc
 
+        LOCAL_SRC_FILES += \
+		compiler/codegen/x86/libenc/enc_base.cpp \
+		compiler/codegen/x86/libenc/dec_base.cpp \
+		compiler/codegen/x86/libenc/enc_wrapper.cpp \
+		compiler/codegen/x86/libenc/enc_tabl.cpp
+      endif
     endif
   endif
 endif
diff --git a/vm/Globals.h b/vm/Globals.h
index 29f7356..1bf695f 100644
--- a/vm/Globals.h
+++ b/vm/Globals.h
@@ -903,6 +903,9 @@ struct DvmJitGlobals {
     /* Flag to dump compiled binary code in bytes */
     bool printBinary;
 
+    /* Flag to control instruction scheduling */
+    bool scheduling;
+
     /* Per-process debug flag toggled when receiving a SIGUSR2 */
     bool receivedSIGUSR2;
 
diff --git a/vm/ReconfigureDvm.mk b/vm/ReconfigureDvm.mk
index d96c628..f4fb41d 100644
--- a/vm/ReconfigureDvm.mk
+++ b/vm/ReconfigureDvm.mk
@@ -19,6 +19,26 @@ dvm_os := $(TARGET_OS)
 dvm_arch := $(TARGET_ARCH)
 dvm_arch_variant := $(TARGET_ARCH_VARIANT)
 
+# uncomment to disable x86-atom variant
+#ifeq ($(dvm_arch_variant),x86-atom)
+#dvm_arch_variant := x86
+#endif
+
+# Use DALVIK_FI to make change to FI build version.
+ifeq ($(TARGET_ARCH),x86)
+    ifeq ($(DALVIK_FI),x86)
+        dvm_arch_variant := $(DALVIK_FI)
+    endif
+    ifeq ($(DALVIK_FI),x86-atom)
+        dvm_arch_variant := $(DALVIK_FI)
+    endif
+endif
+
+# X86 JIT is available only with x86-atom FI
+ifneq ($(dvm_arch_variant),x86-atom)
+    WITH_JIT := false
+endif
+
 include $(LOCAL_PATH)/Dvm.mk
 
 LOCAL_SHARED_LIBRARIES += \
diff --git a/vm/compiler/Compiler.cpp b/vm/compiler/Compiler.cpp
index e18e6e6..c8598ab 100644
--- a/vm/compiler/Compiler.cpp
+++ b/vm/compiler/Compiler.cpp
@@ -22,8 +22,8 @@
 #include "interp/Jit.h"
 #include "CompilerInternals.h"
 #ifdef ARCH_IA32
-#include "codegen/x86/Translator.h"
-#include "codegen/x86/Lower.h"
+#include "codegen/x86-atom/Translator.h"
+#include "codegen/x86-atom/Lower.h"
 #endif
 
 extern "C" void dvmCompilerTemplateStart(void);
diff --git a/vm/compiler/Compiler.h b/vm/compiler/Compiler.h
index 7af2809..d279ab4 100644
--- a/vm/compiler/Compiler.h
+++ b/vm/compiler/Compiler.h
@@ -48,6 +48,10 @@
 #define PROTECT_CODE_CACHE_ATTRS       (PROT_READ | PROT_EXEC)
 #define UNPROTECT_CODE_CACHE_ATTRS     (PROT_READ | PROT_EXEC | PROT_WRITE)
 
+#ifdef ARCH_IA32
+#define UNPROTECT_CODE_CACHE(addr, size)
+#define PROTECT_CODE_CACHE(addr, size)
+#else
 /* Acquire the lock before removing PROT_WRITE from the specified mem region */
 #define UNPROTECT_CODE_CACHE(addr, size)                                       \
     {                                                                          \
@@ -65,6 +69,7 @@
                  (PROTECT_CODE_CACHE_ATTRS));                                  \
         dvmUnlockMutex(&gDvmJit.codeCacheProtectionLock);                      \
     }
+#endif
 
 #define SINGLE_STEP_OP(opcode)                                                 \
     (gDvmJit.includeSelectedOp !=                                              \
diff --git a/vm/compiler/codegen/CompilerCodegen.h b/vm/compiler/codegen/CompilerCodegen.h
index f2b36a3..6fc7d7c 100644
--- a/vm/compiler/codegen/CompilerCodegen.h
+++ b/vm/compiler/codegen/CompilerCodegen.h
@@ -26,11 +26,7 @@
 bool dvmCompilerDoWork(CompilerWorkOrder *work);
 
 /* Lower middle-level IR to low-level IR */
-#ifndef ARCH_IA32
-void dvmCompilerMIR2LIR(CompilationUnit *cUnit);
-#else /* ARCH_IA32 */
 void dvmCompilerMIR2LIR(CompilationUnit *cUnit, JitTranslationInfo* info);
-#endif
 
 /* Lower middle-level IR to low-level IR for the whole method */
 void dvmCompilerMethodMIR2LIR(CompilationUnit *cUnit);
-- 
1.7.4.1

