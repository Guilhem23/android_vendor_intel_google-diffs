From 94b2221bc8c552ffc5bcb06c3843f4a925cccdc0 Mon Sep 17 00:00:00 2001
From: Serguei Katkov <serguei.i.katkov@intel.com>
Date: Fri, 20 Sep 2013 18:11:31 +0700
Subject: Dalvik: Fix the race in findClassNoInit

BZ: 139242

There is a possible race condition in findClassNoInit.
One thread can add a class object to hash table and start linking.
Other thread can detect the class object in a hash table and
wait for end of class loading by the first thread.
If linking fails the first thread will clean up the class object.
When the second system wakes up it will detect that error happened
and try to throw an exception however required descriptor field is
already zeroed.

Category: device-enablement
Domain: AOSP-Dalvik-Runtime
Origin: internal
Upstream-Candidate: yes

Change-Id: Ib2b32055b308edd2d3f7d4697a65bb0ae171035c
Orig-MCG-Change-Id: I3b3e4839fbbf41ce875310403d1e427fb6bb77a6
Signed-off-by: Serguei Katkov <serguei.i.katkov@intel.com>
Reviewed-on: http://android.intel.com:8080/133347
Reviewed-by: Beyler, Jean Christophe <jean.christophe.beyler@intel.com>
Reviewed-by: lab_aqa <lab_aqa@intel.com>
Reviewed-by: Lupusoru, Razvan A <razvan.a.lupusoru@intel.com>
Reviewed-by: Banerji, Udayan <udayan.banerji@intel.com>
Reviewed-by: Popov, Ivan G <ivan.g.popov@intel.com>
Reviewed-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Tested-by: Chen, Dong-Yuan <dong-yuan.chen@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 vm/oo/Class.cpp |   19 ++++++++++++-------
 1 files changed, 12 insertions(+), 7 deletions(-)

diff --git a/vm/oo/Class.cpp b/vm/oo/Class.cpp
index 88fb341..7ae6cbf 100644
--- a/vm/oo/Class.cpp
+++ b/vm/oo/Class.cpp
@@ -190,7 +190,7 @@ static bool createVtable(ClassObject* clazz);
 static bool createIftable(ClassObject* clazz);
 static bool insertMethodStubs(ClassObject* clazz);
 static bool computeFieldOffsets(ClassObject* clazz);
-static void throwEarlierClassFailure(ClassObject* clazz);
+static void throwEarlierClassFailure(ClassObject* clazz, const char* descriptor = 0);
 
 #if LOG_CLASS_LOADING
 /*
@@ -1693,8 +1693,12 @@ got_class:
             /*
              * Somebody else tried to load this and failed.  We need to raise
              * an exception and report failure.
+             * Handle the race condition: it is possible that when we were waiting for
+             * class loading by other thread, that loading ended up with an error.
+             * As a result descriptor field of the class is cleaned up.
+             * For this case we are providing descriptor explicitly.
              */
-            throwEarlierClassFailure(clazz);
+            throwEarlierClassFailure(clazz, descriptor);
             clazz = NULL;
             goto bail;
         }
@@ -3765,16 +3769,17 @@ static bool computeFieldOffsets(ClassObject* clazz)
  * failed in verification, in which case v2 5.4.1 says we need to re-throw
  * the previous error.
  */
-static void throwEarlierClassFailure(ClassObject* clazz)
+static void throwEarlierClassFailure(ClassObject* clazz, const char* descriptor)
 {
+    const char* desc = clazz->descriptor == 0 ? descriptor : clazz->descriptor;
+
     ALOGI("Rejecting re-init on previously-failed class %s v=%p",
-        clazz->descriptor, clazz->verifyErrorClass);
+        desc, clazz->verifyErrorClass);
 
     if (clazz->verifyErrorClass == NULL) {
-        dvmThrowNoClassDefFoundError(clazz->descriptor);
+        dvmThrowNoClassDefFoundError(desc);
     } else {
-        dvmThrowExceptionWithClassMessage(clazz->verifyErrorClass,
-            clazz->descriptor);
+        dvmThrowExceptionWithClassMessage(clazz->verifyErrorClass, desc);
     }
 }
 
-- 
1.7.4.1

