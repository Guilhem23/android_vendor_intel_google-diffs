From aefaf7c70331d147ab7cfb58e65dbce5a01c6699 Mon Sep 17 00:00:00 2001
From: Arun Ravindran <arun.ravindran@intel.com>
Date: Mon, 19 Nov 2012 17:10:54 +0200
Subject: [PORT FROM MAIN] Telephony: Fix wrong hangup request sent

BZ: 5267

If an incoming call is received while the ongoing call is
disconnected, incoming call is accepted automatically.
This is a corner case.

Hangup of the active call when there is no background call
is resulting in RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
request instead of RIL_REQUEST_HANGUP request. Due to this
incoming call is accepted automatically.

Change-Id: Ie04dd38fa46f0237ba97df61f11b89982530f58e
Orig-Change-Id: I536b0a32760893bd5d0c054efb012ad26ca44170
Category: aosp improvement
Domain: Telephony-Telephony-FWK
Origin: internal
Upstream-Candidate: yes
Signed-off-by: Jeevaka Badrappan <jeevaka.badrappan@intel.com>
Signed-off-by: Arun Ravindran <arun.ravindran@intel.com>
---
 .../internal/telephony/gsm/GsmCallTracker.java     |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/src/java/com/android/internal/telephony/gsm/GsmCallTracker.java b/src/java/com/android/internal/telephony/gsm/GsmCallTracker.java
index f07777e..d8678ac 100644
--- a/src/java/com/android/internal/telephony/gsm/GsmCallTracker.java
+++ b/src/java/com/android/internal/telephony/gsm/GsmCallTracker.java
@@ -761,6 +761,8 @@ public final class GsmCallTracker extends CallTracker {
                     log("(foregnd) hangup dialing or alerting...");
                 }
                 hangup((GsmConnection)(call.getConnections().get(0)));
+            } else if (mBackgroundCall.isIdle()) {
+                hangupAllConnections(call);
             } else {
                 hangupForegroundResumeBackground();
             }
-- 
1.7.4.1

