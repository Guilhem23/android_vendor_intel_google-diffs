From 60b9e2a02583ca3835873f4d81a06ecb573f2a1a Mon Sep 17 00:00:00 2001
From: Andre Amegah <andrex.amegah@intel.com>
Date: Tue, 30 Apr 2013 17:47:17 +0300
Subject: [PORT FROM MAIN] Telephony: Support for network seach mode change event

BZ: 63416

The STK Network Search Mode Change event is not supported
in Android framework.

This patch provides support for Network Search Mode Change
event.

Network Search Mode Change event is an USAT Event Download
command.

If an UICC Sat Application registers to this event through
SetUpEventList command and then, when the terminal detects
a change in current Network search mode (either manual
or automatic) the terminal will inform UICC Application
using an Envelope command.

Change-Id: I128d878a72236d51d5cc7cad4f413d445da147f9
Orig-Change-Id: I23048b011f6da1e634446c5546b17d2a6700ae55
Category: aosp improvement
Domain: Telephony-Telephony-FWK
Origin: internal
Upstream-Candidate: yes
Signed-off-by: Andre Amegah <andrex.amegah@intel.com>
Signed-off-by: Arun Ravindran <arun.ravindran@intel.com>
---
 .../android/internal/telephony/cat/CatService.java |   37 ++++++++++++++++++++
 1 files changed, 37 insertions(+), 0 deletions(-)

diff --git a/src/java/com/android/internal/telephony/cat/CatService.java b/src/java/com/android/internal/telephony/cat/CatService.java
index be39881..c8243ce 100644
--- a/src/java/com/android/internal/telephony/cat/CatService.java
+++ b/src/java/com/android/internal/telephony/cat/CatService.java
@@ -30,6 +30,7 @@ import android.os.HandlerThread;
 import android.os.Message;
 import android.os.RemoteException;
 import android.os.SystemProperties;
+import android.telephony.ServiceState;
 
 import com.android.internal.telephony.CommandsInterface;
 import com.android.internal.telephony.Phone;
@@ -100,6 +101,7 @@ public class CatService extends Handler implements AppInterface {
     static final int MSG_ID_SIM_READY                = 7;
 
     static final int MSG_ID_RIL_MSG_DECODED          = 10;
+    static final int MSG_ID_NETWORK_SEARCH_MODE_CHANGE   = 11;
 
     // Events to signal SIM presence or absent in the device.
     private static final int MSG_ID_ICC_RECORDS_LOADED       = 20;
@@ -115,6 +117,8 @@ public class CatService extends Handler implements AppInterface {
     static final int NETWORK_SELECTION_MODE_MANUAL         = 0x00;
     static final int NETWORK_SELECTION_MODE_AUTOMATIC      = 0x01;
 
+    private int mCurrentNetworkSelectionMode;
+
     static final String STK_DEFAULT = "Default Message";
 
     /* Intentionally private for singleton */
@@ -159,6 +163,7 @@ public class CatService extends Handler implements AppInterface {
         mCmdIf.unSetOnCatCallSetUp(this);
 
         removeCallbacksAndMessages(null);
+        PhoneFactory.getDefaultPhone().unregisterForServiceStateChanged(this);
     }
 
     @Override
@@ -386,6 +391,11 @@ public class CatService extends Handler implements AppInterface {
                     for (byte b : mEventList) {
                         CatLog.d(this, "Registered Event: " + b);
                     }
+                    if (isEventDownloadActive(EventCode.NETWORK_SEARCH_MODE_CHANGE.value())) {
+                        mCurrentNetworkSelectionMode = getNetworkSelectionMode();
+                        PhoneFactory.getDefaultPhone().registerForServiceStateChanged(
+                                this, MSG_ID_NETWORK_SEARCH_MODE_CHANGE, null);
+                    }
                 } else {
                     CatLog.d( this, "WARNING: No Event in event list!" );
                 }
@@ -768,6 +778,9 @@ public class CatService extends Handler implements AppInterface {
             CatLog.d(this, "SIM ready. Reporting STK service running now...");
             mCmdIf.reportStkServiceIsRunning(null);
             break;
+        case MSG_ID_NETWORK_SEARCH_MODE_CHANGE:
+            onNetworkSearchModeChange(msg);
+            break;
         default:
             throw new AssertionError("Unrecognized CAT command: " + msg.what);
         }
@@ -936,4 +949,28 @@ public class CatService extends Handler implements AppInterface {
 
         return isManual ? NETWORK_SELECTION_MODE_MANUAL : NETWORK_SELECTION_MODE_AUTOMATIC;
     }
+
+    private void onNetworkSearchModeChange(Message msg) {
+        if (isEventDownloadActive(EventCode.NETWORK_SEARCH_MODE_CHANGE.value())) {
+            ServiceState state = (ServiceState)((AsyncResult) msg.obj).result;
+
+            boolean isManual = state.getIsManualSelection();
+            int mode = isManual ? NETWORK_SELECTION_MODE_MANUAL : NETWORK_SELECTION_MODE_AUTOMATIC;
+
+            if ((mCurrentNetworkSelectionMode ^ mode) != 0) {
+                mCurrentNetworkSelectionMode = mode;
+                byte[] additionalInfo = new byte[3];
+                additionalInfo[0] = (byte)ComprehensionTlvTag.NETWORK_SEARCH_MODE.value();
+                additionalInfo[1] = 0x01;
+                additionalInfo[2] = (byte)mode;
+
+                CatLog.d(this, "Network selection mode is " + (isManual ? "MANUAL" : "AUTOMATIC"));
+
+                onEventDownload(new CatEventMessage(
+                        EventCode.NETWORK_SEARCH_MODE_CHANGE.value(), additionalInfo, false));
+            }
+        } else {
+            PhoneFactory.getDefaultPhone().unregisterForServiceStateChanged(this);
+        }
+    }
 }
-- 
1.7.4.1

