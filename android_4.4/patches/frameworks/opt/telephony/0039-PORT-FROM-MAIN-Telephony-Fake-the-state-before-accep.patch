From 9fc472dc9ca0065b4955b7e13575f91c960f4bf5 Mon Sep 17 00:00:00 2001
From: Jeevaka Badrappan <jeevaka.badrappan@intel.com>
Date: Thu, 13 Jun 2013 12:00:54 +0300
Subject: [PORT FROM MAIN] Telephony: Fake the state before accepting the call

BZ: 83868

Waiting call screen is shown again for few seconds
after accepting the waiting call.

Upon user accepting the waiting call, framework sends
RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE to
the vendor ril. Active call will be put on hold and
the waiting call will be connected. So, call hold status
comes first before the waiting call is connected.
This results in waiting call screen shown again.

Before accepting the waiting call, fake the active
call state to HOLD. This way call screen will be
updated only when the waiting call is connected.

Change-Id: I5d39cf24b932598d49419276a7666d52d9d854db
Orig-Change-Id: Ic63cbe0cd0cc941d8d64db47570aaea681d7ece0
Category: device enablement
Domain: Telephony-Telephony-FWK
Origin: internal
Upstream-Candidate: no, proprietary
Signed-off-by: Jeevaka Badrappan <jeevaka.badrappan@intel.com>
Signed-off-by: Arun Ravindran <arun.ravindran@intel.com>
---
 .../internal/telephony/gsm/GsmCallTracker.java     |    9 +++++----
 .../internal/telephony/gsm/GsmConnection.java      |    2 +-
 2 files changed, 6 insertions(+), 5 deletions(-)

diff --git a/src/java/com/android/internal/telephony/gsm/GsmCallTracker.java b/src/java/com/android/internal/telephony/gsm/GsmCallTracker.java
index ce17335..07b3c6e 100644
--- a/src/java/com/android/internal/telephony/gsm/GsmCallTracker.java
+++ b/src/java/com/android/internal/telephony/gsm/GsmCallTracker.java
@@ -168,17 +168,17 @@ public final class GsmCallTracker extends CallTracker {
     }
 
     private void
-    fakeHoldForegroundBeforeDial() {
+    fakeHoldForegroundBeforeDialOrAccept() {
         List<Connection> connCopy;
 
-        // We need to make a copy here, since fakeHoldBeforeDial()
+        // We need to make a copy here, since fakeHoldBeforeDialOrAccept()
         // modifies the lists, and we don't want to reverse the order
         connCopy = (List<Connection>) mForegroundCall.mConnections.clone();
 
         for (int i = 0, s = connCopy.size() ; i < s ; i++) {
             GsmConnection conn = (GsmConnection)connCopy.get(i);
 
-            conn.fakeHoldBeforeDial();
+            conn.fakeHoldBeforeDialOrAccept();
         }
     }
 
@@ -208,7 +208,7 @@ public final class GsmCallTracker extends CallTracker {
             // a) foregroundCall is empty for the newly dialed connection
             // b) hasNonHangupStateChanged remains false in the
             // next poll, so that we don't clear a failed dialing call
-            fakeHoldForegroundBeforeDial();
+            fakeHoldForegroundBeforeDialOrAccept();
         }
 
         if (mForegroundCall.getState() != GsmCall.State.IDLE) {
@@ -270,6 +270,7 @@ public final class GsmCallTracker extends CallTracker {
             mCi.acceptCall(obtainCompleteMessage());
         } else if (mRingingCall.getState() == GsmCall.State.WAITING) {
             setMute(false);
+            fakeHoldForegroundBeforeDialOrAccept();
             switchWaitingOrHoldingAndActive();
         } else {
             throw new CallStateException("phone not ringing");
diff --git a/src/java/com/android/internal/telephony/gsm/GsmConnection.java b/src/java/com/android/internal/telephony/gsm/GsmConnection.java
index b10a022..14097a4 100644
--- a/src/java/com/android/internal/telephony/gsm/GsmConnection.java
+++ b/src/java/com/android/internal/telephony/gsm/GsmConnection.java
@@ -505,7 +505,7 @@ public class GsmConnection extends Connection {
      * HOLDING in the backgroundCall
      */
     void
-    fakeHoldBeforeDial() {
+    fakeHoldBeforeDialOrAccept() {
         if (mParent != null) {
             mParent.detach(this);
         }
-- 
1.7.4.1

