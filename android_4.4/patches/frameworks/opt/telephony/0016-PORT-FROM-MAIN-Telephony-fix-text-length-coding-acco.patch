From 311487c3a39cef1113a3b2707769ad5392b8a0f3 Mon Sep 17 00:00:00 2001
From: Arun Ravindran <arun.ravindran@intel.com>
Date: Mon, 19 Nov 2012 16:09:55 +0200
Subject: [PORT FROM MAIN] Telephony: fix text length coding according to 3GPP spec

BZ: 2902 13417

When the text string of get inkey/input command is greater than
127 bytes, the length is not correctly coded in the terminal
response. See ETSI 101.220 chapter 7.1.2.

This patch review the coding of the length according to the 3GPP
spec.

Change-Id: Ibee1911635f5c1f3b8a19154c8b5e3ec905126a7
Orig-Change-Id: Icfa80aada68b409b045510002999fe2d72b503be
Category: aosp improvement
Domain: Telephony-Telephony-FWK
Origin: internal
Upstream-Candidate: yes
Signed-off-by: Nizar Haouati <nizar.haouati@intel.com>
Signed-off-by: Guillaume Lucas <guillaumex.lucas@intel.com>
Signed-off-by: Arun Ravindran <arun.ravindran@intel.com>
---
 .../internal/telephony/cat/ResponseData.java       |   38 ++++++++++++++++----
 1 files changed, 31 insertions(+), 7 deletions(-)

diff --git a/src/java/com/android/internal/telephony/cat/ResponseData.java b/src/java/com/android/internal/telephony/cat/ResponseData.java
index 4e98502..36c51e1 100644
--- a/src/java/com/android/internal/telephony/cat/ResponseData.java
+++ b/src/java/com/android/internal/telephony/cat/ResponseData.java
@@ -36,13 +36,22 @@ abstract class ResponseData {
     public abstract void format(ByteArrayOutputStream buf);
 
     public static void writeLength(ByteArrayOutputStream buf, int length) {
-        // As per ETSI 102.220 Sec7.1.2, if the total length is greater
-        // than 0x7F, it should be coded in two bytes and the first byte
-        // should be 0x81.
-        if (length > 0x7F) {
+        // Refer ETSI 101.220 Sec 7.1.2 for info on the length encoding
+        if (length < 128) {
+            buf.write(length);
+        } else if (length < 256) {
             buf.write(0x81);
+            buf.write(length & 0xff);
+        } else if (length < 65536) {
+            buf.write(0x82);
+            buf.write((length >> 8) & 0xff);
+            buf.write(length & 0xff);
+        } else {
+            buf.write(0x83);
+            buf.write((length >> 16) & 0xff);
+            buf.write((length >> 8) & 0xff);
+            buf.write(length & 0xff);
         }
-        buf.write(length);
     }
 }
 
@@ -114,7 +123,17 @@ class GetInkeyInputResponseData extends ResponseData {
                 // ETSI TS 102 223 8.15, should use the same format as in SMS messages
                 // on the network.
                 if (mIsUcs2) {
-                    // ucs2 is by definition big endian.
+                    int mHeaderLen =
+                         5 // Command details tag full len
+                         + 4 // Device identities tag full len
+                         + 3 // Result tag full len
+                         + 4; // String header len.
+                    // the max length of an APDU message is 0xFF
+                    // if string is too long, need truncate it.
+                    int mRemainLen = 0xFF - mHeaderLen;
+                    if (mInData.length() * 2 > mRemainLen) {
+                        mInData = mInData.substring(0, mRemainLen/2 - 1);
+                    }
                     data = mInData.getBytes("UTF-16BE");
                 } else if (mIsPacked) {
                     int size = mInData.length();
@@ -139,7 +158,12 @@ class GetInkeyInputResponseData extends ResponseData {
         }
 
         // length - one more for data coding scheme.
-        writeLength(buf, data.length + 1);
+        int length = data.length + 1;
+
+        if (length > 0x7F) {
+            buf.write(0x81);
+        }
+        buf.write(length);
 
         // data coding scheme
         if (mIsUcs2) {
-- 
1.7.4.1

