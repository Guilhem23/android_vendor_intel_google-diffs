From 8451c07cd9ca234708facdf6d93e631930514e4e Mon Sep 17 00:00:00 2001
From: James Rose <james.rose@intel.com>
Date: Tue, 20 Aug 2013 19:27:53 -0600
Subject: RS: Implement new CPU Intrinsic BlurHFU1_K for X86

BZ: 131884

Implementation of BlurHFU1_K CPU intrinsic using single precision
floating point arithmetic.  Performance improves by ~ 2.8x vs the
compiled, non-optimized version on X86 target devices.

Category: aosp improvement
Domain: AOSP-RenderScript
Origin: internal
Upstream-Candidate: yes

Change-Id: I0516afc8a959ffb0ff325222a07d9eecaab784aa
Orig-MCG-Change-Id: I0df8e9d61e9c8b416afa7c28a6d0a71c0ccdca3f
Signed-off-by: James Rose <james.rose@intel.com>
---
 cpu_ref/rsCpuIntrinsics_x86.c |   37 +++++++++++++++++++++++++++++++++++++
 1 files changed, 37 insertions(+), 0 deletions(-)

diff --git a/cpu_ref/rsCpuIntrinsics_x86.c b/cpu_ref/rsCpuIntrinsics_x86.c
index 8d2a2f9..4f419d7 100644
--- a/cpu_ref/rsCpuIntrinsics_x86.c
+++ b/cpu_ref/rsCpuIntrinsics_x86.c
@@ -429,6 +429,43 @@ void rsdIntrinsicBlurHFU4_K(void *dst,
     }
 }
 
+void rsdIntrinsicBlurHFU1_K(void *dst,
+                          const void *pin, const void *gptr,
+                          int rct, int x1, int x2) {
+    const __m128i Mu8 = _mm_set_epi32(0xffffffff, 0xffffffff, 0xffffffff, 0x0c080400);
+    const float *pi;
+    __m128 pf, g0, g1, g2, g3, gx, p0, p1;
+    __m128i o;
+    int r;
+
+    for (; x1 < x2; x1+=4) {
+        g0 = _mm_load_ss((const float *)gptr);
+        g0 = _mm_shuffle_ps(g0, g0, _MM_SHUFFLE(0, 0, 0, 0));
+
+        pi = (const float *)pin + x1;
+        pf = _mm_mul_ps(g0, _mm_loadu_ps(pi));
+
+        for (r = 1; r < rct; r += 4) {
+            gx = _mm_loadu_ps((const float *)gptr + r);
+            p0 = _mm_loadu_ps(pi + r);
+            p1 = _mm_loadu_ps(pi + r + 4);
+
+            g0 = _mm_shuffle_ps(gx, gx, _MM_SHUFFLE(0, 0, 0, 0));
+            pf = _mm_add_ps(pf, _mm_mul_ps(g0, p0));
+            g1 = _mm_shuffle_ps(gx, gx, _MM_SHUFFLE(1, 1, 1, 1));
+            pf = _mm_add_ps(pf, _mm_mul_ps(g1, _mm_alignr_epi8(p1, p0, 4)));
+            g2 = _mm_shuffle_ps(gx, gx, _MM_SHUFFLE(2, 2, 2, 2));
+            pf = _mm_add_ps(pf, _mm_mul_ps(g2, _mm_alignr_epi8(p1, p0, 8)));
+            g3 = _mm_shuffle_ps(gx, gx, _MM_SHUFFLE(3, 3, 3, 3));
+            pf = _mm_add_ps(pf, _mm_mul_ps(g3, _mm_alignr_epi8(p1, p0, 12)));
+        }
+
+        o = _mm_cvtps_epi32(pf);
+        *(int *)dst = _mm_cvtsi128_si32(_mm_shuffle_epi8(o, Mu8));
+        dst = (char *)dst + 4;
+    }
+}
+
 void rsdIntrinsicYuv_K(void *dst,
                        const unsigned char *pY, const unsigned char *pUV,
                        uint32_t count, const short *param) {
-- 
1.7.4.1

