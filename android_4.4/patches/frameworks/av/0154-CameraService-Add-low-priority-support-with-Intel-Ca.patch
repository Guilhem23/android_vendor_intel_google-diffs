From da4e497f1731212f1d865eeee5aa71a42e837195 Mon Sep 17 00:00:00 2001
From: Soren Friis <soren.friis@intel.com>
Date: Wed, 18 Sep 2013 16:36:03 +0300
Subject: CameraService: Add low priority support with Intel Cam Extension

BZ: 139717

The SmartTimeOut application is using the front camera and face
detection to determine whether a user is actually using the phone or
not. The viewfinder is not visible during this use case.
However, when the user then tries to open the normal camera
application while this is happening, the opening will fail.

Add support in the CameraService Layer for a low priority camera
instance that can be kicked out immediately when the user starts
any camera activity.

This is the second implementation of this feature. The first
implementation (Gerrit ID 133116) had to be reverted since it broke
the Google CTS.

Category: feature differentiation
Domain: Camera
Origin: internal
Upstream: no, proprietary

Depends on change-Id: I4221065e601d0bcd05d9c12ea8508355ef3ed59d

Change-Id: Idd2f1819cb6270661dd07adb5eb25e9ed78ee184
Orig-Change-Id: Ida5a4f5645dc5655c7f8d84c341d648fc54002de
Signed-off-by: Soren Friis <soren.friis@intel.com>
Reviewed-on: http://android.intel.com:8080/137925
Reviewed-by: Vtminen, LassiX <lassix.vtminen@intel.com>
Reviewed-by: Verdu, Miguel <miguel.verdu@intel.com>
Reviewed-by: Koski, Anttu <anttu.koski@intel.com>
Tested-by: Koski, Anttu <anttu.koski@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 camera/Camera.cpp                                  |    5 ++
 camera/CameraBase.cpp                              |   12 +++++
 camera/ICameraService.cpp                          |   17 ++++++
 include/camera/Camera.h                            |    1 +
 include/camera/CameraBase.h                        |    1 +
 include/camera/ICameraService.h                    |    4 ++
 services/camera/libcameraservice/CameraService.cpp |   52 +++++++++++++++++++-
 services/camera/libcameraservice/CameraService.h   |   15 ++++++
 8 files changed, 106 insertions(+), 1 deletions(-)

diff --git a/camera/Camera.cpp b/camera/Camera.cpp
index 22199fa..7b9e220 100644
--- a/camera/Camera.cpp
+++ b/camera/Camera.cpp
@@ -71,6 +71,11 @@ Camera::~Camera()
     // deadlock if we call any method of ICamera here.
 }
 
+status_t Camera::setPriority(int cameraId, bool lowPriority)
+{
+    return CameraBaseT::setPriority(cameraId, lowPriority);
+}
+
 sp<Camera> Camera::connect(int cameraId, const String16& clientPackageName,
         int clientUid)
 {
diff --git a/camera/CameraBase.cpp b/camera/CameraBase.cpp
index 55376b0..85e149f 100644
--- a/camera/CameraBase.cpp
+++ b/camera/CameraBase.cpp
@@ -91,6 +91,18 @@ const sp<ICameraService>& CameraBase<TCam, TCamTraits>::getCameraService()
 }
 
 template <typename TCam, typename TCamTraits>
+status_t CameraBase<TCam, TCamTraits>::setPriority(int cameraId, bool lowPriority)
+{
+   ALOGV("%s: setPriority", __FUNCTION__);
+   const sp<ICameraService>& cs = getCameraService();
+   if (cs != 0) {
+       return cs->setPriority(cameraId, lowPriority);
+   } else {
+       return UNKNOWN_ERROR;
+   }
+}
+
+template <typename TCam, typename TCamTraits>
 sp<TCam> CameraBase<TCam, TCamTraits>::connect(int cameraId,
                                                const String16& clientPackageName,
                                                int clientUid)
diff --git a/camera/ICameraService.cpp b/camera/ICameraService.cpp
index 5fc89fb..36f2122 100644
--- a/camera/ICameraService.cpp
+++ b/camera/ICameraService.cpp
@@ -143,6 +143,16 @@ public:
         return result;
     }
 
+    virtual status_t setPriority(int cameraId, bool lowPriority)
+    {
+        Parcel data, reply;
+        data.writeInterfaceToken(ICameraService::getInterfaceDescriptor());
+        data.writeInt32(cameraId);
+        data.writeInt32(lowPriority);
+        remote()->transact(BnCameraService::SET_PRIORITY, data, &reply);
+        return reply.readInt32();
+    }
+
     // connect to camera service (android.hardware.Camera)
     virtual status_t connect(const sp<ICameraClient>& cameraClient, int cameraId,
                              const String16 &clientPackageName, int clientUid,
@@ -275,6 +285,13 @@ status_t BnCameraService::onTransact(
             info.writeToParcel(reply);
             return NO_ERROR;
         } break;
+        case SET_PRIORITY: {
+            CHECK_INTERFACE(ICameraService, data, reply);
+            int32_t cameraId = data.readInt32();
+            bool lowPriority = data.readInt32();
+            reply->writeInt32(setPriority(cameraId, lowPriority));
+            return NO_ERROR;
+        } break;
         case CONNECT: {
             CHECK_INTERFACE(ICameraService, data, reply);
             sp<ICameraClient> cameraClient =
diff --git a/include/camera/Camera.h b/include/camera/Camera.h
index 79682b8..b84590a 100644
--- a/include/camera/Camera.h
+++ b/include/camera/Camera.h
@@ -70,6 +70,7 @@ public:
 
             // construct a camera client from an existing remote
     static  sp<Camera>  create(const sp<ICamera>& camera);
+    static  status_t    setPriority(int cameraId, bool lowPriority);
     static  sp<Camera>  connect(int cameraId,
                                 const String16& clientPackageName,
                                 int clientUid);
diff --git a/include/camera/CameraBase.h b/include/camera/CameraBase.h
index 1b93157..bf5c3cb 100644
--- a/include/camera/CameraBase.h
+++ b/include/camera/CameraBase.h
@@ -59,6 +59,7 @@ public:
     typedef typename TCamTraits::TCamCallbacks      TCamCallbacks;
     typedef typename TCamTraits::TCamConnectService TCamConnectService;
 
+    static status_t      setPriority(int cameraId, bool lowPriority);
     static sp<TCam>      connect(int cameraId,
                                  const String16& clientPackageName,
                                  int clientUid);
diff --git a/include/camera/ICameraService.h b/include/camera/ICameraService.h
index f342122..baf4825 100644
--- a/include/camera/ICameraService.h
+++ b/include/camera/ICameraService.h
@@ -41,6 +41,7 @@ public:
     enum {
         GET_NUMBER_OF_CAMERAS = IBinder::FIRST_CALL_TRANSACTION,
         GET_CAMERA_INFO,
+        SET_PRIORITY, // Intel
         CONNECT,
         CONNECT_PRO,
         CONNECT_DEVICE,
@@ -71,6 +72,9 @@ public:
     // - Errors: BAD_VALUE if specified listener was not in the listener list
     virtual status_t removeListener(const sp<ICameraServiceListener>& listener)
                                                                             = 0;
+
+    virtual status_t setPriority(int cameraId, bool lowPriority) = 0;
+
     /**
      * clientPackageName and clientUid are used for permissions checking.  if
      * clientUid == USE_CALLING_UID, then the calling UID is used instead. Only
diff --git a/services/camera/libcameraservice/CameraService.cpp b/services/camera/libcameraservice/CameraService.cpp
index eeedfc9..27e48d7 100644
--- a/services/camera/libcameraservice/CameraService.cpp
+++ b/services/camera/libcameraservice/CameraService.cpp
@@ -123,6 +123,7 @@ void CameraService::onFirstRef()
         }
         for (int i = 0; i < mNumberOfCameras; i++) {
             setCameraFree(i);
+            mLowPriorityPid[i] = -1;
         }
 
         if (mModule->common.module_api_version >=
@@ -402,6 +403,19 @@ bool CameraService::canConnectUnsafe(int cameraId,
     return true;
 }
 
+status_t CameraService::setPriority(int cameraId, bool lowPriority) {
+    if (cameraId < 0 || cameraId >= mNumberOfCameras) {
+        return BAD_VALUE;
+    }
+
+    if (lowPriority) {
+        mLowPriorityPid[cameraId] = getCallingPid();
+    } else {
+        mLowPriorityPid[cameraId] = -1;
+    }
+    return OK;
+}
+
 status_t CameraService::connect(
         const sp<ICameraClient>& cameraClient,
         int cameraId,
@@ -416,6 +430,27 @@ status_t CameraService::connect(
     LOG1("CameraService::connect E (pid %d \"%s\", id %d)", callingPid,
             clientName8.string(), cameraId);
 
+    if (mLowPriorityPid[cameraId] == callingPid) {
+        LOG1("%s: Low priority camera being requested", __FUNCTION__);
+        for (int i = 0; i < mNumberOfCameras; i++) {
+            if (mStatusList[i] != ICameraServiceListener::STATUS_PRESENT) {
+                LOG1("%s: One camera open already. Rejecting low priority "
+                        "request",__FUNCTION__);
+                return OK;
+            }
+        }
+    } else {
+        LOG1("%s: Normal priority request, checking for a running low "
+                "priority instance",__FUNCTION__);
+        for (int i = 0; i < mNumberOfCameras; i++) {
+            sp<BasicClient> client = mClient[i].promote();
+            if (client != NULL && client.get()->isLowPriorityClient()) {
+                LOG1("%s: Killing low priority camera instance", __FUNCTION__);
+                client.get()->serviceDisconnect();
+            }
+        }
+    }
+
     status_t status = validateConnect(cameraId, /*inout*/clientUid);
     if (status != OK) {
         return status;
@@ -476,6 +511,11 @@ status_t CameraService::connect(
             return status;
         }
 
+        if (client != NULL && mLowPriorityPid[cameraId] == callingPid) {
+            LOG1("%s: Created a low priority client instance", __FUNCTION__);
+            client.get()->setLowPriority();
+        }
+
         mClient[cameraId] = client;
         LOG1("CameraService::connect X (id %d, this pid is %d)", cameraId,
              getpid());
@@ -949,7 +989,8 @@ CameraService::BasicClient::BasicClient(const sp<CameraService>& cameraService,
         int cameraId, int cameraFacing,
         int clientPid, uid_t clientUid,
         int servicePid):
-        mClientPackageName(clientPackageName)
+        mClientPackageName(clientPackageName),
+        mLowPriorityClient(false)
 {
     mCameraService = cameraService;
     mRemoteBinder = remoteCallback;
@@ -1039,6 +1080,15 @@ void CameraService::BasicClient::opChanged(int32_t op, const String16& packageNa
     }
 }
 
+void CameraService::BasicClient::serviceDisconnect() {
+    // Reset the client PID to allow a server-initiated disconnect,
+    // and to prevent further calls by the client.
+    LOG1("%s: Forcing a server initiated disconnect", __FUNCTION__);
+    mClientPid = getCallingPid();
+    notifyError();
+    disconnect();
+}
+
 // ----------------------------------------------------------------------------
 
 Mutex* CameraService::Client::getClientLockFromCookie(void* user) {
diff --git a/services/camera/libcameraservice/CameraService.h b/services/camera/libcameraservice/CameraService.h
index ad6a582..cfed769 100644
--- a/services/camera/libcameraservice/CameraService.h
+++ b/services/camera/libcameraservice/CameraService.h
@@ -74,6 +74,8 @@ public:
     virtual status_t    getCameraCharacteristics(int cameraId,
                                                  CameraMetadata* cameraInfo);
 
+    virtual status_t    setPriority(int cameraId, bool priority);
+
     virtual status_t connect(const sp<ICameraClient>& cameraClient, int cameraId,
             const String16& clientPackageName, int clientUid,
             /*out*/
@@ -146,6 +148,11 @@ public:
 
         virtual status_t      dump(int fd, const Vector<String16>& args) = 0;
 
+        void serviceDisconnect();
+
+        bool                 isLowPriorityClient() { return mLowPriorityClient; }
+        void                 setLowPriority() { mLowPriorityClient = true; }
+
     protected:
         BasicClient(const sp<CameraService>& cameraService,
                 const sp<IBinder>& remoteCallback,
@@ -202,6 +209,11 @@ public:
 
         // IAppOpsCallback interface, indirected through opListener
         virtual void opChanged(int32_t op, const String16& packageName);
+
+        // When true, the client is running as a background activity and can be
+        // closed by the ServiceLayer when normal priority camera requests are
+        // started by the applications
+        bool                            mLowPriorityClient;
     }; // class BasicClient
 
     class Client : public BnCamera, public BasicClient
@@ -340,6 +352,9 @@ private:
     Mutex               mClientLock[MAX_CAMERAS]; // prevent Client destruction inside callbacks
     int                 mNumberOfCameras;
 
+    // A process can request a future camera instance to be low priority
+    int                 mLowPriorityPid[MAX_CAMERAS];
+
     typedef wp<ProClient> weak_pro_client_ptr;
     Vector<weak_pro_client_ptr> mProClientList[MAX_CAMERAS];
 
-- 
1.7.4.1

