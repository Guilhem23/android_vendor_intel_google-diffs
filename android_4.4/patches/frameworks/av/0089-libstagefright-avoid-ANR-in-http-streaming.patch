From 7f09ed1b1c6fc4d2fc06712d8a4cdacc3c9d7bff Mon Sep 17 00:00:00 2001
From: ywan171 <yi.a.wang@intel.com>
Date: Sun, 12 May 2013 22:33:46 +0800
Subject: libstagefright: avoid ANR in http streaming

BZ: 61400 91117 80682 130976

Orig-patch-id:
89925:Fix anr errors which blocked in setNativeWindow_l when play http straming.
Orig-Change-Id: Idd96ea4f585f0780676f5d49d3c87063c2e940bf

96076:libstagefright: when set new surface, resume the http data fetch after shutdown video Decoder.
Orig-Change-Id: Ic63001d32877fa8a2f7ba51978e903ee910d4ac3

79679:libstagefright: avoid reconnection of http blocking the reset operation
Orig-Change-Id: Ifb258b9e8ebadfb6f44140283b52805f14841823

130976:A fix to assign an initial value to mForceStop in NuCachedSource2.cpp
Orig-Change-Id: I934cf961aa328137637c1b0ff5e5c69e892fb394

Category:aosp improvement
Domain: Video.Media-video editor
Origin: internal
Upstream-Candidate: Yes

Change-Id: I1a044b6fd73d7dc39b97f5d52096c1472c630bdb
Signed-off-by: chuzhoux <chux.zhou@intel.com>
---
 media/libstagefright/AwesomePlayer.cpp         |   13 +++++++++++++
 media/libstagefright/NuCachedSource2.cpp       |   12 +++++++++++-
 media/libstagefright/include/NuCachedSource2.h |    3 +++
 3 files changed, 27 insertions(+), 1 deletions(-)

diff --git a/media/libstagefright/AwesomePlayer.cpp b/media/libstagefright/AwesomePlayer.cpp
index 811bc6c..9c421e7 100644
--- a/media/libstagefright/AwesomePlayer.cpp
+++ b/media/libstagefright/AwesomePlayer.cpp
@@ -524,6 +524,10 @@ void AwesomePlayer::reset_l() {
         addBatteryData(params);
     }
 
+    if (mCachedSource != NULL) {
+        mCachedSource->interrupt(true);
+    }
+
     if (mFlags & PREPARING) {
         modifyFlags(PREPARE_CANCELLED, SET);
         if (mConnectingDataSource != NULL) {
@@ -1367,8 +1371,17 @@ status_t AwesomePlayer::setNativeWindow_l(const sp<ANativeWindow> &native) {
     pause_l();
     mVideoRenderer.clear();
 
+    if (mCachedSource != NULL) {
+        // interrupt the retrying
+        mCachedSource->interrupt(true);
+    }
     shutdownVideoDecoder_l();
 
+    if (mCachedSource != NULL) {
+        // resume the caching
+        mCachedSource->interrupt(false);
+    }
+
     status_t err = initVideoDecoder();
 
     if (err != OK) {
diff --git a/media/libstagefright/NuCachedSource2.cpp b/media/libstagefright/NuCachedSource2.cpp
index 81c9a92..de3d097 100644
--- a/media/libstagefright/NuCachedSource2.cpp
+++ b/media/libstagefright/NuCachedSource2.cpp
@@ -189,6 +189,7 @@ NuCachedSource2::NuCachedSource2(
       mFinalStatus(OK),
       mLastAccessPos(0),
       mFetching(true),
+      mForceStop(false),
       mLastFetchTimeUs(-1),
       mNumRetriesLeft(kMaxNumRetries),
       mHighwaterThresholdBytes(kDefaultHighWaterThreshold),
@@ -562,7 +563,7 @@ ssize_t NuCachedSource2::readInternal(off64_t offset, void *data, size_t size) {
 
     size_t delta = offset - mCacheOffset;
 
-    if (mFinalStatus != OK && mNumRetriesLeft == 0) {
+    if (mFinalStatus != OK && (mNumRetriesLeft == 0 || mForceStop)) {
         if (delta >= mCache->totalSize()) {
             return mFinalStatus;
         }
@@ -712,4 +713,13 @@ void NuCachedSource2::RemoveCacheSpecificHeaders(
     }
 }
 
+void NuCachedSource2::interrupt(bool stop) {
+    Mutex::Autolock autolock(mLock);
+    mForceStop = stop;
+    if (mForceStop) {
+        HTTPBase *source = static_cast<HTTPBase *>(mSource.get());
+        source->disconnect();
+    }
+}
+
 }  // namespace android
diff --git a/media/libstagefright/include/NuCachedSource2.h b/media/libstagefright/include/NuCachedSource2.h
index 5db4b4b..a031ed8 100644
--- a/media/libstagefright/include/NuCachedSource2.h
+++ b/media/libstagefright/include/NuCachedSource2.h
@@ -51,6 +51,8 @@ struct NuCachedSource2 : public DataSource {
     size_t cachedSize();
     size_t approxDataRemaining(status_t *finalStatus) const;
 
+    void interrupt(bool stop = true);
+
     void resumeFetchingIfNecessary();
 
     // The following methods are supported only if the
@@ -103,6 +105,7 @@ private:
     off64_t mLastAccessPos;
     sp<AMessage> mAsyncResult;
     bool mFetching;
+    bool mForceStop;
     int64_t mLastFetchTimeUs;
 
     int32_t mNumRetriesLeft;
-- 
1.7.4.1

