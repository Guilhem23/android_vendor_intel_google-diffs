From 5cf493791bac78d457deb40127a3a21fceee0156 Mon Sep 17 00:00:00 2001
From: pdiopX <piotrx.diop@intel.com>
Date: Mon, 26 Nov 2012 16:21:08 +0100
Subject: Release A2DP wakelock when the A2DP stream is suspended

BZ: 63380
[CLEAN]

When in call, the phone couldn't enter S3 because the AudioOut tagged wakelock
corresponding to A2DP output was never released. This is due to an incoherency
between two variables:

1.mActiveTracks size which states that there's one active (but suspended)
track (for A2DP)

2.the mixer status which states that there's no currently active track
(since the A2DP stream is stopped during a call or a ringtone).

In that configuration, the threadloop recalculates endlessly a sleeptime for
the A2DP thread with a suspended stream until a new A2DP track is played after
hangup.

This patch fixes the detection and removal for suspended tracks from active
list in case of underrun, allowing the A2DP wakelock to be released.

Category: device enablement
Domain: AUDIO_MEDIA-Audio Flinger
Origin: internal
Upstream-Candidate: yes
Change-Id: I44b48d8dd0d248e26b76ae184f4467bbc8f1a0dc
Orig-Change-Id: I8d214684423f7b5509c8b575d95555cb86c0069d
Signed-off-by: Diop, PiotrX <piotrx.diop@intel.com>
---
 services/audioflinger/Threads.cpp |   12 +++++++++---
 1 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/services/audioflinger/Threads.cpp b/services/audioflinger/Threads.cpp
index bf85b51..5c76f9b 100644
--- a/services/audioflinger/Threads.cpp
+++ b/services/audioflinger/Threads.cpp
@@ -3211,9 +3211,15 @@ AudioFlinger::PlaybackThread::mixer_state AudioFlinger::MixerThread::prepareTrac
                 chain->clearInputBuffer();
             }
 
-            ALOGVV("track %d s=%08x [NOT READY] on thread %p", name, cblk->mServer, this);
-            if ((track->sharedBuffer() != 0) || track->isTerminated() ||
-                    track->isStopped() || track->isPaused()) {
+            ALOGVV("track %d u=%08x, s=%08x [NOT READY] on thread %p", name, cblk->user,
+                    cblk->server, this);
+
+            //Do not check if a suspended track has it's frames written to audio HAL.
+            //Proceed to underrun counting because we want to avoid having an audioOut thread enter
+            //an infinite sleep loop without releasing its wakelock as long as the track hasn't been
+            //restored.
+            if (((track->sharedBuffer() != 0) || track->isTerminated() ||
+                    track->isStopped() || track->isPaused()) && !mSuspended) {
                 // We have consumed all the buffers of this track.
                 // Remove it from the list of active tracks.
                 // TODO: use actual buffer filling status instead of latency when available from
-- 
1.7.4.1

