From f7de5a2ac59dd4980c3b65c59aae568e0e9608dc Mon Sep 17 00:00:00 2001
From: Bo Huang <bo.b.huang@intel.com>
Date: Sun, 9 Jun 2013 08:53:21 +0800
Subject: MTP Device: Parse USB3 descriptor for MTP initor;

BZ: 113375

MTP initor in Android only support MTP responder based on USB2.
Add support for MTP device based on USB3.

Category: AOSP Improvement
Domain: USB MTP-PTP
Origin: Internal
Upstream-Candidate: Yes

Change-Id: I5758c75c5137d197b0ed440ae72043d0e5d86d6a
Orig-Change-Id: Icb4a7be14fcab1abec1fe28c92626cea5e5a75d4
Signed-off-by: Bo Huang <bo.b.huang@intel.com>
---
 media/mtp/MtpDevice.cpp |   17 +++++++++++++++++
 1 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/media/mtp/MtpDevice.cpp b/media/mtp/MtpDevice.cpp
index d672dff..603b039 100644
--- a/media/mtp/MtpDevice.cpp
+++ b/media/mtp/MtpDevice.cpp
@@ -35,6 +35,14 @@
 #include <endian.h>
 
 #include <usbhost/usbhost.h>
+//LINUX_VERSION_CODE is 132626(2.6.18) for MR1
+//doesn't support the below defition.
+//Is workround to support MTP initor with USB3 host.
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 20)
+/*FROM the USB3.0 spec*/
+#define USB_DT_SS_ENDPOINT_COMP  0x30
+#endif
+
 
 namespace android {
 
@@ -131,13 +139,22 @@ MtpDevice* MtpDevice::open(const char* deviceName, int fd) {
             struct usb_endpoint_descriptor *ep_in_desc = NULL;
             struct usb_endpoint_descriptor *ep_out_desc = NULL;
             struct usb_endpoint_descriptor *ep_intr_desc = NULL;
+            //USB3 add USB_DT_SS_ENDPOINT_COMP as companion descriptor;
+            struct usb_ss_ep_comp_descriptor *ep_ss_ep_comp_desc = NULL;
             for (int i = 0; i < 3; i++) {
                 ep = (struct usb_endpoint_descriptor *)usb_descriptor_iter_next(&iter);
+                if (!ep || ep->bDescriptorType == USB_DT_SS_ENDPOINT_COMP) {
+                    ALOGD("Descriptor type is USB_DT_SS_ENDPOINT_COMP for USB3 \n");
+                    ep_ss_ep_comp_desc = (usb_ss_ep_comp_descriptor*)ep;
+                    ep = (struct usb_endpoint_descriptor *)usb_descriptor_iter_next(&iter);
+                 }
+
                 if (!ep || ep->bDescriptorType != USB_DT_ENDPOINT) {
                     ALOGE("endpoints not found\n");
                     usb_device_close(device);
                     return NULL;
                 }
+
                 if (ep->bmAttributes == USB_ENDPOINT_XFER_BULK) {
                     if (ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK)
                         ep_in_desc = ep;
-- 
1.7.4.1

