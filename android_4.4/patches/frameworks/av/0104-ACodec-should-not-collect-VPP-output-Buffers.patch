From f139a597f31cc0d383c5abce4488cf7b9faf5ca8 Mon Sep 17 00:00:00 2001
From: Yu, Linda <linda.yu@intel.com>
Date: Fri, 27 Sep 2013 12:37:42 +0800
Subject: ACodec should not collect VPP output Buffers

BZ: 140283

ACodec will collect all undequeued buffer in flushing state including
the VPP buffers, in this way, VPP could not dequeue the needed buffers,
so when vpp enabled, we have to reserve some buffers for VPP

Category: feature differentiation
Domain: Video.Media-VPP
Origin:  internal
Upstream-Candidate: No

Change-Id: I9f4abf500cf8407112dde99f624c2a505ad00ef3
Orig-Change-Id: Ifbd384152a6ef448ee905a0fae29fd12c82a3634
Signed-off-by: Yu, Linda <linda.yu@intel.com>
Reviewed-on: http://android.intel.com:8080/134567
Reviewed-by: Wang, Xigui <xigui.wang@intel.com>
Reviewed-by: Shi, PingX <pingx.shi@intel.com>
Tested-by: Shi, PingX <pingx.shi@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 media/libstagefright/ACodec.cpp |   59 +++++++++++++++++---------------------
 1 files changed, 26 insertions(+), 33 deletions(-)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index baa0da2..1970789 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -2562,6 +2562,31 @@ void ACodec::waitUntilAllPossibleNativeWindowBuffersAreReturnedToUs() {
         minUndequeuedBufs += 2;
     }
 
+#ifdef TARGET_HAS_VPP
+    // VPP will handle the buffers it owns, so ACodec does not need to own it
+    // if ACodec owns it in some case, e.g. flushing state, VPP will lose its buffers
+    size_t count = 0;
+    size_t bufNum = mBuffers[kPortIndexOutput].size();
+    while (count < bufNum) {
+        count ++;
+        size_t n = 0;
+        for (size_t i = 0; i < bufNum; ++i) {
+            const BufferInfo &info = mBuffers[kPortIndexOutput].itemAt(i);
+
+            if (info.mStatus != BufferInfo::OWNED_BY_NATIVE_WINDOW
+                    && info.mStatus != BufferInfo::OWNED_BY_VPP) {
+                ++n;
+            }
+        }
+        if ((n < bufNum - minUndequeuedBufs - mVppOutBufNum)
+                && dequeueBufferFromNativeWindow() != NULL) {
+            LOGI("ACodec dequeuebuffer at waitUntilAllPossibleNativeWindowBuffersAreReturnedToUs");
+            continue;
+        }
+        break;
+    }
+
+#else
     while (countBuffersOwnedByNativeWindow() > (size_t)minUndequeuedBufs
             && dequeueBufferFromNativeWindow() != NULL) {
         // these buffers will be submitted as regular buffers; account for this
@@ -2569,6 +2594,7 @@ void ACodec::waitUntilAllPossibleNativeWindowBuffersAreReturnedToUs() {
             --mMetaDataBuffersToSubmit;
         }
     }
+#endif
 }
 
 bool ACodec::allYourBuffersAreBelongToUs(
@@ -5077,40 +5103,7 @@ bool ACodec::FlushingState::onOMXEvent(
 }
 
 void ACodec::FlushingState::onOutputBufferDrained(const sp<AMessage> &msg) {
-#ifdef TARGET_HAS_VPP
-    IOMX::buffer_id bufferID;
-    CHECK(msg->findPointer("buffer-id", &bufferID));
-
-    ssize_t index;
-    BufferInfo *info =
-        mCodec->findBufferByID(kPortIndexOutput, bufferID, &index);
-
-    //TODO: debug info, to be deleted
-    int64_t time = -1;
-    info->mData->meta()->findInt64("timeUs", &time);
-    if (info->mGraphicBuffer.get() != NULL)
-        LOGV("flushing state: info = %p, status = %d, time = %lld, graphicBuffer = %p", info, info->mStatus, time, info->mGraphicBuffer.get());
-
-    CHECK((info->mStatus == BufferInfo::OWNED_BY_DOWNSTREAM)
-            ||(info->mStatus == BufferInfo::OWNED_BY_VPP));
-
-    int32_t vppOutput = 0;
-    // force to reuse vpp output in flushing state
-    // to avoid its buffer dequeued by ACodec in waitUntilAllPossibleNativeWindowBuffersAreReturnedToUs()
-    if (msg->findInt32("vppOutput", &vppOutput) && vppOutput == 1) {
-        //LOGI("VPP output, force to reuse it in flushing state");
-        sp<AMessage> vppNotifyConsumed;
-        CHECK(msg->findMessage("vppNotifyConsumed", &vppNotifyConsumed));
-        info->mStatus = BufferInfo::OWNED_BY_VPP;
-
-        vppNotifyConsumed->setInt32("reuse", true);
-        vppNotifyConsumed->post();
-    } else {
-        BaseState::onOutputBufferDrained(msg);
-    }
-#else
     BaseState::onOutputBufferDrained(msg);
-#endif
 
     changeStateIfWeOwnAllBuffers();
 }
-- 
1.7.4.1

