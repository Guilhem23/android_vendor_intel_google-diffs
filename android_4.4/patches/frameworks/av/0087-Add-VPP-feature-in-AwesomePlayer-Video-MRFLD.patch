From c17f35fda43a89a039ae377cb3fbd1747aaf7ab5 Mon Sep 17 00:00:00 2001
From: wang, Lili <lili.a.wang@intel.com>
Date: Mon, 22 Oct 2012 05:53:17 +0800
Subject: Add VPP feature in AwesomePlayer [Video-MRFLD]

BZ: 63472 81353 83087 83081 99736 97082 97560 110029 95641 106080 127403

Add VPP feature in Awesomeplayer: Modify code to conduct VPP filters for decoded YUV data from decoder before
it's rendered out.

Original authors:
wanglili <lili.a.wang@intel.com>
Yu, Linda <linda.yu@intel.com>
Jason Hu <jason.hu@intel.com>

Original pathes:
122115, BZ: 63472, Add function invoke in AwesomePlayer for VPP feature
122116, BZ: 81353, Fix integration issue and refine code to support VPP on MRFLD
122117, BZ: 83087, Ignore the dequeued buffer in OMXCodec if it's still been used by VPP.
122118, BZ: 83081, Modify Makefile to adopt GFX buffer extension
122119, BZ: 99736, Remove VPPProcessor init operation in AwesomePlayer.
122120, BZ: 97082, libstagefright: destroy vpp processor when loading software codec
122121, BZ: 97560, Disable VPP for http streaming playback.
122122, BZ: 110029, Remove fps CHECK to avoid crash when fps info cannot be extracted.
122124, BZ: 95641, libstagefright: Pass OMX buffer flag to buffer info struct.
122528, BZ: 106080, Fix AwesomePlayer class misalignment
125189, BZ: 127403, Release video buffer owned by client before delete VPPProcessor.

1, Insert VPP construction and destruction into initVideoDecoder
and shutdownVideoDecoder.

2, Add two APIs in OMXCodec to set buffer number needed by VPP.

3, Enhance VPP handling in AwesomePlayer::onVideoEvent().

4, Refine code based on prototype patch http://android.intel.com:8080/#/c/70979/.

5, Ignore the dequeued buffer in OMXCodec if it's still been used by VPP.
  The rendered buffer have been returned back to native window, but
they may be still needed in VSP. If OMXCodec dequeued a buffer
which is still being used by VSP, we'll keep it dequeued out and
continue to dequeue another one, until finding a valid buffer which
is really free. While for the extra dequeued buffer, after the buffer
is useless for VSP, it will be released accordingly.

6. Modify Makefile to adopt GFX buffer extension.
  In order to support VPP, we extended GFX buffer number from 32
to 64, and should add configuration to adopt this for MRFLD platform.

7. destroy vpp processor when loading software codec.
  VPP module can't support software codec right now. So destroy vpp processor
when loading software codec.

8. Disable VPP for http streaming playback.
  HTTP streamming will invoke AwesomePlayer, and object type of
mVideoSource is different to local playback, which needs to be
distinguished. And we will firstly disable VPP for streaming until
NuPlayer ready to verify together.

9. Remove fps CHECK to avoid crash when fps info cannot be extracted.
  fps info is needed for VPP/FRC, but if it cannot be fetched,
only VPP/FRC is impaced. So CHECK should be replaced by a better
error handling to support more cases.

10 libstagefright: Pass OMX buffer flag to buffer info struct.
   This info is used by intel VPP module.

11. Fix AwesomePlayer class misalignment
  Defines TARGET_HAS_VPP in the Android.mk of the projects including
AwesomePlayer.h so that the class definition is the same for
every component using it.

12. Release video buffer owned by client before delete VPPProcessor.
  In AwesomePlayer::shutdownVideoDecoder_l(), mVideoBuffer should be released
before delete VPPProcessor, to make sure all VPP output buffers are released
correctly.

Category: feature differentiation
Domain: Video.Media-VPP
Origin:  internal
Upstream-Candidate: No

Change-Id: Ibc22058225324fd23092e166b23ea3c375122126
Orig-Change-Id: I24e20b83967cf0352934615d1cb598b4b62c06dc
Orig-Change-Id: Ia0c40ede1475b1b2a5fe565bb459374f7b18f9da
Orig-Change-Id: Ib6375d121f0027f3f03c528fb381a9836914f1fd
Orig-Change-Id: Ic4d6a1e0aaf9f600b09112be90fac8edcb244b1d
Orig-Change-Id: I3c4c4be61f798c24e98b0a39e7b348700acbc10a
Orig-Change-Id: I88d904c400698c2577f37a56ebd865412d5df422
Orig-Change-Id: I6c53403beb80c359c4c7794665f6dc2c22ef1c10
Orig-Change-Id: I5514c75ee945dcd8af4de65bf5a7019330c30036
Orig-Change-Id: Ib0ca7151482d823b37233280749181fe6f3c6c89
Orig-Change-Id: I212e7355baf67c414875edb23e49d357767ba1f3
Orig-Change-Id: Ie4f9e346884c17e5a5cfd72f4dfa19a0a4066124

Signed-off-by: wanglili <lili.a.wang@intel.com>
Signed-off-by: Yu, Linda <linda.yu@intel.com>
Signed-off-by: Jason Hu <jason.hu@intel.com>
Signed-off-by: Xigui Wang <xigui.wang@intel.com>
---
 include/media/stagefright/OMXCodec.h            |   21 ++
 media/libmediaplayerservice/Android.mk          |    8 +
 media/libstagefright/Android.mk                 |   11 +
 media/libstagefright/AwesomePlayer.cpp          |  223 ++++++++++++++++++++++-
 media/libstagefright/OMXCodec.cpp               |  104 +++++++++++-
 media/libstagefright/colorconversion/Android.mk |    7 +
 media/libstagefright/include/AwesomePlayer.h    |   12 ++
 7 files changed, 383 insertions(+), 3 deletions(-)

diff --git a/include/media/stagefright/OMXCodec.h b/include/media/stagefright/OMXCodec.h
index 9072b71..e1ecc82 100644
--- a/include/media/stagefright/OMXCodec.h
+++ b/include/media/stagefright/OMXCodec.h
@@ -33,6 +33,9 @@ class MemoryDealer;
 struct OMXCodecObserver;
 struct CodecProfileLevel;
 class SkipCutBuffer;
+#ifdef TARGET_HAS_VPP
+class VPPProcessor;
+#endif
 
 struct OMXCodec : public MediaSource,
                   public MediaBufferObserver {
@@ -120,6 +123,11 @@ struct OMXCodec : public MediaSource,
 
     static bool findCodecQuirks(const char *componentName, uint32_t *quirks);
 
+#ifdef TARGET_HAS_VPP
+    void setVppBufferNum(uint32_t inBufNum, uint32_t outBufNum);
+    bool isVppBufferAvail();
+#endif
+
 protected:
     virtual ~OMXCodec();
 
@@ -128,6 +136,13 @@ private:
     // Make sure mLock is accessible to OMXCodecObserver
     friend class OMXCodecObserver;
 
+#ifdef TARGET_HAS_VPP
+    // Make sure BufferInfo is accessible in VPPProcessor
+    friend class VPPProcessor;
+    uint32_t mVppInBufNum;
+    uint32_t mVppOutBufNum;
+#endif
+
     // Call this with mLock hold
     void on_message(const omx_message &msg);
 
@@ -161,6 +176,9 @@ private:
         OWNED_BY_COMPONENT,
         OWNED_BY_NATIVE_WINDOW,
         OWNED_BY_CLIENT,
+#ifdef TARGET_HAS_VPP
+        OWNED_BY_VPP,
+#endif
     };
 
     struct BufferInfo {
@@ -170,6 +188,9 @@ private:
         size_t mSize;
         void *mData;
         MediaBuffer *mMediaBuffer;
+#ifdef TARGET_HAS_VPP
+        uint32_t mFlags;
+#endif
     };
 
     struct CodecSpecificData {
diff --git a/media/libmediaplayerservice/Android.mk b/media/libmediaplayerservice/Android.mk
index 8f21632..79a76b5 100644
--- a/media/libmediaplayerservice/Android.mk
+++ b/media/libmediaplayerservice/Android.mk
@@ -52,6 +52,14 @@ LOCAL_C_INCLUDES :=                                                 \
     $(TOP)/frameworks/native/include/media/openmax                  \
     $(TOP)/external/tremolo/Tremolo                                 \
 
+#VPP support on MRFLD only
+ifeq ($(TARGET_HAS_VPP), true)
+    LOCAL_CFLAGS += -DTARGET_HAS_VPP -DGFX_BUF_EXT
+    LOCAL_C_INCLUDES += \
+        $(TARGET_OUT_HEADERS)/libmedia_utils_vpp \
+        $(TARGET_OUT_HEADERS)/libva
+endif
+
 LOCAL_MODULE:= libmediaplayerservice
 
 include $(BUILD_SHARED_LIBRARY)
diff --git a/media/libstagefright/Android.mk b/media/libstagefright/Android.mk
index 10c04da..d72582e 100644
--- a/media/libstagefright/Android.mk
+++ b/media/libstagefright/Android.mk
@@ -106,6 +106,17 @@ LOCAL_STATIC_LIBRARIES := \
         libFLAC \
         libmedia_helper
 
+ifeq ($(TARGET_HAS_VPP),true)
+LOCAL_CFLAGS += -DTARGET_HAS_VPP -DGFX_BUF_EXT
+LOCAL_C_INCLUDES += \
+        $(TARGET_OUT_HEADERS)/libmedia_utils_vpp \
+        $(TARGET_OUT_HEADERS)/libva
+LOCAL_STATIC_LIBRARIES += libvpp
+LOCAL_SHARED_LIBRARIES += libva \
+                          libva-android \
+                          libva-tpi
+endif
+
 ifeq ($(USE_INTEL_MDP),true)
 LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/media_codecs
 
diff --git a/media/libstagefright/AwesomePlayer.cpp b/media/libstagefright/AwesomePlayer.cpp
index 0f4f07c..811bc6c 100644
--- a/media/libstagefright/AwesomePlayer.cpp
+++ b/media/libstagefright/AwesomePlayer.cpp
@@ -208,6 +208,9 @@ AwesomePlayer::AwesomePlayer()
       mExtractorFlags(0),
       mVideoBuffer(NULL),
       mDecryptHandle(NULL),
+#ifdef TARGET_HAS_VPP
+      mVPPProcessor(NULL),
+#endif
       mLastVideoTimeUs(-1),
       mTextDriver(NULL),
       mOffloadAudio(false),
@@ -1329,6 +1332,13 @@ void AwesomePlayer::shutdownVideoDecoder_l() {
         mVideoBuffer = NULL;
     }
 
+#ifdef TARGET_HAS_VPP
+    if (mVPPProcessor != NULL) {
+        delete mVPPProcessor;
+        mVPPProcessor = NULL;
+    }
+#endif
+
     mVideoSource->stop();
 
     // The following hack is necessary to ensure that the OMX
@@ -1598,6 +1608,42 @@ void AwesomePlayer::setVideoSource(sp<MediaSource> source) {
     mVideoTrack = source;
 }
 
+#ifdef TARGET_HAS_VPP
+VPPProcessor* AwesomePlayer::createVppProcessor_l() {
+    VPPProcessor* processor = NULL;
+
+    if (mNativeWindow == NULL)
+        return processor;
+
+    if (VPPProcessor::isVppOn()) {
+        VPPVideoInfo info;
+        sp<MetaData> meta = NULL;
+        int32_t width, height, fps;
+        width = height = fps = 0;
+        memset(&info, 0, sizeof(VPPVideoInfo));
+        if (mVideoTrack != NULL)
+            meta = mVideoTrack->getFormat();
+        if (meta != NULL && !meta->findInt32(kKeyFrameRate, &fps)) {
+            ALOGW("No frame rate info found");
+            fps = 0;
+        }
+        if (mVideoSource != NULL) {
+            meta = mVideoSource->getFormat();
+            if (meta != NULL) {
+                CHECK(meta->findInt32(kKeyWidth, &width));
+                CHECK(meta->findInt32(kKeyHeight, &height));
+            }
+        }
+        info.fps = fps;
+        info.width = width;
+        info.height = height;
+        OMXCodec* omxCodec = (OMXCodec*) (mVideoSource.get());
+        processor = new VPPProcessor(mNativeWindow, omxCodec, &info);
+    }
+    return processor;
+}
+#endif
+
 status_t AwesomePlayer::initVideoDecoder(uint32_t flags) {
     ATRACE_CALL();
 
@@ -1682,6 +1728,29 @@ status_t AwesomePlayer::initVideoDecoder(uint32_t flags) {
             }
         }
 
+#ifdef TARGET_HAS_VPP
+        if (mVPPProcessor != NULL) {
+            delete mVPPProcessor;
+            mVPPProcessor = NULL;
+        }
+        mVPPProcessor = createVppProcessor_l();
+        OMXCodec* omxCodec;
+        if (mCachedSource != NULL) {
+#if 1
+            // FIXME: Disable VPP/FRC for http streaming so far
+            if (mVPPProcessor != NULL) {
+                delete mVPPProcessor;
+                mVPPProcessor = NULL;
+            }
+#else
+            AsyncOMXCodecWrapper* wrapper = ((AsyncOMXCodecWrapper*) (mVideoSource.get()));
+            omxCodec = (OMXCodec*) ((wrapper->getOMXCodec()).get());
+#endif
+        } else
+            omxCodec = (OMXCodec*) (mVideoSource.get());
+        if (mVPPProcessor != NULL)
+            omxCodec->setVppBufferNum(mVPPProcessor->mInputBufferNum, mVPPProcessor->mOutputBufferNum);
+#endif
         status_t err = mVideoSource->start();
 
         if (err != OK) {
@@ -1689,6 +1758,20 @@ status_t AwesomePlayer::initVideoDecoder(uint32_t flags) {
             mVideoSource.clear();
             return err;
         }
+#ifdef TARGET_HAS_VPP
+        if (mVPPProcessor != NULL) {
+            bool success = omxCodec->isVppBufferAvail();
+            if (success) {
+                if(err != VPP_OK) {
+                    delete mVPPProcessor;
+                    mVPPProcessor = NULL;
+                }
+            } else {
+                delete mVPPProcessor;
+                mVPPProcessor = NULL;
+            }
+        }
+#endif
     }
 
     if (mVideoSource != NULL) {
@@ -1779,6 +1862,9 @@ void AwesomePlayer::onVideoEvent() {
     }
     mVideoEventPending = false;
 
+#ifdef TARGET_HAS_VPP
+    if (mVPPProcessor == NULL) {
+#endif
     if (mSeeking != NO_SEEK) {
         if (mVideoBuffer) {
             mVideoBuffer->release();
@@ -1803,7 +1889,6 @@ void AwesomePlayer::onVideoEvent() {
             mAudioSource->pause();
         }
     }
-
     if (!mVideoBuffer) {
         MediaSource::ReadOptions options;
         if (mSeeking != NO_SEEK) {
@@ -1877,6 +1962,142 @@ void AwesomePlayer::onVideoEvent() {
             ++mStats.mNumVideoFramesDecoded;
         }
     }
+#ifdef TARGET_HAS_VPP
+    } else {
+    if (mSeeking != NO_SEEK) {
+        if (mVideoBuffer) {
+            mVideoBuffer->release();
+            mVideoBuffer = NULL;
+        }
+
+        mVPPProcessor->seek();
+
+        if (mSeeking == SEEK && isStreamingHTTP() && mAudioSource != NULL
+                && !(mFlags & SEEK_PREVIEW)) {
+            // We're going to seek the video source first, followed by
+            // the audio source.
+            // In order to avoid jumps in the DataSource offset caused by
+            // the audio codec prefetching data from the old locations
+            // while the video codec is already reading data from the new
+            // locations, we'll "pause" the audio source, causing it to
+            // stop reading input data until a subsequent seek.
+
+            if (mAudioPlayer != NULL && (mFlags & AUDIO_RUNNING)) {
+                mAudioPlayer->pause();
+
+                modifyFlags(AUDIO_RUNNING, CLEAR);
+            }
+            mAudioSource->pause();
+        }
+    }
+
+    MediaBuffer *tmpVideoBuffer = mVideoBuffer;
+    mVideoBuffer = NULL;
+
+    if(mVPPProcessor->canSetDecoderBufferToVPP()) {
+    if (!mVideoBuffer) {
+        MediaSource::ReadOptions options;
+        if (mSeeking != NO_SEEK) {
+            ALOGV("seeking to %lld us (%.2f secs)", mSeekTimeUs, mSeekTimeUs / 1E6);
+
+            options.setSeekTo(
+                    mSeekTimeUs,
+                    mSeeking == SEEK_VIDEO_ONLY
+                        ? MediaSource::ReadOptions::SEEK_NEXT_SYNC
+                        : MediaSource::ReadOptions::SEEK_CLOSEST_SYNC);
+        }
+        for (;;) {
+            status_t err = mVideoSource->read(&mVideoBuffer, &options);
+            options.clearSeekTo();
+
+            if (err != OK) {
+                CHECK(mVideoBuffer == NULL);
+
+                if (err == INFO_FORMAT_CHANGED) {
+                    ALOGV("VideoSource signalled format change.");
+
+                    notifyVideoSize_l();
+
+                    if (mVideoRenderer != NULL) {
+                        mVideoRendererIsPreview = false;
+                        initRenderer_l();
+                    }
+                    continue;
+                }
+
+                // So video playback is complete, but we may still have
+                // a seek request pending that needs to be applied
+                // to the audio track.
+                SeekType seekTemp = mSeeking;
+                if (mSeeking != NO_SEEK) {
+                    ALOGV("video stream ended while seeking!");
+                }
+                finishSeekIfNecessary(-1);
+
+                if (mAudioPlayer != NULL
+                        && !(mFlags & (AUDIO_RUNNING | SEEK_PREVIEW))) {
+                    startAudioPlayer_l();
+                }
+
+                if (seekTemp != NO_SEEK) {
+                    modifyFlags(AUDIO_AT_EOS, SET); // video is eos, end the audio?
+                    mVideoTimeUs = mSeekTimeUs;
+                }
+                mVPPProcessor->setEOS();
+
+                //modifyFlags(VIDEO_AT_EOS, SET);
+                //postStreamDoneEvent_l(err);
+                //return;
+                break;
+            }
+
+            if (mVideoBuffer->range_length() == 0) {
+                // Some decoders, notably the PV AVC software decoder
+                // return spurious empty buffers that we just want to ignore.
+
+                mVideoBuffer->release();
+                mVideoBuffer = NULL;
+                continue;
+            }
+
+            break;
+        }
+
+        ALOGV("SET DATA %p\n", mVideoBuffer);
+        if (mVPPProcessor->setDecoderBufferToVPP(mVideoBuffer) == VPP_OK) {
+            mVideoBuffer = NULL;
+        }
+
+        {
+            Mutex::Autolock autoLock(mStatsLock);
+            ++mStats.mNumVideoFramesDecoded;
+        }
+    }
+    }
+
+    mVideoBuffer = tmpVideoBuffer;
+    if (!mVideoBuffer) {
+        status_t err = mVPPProcessor->read(&mVideoBuffer);
+        if (err == ERROR_END_OF_STREAM) {
+            ALOGV("VPP finished");
+            CHECK(mVideoBuffer == NULL);
+            modifyFlags(VIDEO_AT_EOS, SET);
+            postStreamDoneEvent_l(err);
+            return;
+        } else if (err == VPP_BUFFER_NOT_READY) {
+            ALOGV("no available buffer to rend, try later");
+            postVideoEvent_l(100);
+            return;
+        } else if (err == VPP_FAIL) {
+            ALOGE("error happens, delete VPPProcessor and continue playback");
+            delete mVPPProcessor;
+            mVPPProcessor = NULL;
+            postVideoEvent_l(100);
+        }
+        ALOGV("read mVideoBuffer = %p", mVideoBuffer);
+    }
+    }
+#endif
 
     int64_t timeUs;
     CHECK(mVideoBuffer->meta_data()->findInt64(kKeyTime, &timeUs));
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index 4165c5f..f13fc8c 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -57,6 +57,10 @@
 #include "VAVideoDecoder.h"
 #endif
 
+#ifdef TARGET_HAS_VPP
+#include "VPPProcessor.h"
+#endif
+
 namespace android {
 
 // Treat time out as an error if we have not received any output
@@ -1501,6 +1505,10 @@ OMXCodec::OMXCodec(
         const sp<MediaSource> &source,
         const sp<ANativeWindow> &nativeWindow)
     : mOMX(omx),
+#ifdef TARGET_HAS_VPP
+      mVppInBufNum(0),
+      mVppOutBufNum(0),
+#endif
       mOMXLivesLocally(omx->livesLocally(node, getpid())),
       mNode(node),
       mQuirks(quirks),
@@ -1889,6 +1897,18 @@ status_t OMXCodec::applyRotation() {
     return err;
 }
 
+#ifdef TARGET_HAS_VPP
+void OMXCodec::setVppBufferNum(uint32_t inBufNum, uint32_t outBufNum) {
+    mVppInBufNum = inBufNum;
+    mVppOutBufNum = outBufNum;
+}
+
+bool OMXCodec::isVppBufferAvail() {
+    if (mVppInBufNum == 0) return false;
+    return true;
+}
+#endif
+
 status_t OMXCodec::allocateOutputBuffersFromNativeWindow() {
     // Get the number of buffers needed.
     OMX_PARAM_PORTDEFINITIONTYPE def;
@@ -1990,6 +2010,46 @@ status_t OMXCodec::allocateOutputBuffersFromNativeWindow() {
         }
     }
 
+#ifdef TARGET_HAS_VPP
+    //add more buffers
+    bool isVppOn = VPPProcessor::isVppOn();
+    if (isVppOn) {
+        ALOGE("def.nBufferCountActual = %d",def.nBufferCountActual);
+        int totalBufferCount = def.nBufferCountActual + mVppInBufNum + mVppOutBufNum;
+
+        err = native_window_set_buffer_count(
+                mNativeWindow.get(), totalBufferCount);
+        if (err == 0) {
+            def.nBufferCountActual = totalBufferCount;
+            err = mOMX->setParameter(
+                    mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
+            if (err != OK) {
+                CODEC_LOGE("setting nBufferCountActual to %lu failed: %d",
+                    def.nBufferCountActual, err);
+                return err;
+            }
+        } else {
+            err = native_window_set_buffer_count(
+                mNativeWindow.get(), def.nBufferCountActual);
+            if (err == 0) {
+                mVppInBufNum = 0;
+                mVppOutBufNum = 0;
+            } else {
+                ALOGE("native_window_set_buffer_count failed: %s (%d)", strerror(-err),
+                        -err);
+                return err;
+            }
+        }
+    } else {
+        err = native_window_set_buffer_count(
+                mNativeWindow.get(), def.nBufferCountActual);
+        if (err != 0) {
+            ALOGE("native_window_set_buffer_count failed: %s (%d)", strerror(-err),
+                    -err);
+            return err;
+        }
+    }
+#else
     err = native_window_set_buffer_count(
             mNativeWindow.get(), def.nBufferCountActual);
     if (err != 0) {
@@ -1997,6 +2057,7 @@ status_t OMXCodec::allocateOutputBuffersFromNativeWindow() {
                 -err);
         return err;
     }
+#endif
 
     CODEC_LOGV("allocating %lu buffers from a native window of size %lu on "
             "output port", def.nBufferCountActual, def.nBufferSize);
@@ -2044,7 +2105,15 @@ status_t OMXCodec::allocateOutputBuffersFromNativeWindow() {
         cancelEnd = mPortBuffers[kPortIndexOutput].size();
     } else {
         // Return the last two buffers to the native window.
+#ifdef TARGET_HAS_VPP
+        if (isVppOn) {
+            cancelStart = def.nBufferCountActual - minUndequeuedBufs - mVppOutBufNum;
+        } else {
+            cancelStart = def.nBufferCountActual - minUndequeuedBufs;
+        }
+#else
         cancelStart = def.nBufferCountActual - minUndequeuedBufs;
+#endif
         cancelEnd = def.nBufferCountActual;
     }
 
@@ -2068,6 +2137,9 @@ status_t OMXCodec::cancelBufferToNativeWindow(BufferInfo *info) {
       return err;
     }
     info->mStatus = OWNED_BY_NATIVE_WINDOW;
+#ifdef TARGET_HAS_VPP
+    info->mMediaBuffer->setObserver(NULL);
+#endif
     return OK;
 }
 
@@ -2075,6 +2147,9 @@ OMXCodec::BufferInfo* OMXCodec::dequeueBufferFromNativeWindow() {
     // Dequeue the next buffer from the native window.
     ANativeWindowBuffer* buf;
     int fenceFd = -1;
+#ifdef TARGET_HAS_VPP
+    while (1) {
+#endif
     int err = native_window_dequeue_buffer_and_wait(mNativeWindow.get(), &buf);
     if (err != 0) {
       CODEC_LOGE("dequeueBuffer failed w/ error 0x%08x", err);
@@ -2102,6 +2177,22 @@ OMXCodec::BufferInfo* OMXCodec::dequeueBufferFromNativeWindow() {
         return 0;
     }
 
+#ifdef TARGET_HAS_VPP
+    if (bufInfo->mStatus == OWNED_BY_CLIENT) {
+        // It's still been used by VPP, so clear kKeyRendered flag
+        // to make sure it will be cancelled by VPP later, and then
+        // continue to dequeue a valid one
+        MediaBuffer* mediaBuffer = bufInfo->mMediaBuffer;
+        CODEC_LOGV("dequeued a buffer used by VPP");
+        sp<MetaData> metaData = mediaBuffer->meta_data();
+        metaData->setInt32(kKeyRendered, 0);
+        continue;
+    }
+    else
+        break;
+    }// while end
+    bufInfo->mMediaBuffer->setObserver(this);
+#endif
     // The native window no longer owns the buffer.
     CHECK_EQ((int)bufInfo->mStatus, (int)OWNED_BY_NATIVE_WINDOW);
     bufInfo->mStatus = OWNED_BY_US;
@@ -2357,7 +2448,9 @@ void OMXCodec::on_message(const omx_message &msg) {
 
             CHECK(i < buffers->size());
             BufferInfo *info = &buffers->editItemAt(i);
-
+#ifdef TARGET_HAS_VPP
+            info->mFlags = flags;
+#endif
             if (info->mStatus != OWNED_BY_COMPONENT) {
                 ALOGW("We already own output buffer %p, yet received "
                      "a FILL_BUFFER_DONE.", buffer);
@@ -2954,7 +3047,11 @@ status_t OMXCodec::freeBuffersOnPort(
         }
 
         CHECK(info->mStatus == OWNED_BY_US
-                || info->mStatus == OWNED_BY_NATIVE_WINDOW);
+                || info->mStatus == OWNED_BY_NATIVE_WINDOW
+#ifdef TARGET_HAS_VPP
+                || info->mStatus == OWNED_BY_VPP
+#endif
+        );
 
         CODEC_LOGV("freeing buffer %p on port %ld", info->mBuffer, portIndex);
 
@@ -4169,6 +4266,9 @@ void OMXCodec::signalBufferReturned(MediaBuffer *buffer) {
                     }
                 }
 
+#ifdef TARGET_HAS_VPP
+                info->mMediaBuffer->setObserver(NULL);
+#endif
                 info->mStatus = OWNED_BY_NATIVE_WINDOW;
 
                 // Dequeue the next buffer from the native window.
diff --git a/media/libstagefright/colorconversion/Android.mk b/media/libstagefright/colorconversion/Android.mk
index 59a64ba..8ea4ed3 100644
--- a/media/libstagefright/colorconversion/Android.mk
+++ b/media/libstagefright/colorconversion/Android.mk
@@ -9,6 +9,13 @@ LOCAL_C_INCLUDES := \
         $(TOP)/frameworks/native/include/media/openmax \
         $(TOP)/hardware/msm7k
 
+ifeq ($(TARGET_HAS_VPP),true)
+LOCAL_CFLAGS += -DTARGET_HAS_VPP -DGFX_BUF_EXT
+LOCAL_C_INCLUDES += \
+        $(TARGET_OUT_HEADERS)/libmedia_utils_vpp \
+        $(TARGET_OUT_HEADERS)/libva
+endif
+
 LOCAL_MODULE:= libstagefright_color_conversion
 
 include $(BUILD_STATIC_LIBRARY)
diff --git a/media/libstagefright/include/AwesomePlayer.h b/media/libstagefright/include/AwesomePlayer.h
index 271df8e..ddb68c4 100644
--- a/media/libstagefright/include/AwesomePlayer.h
+++ b/media/libstagefright/include/AwesomePlayer.h
@@ -21,6 +21,11 @@
 #include "HTTPBase.h"
 #include "TimedEventQueue.h"
 
+#ifdef TARGET_HAS_VPP
+#include "VPPProcessor.h"
+#include <media/stagefright/OMXCodec.h>
+#endif
+
 #include <media/MediaPlayerInterface.h>
 #include <media/stagefright/DataSource.h>
 #include <media/stagefright/OMXClient.h>
@@ -240,6 +245,10 @@ private:
     DrmManagerClient *mDrmManagerClient;
     sp<DecryptHandle> mDecryptHandle;
 
+#ifdef TARGET_HAS_VPP
+    VPPProcessor *mVPPProcessor;
+#endif
+
     int64_t mLastVideoTimeUs;
     TimedTextDriver *mTextDriver;
 
@@ -266,6 +275,9 @@ private:
 
 
     void setVideoSource(sp<MediaSource> source);
+#ifdef TARGET_HAS_VPP
+    VPPProcessor* createVppProcessor_l();
+#endif
     status_t initVideoDecoder(uint32_t flags = 0);
 
     void addTextSource_l(size_t trackIndex, const sp<MediaSource>& source);
-- 
1.7.4.1

