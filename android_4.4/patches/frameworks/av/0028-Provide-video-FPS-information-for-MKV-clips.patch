From 5a6a4049a5e741e6e319636631b7ad590d829fbe Mon Sep 17 00:00:00 2001
From: Dan Liang <dan.liang@intel.com>
Date: Tue, 30 Apr 2013 14:23:54 +0800
Subject: Provide video FPS information for MKV clips

BZ: 40523

Sometimes the FPS information is not contained in MKV clips,
so we have to calculates the FPS information ourselves.
Add function to calculate video framerate info according to
video timestamp and frame count.

Category: aosp improvement
Domain: Video.Media-container
Origin: internal
Upstream-Candidate: yes

Change-Id: Iff73a0ffb4d206264493c9a67512a828cb8b4571
Orig-Change-Id: If286bc5053bb94ae1cb78baf62e583c9716a8470
Signed-off-by: wfeng6 <wei.feng@intel.com>
Signed-off-by: Dan Liang <dan.liang@intel.com>
Signed-off-by: Yuanjun Huang <yuanjun.huang@intel.com>
---
 .../libstagefright/matroska/MatroskaExtractor.cpp  |   44 ++++++++++++++++++++
 media/libstagefright/matroska/MatroskaExtractor.h  |    2 +
 2 files changed, 46 insertions(+), 0 deletions(-)

diff --git a/media/libstagefright/matroska/MatroskaExtractor.cpp b/media/libstagefright/matroska/MatroskaExtractor.cpp
index d260d0f..4640c1c 100644
--- a/media/libstagefright/matroska/MatroskaExtractor.cpp
+++ b/media/libstagefright/matroska/MatroskaExtractor.cpp
@@ -878,6 +878,15 @@ void MatroskaExtractor::addTracks() {
                     continue;
                 }
 
+                int32_t frame_rate = vtrack->GetFrameRate();
+                if (frame_rate <= 0){
+                    CalulateFrameRate(&frame_rate,track->GetNumber());
+                }
+                if (frame_rate > 0) {
+                    meta->setInt32(kKeyFrameRate, frame_rate);
+                }
+                ALOGI("frameRate = %d", frame_rate);
+
                 meta->setInt32(kKeyWidth, vtrack->GetWidth());
                 meta->setInt32(kKeyHeight, vtrack->GetHeight());
                 break;
@@ -929,6 +938,41 @@ void MatroskaExtractor::addTracks() {
         trackInfo->mMeta = meta;
     }
 }
+static int compareTimeCode(const int64_t* timeUs1, const int64_t* timeUs2) {
+
+    if (*timeUs1 < *timeUs2)
+        return -1;
+    else if (*timeUs1 > *timeUs2)
+        return 1;
+    else
+        return 0;
+}
+
+void MatroskaExtractor::CalulateFrameRate(int32_t* framerate, int32_t trackNum) {
+    *framerate = 0;
+    Vector<int64_t> blockTimeArray;
+    blockTimeArray.clear();
+    BlockIterator iter(this, trackNum);
+    for(int i = 0; i < 50; i++) {
+        if (iter.eos()) {
+            break;
+        }
+        blockTimeArray.push(iter.blockTimeUs());
+        iter.advance();
+    }
+    blockTimeArray.sort(compareTimeCode); // sort by PTS
+    int32_t count = blockTimeArray.size();
+    if (count < 1)
+        return;
+    // remove the last 8 items.
+    count = count > 9 ? (count - 8) : count;
+    int64_t beginTimeUs = blockTimeArray.itemAt(0);;
+    int64_t endTimeUs = blockTimeArray.itemAt(count - 1);
+    int64_t duration = endTimeUs - beginTimeUs;
+    if (duration != 0) {
+        *framerate = ((count - 1) * 1000000LL + (duration >> 1)) / duration;
+    }
+}
 
 void MatroskaExtractor::findThumbnails() {
     for (size_t i = 0; i < mTracks.size(); ++i) {
diff --git a/media/libstagefright/matroska/MatroskaExtractor.h b/media/libstagefright/matroska/MatroskaExtractor.h
index 1294b4f..6e0b455 100644
--- a/media/libstagefright/matroska/MatroskaExtractor.h
+++ b/media/libstagefright/matroska/MatroskaExtractor.h
@@ -77,6 +77,8 @@ private:
 
     MatroskaExtractor(const MatroskaExtractor &);
     MatroskaExtractor &operator=(const MatroskaExtractor &);
+
+    void CalulateFrameRate(int32_t* framerate, int32_t trackNum);
 };
 
 bool SniffMatroska(
-- 
1.7.4.1

