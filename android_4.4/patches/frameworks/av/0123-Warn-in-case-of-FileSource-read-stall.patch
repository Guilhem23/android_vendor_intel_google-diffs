From 8e40323f9a952044b44df1e67d0d39b5a35c26c1 Mon Sep 17 00:00:00 2001
From: Seb Haezebrouck <sebastien.haezebrouck@intel.com>
Date: Wed, 14 Nov 2012 14:15:38 +0100
Subject: Warn in case of FileSource read stall

BZ: 72036

Audio glitches are sometimes heard during audio playback
from eMMC/SD.
One of the root causes of this issue is that
reads from external media can sometimes take a long time.
This patch adds a warning in case the FileSource read takes
longer than an arbitrary delay (here 100 ms), so that the
cases where audio glitches come from slow media access can
be easily and directly identified from the log.

The overhead introduced by the logging is minimal.

Category: AOSP Improvement
Domain: AUDIO_MEDIA-Audio Framework
Origin: Internal
Upstream-Candidate: no, proprietary

Orig-Change-Id: Id8c8b19474d761d599627530686d6a34e0caf978

Change-Id: Ibdc97931f9ffd8c177aa2a26761d28cf6e642971
Signed-off-by: Seb Haezebrouck <sebastien.haezebrouck@intel.com>
Reviewed-on: http://android.intel.com:8080/82035
Reviewed-by: M, Arulselvan <arulselvan.m@intel.com>
Tested-by: M, Arulselvan <arulselvan.m@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
Signed-off-by: Arulselvan M <arulselvan.m@intel.com>
---
 media/libstagefright/FileSource.cpp |   17 ++++++++++++++++-
 1 files changed, 16 insertions(+), 1 deletions(-)

diff --git a/media/libstagefright/FileSource.cpp b/media/libstagefright/FileSource.cpp
index c5e7ea6..bfc90fe 100644
--- a/media/libstagefright/FileSource.cpp
+++ b/media/libstagefright/FileSource.cpp
@@ -14,6 +14,7 @@
  * limitations under the License.
  */
 
+#define LOG_TAG "FileSource"
 #include <media/stagefright/foundation/ADebug.h>
 #include <media/stagefright/FileSource.h>
 #include <sys/types.h>
@@ -22,6 +23,8 @@
 #include <sys/stat.h>
 #include <fcntl.h>
 
+#define MAX_READ_TIME_US 100000 // Arbitrary - to be able to detect long stalls of filesource
+
 namespace android {
 
 FileSourceBuffer::FileSourceBuffer() {
@@ -193,7 +196,13 @@ ssize_t FileSource::readAt(off64_t offset, void *data, size_t size) {
             == mDecryptHandle->decryptApiType) {
         return readAtDRM(offset, data, size);
    } else {
+        nsecs_t now = systemTime();
         int ret = mBuffer.readFromBuffer(offset + mOffset, data, size, mFd);
+        unsigned int t = ns2us(systemTime() - now);
+        if ( t > MAX_READ_TIME_US ) {
+            ALOGE("Source file read took too long: %d us (%d bytes)\n", t, ret);
+        }
+
         // ret >= 0 is the number of bytes read
         if (ret >= 0) {
             return ret;
@@ -204,7 +213,13 @@ ssize_t FileSource::readAt(off64_t offset, void *data, size_t size) {
             return UNKNOWN_ERROR;
         }
 
-        return ::read(mFd, data, size);
+        now = systemTime();
+        int res = ::read(mFd, data, size);
+        t = ns2us(systemTime() - now);
+        if ( t > MAX_READ_TIME_US ) {
+            ALOGE("Direct source file read took too long: %d us (%d bytes)\n", t, res);
+        }
+        return res;
     }
 }
 
-- 
1.7.4.1

