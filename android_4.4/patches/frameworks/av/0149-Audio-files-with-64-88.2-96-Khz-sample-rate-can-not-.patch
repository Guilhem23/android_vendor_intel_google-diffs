From bb6c7a33d1543d594cc6d34d8e41c8b8eb44b0b5 Mon Sep 17 00:00:00 2001
From: Arulselvan M <arulselvan.m@intel.com>
Date: Fri, 31 May 2013 00:04:22 +0530
Subject: Audio files with 64/88.2/96 Khz sample rate can not play.

BZ: 56363

The issue is due to the initial check verifying whether the
sampling rate is supported by Intel SRC and then playing
only the Intel SRC supported sampling rates. Putting this
check only for larger sampling rates > 2*(maximum supported
sampling rate) will allow the files having sampling rates
(64/88.2 Khz) <= 2*(maximum supported sampling rate),
that are not supported by Intel SRC to be played. Putting a
check for Intel SRC supported sampling rates in AudioTrack
will allow files having sampling rate of 96 Khz to be
played. This patch also enables logs for AudioResampler and
AudioResamplerIA.

Category: Feature Differentiation
Domain: AUDIO_MEDIA-Audio Framework
Origin: Internal
Upstream-Candidate: no, proprietary

Change-Id: I729a82890d4d0a711983e2da96f850fd7e625cf3
Orig-Change-Id: Ief741aabe7274de729727852a349d27cfa10d740
Signed-off-by: Charitardha <satya.charitardha.jayanti@intel.com>
Signed-off-by: Arulselvan M <arulselvan.m@intel.com>
---
 media/libmedia/Android.mk                  |    6 ++++++
 media/libmedia/AudioTrack.cpp              |   13 ++++++++++---
 services/audioflinger/AudioResampler.cpp   |    2 +-
 services/audioflinger/AudioResamplerIA.cpp |    2 +-
 services/audioflinger/Threads.cpp          |    8 ++++----
 5 files changed, 22 insertions(+), 9 deletions(-)

diff --git a/media/libmedia/Android.mk b/media/libmedia/Android.mk
index e05c88b..857a3ce 100644
--- a/media/libmedia/Android.mk
+++ b/media/libmedia/Android.mk
@@ -98,4 +98,10 @@ LOCAL_C_INCLUDES := \
     $(call include-path-for, audio-effects) \
     $(call include-path-for, audio-utils)
 
+ifeq ($(USE_INTEL_SRC), true)
+  LOCAL_CFLAGS += -DUSE_INTEL_SRC
+  LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/libaudioresample
+  LOCAL_SHARED_LIBRARIES += libaudioresample
+endif
+
 include $(BUILD_SHARED_LIBRARY)
diff --git a/media/libmedia/AudioTrack.cpp b/media/libmedia/AudioTrack.cpp
index 489517f..79eb9ab 100644
--- a/media/libmedia/AudioTrack.cpp
+++ b/media/libmedia/AudioTrack.cpp
@@ -31,6 +31,11 @@
 #define WAIT_STREAM_END_TIMEOUT_SEC     120
 
 
+#ifdef USE_INTEL_SRC
+#include "iasrc_resampler.h"
+#endif
+
+#define DEFAULT_MULTIPLIER 1
 namespace android {
 // ---------------------------------------------------------------------------
 
@@ -585,9 +590,11 @@ status_t AudioTrack::setSampleRate(uint32_t rate)
         return NO_INIT;
     }
     // Resampler implementation limits input sampling rate to 2 x output sampling rate.
-    if (rate == 0 || rate > afSamplingRate*2 ) {
-        return BAD_VALUE;
-    }
+    if ((rate <= 0 || rate > afSamplingRate*2)
+#ifdef USE_INTEL_SRC
+    && !iaresamplib_supported_conversion(rate, afSamplingRate)
+#endif
+    ) return BAD_VALUE;
 
     AutoMutex lock(mLock);
     mSampleRate = rate;
diff --git a/services/audioflinger/AudioResampler.cpp b/services/audioflinger/AudioResampler.cpp
index c8fb3b9..5712a56 100644
--- a/services/audioflinger/AudioResampler.cpp
+++ b/services/audioflinger/AudioResampler.cpp
@@ -209,7 +209,7 @@ AudioResampler* AudioResampler::create(int bitDepth, int inChannelCount,
     case INTEL_MED_QUALITY:
     case INTEL_HIGH_QUALITY:
     case INTEL_VERY_HIGH_QUALITY:
-        LOGV("Create intel  Resampler");
+        ALOGV("Create intel  Resampler");
         resampler = new AudioResamplerIA(bitDepth, inChannelCount, sampleRate);
         break;
 #endif
diff --git a/services/audioflinger/AudioResamplerIA.cpp b/services/audioflinger/AudioResamplerIA.cpp
index cc19fc8..6726977 100644
--- a/services/audioflinger/AudioResamplerIA.cpp
+++ b/services/audioflinger/AudioResamplerIA.cpp
@@ -70,7 +70,7 @@ void AudioResamplerIA::setSampleRate(int32_t inSampleRate)
         delete [] mFloatOut;
         mFloatOut = new float[(mMaxInputBufferSize+64)*mSampleRate/mInSampleRate];
         mReinitNeeded = 0;
-        LOGD("Create AudioResamplerIA Resampler: Input rate %i, output rate %i",
+        ALOGD("Create AudioResamplerIA Resampler: Input rate %i, output rate %i",
              mInSampleRate, mSampleRate);
     }
 }
diff --git a/services/audioflinger/Threads.cpp b/services/audioflinger/Threads.cpp
index 069d20b..1cb1051 100644
--- a/services/audioflinger/Threads.cpp
+++ b/services/audioflinger/Threads.cpp
@@ -1289,13 +1289,13 @@ sp<AudioFlinger::PlaybackThread::Track> AudioFlinger::PlaybackThread::createTrac
                 lStatus = BAD_VALUE;
                 goto Exit;
         }
+         // Resampler implementation limits input sampling rate to 2 x output sampling rate.
+        if ((sampleRate > mSampleRate*2)
 #ifdef USE_INTEL_SRC
         //check if Intel SRC support this conversion
-        if (!AudioResamplerIA::sampleRateSupported(sampleRate, mSampleRate)) {
-#else
-        // Resampler implementation limits input sampling rate to 2 x output sampling rate.
-        if (sampleRate > mSampleRate*2) {
+        && (!AudioResamplerIA::sampleRateSupported(sampleRate, mSampleRate))
 #endif
+        ) {
             ALOGE("Sample rate out of range: %u mSampleRate %u", sampleRate, mSampleRate);
             lStatus = BAD_VALUE;
             goto Exit;
-- 
1.7.4.1

