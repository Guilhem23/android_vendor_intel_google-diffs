From b94556f9fb5a5757de462fbe1fea31f368a24654 Mon Sep 17 00:00:00 2001
From: ywan171 <yi.a.wang@intel.com>
Date: Tue, 6 Aug 2013 15:38:29 +0800
Subject: libstagefright - crash when disconnected

BZ: 113958

The content of mTracks won't be cleaned when handling 'abor',
some flags/variables would be cleaned later when handling message
"tear," then the operations on mTracks would be performed many times.
Some flags and variables are cleared in handling this message. It is
too premature. Access units and SR could still be received and they
need to be processed after message 'abor'. Without those flags and
variables, a crash happens.
borqsbtx: 0024526
borqsbtx: 0023554

Category: aosp improvement
Domain: Video.Media-streaming
Origin: internal
Upstream-Candidate: yes

Change-Id: Ia7b9760e8e776b431fbc9991f7f3f0d25c24a7e3
Orig-Change-Id: I02826411b14d446dbfbcd92e735dcd5c54c0fc1d
Signed-off-by: ywan171 <yi.a.wang@intel.com>
Signed-off-by: chuzhoux <chux.zhou@intel.com>
---
 media/libstagefright/rtsp/MyHandler.h |   45 ++++++++++++++++++++++-----------
 1 files changed, 30 insertions(+), 15 deletions(-)

diff --git a/media/libstagefright/rtsp/MyHandler.h b/media/libstagefright/rtsp/MyHandler.h
index 210de04..a0f0ba3 100644
--- a/media/libstagefright/rtsp/MyHandler.h
+++ b/media/libstagefright/rtsp/MyHandler.h
@@ -161,6 +161,11 @@ struct MyHandler : public AHandler {
         mSessionHost = host;
     }
 
+    ~MyHandler() {
+        ALOGI("MyHandler destroy");
+        mTracks.clear();
+    }
+
     void connect() {
         looper()->registerHandler(mConn);
         (1 ? mNetLooper : looper())->registerHandler(mRTPConn);
@@ -206,9 +211,13 @@ struct MyHandler : public AHandler {
     }
 
     void disconnect() {
-        (new AMessage('abor', id()))->post();
-        sp<AMessage> timeout = new AMessage('tdto', id());
-        timeout->post(kTearDownTimeoutUs);
+        if (mSetupTracksSuccessful) {
+            (new AMessage('abor', id()))->post();
+            sp<AMessage> timeout = new AMessage('tdto', id());
+            timeout->post(kTearDownTimeoutUs);
+        } else {
+            (new AMessage('disc', id()))->post();
+        }
     }
 
     void seek(int64_t timeUs) {
@@ -564,6 +573,7 @@ struct MyHandler : public AHandler {
                                      "tracks. Aborting.");
                                 result = ERROR_UNSUPPORTED;
                             } else {
+                                mTracks.clear();
                                 setupTrack(1);
                             }
                         }
@@ -842,6 +852,11 @@ struct MyHandler : public AHandler {
 
             case 'abor':
             {
+                if (!mSetupTracksSuccessful){
+                    ALOGD("ABORT!!! mSetupTracksSuccessful is FALSE!!");
+                    (new AMessage('disc', id()))->post();
+                    break;
+                }
                 for (size_t i = 0; i < mTracks.size(); ++i) {
                     TrackInfo *info = &mTracks.editItemAt(i);
 
@@ -853,20 +868,8 @@ struct MyHandler : public AHandler {
                         mRTPConn->removeStream(info->mRTPSocket, info->mRTCPSocket, mUIDValid);
                     }
                 }
-                mTracks.clear();
-                mSetupTracksSuccessful = false;
-                mSeekPending = false;
-                mFirstAccessUnit = true;
-                mAllTracksHaveTime = false;
-                mTryFakeRTCP = false;
-                mNTPAnchorUs = -1;
-                mMediaAnchorUs = -1;
-                mNumAccessUnitsReceived = 0;
-                mReceivedFirstRTCPPacket = false;
-                mReceivedFirstRTPPacket = false;
                 mPausing = false;
                 mSeekable = true;
-                mFirstAccessUnitMediaTimeValid = true;
                 sp<AMessage> reply = new AMessage('tear', id());
 
                 int32_t reconnect;
@@ -907,6 +910,18 @@ struct MyHandler : public AHandler {
                 ALOGI("TEARDOWN completed with result %d (%s)",
                      result, strerror(-result));
 
+                mSetupTracksSuccessful = false;
+                mSeekPending = false;
+                mFirstAccessUnit = true;
+                mAllTracksHaveTime = false;
+                mTryFakeRTCP = false;
+                mNTPAnchorUs = -1;
+                mMediaAnchorUs = -1;
+                mNumAccessUnitsReceived = 0;
+                mReceivedFirstRTCPPacket = false;
+                mReceivedFirstRTPPacket = false;
+                mFirstAccessUnitMediaTimeValid = true;
+
                 sp<AMessage> reply = new AMessage('disc', id());
 
                 int32_t reconnect;
-- 
1.7.4.1

