From 2bd109a6df30446af730de1a2c1e92078c50e336 Mon Sep 17 00:00:00 2001
From: binchen1 <bin.chen@intel.com>
Date: Tue, 15 Oct 2013 16:08:09 +0800
Subject: Add interface to query if presentation mode

BZ: 102351

Add interface to query if it is presentation
mode so that MDS can disable dynamic setting

It is consider to be in presentation mode
as long as any single device's layerstack
is greater than zero.

Category: aosp improvement
Domain:  Graphics.SF
Origin: internal
Upstream-Candiate: NO

Signed-off-by: binchen1 <bin.chen@intel.com>

Change-Id: I3278257b92d8d1eaddc24a3f8092685be75a0145
Ori-Change-Id:I97491e6380f739723ee127e9297e7d98f5797e32
---
 services/surfaceflinger/SurfaceFlinger.cpp |   29 +++++++++++++++++++++++++++-
 services/surfaceflinger/SurfaceFlinger.h   |    3 ++
 2 files changed, 31 insertions(+), 1 deletions(-)

diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index 0ab0b1b..326b074 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -2750,7 +2750,10 @@ status_t SurfaceFlinger::onTransact(
              *  intel customization start below
              **************************************/
 
-            enum {eIntelHDMISetting = 2001};
+            enum {
+                eIntelHDMISetting = 2001,
+                eIntelQueryPresentationMode
+            };
             case eIntelHDMISetting: {
                 n = data.readInt32();
                 ALOGD("setting HDMI scaling %d ", n); 
@@ -2759,6 +2762,12 @@ status_t SurfaceFlinger::onTransact(
                 reply->writeInt32(result);
                 return NO_ERROR;
             }
+            case eIntelQueryPresentationMode: {
+                bool r = isPresentationMode();
+                ALOGD("is presetation mode %d" , r);
+                reply->writeInt32(r ? 1 : 0);
+                return NO_ERROR;
+            }
 
         }
     }
@@ -3286,6 +3295,24 @@ void SurfaceFlinger::handleDisplayScaling(const DisplayDeviceState& state,
     }
 }
 
+
+bool SurfaceFlinger::isPresentationMode()
+{
+    Mutex::Autolock _l(mStateLock);
+     //if have more than one displayDevice and whose layerStack > 0
+     //we are in presentation mode
+     for (size_t dpy = 0 ; dpy < mDisplays.size() ; dpy++) {
+        const sp<const DisplayDevice>& hw(mDisplays[dpy]);
+        ALOGI("Device %s -> ls %d ", hw->getDisplayName().string(), hw->getLayerStack());
+        if (hw->getLayerStack() > 0) {
+            return true;
+        }
+     }
+
+     return false;
+
+}
+
 }; // namespace android
 
 
diff --git a/services/surfaceflinger/SurfaceFlinger.h b/services/surfaceflinger/SurfaceFlinger.h
index 2af4a0a..45287a5 100644
--- a/services/surfaceflinger/SurfaceFlinger.h
+++ b/services/surfaceflinger/SurfaceFlinger.h
@@ -403,6 +403,9 @@ private:
     void handleDisplayScaling(const DisplayDeviceState& state,
         Rect& viewport, Rect& frame);
 
+    // Intel feature : queryIfpresnetationMode
+    bool isPresentationMode();
+
     /* ------------------------------------------------------------------------
      * Debugging & dumpsys
      */
-- 
1.7.4.1

