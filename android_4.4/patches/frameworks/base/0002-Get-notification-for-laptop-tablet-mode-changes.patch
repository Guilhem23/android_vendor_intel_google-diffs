From 1fe7ea3240d8edcdc34f28745c926a3c616d8454 Mon Sep 17 00:00:00 2001
From: Daniel Leung <daniel.leung@intel.com>
Date: Tue, 18 Sep 2012 13:10:03 -0700
Subject: Get notification for laptop/tablet mode changes

For convertible tablet/laptops, add a notification so that
the framework knows when the device goes into or out of
tablet mode.

One possible usage is to disable certain input devices
when the device is in tablet mode.

Due to the current lack of interest in convertible devices
on AOSP, this patch is not recommended for upstreaming.

Category: Device Enablement
Domain: IO
Upstream-Candidate: no

Change-Id: I5e6c8de22bf099729494c8a94f9b528a93f9b39e
Signed-off-by: Daniel Leung <daniel.leung@intel.com>

Conflicts:

	services/java/com/android/server/wm/InputMonitor.java
---
 core/java/android/view/WindowManagerPolicy.java    |    7 +++++++
 .../internal/policy/impl/PhoneWindowManager.java   |    5 +++++
 services/input/tests/InputReader_test.cpp          |    3 +++
 .../android/server/input/InputManagerService.java  |   11 +++++++++++
 .../java/com/android/server/wm/InputMonitor.java   |    5 +++++
 5 files changed, 31 insertions(+), 0 deletions(-)

diff --git a/core/java/android/view/WindowManagerPolicy.java b/core/java/android/view/WindowManagerPolicy.java
index c5a1b86..4a1801c 100644
--- a/core/java/android/view/WindowManagerPolicy.java
+++ b/core/java/android/view/WindowManagerPolicy.java
@@ -952,6 +952,13 @@ public interface WindowManagerPolicy {
     public void notifyLidSwitchChanged(long whenNanos, boolean lidOpen);
     
     /**
+     * Tell the policy that the tablet mode switch has changed state.
+     * @param whenNanos The time when the change occurred in uptime nanoseconds.
+     * @param inTabletMode True if in tablet mode.
+     */
+    public void notifyTabletModeSwitchChanged(long whenNanos, boolean inTabletMode);
+
+    /**
      * Tell the policy if anyone is requesting that keyguard not come on.
      *
      * @param enabled Whether keyguard can be on or not.  does not actually
diff --git a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
index c33bd35..326653c 100644
--- a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
+++ b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
@@ -3622,6 +3622,11 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
     }
 
+    /** {@inheritDoc} */
+    public void notifyTabletModeSwitchChanged(long whenNanos, boolean inTabletMode) {
+        // do nothing
+    }
+
     void setHdmiPlugged(boolean plugged) {
         if (mHdmiPlugged != plugged) {
             mHdmiPlugged = plugged;
diff --git a/services/input/tests/InputReader_test.cpp b/services/input/tests/InputReader_test.cpp
index f068732..7613268 100644
--- a/services/input/tests/InputReader_test.cpp
+++ b/services/input/tests/InputReader_test.cpp
@@ -1505,6 +1505,7 @@ TEST_F(SwitchInputMapperTest, Process) {
     process(mapper, ARBITRARY_TIME, DEVICE_ID, EV_SW, SW_LID, 1);
     process(mapper, ARBITRARY_TIME, DEVICE_ID, EV_SW, SW_JACK_PHYSICAL_INSERT, 1);
     process(mapper, ARBITRARY_TIME, DEVICE_ID, EV_SW, SW_HEADPHONE_INSERT, 0);
+    process(mapper, ARBITRARY_TIME, DEVICE_ID, EV_SW, SW_TABLET_MODE, 0);
     process(mapper, ARBITRARY_TIME, DEVICE_ID, EV_SYN, SYN_REPORT, 0);
 
     NotifySwitchArgs args;
@@ -1513,6 +1514,8 @@ TEST_F(SwitchInputMapperTest, Process) {
     ASSERT_EQ((1 << SW_LID) | (1 << SW_JACK_PHYSICAL_INSERT), args.switchValues);
     ASSERT_EQ((1 << SW_LID) | (1 << SW_JACK_PHYSICAL_INSERT) | (1 << SW_HEADPHONE_INSERT),
             args.switchMask);
+    ASSERT_EQ((1 << SW_LID) | (1 << SW_JACK_PHYSICAL_INSERT) | (1 << SW_HEADPHONE_INSERT) |
+            (1 << SW_TABLET_MODE), args.switchMask);
     ASSERT_EQ(uint32_t(0), args.policyFlags);
 }
 
diff --git a/services/java/com/android/server/input/InputManagerService.java b/services/java/com/android/server/input/InputManagerService.java
index 3145805..b3109bf 100644
--- a/services/java/com/android/server/input/InputManagerService.java
+++ b/services/java/com/android/server/input/InputManagerService.java
@@ -218,6 +218,9 @@ public class InputManagerService extends IInputManager.Stub
     /** Switch code: Lid switch.  When set, lid is shut. */
     public static final int SW_LID = 0x00;
 
+    /** Switch code: Tablet mode switch.  When set, device in tablet mode. */
+    public static final int SW_TABLET_MODE = 0x01;
+
     /** Switch code: Keypad slide.  When set, keyboard is exposed. */
     public static final int SW_KEYPAD_SLIDE = 0x0a;
 
@@ -231,6 +234,7 @@ public class InputManagerService extends IInputManager.Stub
     public static final int SW_JACK_PHYSICAL_INSERT = 0x07;
 
     public static final int SW_LID_BIT = 1 << SW_LID;
+    public static final int SW_TABLET_MODE_BIT = 1 << SW_TABLET_MODE;
     public static final int SW_KEYPAD_SLIDE_BIT = 1 << SW_KEYPAD_SLIDE;
     public static final int SW_HEADPHONE_INSERT_BIT = 1 << SW_HEADPHONE_INSERT;
     public static final int SW_MICROPHONE_INSERT_BIT = 1 << SW_MICROPHONE_INSERT;
@@ -1284,6 +1288,11 @@ public class InputManagerService extends IInputManager.Stub
             mWiredAccessoryCallbacks.notifyWiredAccessoryChanged(whenNanos, switchValues,
                     switchMask);
         }
+
+        if ((switchMask & SW_TABLET_MODE_BIT) != 0) {
+            final boolean tabletMode = ((switchValues & SW_TABLET_MODE_BIT) == 0);
+            mWindowManagerCallbacks.notifyTabletModeSwitchChanged(whenNanos, tabletMode);
+        }
     }
 
     // Native callback.
@@ -1476,6 +1485,8 @@ public class InputManagerService extends IInputManager.Stub
 
         public void notifyLidSwitchChanged(long whenNanos, boolean lidOpen);
 
+        public void notifyTabletModeSwitchChanged(long whenNanos, boolean inTabletMode);
+
         public void notifyInputChannelBroken(InputWindowHandle inputWindowHandle);
 
         public long notifyANR(InputApplicationHandle inputApplicationHandle,
diff --git a/services/java/com/android/server/wm/InputMonitor.java b/services/java/com/android/server/wm/InputMonitor.java
index 3d2ec45..22590dc 100644
--- a/services/java/com/android/server/wm/InputMonitor.java
+++ b/services/java/com/android/server/wm/InputMonitor.java
@@ -349,6 +349,11 @@ final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
         mService.mPolicy.notifyLidSwitchChanged(whenNanos, lidOpen);
     }
 
+    /* Notifies that the tablet mode switch changed state. */
+    public void notifyTabletModeSwitchChanged(long whenNanos, boolean inTabletMode) {
+        mService.mPolicy.notifyTabletModeSwitchChanged(whenNanos, inTabletMode);
+    }
+
     /* Provides an opportunity for the window manager policy to intercept early key
      * processing as soon as the key has been read from the device. */
     @Override
-- 
1.7.4.1

