From 5bcdd15420b604ae9883fa91b1846ab35773a4ab Mon Sep 17 00:00:00 2001
From: Daniel Leung <daniel.leung@intel.com>
Date: Tue, 18 Sep 2012 16:49:19 -0700
Subject: Ability to disable input devices due to tablet mode changes

Adds the ability to disable certain input devices when going into
or out of tablet mode.

This fixes an issue where the touchpad is too sensitive and giving
phantom input events, due to the back of screen 'barely' touching it.

Due to the current lack of interest in convertible devices
on AOSP, this patch is not recommended for upstreaming.

Category: Device Enablement
Domain: IO
Upstream-Candidate: no

Change-Id: I497fea885d30d5f96eed1d2b63669991d38e37fa
Signed-off-by: Daniel Leung <daniel.leung@intel.com>

Conflicts:

	core/res/res/values/arrays.xml
	core/res/res/values/symbols.xml
---
 core/res/res/values/arrays.xml                     |   23 +++++++
 core/res/res/values/symbols.xml                    |    2 +
 services/input/InputReader.cpp                     |   23 +++++++-
 services/input/InputReader.h                       |   10 +++
 .../android/server/input/InputManagerService.java  |   64 ++++++++++++++++++++
 ...om_android_server_input_InputManagerService.cpp |   10 +++
 6 files changed, 131 insertions(+), 1 deletions(-)

diff --git a/core/res/res/values/arrays.xml b/core/res/res/values/arrays.xml
index 91af50a..93ba4e6 100644
--- a/core/res/res/values/arrays.xml
+++ b/core/res/res/values/arrays.xml
@@ -346,4 +346,27 @@
         <item>中文 (繁體)</item>
     </string-array>
 
+    <!--
+      Defines actions to be done when the device changes into tablet mode
+      (for convertible devices).
+
+      Actions are:
+      * disable_input_name:(name of input)
+        - To disable an input device so there is no input events from it
+      * enable_input_name:(name of input)
+        - To enable an input device
+
+      "(name of input)" is the name reported by Android.
+    -->
+    <string-array translatable="false" name="change_into_tablet_mode_actions">
+    </string-array>
+
+    <!--
+      Defines actions to be done when the device changes into laptop mode
+      (for convertible devices). Refer to the previous array for definition
+      of actions.
+    -->
+    <string-array translatable="false" name="change_into_laptop_mode_actions">
+    </string-array>
+
 </resources>
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index 6d90973..7e42bf1 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -986,6 +986,8 @@
   <java-symbol type="array" name="config_operatorConsideredNonRoaming" />
   <java-symbol type="array" name="config_sameNamedOperatorConsideredRoaming" />
   <java-symbol type="array" name="config_callBarringMMI" />
+  <java-symbol type="array" name="change_into_tablet_mode_actions" />
+  <java-symbol type="array" name="change_into_laptop_mode_actions" />
 
   <java-symbol type="drawable" name="default_wallpaper" />
   <java-symbol type="drawable" name="indicator_input_error" />
diff --git a/services/input/InputReader.cpp b/services/input/InputReader.cpp
index 03852a5..57397ab 100644
--- a/services/input/InputReader.cpp
+++ b/services/input/InputReader.cpp
@@ -470,6 +470,10 @@ void InputReader::processEventsForDeviceLocked(int32_t deviceId,
         return;
     }
 
+    if (device->isDisabled()) {
+        return;
+    }
+
     device->process(rawEvents, count);
 }
 
@@ -694,6 +698,22 @@ void InputReader::cancelVibrate(int32_t deviceId, int32_t token) {
     }
 }
 
+void InputReader::setInputDeviceDisabled(int32_t deviceId, bool disabled) {
+    AutoMutex _l(mLock);
+
+    ssize_t deviceIndex = mDevices.indexOfKey(deviceId);
+    if (deviceIndex >= 0) {
+        InputDevice* device = mDevices.valueAt(deviceIndex);
+        device->setDisabled(disabled);
+
+        if (disabled) {
+            ALOGI("Device disabled: id=%d", deviceId);
+        } else {
+            ALOGI("Device enabled: id=%d", deviceId);
+        }
+    }
+}
+
 void InputReader::dump(String8& dump) {
     AutoMutex _l(mLock);
 
@@ -847,7 +867,8 @@ InputDevice::InputDevice(InputReaderContext* context, int32_t id, int32_t genera
         int32_t controllerNumber, const InputDeviceIdentifier& identifier, uint32_t classes) :
         mContext(context), mId(id), mGeneration(generation), mControllerNumber(controllerNumber),
         mIdentifier(identifier), mClasses(classes),
-        mSources(0), mIsExternal(false), mDropUntilNextSync(false) {
+        mSources(0), mIsExternal(false), mDropUntilNextSync(false),
+        mIsDisabled(false) {
 }
 
 InputDevice::~InputDevice() {
diff --git a/services/input/InputReader.h b/services/input/InputReader.h
index a8bb636..210e51f 100644
--- a/services/input/InputReader.h
+++ b/services/input/InputReader.h
@@ -337,6 +337,9 @@ public:
     virtual void vibrate(int32_t deviceId, const nsecs_t* pattern, size_t patternSize,
             ssize_t repeat, int32_t token) = 0;
     virtual void cancelVibrate(int32_t deviceId, int32_t token) = 0;
+
+    /* To control device whether it should propogate events to userspace */
+    virtual void setInputDeviceDisabled(int32_t deviceId, bool disabled) = 0;
 };
 
 
@@ -406,6 +409,7 @@ public:
     virtual void vibrate(int32_t deviceId, const nsecs_t* pattern, size_t patternSize,
             ssize_t repeat, int32_t token);
     virtual void cancelVibrate(int32_t deviceId, int32_t token);
+    virtual void setInputDeviceDisabled(int32_t deviceId, bool disabled);
 
 protected:
     // These members are protected so they can be instrumented by test cases.
@@ -524,6 +528,10 @@ public:
 
     inline bool isIgnored() { return mMappers.isEmpty(); }
 
+    inline bool isDisabled() { return mIsDisabled; }
+
+    inline void setDisabled(bool disabled) { mIsDisabled = disabled; }
+
     void dump(String8& dump);
     void addMapper(InputMapper* mapper);
     void configure(nsecs_t when, const InputReaderConfiguration* config, uint32_t changes);
@@ -590,6 +598,8 @@ private:
     int32_t getState(uint32_t sourceMask, int32_t code, GetStateFunc getStateFunc);
 
     PropertyMap mConfiguration;
+
+    bool mIsDisabled;
 };
 
 
diff --git a/services/java/com/android/server/input/InputManagerService.java b/services/java/com/android/server/input/InputManagerService.java
index b3109bf..20c3aaf 100644
--- a/services/java/com/android/server/input/InputManagerService.java
+++ b/services/java/com/android/server/input/InputManagerService.java
@@ -86,6 +86,7 @@ import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.regex.PatternSyntaxException;
 
 import libcore.io.Streams;
 import libcore.util.Objects;
@@ -146,6 +147,10 @@ public class InputManagerService extends IInputManager.Stub
     IInputFilter mInputFilter; // guarded by mInputFilterLock
     InputFilterHost mInputFilterHost; // guarded by mInputFilterLock
 
+    // Actions if tablet mode changes
+    private static final String TABLET_MODE_DISABLE_INPUT = "disable_input_name:";
+    private static final String TABLET_MODE_ENABLE_INPUT = "enable_input_name:";
+
     private static native int nativeInit(InputManagerService service,
             Context context, MessageQueue messageQueue);
     private static native void nativeStart(int ptr);
@@ -186,6 +191,8 @@ public class InputManagerService extends IInputManager.Stub
     private static native void nativeReloadDeviceAliases(int ptr);
     private static native String nativeDump(int ptr);
     private static native void nativeMonitor(int ptr);
+    private static native void nativeSetInputDeviceDisabled(int ptr, int deviceId,
+            boolean disabled);
 
     // Input event injection constants defined in InputDispatcher.h.
     private static final int INPUT_EVENT_INJECTION_SUCCEEDED = 0;
@@ -590,6 +597,21 @@ public class InputManagerService extends IInputManager.Stub
         }
     }
 
+    /**
+     * Get the InputDevice by name of device.
+     * @return The InputDevice object.
+     */
+    private InputDevice getInputDeviceByName(String name) {
+        synchronized (mInputDevicesLock) {
+            for (InputDevice i: mInputDevices) {
+                if (i.getName().compareTo(name) == 0) {
+                    return i;
+                }
+            }
+        }
+        return null;
+    }
+
     @Override // Binder call
     public void registerInputDevicesChangedListener(IInputDevicesChangedListener listener) {
         if (listener == null) {
@@ -1254,6 +1276,47 @@ public class InputManagerService extends IInputManager.Stub
         nativeMonitor(mPtr);
     }
 
+    private void onTabletModeSwitchChanged(boolean inTabletMode) {
+        String[] actions = null;
+        if (inTabletMode) {
+            actions = mContext.getResources().getStringArray(
+                    R.array.change_into_tablet_mode_actions);
+        } else {
+            actions = mContext.getResources().getStringArray(
+                    R.array.change_into_laptop_mode_actions);
+        }
+
+        if (actions != null) {
+            for (int i = 0; i < actions.length; i++) {
+                try {
+                    if ((actions[i] != null) && (actions[i].length() > 0)) {
+                        if (actions[i].startsWith(TABLET_MODE_DISABLE_INPUT)) {
+                            String[] parts = actions[i].split(":", 2);
+                            InputDevice dev = getInputDeviceByName(parts[1]);
+                            nativeSetInputDeviceDisabled(mPtr, dev.getId(), true);
+                        } else if (actions[i].startsWith(TABLET_MODE_ENABLE_INPUT)) {
+                            String[] parts = actions[i].split(":", 2);
+                            InputDevice dev = getInputDeviceByName(parts[1]);
+                            nativeSetInputDeviceDisabled(mPtr, dev.getId(), false);
+                        } else {
+                            if (DEBUG) {
+                                Slog.d(TAG, "unknown action for tablet mode change: " + actions[i]);
+                            }
+                        }
+                    }
+                } catch (PatternSyntaxException pse) {
+                    if (DEBUG) {
+                        pse.printStackTrace();
+                    }
+                } catch (Exception e) {
+                    if (DEBUG) {
+                        e.printStackTrace();
+                    }
+                }
+            } // for all actions[]
+        } // if action is not null
+    }
+
     // Native callback.
     private void notifyConfigurationChanged(long whenNanos) {
         mWindowManagerCallbacks.notifyConfigurationChanged();
@@ -1292,6 +1355,7 @@ public class InputManagerService extends IInputManager.Stub
         if ((switchMask & SW_TABLET_MODE_BIT) != 0) {
             final boolean tabletMode = ((switchValues & SW_TABLET_MODE_BIT) == 0);
             mWindowManagerCallbacks.notifyTabletModeSwitchChanged(whenNanos, tabletMode);
+            onTabletModeSwitchChanged(tabletMode);
         }
     }
 
diff --git a/services/jni/com_android_server_input_InputManagerService.cpp b/services/jni/com_android_server_input_InputManagerService.cpp
index 4ab2086..d7275cb 100644
--- a/services/jni/com_android_server_input_InputManagerService.cpp
+++ b/services/jni/com_android_server_input_InputManagerService.cpp
@@ -85,6 +85,7 @@ static struct {
     jmethodID getPointerIcon;
     jmethodID getKeyboardLayoutOverlay;
     jmethodID getDeviceAlias;
+    jmethodID setInputDeviceDisabled;
 } gServiceClassInfo;
 
 static struct {
@@ -1292,6 +1293,13 @@ static void nativeMonitor(JNIEnv* env, jclass clazz, jint ptr) {
     im->getInputManager()->getDispatcher()->monitor();
 }
 
+static void nativeSetInputDeviceDisabled(JNIEnv* env,
+        jclass clazz, jint ptr, jint deviceId, jboolean disabled) {
+    NativeInputManager* im = reinterpret_cast<NativeInputManager*>(ptr);
+
+    im->getInputManager()->getReader()->setInputDeviceDisabled(deviceId, disabled);
+}
+
 // ----------------------------------------------------------------------------
 
 static JNINativeMethod gInputManagerMethods[] = {
@@ -1346,6 +1354,8 @@ static JNINativeMethod gInputManagerMethods[] = {
             (void*) nativeDump },
     { "nativeMonitor", "(I)V",
             (void*) nativeMonitor },
+    { "nativeSetInputDeviceDisabled", "(IIZ)V",
+            (void*) nativeSetInputDeviceDisabled },
 };
 
 #define FIND_CLASS(var, className) \
-- 
1.7.4.1

