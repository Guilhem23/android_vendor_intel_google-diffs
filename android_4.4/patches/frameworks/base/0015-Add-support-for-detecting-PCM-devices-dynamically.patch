From 072691f3314fa95523d4b8348029d78683126858 Mon Sep 17 00:00:00 2001
From: Ken Lierman <ken.lierman@windriver.com>
Date: Wed, 27 Nov 2013 15:10:20 +0100
Subject: Add support for detecting PCM devices dynamically

Add a second observer class (based on the renamed existing one)
to monitor UEvents for new USB PCM devices arriving, and pass
on the notification to the lower layers. The PCM path(s) are
configured via XML file to allow for any platform variations.

For devices installed at boot a separate check is added
as they are not reported via uevents.

Issue: APDEV-674, AXIA-3213, AXIA-3168, AXIA-3946
Category: Device Enablement
Domain: AOSP-frameworks
Origin: Internal
Upstream-candidate: No
Change-Id: I31a8872869d96a68fb2630b96fddc81b8d8e3480
Depends-Change-Id: Ic40db259a7ab337a33edc8375c19497d37731eac
---
 .../com/android/server/WiredAccessoryManager.java  |  163 +++++++++++++++++++-
 1 files changed, 156 insertions(+), 7 deletions(-)

diff --git a/services/java/com/android/server/WiredAccessoryManager.java b/services/java/com/android/server/WiredAccessoryManager.java
index 415fcc1..d155a9a 100644
--- a/services/java/com/android/server/WiredAccessoryManager.java
+++ b/services/java/com/android/server/WiredAccessoryManager.java
@@ -42,6 +42,7 @@ import static com.android.server.input.InputManagerService.SW_MICROPHONE_INSERT_
 import java.io.File;
 import java.io.FileReader;
 import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
@@ -60,9 +61,10 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
     private static final int BIT_USB_HEADSET_ANLG = (1 << 2);
     private static final int BIT_USB_HEADSET_DGTL = (1 << 3);
     private static final int BIT_HDMI_AUDIO = (1 << 4);
+    private static final int BIT_USB_PCM_AUDIO = (1 << 5);
     private static final int SUPPORTED_HEADSETS = (BIT_HEADSET|BIT_HEADSET_NO_MIC|
                                                    BIT_USB_HEADSET_ANLG|BIT_USB_HEADSET_DGTL|
-                                                   BIT_HDMI_AUDIO);
+                                                   BIT_HDMI_AUDIO | BIT_USB_PCM_AUDIO);
 
     private static final String NAME_H2W = "h2w";
     private static final String NAME_USB_AUDIO = "usb_audio";
@@ -80,10 +82,12 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
 
     private int mSwitchValues;
 
-    private final WiredAccessoryObserver mObserver;
+    private final WiredAccessoryObserverSwitch mObserverSwitch;
+    private final WiredAccessoryObserverPcm mObserverPcm;
     private final InputManagerService mInputManager;
 
     private final boolean mUseDevInputEventForAudioJack;
+    private String[] mPcmRegexs;
 
     public WiredAccessoryManager(Context context, InputManagerService inputManager) {
         PowerManager pm = (PowerManager)context.getSystemService(Context.POWER_SERVICE);
@@ -95,7 +99,17 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
         mUseDevInputEventForAudioJack =
                 context.getResources().getBoolean(R.bool.config_useDevInputEventForAudioJack);
 
-        mObserver = new WiredAccessoryObserver();
+        mObserverSwitch = new WiredAccessoryObserverSwitch();
+
+        int resId = context.getResources().getSystem()
+                .getIdentifier("config_pcm_regexs", "array", "android");
+
+        if (resId != 0) {
+            mPcmRegexs = context.getResources().getStringArray(resId);
+            mObserverPcm = new WiredAccessoryObserverPcm();
+        } else {
+            mObserverPcm = null;
+        }
 
         context.registerReceiver(new BroadcastReceiver() {
                     @Override
@@ -119,7 +133,10 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
                     SW_HEADPHONE_INSERT_BIT | SW_MICROPHONE_INSERT_BIT);
         }
 
-        mObserver.init();
+        mObserverSwitch.init();
+        if (mObserverPcm != null) {
+           mObserverPcm.init();
+        }
     }
 
     @Override
@@ -257,6 +274,8 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
                 device = AudioManager.DEVICE_OUT_DGTL_DOCK_HEADSET;
             } else if (headset == BIT_HDMI_AUDIO) {
                 device = AudioManager.DEVICE_OUT_AUX_DIGITAL;
+            } else if (headset == BIT_USB_PCM_AUDIO) {
+                device = AudioManager.DEVICE_OUT_USB_DEVICE;
             } else {
                 Slog.e(TAG, "setDeviceState() invalid headset type: "+headset);
                 return;
@@ -282,10 +301,10 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
         return sb.toString();
     }
 
-    class WiredAccessoryObserver extends UEventObserver {
+    class WiredAccessoryObserverSwitch extends UEventObserver {
         private final List<UEventInfo> mUEventInfo;
 
-        public WiredAccessoryObserver() {
+        public WiredAccessoryObserverSwitch() {
             mUEventInfo = makeObservedUEventList();
         }
 
@@ -343,7 +362,7 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
             if (uei.checkSwitchExists()) {
                 retVal.add(uei);
             } else {
-                Slog.w(TAG, "This kernel does not have usb audio support");
+                Slog.w(TAG, "This kernel does not have static usb audio support");
             }
 
             // Monitor HDMI
@@ -430,4 +449,134 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
             }
         }
     }
+
+    class WiredAccessoryObserverPcm extends UEventObserver {
+        private final List<UEventInfo> mUEventInfo;
+
+        public WiredAccessoryObserverPcm() {
+            mUEventInfo = makeObservedUEventList();
+        }
+
+        public void searchForMatchLocked(final File folder, final UEventInfo uei) {
+            try {
+                for (final File fileEntry : folder.listFiles()) {
+                    if (fileEntry.getPath().matches("/sys" + uei.getDevRegex())) {
+                        updateStateLocked(uei.getDevPath(), uei.getDevName(), 1);
+                    }
+                    if (fileEntry.isDirectory()) {
+                        if (fileEntry.getAbsolutePath().equals(fileEntry.getCanonicalPath())) {
+                            searchForMatchLocked(fileEntry, uei);
+                        }
+                    }
+                }
+            } catch (IOException e) {
+                Slog.e(TAG, "" , e);
+            }
+        }
+
+        void init() {
+            synchronized (mLock) {
+                if (LOG) Slog.v(TAG, "initPcm()");
+
+                // We don't get uevents for devices already present,
+                // so manually check for their existence
+                for (int i = 0; i < mUEventInfo.size(); ++i) {
+                    UEventInfo uei = mUEventInfo.get(i);
+
+                    File folder = new File("/sys" + uei.getDevPath());
+                    searchForMatchLocked(folder, uei);
+                }
+            }
+
+            // At any given time accessories could be inserted
+            // monitor any installed regex's
+            for (int i = 0; i < mUEventInfo.size(); ++i) {
+                UEventInfo uei = mUEventInfo.get(i);
+                startObserving("DEVPATH="+uei.getDevPath());
+            }
+        }
+
+        private List<UEventInfo> makeObservedUEventList() {
+            List<UEventInfo> retVal = new ArrayList<UEventInfo>();
+            UEventInfo uei;
+
+            for (String regex : mPcmRegexs) {
+                // Monitor PCM regexps
+                uei = new UEventInfo("pcmDev", regex, BIT_USB_PCM_AUDIO);
+                retVal.add(uei);
+            }
+
+            return retVal;
+        }
+
+        @Override
+        public void onUEvent(UEventObserver.UEvent event) {
+            if (LOG) Slog.v(TAG, "Headset UEVENT: " + event.toString());
+
+            try {
+                String devName = event.get("DEVNAME");
+                String devPath = event.get("DEVPATH");
+                String action = event.get("ACTION");
+                int state = 0;
+
+                if (devName != null && devPath != null && action != null) {
+                    for (int i = 0; i < mUEventInfo.size(); ++i) {
+                        UEventInfo uei = mUEventInfo.get(i);
+                        if (!devPath.matches(uei.getDevRegex())) continue;
+                        if (action.equals("add")) state = 1;
+                        if (LOG) Slog.v(TAG, "updating " + devPath + " " + devName + " " + state);
+                        synchronized (mLock) {
+                            updateStateLocked(devPath, uei.getDevName(), state);
+                        }
+                    }
+                }
+            } catch (NumberFormatException e) {
+                Slog.e(TAG, "Could not parse switch state from event " + event);
+            }
+        }
+
+        private void updateStateLocked(String devPath, String name, int state) {
+            for (int i = 0; i < mUEventInfo.size(); ++i) {
+                UEventInfo uei = mUEventInfo.get(i);
+                if (devPath.startsWith(uei.getDevPath(), 0)) {
+                    updateLocked(name, uei.computeNewHeadsetState(mHeadsetState, state));
+                    return;
+                }
+            }
+        }
+
+        private final class UEventInfo {
+            private final String mDevName;
+            // The regex we used to detect actual PCM device events
+            private final String mDevRegex;
+            // The path we ask UEventObserver to monitor
+            private final String mDevPath;
+            private final int mState1Bits;
+
+            public UEventInfo(String devName, String devRegex, int state1Bits) {
+                mDevName = devName;
+                mDevRegex = devRegex;
+                mState1Bits = state1Bits;
+
+                String[] splitTest;
+                String devRegexNoStart;
+                devRegexNoStart = devRegex.replace("^", "");
+                splitTest = devRegexNoStart.split("[\\W&&[^/:]]");
+                mDevPath = splitTest[0];
+            }
+
+            public String getDevName() { return mDevName; }
+
+            public String getDevRegex() { return mDevRegex; }
+
+            public String getDevPath() { return mDevPath; }
+
+            public int computeNewHeadsetState(int headsetState, int switchState) {
+                int preserveMask = ~(mState1Bits);
+                int setBits = ((switchState == 1) ? mState1Bits : 0);
+
+                return ((headsetState & preserveMask) | setBits);
+            }
+        }
+    }
 }
-- 
1.7.4.1

