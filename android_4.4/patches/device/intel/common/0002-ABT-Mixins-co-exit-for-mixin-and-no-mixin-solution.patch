From a7bba7986d75c6daad7481d5ceca113546efa19a Mon Sep 17 00:00:00 2001
From: Yong Yao <yong.yao@intel.com>
Date: Fri, 3 Jan 2014 11:32:13 +0800
Subject: [ABT Mixins] co-exit for mixin and no-mixin solution

        AndroidBoard.mk, BoardConfig.mk, common.mk and init.common.rc
        were renamed with *_old.*

Change-Id: I10ee2fa028d1a3405c5cf39c5645c4b36649b5dc
Signed-off-by: Yong Yao <yong.yao@intel.com>
---
 AndroidBoard.mk     |  266 ----------------------------------------------
 AndroidBoard_old.mk |  266 ++++++++++++++++++++++++++++++++++++++++++++++
 BoardConfig.mk      |  295 ---------------------------------------------------
 BoardConfig_old.mk  |  295 +++++++++++++++++++++++++++++++++++++++++++++++++++
 common.mk           |  177 ------------------------------
 common_old.mk       |  177 ++++++++++++++++++++++++++++++
 init.common.rc      |  186 --------------------------------
 init.common_old.rc  |  186 ++++++++++++++++++++++++++++++++
 8 files changed, 924 insertions(+), 924 deletions(-)
 delete mode 100644 AndroidBoard.mk
 create mode 100644 AndroidBoard_old.mk
 delete mode 100755 BoardConfig.mk
 create mode 100755 BoardConfig_old.mk
 delete mode 100644 common.mk
 create mode 100644 common_old.mk
 delete mode 100644 init.common.rc
 create mode 100644 init.common_old.rc

diff --git a/AndroidBoard.mk b/AndroidBoard.mk
deleted file mode 100644
index f2acc1c..0000000
--- a/AndroidBoard.mk
+++ /dev/null
@@ -1,266 +0,0 @@
-# make file for common
-#
-LOCAL_PATH := $(TOP)/device/intel/common
-COMMON_PATH := $(TOP)/device/intel/common
-SUPPORT_PATH:= $(TOP)/vendor/intel/support
-ACS_BUILDBOT_PATH := $(TOP)/vendor/intel/PRIVATE/buildbot_acs
-PERMISSIONS_PATH := $(TOP)/frameworks/native/data/etc
-
-include $(LOCAL_PATH)/util.mk
-include $(CLEAR_VARS)
-LOCAL_SRC_FILES := mrst_keypad.kcm
-LOCAL_MODULE_TAGS := optional
-include $(BUILD_KEY_CHAR_MAP)
-
-include $(CLEAR_VARS)
-LOCAL_MODULE := mrst_keypad.kl
-LOCAL_MODULE_TAGS := optional
-LOCAL_SRC_FILES := mrst_keypad.kl
-LOCAL_MODULE_CLASS := SHARED_LIBRARIES
-LOCAL_MODULE_PATH := $(TARGET_OUT_KEYLAYOUT)
-include $(BUILD_PREBUILT)
-
-include $(CLEAR_VARS)
-LOCAL_MODULE := KEYPAD.kl
-LOCAL_MODULE_TAGS := optional
-LOCAL_SRC_FILES := KEYPAD.kl
-LOCAL_MODULE_CLASS := SHARED_LIBRARIES
-LOCAL_MODULE_PATH := $(TARGET_OUT_KEYLAYOUT)
-include $(BUILD_PREBUILT)
-
-include $(CLEAR_VARS)
-LOCAL_MODULE := gpio-keys.kl
-LOCAL_MODULE_TAGS := optional
-LOCAL_SRC_FILES := gpio-keys.kl
-LOCAL_MODULE_CLASS := SHARED_LIBRARIES
-LOCAL_MODULE_PATH := $(TARGET_OUT_KEYLAYOUT)
-include $(BUILD_PREBUILT)
-
-# MKBOOTIMG is the tool that is used by AOSP build system to
-# stitch kernel. We overide the default script to
-# adapt to out own IAFW format.
-ifeq ($(TARGET_PARTITIONING_SCHEME),"osip-gpt")
-MKBOOTIMG := vendor/intel/support/mkbootimg
-endif
-
-# Intel Signing Utility and xfstk-stitcher, required by mkbootimg to sign images.
-# Add dependancy on ISU packages only if ISU method is used as ISU might not be delivered.
-ifneq ($(findstring isu,$(TARGET_OS_SIGNING_METHOD)),)
-$(MKBOOTIMG): isu isu_stream isu_wrapper
-endif
-$(MKBOOTIMG): xfstk-stitcher
-
-# If the kernel source is present, AndroidBoard.mk will perform a kernel build.
-# otherwise, AndroidBoard.mk will find the kernel binaries in a tarball.
-ifneq ($(wildcard $(KERNEL_SRC_DIR)/Makefile),)
-TARGET_KERNEL_SOURCE_IS_PRESENT ?= true
-endif
-
-.PHONY: build_kernel
-ifeq ($(TARGET_KERNEL_SOURCE_IS_PRESENT),true)
-#Kernel rules (build from source, or from tarball
-include $(COMMON_PATH)/AndroidKernel.mk
-build_kernel: get_kernel_from_source
-else
-build_kernel: get_kernel_from_tarball
-endif
-
-.PHONY: get_kernel_from_tarball
-get_kernel_from_tarball:
-	tar -xv -C $(PRODUCT_OUT) -f $(TARGET_KERNEL_TARBALL)
-
-bootimage: build_kernel
-
-$(INSTALLED_KERNEL_TARGET): build_kernel
-$(INSTALLED_RAMDISK_TARGET): build_kernel
-
-# checkapi is only called if droid is among the cmd goals, or no cmd goal is given
-# We add it here to be called for other targets as well
-#droid: checkapi
-
-fastboot_flashfile: bootimage
-
-ifeq ($(TARGET_USERIMAGES_SPARSE_EXT_DISABLED),true)
-TARGET_SYSTEM := systemimg_gz
-else
-TARGET_SYSTEM := systemimage
-endif
-
-ifeq ($(ENABLE_FRU),yes)
-bootimage: build_fru
-endif
-ifneq ($(FLASHFILE_BOOTONLY),true)
-fastboot_flashfile: firmware recoveryimage
-ifeq ($(TARGET_USE_DROIDBOOT),true)
-fastboot_flashfile: droidbootimage
-endif
-fastboot_flashfile: $(TARGET_SYSTEM)
-endif
-ifeq ($(TARGET_BIOS_TYPE),"uefi")
-fastboot_flashfile: espimage
-endif
-
-#ifeq ($(USE_GMS_ALL),true)
-#PUBLISH_TARGET_BUILD_VARIANT := $(TARGET_BUILD_VARIANT)_gms
-#else
-PUBLISH_TARGET_BUILD_VARIANT := $(TARGET_BUILD_VARIANT)
-#endif
-
-TARGET_PUBLISH_PATH ?= $(shell echo $(TARGET_PRODUCT) | tr '[:lower:]' '[:upper:]')
-GENERIC_TARGET_NAME ?= $(TARGET_PRODUCT)
-
-.PHONY: flashfiles
-flashfiles: fastboot_flashfile ota_flashfile
-
-.PHONY: fastboot_flashfile
-fastboot_flashfile:
-	PUBLISH_PATH=$(PUBLISH_PATH) \
-	TARGET_PUBLISH_PATH=$(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH) \
-	GENERIC_TARGET_NAME=$(GENERIC_TARGET_NAME) \
-	TARGET_USE_DROIDBOOT=$(TARGET_USE_DROIDBOOT) \
-	FLASHFILE_BOOTONLY=$(FLASHFILE_BOOTONLY) \
-	FLASHFILE_NO_OTA=$(FLASHFILE_NO_OTA) \
-	FLASH_MODEM=$(BOARD_HAVE_MODEM) \
-	SKIP_NVM=$(BOARD_SKIP_NVM) \
-	ULPMC_BINARY=$(ULPMC_BINARY) \
-	TARGET_BIOS_TYPE=$(TARGET_BIOS_TYPE) \
-	SPARSE_DISABLED=$(TARGET_USERIMAGES_SPARSE_EXT_DISABLED) \
-	$(SUPPORT_PATH)/publish_build.py '$@' `pwd` $(REF_PRODUCT_NAME) $(TARGET_DEVICE) $(PUBLISH_TARGET_BUILD_VARIANT) $(FILE_NAME_TAG) $(TARGET_BOARD_SOC)
-
-.PHONY: ota_flashfile
-ifneq (,$(filter true,$(FLASHFILE_NO_OTA) $(FLASHFILE_BOOTONLY)))
-ota_flashfile:
-	@echo "Do not generate ota_flashfile"
-else
-ifeq ($(TARGET_BIOS_TYPE),"uefi")
-ota_flashfile: espimage
-endif
-ota_flashfile: otapackage
-	PUBLISH_PATH=$(PUBLISH_PATH) \
-	TARGET_PUBLISH_PATH=$(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH) \
-	GENERIC_TARGET_NAME=$(GENERIC_TARGET_NAME) \
-	TARGET_USE_DROIDBOOT=$(TARGET_USE_DROIDBOOT) \
-	FLASHFILE_BOOTONLY=$(FLASHFILE_BOOTONLY) \
-	FLASHFILE_NO_OTA=$(FLASHFILE_NO_OTA) \
-	FLASH_MODEM=$(BOARD_HAVE_MODEM) \
-	BOARD_MODEM_FLASHLESS=$(BOARD_MODEM_FLASHLESS) \
-	SKIP_NVM=$(BOARD_SKIP_NVM) \
-	FLASH_MODEM_DICO=$(BOARD_MODEM_DICO) \
-	TARGET_BIOS_TYPE=$(TARGET_BIOS_TYPE) \
-	ULPMC_BINARY=$(ULPMC_BINARY) \
-	SPARSE_DISABLED=$(TARGET_USERIMAGES_SPARSE_EXT_DISABLED) \
-	$(SUPPORT_PATH)/publish_build.py '$@' `pwd` $(REF_PRODUCT_NAME) $(TARGET_DEVICE) $(PUBLISH_TARGET_BUILD_VARIANT) $(FILE_NAME_TAG) $(TARGET_BOARD_SOC)
-endif #$(FLASHFILE_NO_OTA) || $(FLASHFILE_BOOTONLY)
-
-ifneq ($(FLASHFILE_BOOTONLY),true)
-blank_flashfiles: firmware
-ifeq ($(TARGET_USE_DROIDBOOT),true)
-blank_flashfiles: droidbootimage
-else
-blank_flashfiles: recoveryimage
-endif
-ifeq ($(TARGET_BIOS_TYPE),"uefi")
-blank_flashfiles: espimage
-endif
-.PHONY: blank_flashfiles
-blank_flashfiles:
-	PUBLISH_PATH=$(PUBLISH_PATH) \
-	TARGET_PUBLISH_PATH=$(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH) \
-	GENERIC_TARGET_NAME=$(GENERIC_TARGET_NAME) \
-	TARGET_USE_DROIDBOOT=$(TARGET_USE_DROIDBOOT) \
-	FRU_CONFIGS=$(FRU_CONFIGS) \
-	TARGET_BIOS_TYPE=$(TARGET_BIOS_TYPE) \
-	ULPMC_BINARY=$(ULPMC_BINARY) \
-	BOARD_GPFLAG=$(BOARD_GPFLAG) \
-	$(SUPPORT_PATH)/publish_build.py 'blankphone' `pwd` $(REF_PRODUCT_NAME) $(TARGET_DEVICE) $(PUBLISH_TARGET_BUILD_VARIANT) $(FILE_NAME_TAG) $(TARGET_BOARD_SOC)
-else
-blank_flashfiles:
-	@echo "No blank_flashfiles for this target - FLASHFILE_BOOTONLY set to TRUE"
-endif
-
-ifeq ($(BOARD_HAVE_MODEM),true)
-publish_modem: modem
-ifneq (,$(filter modem_nvm, $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_PACKAGES)))
-publish_modem: modem_nvm
-endif
-endif
-publish_modem:
-	PUBLISH_PATH=$(PUBLISH_PATH) \
-	TARGET_PUBLISH_PATH=$(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH) \
-	BOARD_HAVE_MODEM=$(BOARD_HAVE_MODEM) \
-	SKIP_NVM=$(BOARD_SKIP_NVM) \
-	$(SUPPORT_PATH)/publish_build.py 'modem' `pwd` $(REF_PRODUCT_NAME) $(TARGET_DEVICE) $(PUBLISH_TARGET_BUILD_VARIANT) $(FILE_NAME_TAG) $(TARGET_BOARD_SOC)
-
-publish_system_symbols: systemtarball
-	@ echo "Publish system symbols"
-	@ mkdir -p $(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH)/fastboot-images/$(TARGET_BUILD_VARIANT)
-	tar czf $(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH)/fastboot-images/$(TARGET_BUILD_VARIANT)/symbols.tar.gz $(PRODUCT_OUT)/symbols
-
-publish_kernel_debug: bootimage
-	@ echo "Publish kernel config and symbols"
-	@ mkdir -p $(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH)/kernel
-	cp $(PRODUCT_OUT)/linux/kernel/.config $(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH)/kernel/kernel.config
-	bzip2 -k $(PRODUCT_OUT)/linux/kernel/vmlinux
-	mv $(PRODUCT_OUT)/linux/kernel/vmlinux.bz2 $(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH)/kernel/
-
-PUBLISH_LINUX_TOOLS_deps := \
-	$(HOST_OUT_EXECUTABLES)/adb \
-	$(HOST_OUT_EXECUTABLES)/fastboot
-publish_linux_tools: $(PUBLISH_LINUX_TOOLS_deps)
-	@ echo "Publish linux tools"
-	@ mkdir -p $(PUBLISH_TOOLS_PATH)
-	(cd out/host/ && cp --parents linux-x86/bin/adb $(PUBLISH_TOOLS_PATH))
-	(cd out/host/ && cp --parents linux-x86/bin/fastboot $(PUBLISH_TOOLS_PATH))
-
-publish_acs:
-ifneq ($(wildcard $(ACS_BUILDBOT_PATH)),)
-publish_acs:
-	$(eval ACS_ZIP := $(abspath $(PUBLISH_PATH)/buildbot/acs.zip))
-	$(eval RUN_ACS_ZIP := $(abspath $(PUBLISH_PATH)/buildbot/run_acs.zip))
-	$(eval ACS_CAMPAIGNS_ZIP := $(abspath $(PUBLISH_PATH)/buildbot/campaigns.zip))
-	@ echo "Publish acs tool and buildbot campaigns"
-	@ mkdir -p $(PUBLISH_PATH)/buildbot
-	(cd $(ACS_BUILDBOT_PATH) && zip -qr $(ACS_ZIP) executable/*)
-	(cd $(ACS_BUILDBOT_PATH) && zip -qr $(RUN_ACS_ZIP) run_acs/*)
-	(cd $(ACS_BUILDBOT_PATH)/campaigns && zip -qr $(ACS_CAMPAIGNS_ZIP) ./*)
-endif
-
-# Add sepdk driver
-ifneq ($(BOARD_USE_64BIT_KERNEL),true)
-# sepdk and vTunes
--include $(TOP)/vendor/intel/tools/PRIVATE/debug_internal_tools/sepdk/src/AndroidSEP.mk
--include $(TOP)/linux/modules/debug_tools/vtunedk/src/pax/AndroidPAX.mk
-
-# Add vtunedk: sep3_xx, vtsspp drivers. PAX driver will be used from sepdk.
--include $(TOP)/linux/modules/debug_tools/vtunedk/src/AndroidSEP.mk
--include $(TOP)/linux/modules/debug_tools/vtunedk/src/vtsspp/AndroidVTSSPP.mk
-
-# KCT Crashtool kernel module
-ifneq (, $(findstring "$(TARGET_BUILD_VARIANT)", "eng" "userdebug"))
--include $(TOP)/vendor/intel/hardware/PRIVATE/monitor/ksrc/AndroidKCT.mk
-endif
-
-endif
-
-include $(CLEAR_VARS)
-LOCAL_MODULE := init.common.rc
-LOCAL_MODULE_TAGS := optional
-LOCAL_MODULE_CLASS := ETC
-LOCAL_MODULE_PATH := $(TARGET_ROOT_OUT)
-include $(BUILD_SYSTEM)/base_rules.mk
-intel_common_rc := $(TOP)/device/intel/common/init.common.rc
-#These jars should have the same order as in build/core/dex_preopt.mk
-intel_jars :=
-ifeq ($(strip $(INTEL_FEATURE_ASF)),true)
-intel_jars:=$(intel_jars):/system/framework/com.intel.asf.jar
-endif
-ifeq ($(strip $(INTEL_FEATURE_ARKHAM)),true)
-intel_jars := $(intel_jars):/system/framework/com.intel.arkham.services.jar
-endif
-ifeq ($(strip $(DOLBY_DAP)),true)
-intel_jars := $(intel_jars):/system/framework/dolby_ds.jar
-endif
-$(LOCAL_BUILT_MODULE): $(intel_common_rc) | $(ACP)
-	@echo "Copy: $(PRIVATE_MODULE) ($@)"
-	$(copy-file-to-new-target)
-	$(hide) sed -i '/BOOTCLASSPATH/ s#$$#$(intel_jars)#' $@
diff --git a/AndroidBoard_old.mk b/AndroidBoard_old.mk
new file mode 100644
index 0000000..ed27f38
--- /dev/null
+++ b/AndroidBoard_old.mk
@@ -0,0 +1,266 @@
+# make file for common
+#
+LOCAL_PATH := $(TOP)/device/intel/common
+COMMON_PATH := $(TOP)/device/intel/common
+SUPPORT_PATH:= $(TOP)/vendor/intel/support
+ACS_BUILDBOT_PATH := $(TOP)/vendor/intel/PRIVATE/buildbot_acs
+PERMISSIONS_PATH := $(TOP)/frameworks/native/data/etc
+
+include $(LOCAL_PATH)/util.mk
+include $(CLEAR_VARS)
+LOCAL_SRC_FILES := mrst_keypad.kcm
+LOCAL_MODULE_TAGS := optional
+include $(BUILD_KEY_CHAR_MAP)
+
+include $(CLEAR_VARS)
+LOCAL_MODULE := mrst_keypad.kl
+LOCAL_MODULE_TAGS := optional
+LOCAL_SRC_FILES := mrst_keypad.kl
+LOCAL_MODULE_CLASS := SHARED_LIBRARIES
+LOCAL_MODULE_PATH := $(TARGET_OUT_KEYLAYOUT)
+include $(BUILD_PREBUILT)
+
+include $(CLEAR_VARS)
+LOCAL_MODULE := KEYPAD.kl
+LOCAL_MODULE_TAGS := optional
+LOCAL_SRC_FILES := KEYPAD.kl
+LOCAL_MODULE_CLASS := SHARED_LIBRARIES
+LOCAL_MODULE_PATH := $(TARGET_OUT_KEYLAYOUT)
+include $(BUILD_PREBUILT)
+
+include $(CLEAR_VARS)
+LOCAL_MODULE := gpio-keys.kl
+LOCAL_MODULE_TAGS := optional
+LOCAL_SRC_FILES := gpio-keys.kl
+LOCAL_MODULE_CLASS := SHARED_LIBRARIES
+LOCAL_MODULE_PATH := $(TARGET_OUT_KEYLAYOUT)
+include $(BUILD_PREBUILT)
+
+# MKBOOTIMG is the tool that is used by AOSP build system to
+# stitch kernel. We overide the default script to
+# adapt to out own IAFW format.
+ifeq ($(TARGET_PARTITIONING_SCHEME),"osip-gpt")
+MKBOOTIMG := vendor/intel/support/mkbootimg
+endif
+
+# Intel Signing Utility and xfstk-stitcher, required by mkbootimg to sign images.
+# Add dependancy on ISU packages only if ISU method is used as ISU might not be delivered.
+ifneq ($(findstring isu,$(TARGET_OS_SIGNING_METHOD)),)
+$(MKBOOTIMG): isu isu_stream isu_wrapper
+endif
+$(MKBOOTIMG): xfstk-stitcher
+
+# If the kernel source is present, AndroidBoard.mk will perform a kernel build.
+# otherwise, AndroidBoard.mk will find the kernel binaries in a tarball.
+ifneq ($(wildcard $(KERNEL_SRC_DIR)/Makefile),)
+TARGET_KERNEL_SOURCE_IS_PRESENT ?= true
+endif
+
+.PHONY: build_kernel
+ifeq ($(TARGET_KERNEL_SOURCE_IS_PRESENT),true)
+#Kernel rules (build from source, or from tarball
+include $(COMMON_PATH)/AndroidKernel.mk
+build_kernel: get_kernel_from_source
+else
+build_kernel: get_kernel_from_tarball
+endif
+
+.PHONY: get_kernel_from_tarball
+get_kernel_from_tarball:
+	tar -xv -C $(PRODUCT_OUT) -f $(TARGET_KERNEL_TARBALL)
+
+bootimage: build_kernel
+
+$(INSTALLED_KERNEL_TARGET): build_kernel
+$(INSTALLED_RAMDISK_TARGET): build_kernel
+
+# checkapi is only called if droid is among the cmd goals, or no cmd goal is given
+# We add it here to be called for other targets as well
+#droid: checkapi
+
+fastboot_flashfile: bootimage
+
+ifeq ($(TARGET_USERIMAGES_SPARSE_EXT_DISABLED),true)
+TARGET_SYSTEM := systemimg_gz
+else
+TARGET_SYSTEM := systemimage
+endif
+
+ifeq ($(ENABLE_FRU),yes)
+bootimage: build_fru
+endif
+ifneq ($(FLASHFILE_BOOTONLY),true)
+fastboot_flashfile: firmware recoveryimage
+ifeq ($(TARGET_USE_DROIDBOOT),true)
+fastboot_flashfile: droidbootimage
+endif
+fastboot_flashfile: $(TARGET_SYSTEM)
+endif
+ifeq ($(TARGET_BIOS_TYPE),"uefi")
+fastboot_flashfile: espimage
+endif
+
+#ifeq ($(USE_GMS_ALL),true)
+#PUBLISH_TARGET_BUILD_VARIANT := $(TARGET_BUILD_VARIANT)_gms
+#else
+PUBLISH_TARGET_BUILD_VARIANT := $(TARGET_BUILD_VARIANT)
+#endif
+
+TARGET_PUBLISH_PATH ?= $(shell echo $(TARGET_PRODUCT) | tr '[:lower:]' '[:upper:]')
+GENERIC_TARGET_NAME ?= $(TARGET_PRODUCT)
+
+.PHONY: flashfiles
+flashfiles: fastboot_flashfile ota_flashfile
+
+.PHONY: fastboot_flashfile
+fastboot_flashfile:
+	PUBLISH_PATH=$(PUBLISH_PATH) \
+	TARGET_PUBLISH_PATH=$(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH) \
+	GENERIC_TARGET_NAME=$(GENERIC_TARGET_NAME) \
+	TARGET_USE_DROIDBOOT=$(TARGET_USE_DROIDBOOT) \
+	FLASHFILE_BOOTONLY=$(FLASHFILE_BOOTONLY) \
+	FLASHFILE_NO_OTA=$(FLASHFILE_NO_OTA) \
+	FLASH_MODEM=$(BOARD_HAVE_MODEM) \
+	SKIP_NVM=$(BOARD_SKIP_NVM) \
+	ULPMC_BINARY=$(ULPMC_BINARY) \
+	TARGET_BIOS_TYPE=$(TARGET_BIOS_TYPE) \
+	SPARSE_DISABLED=$(TARGET_USERIMAGES_SPARSE_EXT_DISABLED) \
+	$(SUPPORT_PATH)/publish_build.py '$@' `pwd` $(REF_PRODUCT_NAME) $(TARGET_DEVICE) $(PUBLISH_TARGET_BUILD_VARIANT) $(FILE_NAME_TAG) $(TARGET_BOARD_SOC)
+
+.PHONY: ota_flashfile
+ifneq (,$(filter true,$(FLASHFILE_NO_OTA) $(FLASHFILE_BOOTONLY)))
+ota_flashfile:
+	@echo "Do not generate ota_flashfile"
+else
+ifeq ($(TARGET_BIOS_TYPE),"uefi")
+ota_flashfile: espimage
+endif
+ota_flashfile: otapackage
+	PUBLISH_PATH=$(PUBLISH_PATH) \
+	TARGET_PUBLISH_PATH=$(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH) \
+	GENERIC_TARGET_NAME=$(GENERIC_TARGET_NAME) \
+	TARGET_USE_DROIDBOOT=$(TARGET_USE_DROIDBOOT) \
+	FLASHFILE_BOOTONLY=$(FLASHFILE_BOOTONLY) \
+	FLASHFILE_NO_OTA=$(FLASHFILE_NO_OTA) \
+	FLASH_MODEM=$(BOARD_HAVE_MODEM) \
+	BOARD_MODEM_FLASHLESS=$(BOARD_MODEM_FLASHLESS) \
+	SKIP_NVM=$(BOARD_SKIP_NVM) \
+	FLASH_MODEM_DICO=$(BOARD_MODEM_DICO) \
+	TARGET_BIOS_TYPE=$(TARGET_BIOS_TYPE) \
+	ULPMC_BINARY=$(ULPMC_BINARY) \
+	SPARSE_DISABLED=$(TARGET_USERIMAGES_SPARSE_EXT_DISABLED) \
+	$(SUPPORT_PATH)/publish_build.py '$@' `pwd` $(REF_PRODUCT_NAME) $(TARGET_DEVICE) $(PUBLISH_TARGET_BUILD_VARIANT) $(FILE_NAME_TAG) $(TARGET_BOARD_SOC)
+endif #$(FLASHFILE_NO_OTA) || $(FLASHFILE_BOOTONLY)
+
+ifneq ($(FLASHFILE_BOOTONLY),true)
+blank_flashfiles: firmware
+ifeq ($(TARGET_USE_DROIDBOOT),true)
+blank_flashfiles: droidbootimage
+else
+blank_flashfiles: recoveryimage
+endif
+ifeq ($(TARGET_BIOS_TYPE),"uefi")
+blank_flashfiles: espimage
+endif
+.PHONY: blank_flashfiles
+blank_flashfiles:
+	PUBLISH_PATH=$(PUBLISH_PATH) \
+	TARGET_PUBLISH_PATH=$(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH) \
+	GENERIC_TARGET_NAME=$(GENERIC_TARGET_NAME) \
+	TARGET_USE_DROIDBOOT=$(TARGET_USE_DROIDBOOT) \
+	FRU_CONFIGS=$(FRU_CONFIGS) \
+	TARGET_BIOS_TYPE=$(TARGET_BIOS_TYPE) \
+	ULPMC_BINARY=$(ULPMC_BINARY) \
+	BOARD_GPFLAG=$(BOARD_GPFLAG) \
+	$(SUPPORT_PATH)/publish_build.py 'blankphone' `pwd` $(REF_PRODUCT_NAME) $(TARGET_DEVICE) $(PUBLISH_TARGET_BUILD_VARIANT) $(FILE_NAME_TAG) $(TARGET_BOARD_SOC)
+else
+blank_flashfiles:
+	@echo "No blank_flashfiles for this target - FLASHFILE_BOOTONLY set to TRUE"
+endif
+
+ifeq ($(BOARD_HAVE_MODEM),true)
+publish_modem: modem
+ifneq (,$(filter modem_nvm, $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_PACKAGES)))
+publish_modem: modem_nvm
+endif
+endif
+publish_modem:
+	PUBLISH_PATH=$(PUBLISH_PATH) \
+	TARGET_PUBLISH_PATH=$(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH) \
+	BOARD_HAVE_MODEM=$(BOARD_HAVE_MODEM) \
+	SKIP_NVM=$(BOARD_SKIP_NVM) \
+	$(SUPPORT_PATH)/publish_build.py 'modem' `pwd` $(REF_PRODUCT_NAME) $(TARGET_DEVICE) $(PUBLISH_TARGET_BUILD_VARIANT) $(FILE_NAME_TAG) $(TARGET_BOARD_SOC)
+
+publish_system_symbols: systemtarball
+	@ echo "Publish system symbols"
+	@ mkdir -p $(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH)/fastboot-images/$(TARGET_BUILD_VARIANT)
+	tar czf $(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH)/fastboot-images/$(TARGET_BUILD_VARIANT)/symbols.tar.gz $(PRODUCT_OUT)/symbols
+
+publish_kernel_debug: bootimage
+	@ echo "Publish kernel config and symbols"
+	@ mkdir -p $(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH)/kernel
+	cp $(PRODUCT_OUT)/linux/kernel/.config $(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH)/kernel/kernel.config
+	bzip2 -k $(PRODUCT_OUT)/linux/kernel/vmlinux
+	mv $(PRODUCT_OUT)/linux/kernel/vmlinux.bz2 $(PUBLISH_PATH)/$(TARGET_PUBLISH_PATH)/kernel/
+
+PUBLISH_LINUX_TOOLS_deps := \
+	$(HOST_OUT_EXECUTABLES)/adb \
+	$(HOST_OUT_EXECUTABLES)/fastboot
+publish_linux_tools: $(PUBLISH_LINUX_TOOLS_deps)
+	@ echo "Publish linux tools"
+	@ mkdir -p $(PUBLISH_TOOLS_PATH)
+	(cd out/host/ && cp --parents linux-x86/bin/adb $(PUBLISH_TOOLS_PATH))
+	(cd out/host/ && cp --parents linux-x86/bin/fastboot $(PUBLISH_TOOLS_PATH))
+
+publish_acs:
+ifneq ($(wildcard $(ACS_BUILDBOT_PATH)),)
+publish_acs:
+	$(eval ACS_ZIP := $(abspath $(PUBLISH_PATH)/buildbot/acs.zip))
+	$(eval RUN_ACS_ZIP := $(abspath $(PUBLISH_PATH)/buildbot/run_acs.zip))
+	$(eval ACS_CAMPAIGNS_ZIP := $(abspath $(PUBLISH_PATH)/buildbot/campaigns.zip))
+	@ echo "Publish acs tool and buildbot campaigns"
+	@ mkdir -p $(PUBLISH_PATH)/buildbot
+	(cd $(ACS_BUILDBOT_PATH) && zip -qr $(ACS_ZIP) executable/*)
+	(cd $(ACS_BUILDBOT_PATH) && zip -qr $(RUN_ACS_ZIP) run_acs/*)
+	(cd $(ACS_BUILDBOT_PATH)/campaigns && zip -qr $(ACS_CAMPAIGNS_ZIP) ./*)
+endif
+
+# Add sepdk driver
+ifneq ($(BOARD_USE_64BIT_KERNEL),true)
+# sepdk and vTunes
+-include $(TOP)/vendor/intel/tools/PRIVATE/debug_internal_tools/sepdk/src/AndroidSEP.mk
+-include $(TOP)/linux/modules/debug_tools/vtunedk/src/pax/AndroidPAX.mk
+
+# Add vtunedk: sep3_xx, vtsspp drivers. PAX driver will be used from sepdk.
+-include $(TOP)/linux/modules/debug_tools/vtunedk/src/AndroidSEP.mk
+-include $(TOP)/linux/modules/debug_tools/vtunedk/src/vtsspp/AndroidVTSSPP.mk
+
+# KCT Crashtool kernel module
+ifneq (, $(findstring "$(TARGET_BUILD_VARIANT)", "eng" "userdebug"))
+-include $(TOP)/vendor/intel/hardware/PRIVATE/monitor/ksrc/AndroidKCT.mk
+endif
+
+endif
+
+include $(CLEAR_VARS)
+LOCAL_MODULE := init.common.rc
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE_CLASS := ETC
+LOCAL_MODULE_PATH := $(TARGET_ROOT_OUT)
+include $(BUILD_SYSTEM)/base_rules.mk
+intel_common_rc := $(TOP)/device/intel/common/init.common_old.rc
+#These jars should have the same order as in build/core/dex_preopt.mk
+intel_jars :=
+ifeq ($(strip $(INTEL_FEATURE_ASF)),true)
+intel_jars:=$(intel_jars):/system/framework/com.intel.asf.jar
+endif
+ifeq ($(strip $(INTEL_FEATURE_ARKHAM)),true)
+intel_jars := $(intel_jars):/system/framework/com.intel.arkham.services.jar
+endif
+ifeq ($(strip $(DOLBY_DAP)),true)
+intel_jars := $(intel_jars):/system/framework/dolby_ds.jar
+endif
+$(LOCAL_BUILT_MODULE): $(intel_common_rc) | $(ACP)
+	@echo "Copy: $(PRIVATE_MODULE) ($@)"
+	$(copy-file-to-new-target)
+	$(hide) sed -i '/BOOTCLASSPATH/ s#$$#$(intel_jars)#' $@
diff --git a/BoardConfig.mk b/BoardConfig.mk
deleted file mode 100755
index 2f48938..0000000
--- a/BoardConfig.mk
+++ /dev/null
@@ -1,295 +0,0 @@
-TARGET_ARCH := x86
-TARGET_ARCH_VARIANT := x86-atom
-TARGET_CPU_ABI := x86
-TARGET_CPU_SMP := true
-TARGET_NO_BOOTLOADER := true
-TARGET_NO_RADIOIMAGE := true
-TARGET_NO_RECOVERY := false
-TARGET_PRELINK_MODULE := false
-TARGET_PROVIDES_INIT_RC := true
-TARGET_USERIMAGES_USE_EXT4 := true
-TARGET_RIL_DISABLE_STATUS_POLLING := true
-TARGET_BOARD_KERNEL_HEADERS := device/intel/common/kernel-headers
-KERNEL_SRC_DIR ?= linux/kernel
-
-BOARD_SYSTEMIMAGE_PARTITION_SIZE := 2147483648
-
-# Customization of BOOTCLASSPATH and init.environ.rc
-PRODUCT_BOOT_JARS := $(PRODUCT_BOOT_JARS):com.intel.multidisplay:com.intel.config
-ifeq ($(strip $(INTEL_FEATURE_AWARESERVICE)),true)
-PRODUCT_BOOT_JARS := $(PRODUCT_BOOT_JARS):com.intel.aware.awareservice
-endif
-
-TARGET_ENVIRON_RC_IN := device/intel/common/init.environ.rc.in
-
-# By default, signing is performed using ISU (Intel Signing Utility).  Can be
-# overridden on specific target BoardConfig.mk.  Currently supported values for
-# the signing method are 'xfstk', 'xfstk_no_xml', 'isu', 'isu_plat2'.
-TARGET_OS_SIGNING_METHOD ?= isu
-
-FLASHFILE_NO_OTA := true
-INTEL_CRASHLOGD := false
-INTEL_INGREDIENTS_VERSIONS := true
-INTEL_CAMERA := false
-INTEL_TEST_CAMERA := true
-
-BOARD_GPFLAG := 0x80000045
-
-USE_PRIVATE_LIBM := true
-
-ifneq ($(wildcard $(TOP)/vendor/intel/PRIVATE/cert/testkey*),)
-PRODUCT_DEFAULT_DEV_CERTIFICATE :=  $(TOP)/vendor/intel/PRIVATE/cert/testkey
-endif
-
-#Extend the AOSP path includes
-$(call add-path-map, stlport:external/stlport/stlport \
-        alsa-lib:external/alsa-lib/include \
-        libxml2:external/libxml2/include \
-        webcore-icu:external/webkit/Source/WebCore/icu \
-        tinyalsa:external/tinyalsa/include \
-        core-jni:frameworks/base/core/jni \
-        vss:frameworks/av/libvideoeditor/vss/inc \
-        vss-common:frameworks/av/libvideoeditor/vss/common/inc \
-        vss-mcs:frameworks/av/libvideoeditor/vss/mcs/inc \
-        vss-stagefrightshells:frameworks/av/libvideoeditor/vss/stagefrightshells/inc \
-        lvpp:frameworks/av/libvideoeditor/lvpp \
-        osal:frameworks/av/libvideoeditor/osal/inc \
-        frameworks-base-core:frameworks/base/core/jni \
-        frameworks-av:frameworks/av/include \
-        frameworks-openmax:frameworks/native/include/media/openmax \
-        jpeg:external/jpeg \
-        skia:external/skia/include \
-        sqlite:external/sqlite/dist \
-        opencv-cv:external/opencv/cv/include \
-        opencv-cxcore:external/opencv/cxcore/include \
-        opencv-ml:external/opencv/ml/include \
-        libstagefright:frameworks/av/media/libstagefright/include \
-        libstagefright-rtsp:frameworks/av/media/libstagefright/rtsp \
-        libmediaplayerservice:frameworks/av/media/libmediaplayerservice \
-        gtest:external/gtest/include \
-        frameworks-base-libs:frameworks/base/libs \
-        frameworks-av-services:frameworks/av/services \
-        tinycompress:external/tinycompress/include \
-        libnfc-nci:external/libnfc-nci/src/include \
-        libnfc-nci_hal:external/libnfc-nci/src/hal/include \
-        libnfc-nci_nfc:external/libnfc-nci/src/nfc/include \
-        libnfc-nci_nfa:external/libnfc-nci/src/nfa/include \
-        libnfc-nci_gki:external/libnfc-nci/src/gki \
-        libc-private:bionic/libc/private \
-        icu4c-common:external/icu4c/common \
-        expat-lib:external/expat/lib \
-        libvpx:external/libvpx \
-        protobuf:external/protobuf/src \
-        zlib:external/zlib \
-        openssl:external/openssl/include \
-        libnl-headers:external/libnl-headers \
-        system-security:system/security/keystore/include/keystore \
-        libpcap:external/libpcap \
-        libsensorhub:vendor/intel/hardware/libsensorhub/src/include \
-        icu4c-i18n:external/icu4c/i18n \
-        bt-bluez:system/bluetooth/bluez-clean-headers \
-        astl:external/astl/include \
-        libusb:external/libusb/libusb \
-        libc-kernel:bionic/libc/kernel \
-        libc-x86:bionic/libc/arch-x86/include \
-        strace:external/strace \
-        bionic:bionic \
-        opengl:frameworks/native/opengl/include)
-
-#Platform
-#Enable display driver debug interface for eng and userdebug builds
-ifneq (user,$(findstring $(TARGET_BUILD_VARIANT),user))
-export DISPLAY_DRIVER_DEBUG_INTERFACE=true
-endif
-#Enable ODEX for userdebug and user builds
-ifneq (,$(findstring $(TARGET_BUILD_VARIANT),userdebug user))
-WITH_DEXPREOPT := true
-# enable dex-preopt on prebuilt apks
-WITH_DEXPREOPT_PREBUILT := true
-endif
-
-# Enabling logs into file system for eng and user debug builds
-ifeq ($(PRODUCT_MANUFACTURER),intel)
-ifneq (, $(findstring "$(TARGET_BUILD_VARIANT)", "eng" "userdebug"))
-ADDITIONAL_DEFAULT_PROPERTIES += persist.service.apklogfs.enable=1 \
-                                 persist.service.crashlog.enable=1
-endif
-
-ifeq ($(TARGET_BUILD_VARIANT),eng)
-ADDITIONAL_DEFAULT_PROPERTIES += persist.service.profile.enable=1
-ADDITIONAL_DEFAULT_PROPERTIES += persist.service.kdumpd.enable=0
-endif
-
-# This will be replaced by the OEM/carrier with a string like android-<carrier>-us
-ADDITIONAL_DEFAULT_PROPERTIES += ro.com.google.clientidbase=android-google
-endif
-
-ifeq ($(TARGET_BUILD_VARIANT),eng)
-ADDITIONAL_DEFAULT_PROPERTIES += persist.core.enabled=1
-endif
-
-# Enabling collecting of additional information into tombstone file for eng and user debug builds
-ifneq ($(TARGET_BUILD_VARIANT),user)
-ADDITIONAL_BUILD_PROPERTIES += system.debug.plugins=libcrash.so
-endif
-
-ifeq ($(TARGET_RIL_DISABLE_STATUS_POLLING),true)
-ADDITIONAL_BUILD_PROPERTIES += ro.ril.status.polling.enable=0
-endif
-
-ifeq ($(TARGET_BUILD_VARIANT),eng)
-BUILD_INIT_EXEC := true
-endif
-
-ifeq ($(TARGET_BUILD_VARIANT),user)
-cmdline_extra += watchdog.watchdog_thresh=60
-endif
-
-ifeq ($(BOARD_BOOTMEDIA),)
-BOARD_BOOTMEDIA := sdcard
-endif
-
-BOOT_TARBALL_FORMAT := gz
-SYSTEM_TARBALL_FORMAT := gz
-
-# Required for the size calculations in definitions.mk. Since
-# definitions.mk assume a nand... a bit of space will be wasted
-BOARD_FLASH_BLOCK_SIZE := 2048
-BUILD_WITH_FULL_STAGEFRIGHT := true
-
-
-# Set property of maximal runtime heap size to 64MB for intel's mfld board.
-# If not set, one app can only use at most 16MB for runtime heap, which is
-# too small and sometimes would cause out-of-memory error.
-ADDITIONAL_BUILD_PROPERTIES += dalvik.vm.heapsize=64m
-
-# Enabling Houdini by default
-ADDITIONAL_BUILD_PROPERTIES += ro.product.cpu.abi2=armeabi-v7a
-
-# kernel Mmap memory bottom-up
-ADDITIONAL_BUILD_PROPERTIES += ro.config.personality=compat_layout
-
-# Security
-BUILD_WITH_CHAABI_SUPPORT := true
-BUILD_WITH_WATCHDOG_DAEMON_SUPPORT := true
-
-# Use Intel camera extras (HDR, face detection, panorama, etc.) by default
-USE_INTEL_CAMERA_EXTRAS := true
-
-# select libcamera2 as the camera HAL
-USE_CAMERA_HAL2 := true
-
-# Set USE_VIDEO_EFFECT to 'false' to unsupport live face effect. And Set OMX Component Input Buffer Count to 2.
-USE_VIDEO_EFFECT := true
-
-# Do not use shared object of ia_face by default
-USE_SHARED_IA_FACE := false
-
-# Use panorama v1.0 by default
-IA_PANORAMA_VERSION := 1.0
-
-# Turn on GR_STATIC_RECT_VB flag in skia to boost performance
-TARGET_USE_GR_STATIC_RECT_VB := true
-
-# customize the malloced address to be 16-byte aligned
-BOARD_MALLOC_ALIGNMENT := 16
-
-# Enabled Bluetooth GAP test build in bluez
-BUILD_BT_GAP_TEST := true
-
-# force user build variant to display build number for internal dev builds. External release builds should not set this flag
-DISPLAY_BUILD_NUMBER := true
-
-# Wi-Fi
-include device/intel/common/wifi/WifiBoardConfig.mk
-
-# Gps
-include device/intel/common/gps/GpsBoardConfig.mk
-
-# Bluetooth
-include device/intel/common/bluetooth/BtBoardConfig.mk
-
-# SPID
-#
-# Can be customized for each board simply defining "SPID=" in local BoardConfig.mk
-# Without customization, will be auto-set by kernel
-#
-# SPID format :
-#        vend:cust:manu:plat:prod:hard
-USE_SPID ?= true
-ifeq ($(USE_SPID), true)
-	SPID ?= "xxxx:xxxx:xxxx:xxxx:xxxx:xxxx"
-	cmdline_extra += androidboot.spid=$(SPID)
-endif
-
-USE_BL_SERIALNO ?= false
-ifeq ($(USE_BL_SERIALNO), false)
-	cmdline_extra += androidboot.serialno=01234567890123456789012345678901
-endif
-
-STORAGE_CFLAGS ?= -DSTORAGE_BASE_PATH=\"/dev/block/mmcblk0\" -DSTORAGE_PARTITION_FORMAT=\"%sp%d\"
-COMMON_GLOBAL_CFLAGS += $(STORAGE_CFLAGS)
-
-# OS images signing
-TARGET_BOOT_IMAGE_KEYS_PATH ?=  vendor/intel/PRIVATE/cert
-TARGET_BOOT_IMAGE_PRIV_KEY ?= $(TARGET_BOOT_IMAGE_KEYS_PATH)/OS_priv.pem
-TARGET_BOOT_IMAGE_PUB_KEY ?= $(TARGET_BOOT_IMAGE_KEYS_PATH)/OS_pub.pub
-
-# partitioning scheme
-# osip-gpt:
-# 	- osip used by iafw
-# 	- gpt used by kernel
-# full-gpt:
-# 	- gpt used by iafw
-# 	- gpt used by kernel
-TARGET_PARTITIONING_SCHEME ?= "osip-gpt"
-
-ifeq ($(TARGET_PARTITIONING_SCHEME),"full-gpt")
-	TARGET_MAKE_NO_DEFAULT_BOOTIMAGE := false
-	TARGET_MAKE_INTEL_BOOTIMAGE := false
-	TARGET_BOOTIMAGE_USE_EXT2 ?= false
-	BOARD_KERNEL_PAGESIZE ?= 2048
-	BOARD_KERNEL_BASE ?= 0x80000000
-
-	ifeq ($(TARGET_OS_SIGNING_METHOD),isu)
-		BOARD_MKBOOTIMG_ARGS += --signsize 1024 --signexec "isu_wrapper.sh isu $(TARGET_BOOT_IMAGE_PRIV_KEY) $(TARGET_BOOT_IMAGE_PUB_KEY)"
-	endif
-
-	ifeq ($(TARGET_OS_SIGNING_METHOD),uefi)
-		BOARD_MKBOOTIMG_ARGS += --signsize 256 --signexec "openssl dgst -sha256 -sign $(TARGET_BOOT_IMAGE_PRIV_KEY)"
-	endif
-endif
-
-ifeq ($(TARGET_PARTITIONING_SCHEME), "osip-gpt")
-	TARGET_MAKE_NO_DEFAULT_BOOTIMAGE := true
-	TARGET_MAKE_INTEL_BOOTIMAGE := true
-	TARGET_BOOTIMAGE_USE_EXT2 ?= true
-
-
-	INSTALLED_BOOTIMAGE_TARGET := $(PRODUCT_OUT)/boot.img
-
-	MAKE_NO_DEFAULT_BOOTIMAGE_ITEMS = $(MKBOOTIMG) \
-		$(INTERNAL_BOOTIMAGE_FILES) \
-		$(PRODUCT_OUT)/bootstub
-
-	# CAUTION: DO NOT CHANGE the flavor of COMMON_BOOTIMAGE_ARGS.  It must remain
-	# a recursively-expanded variable, i.e., it must be defined using the '=' sign.
-	COMMON_BOOTIMAGE_ARGS = --sign-with $(TARGET_OS_SIGNING_METHOD) \
-	--bootstub $(PRODUCT_OUT)/bootstub
-	MAKE_NO_DEFAULT_BOOTIMAGE = \
-		LOCAL_SIGN=$(LOCAL_SIGN) \
-		$(MKBOOTIMG) \
-		$(COMMON_BOOTIMAGE_ARGS) \
-		$(INTERNAL_BOOTIMAGE_ARGS) \
-		--type mos \
-		--output $(INSTALLED_BOOTIMAGE_TARGET) \
-		$(ADDITIONAL_BOOTIMAGE_ARGS)
-endif
-
-# BIOS TYPE
-# - iafw
-# - uefi
-TARGET_BIOS_TYPE ?= "iafw"
-
-# external release
-include device/intel/common/external/external.mk
diff --git a/BoardConfig_old.mk b/BoardConfig_old.mk
new file mode 100755
index 0000000..2f48938
--- /dev/null
+++ b/BoardConfig_old.mk
@@ -0,0 +1,295 @@
+TARGET_ARCH := x86
+TARGET_ARCH_VARIANT := x86-atom
+TARGET_CPU_ABI := x86
+TARGET_CPU_SMP := true
+TARGET_NO_BOOTLOADER := true
+TARGET_NO_RADIOIMAGE := true
+TARGET_NO_RECOVERY := false
+TARGET_PRELINK_MODULE := false
+TARGET_PROVIDES_INIT_RC := true
+TARGET_USERIMAGES_USE_EXT4 := true
+TARGET_RIL_DISABLE_STATUS_POLLING := true
+TARGET_BOARD_KERNEL_HEADERS := device/intel/common/kernel-headers
+KERNEL_SRC_DIR ?= linux/kernel
+
+BOARD_SYSTEMIMAGE_PARTITION_SIZE := 2147483648
+
+# Customization of BOOTCLASSPATH and init.environ.rc
+PRODUCT_BOOT_JARS := $(PRODUCT_BOOT_JARS):com.intel.multidisplay:com.intel.config
+ifeq ($(strip $(INTEL_FEATURE_AWARESERVICE)),true)
+PRODUCT_BOOT_JARS := $(PRODUCT_BOOT_JARS):com.intel.aware.awareservice
+endif
+
+TARGET_ENVIRON_RC_IN := device/intel/common/init.environ.rc.in
+
+# By default, signing is performed using ISU (Intel Signing Utility).  Can be
+# overridden on specific target BoardConfig.mk.  Currently supported values for
+# the signing method are 'xfstk', 'xfstk_no_xml', 'isu', 'isu_plat2'.
+TARGET_OS_SIGNING_METHOD ?= isu
+
+FLASHFILE_NO_OTA := true
+INTEL_CRASHLOGD := false
+INTEL_INGREDIENTS_VERSIONS := true
+INTEL_CAMERA := false
+INTEL_TEST_CAMERA := true
+
+BOARD_GPFLAG := 0x80000045
+
+USE_PRIVATE_LIBM := true
+
+ifneq ($(wildcard $(TOP)/vendor/intel/PRIVATE/cert/testkey*),)
+PRODUCT_DEFAULT_DEV_CERTIFICATE :=  $(TOP)/vendor/intel/PRIVATE/cert/testkey
+endif
+
+#Extend the AOSP path includes
+$(call add-path-map, stlport:external/stlport/stlport \
+        alsa-lib:external/alsa-lib/include \
+        libxml2:external/libxml2/include \
+        webcore-icu:external/webkit/Source/WebCore/icu \
+        tinyalsa:external/tinyalsa/include \
+        core-jni:frameworks/base/core/jni \
+        vss:frameworks/av/libvideoeditor/vss/inc \
+        vss-common:frameworks/av/libvideoeditor/vss/common/inc \
+        vss-mcs:frameworks/av/libvideoeditor/vss/mcs/inc \
+        vss-stagefrightshells:frameworks/av/libvideoeditor/vss/stagefrightshells/inc \
+        lvpp:frameworks/av/libvideoeditor/lvpp \
+        osal:frameworks/av/libvideoeditor/osal/inc \
+        frameworks-base-core:frameworks/base/core/jni \
+        frameworks-av:frameworks/av/include \
+        frameworks-openmax:frameworks/native/include/media/openmax \
+        jpeg:external/jpeg \
+        skia:external/skia/include \
+        sqlite:external/sqlite/dist \
+        opencv-cv:external/opencv/cv/include \
+        opencv-cxcore:external/opencv/cxcore/include \
+        opencv-ml:external/opencv/ml/include \
+        libstagefright:frameworks/av/media/libstagefright/include \
+        libstagefright-rtsp:frameworks/av/media/libstagefright/rtsp \
+        libmediaplayerservice:frameworks/av/media/libmediaplayerservice \
+        gtest:external/gtest/include \
+        frameworks-base-libs:frameworks/base/libs \
+        frameworks-av-services:frameworks/av/services \
+        tinycompress:external/tinycompress/include \
+        libnfc-nci:external/libnfc-nci/src/include \
+        libnfc-nci_hal:external/libnfc-nci/src/hal/include \
+        libnfc-nci_nfc:external/libnfc-nci/src/nfc/include \
+        libnfc-nci_nfa:external/libnfc-nci/src/nfa/include \
+        libnfc-nci_gki:external/libnfc-nci/src/gki \
+        libc-private:bionic/libc/private \
+        icu4c-common:external/icu4c/common \
+        expat-lib:external/expat/lib \
+        libvpx:external/libvpx \
+        protobuf:external/protobuf/src \
+        zlib:external/zlib \
+        openssl:external/openssl/include \
+        libnl-headers:external/libnl-headers \
+        system-security:system/security/keystore/include/keystore \
+        libpcap:external/libpcap \
+        libsensorhub:vendor/intel/hardware/libsensorhub/src/include \
+        icu4c-i18n:external/icu4c/i18n \
+        bt-bluez:system/bluetooth/bluez-clean-headers \
+        astl:external/astl/include \
+        libusb:external/libusb/libusb \
+        libc-kernel:bionic/libc/kernel \
+        libc-x86:bionic/libc/arch-x86/include \
+        strace:external/strace \
+        bionic:bionic \
+        opengl:frameworks/native/opengl/include)
+
+#Platform
+#Enable display driver debug interface for eng and userdebug builds
+ifneq (user,$(findstring $(TARGET_BUILD_VARIANT),user))
+export DISPLAY_DRIVER_DEBUG_INTERFACE=true
+endif
+#Enable ODEX for userdebug and user builds
+ifneq (,$(findstring $(TARGET_BUILD_VARIANT),userdebug user))
+WITH_DEXPREOPT := true
+# enable dex-preopt on prebuilt apks
+WITH_DEXPREOPT_PREBUILT := true
+endif
+
+# Enabling logs into file system for eng and user debug builds
+ifeq ($(PRODUCT_MANUFACTURER),intel)
+ifneq (, $(findstring "$(TARGET_BUILD_VARIANT)", "eng" "userdebug"))
+ADDITIONAL_DEFAULT_PROPERTIES += persist.service.apklogfs.enable=1 \
+                                 persist.service.crashlog.enable=1
+endif
+
+ifeq ($(TARGET_BUILD_VARIANT),eng)
+ADDITIONAL_DEFAULT_PROPERTIES += persist.service.profile.enable=1
+ADDITIONAL_DEFAULT_PROPERTIES += persist.service.kdumpd.enable=0
+endif
+
+# This will be replaced by the OEM/carrier with a string like android-<carrier>-us
+ADDITIONAL_DEFAULT_PROPERTIES += ro.com.google.clientidbase=android-google
+endif
+
+ifeq ($(TARGET_BUILD_VARIANT),eng)
+ADDITIONAL_DEFAULT_PROPERTIES += persist.core.enabled=1
+endif
+
+# Enabling collecting of additional information into tombstone file for eng and user debug builds
+ifneq ($(TARGET_BUILD_VARIANT),user)
+ADDITIONAL_BUILD_PROPERTIES += system.debug.plugins=libcrash.so
+endif
+
+ifeq ($(TARGET_RIL_DISABLE_STATUS_POLLING),true)
+ADDITIONAL_BUILD_PROPERTIES += ro.ril.status.polling.enable=0
+endif
+
+ifeq ($(TARGET_BUILD_VARIANT),eng)
+BUILD_INIT_EXEC := true
+endif
+
+ifeq ($(TARGET_BUILD_VARIANT),user)
+cmdline_extra += watchdog.watchdog_thresh=60
+endif
+
+ifeq ($(BOARD_BOOTMEDIA),)
+BOARD_BOOTMEDIA := sdcard
+endif
+
+BOOT_TARBALL_FORMAT := gz
+SYSTEM_TARBALL_FORMAT := gz
+
+# Required for the size calculations in definitions.mk. Since
+# definitions.mk assume a nand... a bit of space will be wasted
+BOARD_FLASH_BLOCK_SIZE := 2048
+BUILD_WITH_FULL_STAGEFRIGHT := true
+
+
+# Set property of maximal runtime heap size to 64MB for intel's mfld board.
+# If not set, one app can only use at most 16MB for runtime heap, which is
+# too small and sometimes would cause out-of-memory error.
+ADDITIONAL_BUILD_PROPERTIES += dalvik.vm.heapsize=64m
+
+# Enabling Houdini by default
+ADDITIONAL_BUILD_PROPERTIES += ro.product.cpu.abi2=armeabi-v7a
+
+# kernel Mmap memory bottom-up
+ADDITIONAL_BUILD_PROPERTIES += ro.config.personality=compat_layout
+
+# Security
+BUILD_WITH_CHAABI_SUPPORT := true
+BUILD_WITH_WATCHDOG_DAEMON_SUPPORT := true
+
+# Use Intel camera extras (HDR, face detection, panorama, etc.) by default
+USE_INTEL_CAMERA_EXTRAS := true
+
+# select libcamera2 as the camera HAL
+USE_CAMERA_HAL2 := true
+
+# Set USE_VIDEO_EFFECT to 'false' to unsupport live face effect. And Set OMX Component Input Buffer Count to 2.
+USE_VIDEO_EFFECT := true
+
+# Do not use shared object of ia_face by default
+USE_SHARED_IA_FACE := false
+
+# Use panorama v1.0 by default
+IA_PANORAMA_VERSION := 1.0
+
+# Turn on GR_STATIC_RECT_VB flag in skia to boost performance
+TARGET_USE_GR_STATIC_RECT_VB := true
+
+# customize the malloced address to be 16-byte aligned
+BOARD_MALLOC_ALIGNMENT := 16
+
+# Enabled Bluetooth GAP test build in bluez
+BUILD_BT_GAP_TEST := true
+
+# force user build variant to display build number for internal dev builds. External release builds should not set this flag
+DISPLAY_BUILD_NUMBER := true
+
+# Wi-Fi
+include device/intel/common/wifi/WifiBoardConfig.mk
+
+# Gps
+include device/intel/common/gps/GpsBoardConfig.mk
+
+# Bluetooth
+include device/intel/common/bluetooth/BtBoardConfig.mk
+
+# SPID
+#
+# Can be customized for each board simply defining "SPID=" in local BoardConfig.mk
+# Without customization, will be auto-set by kernel
+#
+# SPID format :
+#        vend:cust:manu:plat:prod:hard
+USE_SPID ?= true
+ifeq ($(USE_SPID), true)
+	SPID ?= "xxxx:xxxx:xxxx:xxxx:xxxx:xxxx"
+	cmdline_extra += androidboot.spid=$(SPID)
+endif
+
+USE_BL_SERIALNO ?= false
+ifeq ($(USE_BL_SERIALNO), false)
+	cmdline_extra += androidboot.serialno=01234567890123456789012345678901
+endif
+
+STORAGE_CFLAGS ?= -DSTORAGE_BASE_PATH=\"/dev/block/mmcblk0\" -DSTORAGE_PARTITION_FORMAT=\"%sp%d\"
+COMMON_GLOBAL_CFLAGS += $(STORAGE_CFLAGS)
+
+# OS images signing
+TARGET_BOOT_IMAGE_KEYS_PATH ?=  vendor/intel/PRIVATE/cert
+TARGET_BOOT_IMAGE_PRIV_KEY ?= $(TARGET_BOOT_IMAGE_KEYS_PATH)/OS_priv.pem
+TARGET_BOOT_IMAGE_PUB_KEY ?= $(TARGET_BOOT_IMAGE_KEYS_PATH)/OS_pub.pub
+
+# partitioning scheme
+# osip-gpt:
+# 	- osip used by iafw
+# 	- gpt used by kernel
+# full-gpt:
+# 	- gpt used by iafw
+# 	- gpt used by kernel
+TARGET_PARTITIONING_SCHEME ?= "osip-gpt"
+
+ifeq ($(TARGET_PARTITIONING_SCHEME),"full-gpt")
+	TARGET_MAKE_NO_DEFAULT_BOOTIMAGE := false
+	TARGET_MAKE_INTEL_BOOTIMAGE := false
+	TARGET_BOOTIMAGE_USE_EXT2 ?= false
+	BOARD_KERNEL_PAGESIZE ?= 2048
+	BOARD_KERNEL_BASE ?= 0x80000000
+
+	ifeq ($(TARGET_OS_SIGNING_METHOD),isu)
+		BOARD_MKBOOTIMG_ARGS += --signsize 1024 --signexec "isu_wrapper.sh isu $(TARGET_BOOT_IMAGE_PRIV_KEY) $(TARGET_BOOT_IMAGE_PUB_KEY)"
+	endif
+
+	ifeq ($(TARGET_OS_SIGNING_METHOD),uefi)
+		BOARD_MKBOOTIMG_ARGS += --signsize 256 --signexec "openssl dgst -sha256 -sign $(TARGET_BOOT_IMAGE_PRIV_KEY)"
+	endif
+endif
+
+ifeq ($(TARGET_PARTITIONING_SCHEME), "osip-gpt")
+	TARGET_MAKE_NO_DEFAULT_BOOTIMAGE := true
+	TARGET_MAKE_INTEL_BOOTIMAGE := true
+	TARGET_BOOTIMAGE_USE_EXT2 ?= true
+
+
+	INSTALLED_BOOTIMAGE_TARGET := $(PRODUCT_OUT)/boot.img
+
+	MAKE_NO_DEFAULT_BOOTIMAGE_ITEMS = $(MKBOOTIMG) \
+		$(INTERNAL_BOOTIMAGE_FILES) \
+		$(PRODUCT_OUT)/bootstub
+
+	# CAUTION: DO NOT CHANGE the flavor of COMMON_BOOTIMAGE_ARGS.  It must remain
+	# a recursively-expanded variable, i.e., it must be defined using the '=' sign.
+	COMMON_BOOTIMAGE_ARGS = --sign-with $(TARGET_OS_SIGNING_METHOD) \
+	--bootstub $(PRODUCT_OUT)/bootstub
+	MAKE_NO_DEFAULT_BOOTIMAGE = \
+		LOCAL_SIGN=$(LOCAL_SIGN) \
+		$(MKBOOTIMG) \
+		$(COMMON_BOOTIMAGE_ARGS) \
+		$(INTERNAL_BOOTIMAGE_ARGS) \
+		--type mos \
+		--output $(INSTALLED_BOOTIMAGE_TARGET) \
+		$(ADDITIONAL_BOOTIMAGE_ARGS)
+endif
+
+# BIOS TYPE
+# - iafw
+# - uefi
+TARGET_BIOS_TYPE ?= "iafw"
+
+# external release
+include device/intel/common/external/external.mk
diff --git a/common.mk b/common.mk
deleted file mode 100644
index 809ae94..0000000
--- a/common.mk
+++ /dev/null
@@ -1,177 +0,0 @@
-PRODUCT_MANUFACTURER := intel
-override PRODUCT_BRAND := intel
-
-COMMON_PATH := device/intel/common
-
-#Add SensorCal App
-PRODUCT_PACKAGES += \
-    SensorCal
-
-#Add update_recovery binary for OTA
-PRODUCT_PACKAGES += \
-    update_recovery
-
-#Add make_ext4fs tool for JB's encryption app feature
-PRODUCT_PACKAGES += \
-    make_ext4fs
-
-#for burst capture
-PRODUCT_PACKAGES += \
-    fast_click.pcm
-
-#Use partlink block devices
-PRODUCT_PACKAGES += \
-    partlink
-
-# SpeechRecorder for eng build variant
-ifneq ($(filter $(TARGET_BUILD_VARIANT),eng),)
-PRODUCT_PACKAGES += \
-    SpeechRecorder
-endif
-
-# copy boot animation resources
-PRODUCT_COPY_FILES += \
-    $(COMMON_PATH)/bootanimation.zip:system/media/bootanimation.zip
-
-# Copy sar manager resources
-PRODUCT_COPY_FILES += \
-    $(COMMON_PATH)/sarconfig.xml:system/etc/sarconfig.xml
-
-# Target image build tools.
-# These are defined in libintelprov/Android.mk
-# Note: some of these have ".py" (python) suffixes. The suffix must
-#       not be specified in PRODUCT_PACKAGES... it gets stripped by the
-#       core/multi_prebuilt.mk auto-prebuilt-boilerplate rule.
-PRODUCT_PACKAGES += \
-    releasetools \
-    ota_from_target_files \
-    check_target_files_signatures \
-    common \
-    edify_generator \
-    lfstk_wrapper \
-    mfld_osimage \
-    product_name_mapping \
-    sign_target_files_apks
-
-#Houdini prebuilt
-HOUDINI_ARM_PREBUILTS_DIR := vendor/intel/houdini/arm
-houdini_prebuilt_stamp := $(HOUDINI_ARM_PREBUILTS_DIR)/stamp-prebuilt-done
-houdini_prebuilt_done := $(wildcard $(houdini_prebuilt_stamp))
-ifneq ($(houdini_prebuilt_done),)
-INTEL_HOUDINI := true
-#Houdini
-PRODUCT_PACKAGES += libhoudini \
-    houdini \
-    enable_houdini \
-    disable_houdini \
-    check.xml \
-    cpuinfo \
-    cpuinfo.neon
-
-#houdini arm libraries
--include vendor/intel/houdini/houdini.mk
-endif
-
-#GMS package
--include vendor/google/PRIVATE/gms/products/gms.mk
-
-ifneq ($(strip $(TARGET_BUILD_VARIANT)),user)
-PRODUCT_COPY_FILES += \
-        $(COMMON_PATH)/atproxy_usbreset:system/bin/atproxy_usbreset
-endif
-PRODUCT_COPY_FILES += \
-        $(COMMON_PATH)/init.rc:root/init.rc \
-        $(COMMON_PATH)/props.rc:root/props.rc \
-        $(COMMON_PATH)/ueventd.modules.blacklist:root/ueventd.modules.blacklist \
-        $(COMMON_PATH)/init.partlink.rc:root/init.partlink.rc
-
-PERMISSIONS_PATH := frameworks/native/data/etc
-PRODUCT_COPY_FILES += \
-        $(PERMISSIONS_PATH)/handheld_core_hardware.xml:system/etc/permissions/handheld_core_hardware.xml \
-        $(PERMISSIONS_PATH)/android.software.sip.voip.xml:system/etc/permissions/android.software.sip.voip.xml \
-        $(PERMISSIONS_PATH)/android.hardware.touchscreen.xml:system/etc/permissions/android.hardware.touchscreen.xml \
-        $(PERMISSIONS_PATH)/android.hardware.touchscreen.multitouch.xml:system/etc/permissions/android.hardware.touchscreen.multitouch.xml
-
-# Valgrind for eng build variant
-ifneq ($(filter $(TARGET_BUILD_VARIANT),eng),)
-PRODUCT_PACKAGES += \
-    valgrind_pack
-endif
-
-# Power Debug Tools
--include vendor/intel/hardware/PRIVATE/platform_test/power-debug/power-debug.mk
-
-ifneq (, $(findstring "$(TARGET_BUILD_VARIANT)", "eng" "userdebug"))
-# memmonitor (not for user builds)
--include vendor/intel/tools/PRIVATE/log_infra/monitor/memmonitor/memmonitor.mk
-
-# thermal debug tools/scripts (not for user builds)
--include vendor/intel/tools/PRIVATE/debug_internal_tools/thermal/thermal.mk
-
-# MPM (formely Kratos) (not for user builds)
--include vendor/intel/apps/PRIVATE/Kratos/products/MPM.mk
-
-# vTunes binaires (not for user builds)
--include vendor/intel/tools/PRIVATE/debug_internal_tools/sepdk/bin/sepbin.mk
-
-# VISA binaires (not for user builds)
--include vendor/intel/tools/PRIVATE/debug_internal_tools/visadk/bin/visabin.mk
-endif
-
-# Crashinfo
--include vendor/intel/tools/PRIVATE/log_infra/crashinfo/crashinfo.mk
-
-#crash report
-PRODUCT_COPY_FILES += \
-vendor/intel/tools/log_capture/crashlog/monitor_crashenv:system/bin/monitor_crashenv \
-vendor/intel/tools/log_capture/crashlog/del_hist.sh:system/bin/del_hist.sh \
-vendor/intel/tools/log_capture/crashlog/del_log.sh:system/bin/del_log.sh \
-vendor/intel/tools/log_capture/crashlog/dumpstate_dropbox.sh:system/bin/dumpstate_dropbox.sh
-
-#Bring in camera media effects
-$(call inherit-product-if-exists, frameworks/base/data/videos/VideoPackage2.mk)
-
-# PSI Recorder (not for user builds)
-ifneq (, $(findstring "$(TARGET_BUILD_VARIANT)", "eng" "userdebug"))
- PRODUCT_PACKAGES += \
-     PSI_Recorder
-endif
-
-# AudioToolBox (for eng builds)
-ifneq (, $(findstring "$(TARGET_BUILD_VARIANT)", "eng"))
- PRODUCT_PACKAGES += \
-     AudioToolBox
-endif
-
-# network (wifi, bt) data dump (tcpdump is present only in eng. builds)
-ifneq (, $(findstring "$(TARGET_BUILD_VARIANT)", "eng" "userdebug"))
- PRODUCT_COPY_FILES += \
-     $(COMMON_PATH)/init.dump.rc:root/init.dump.rc
-endif
-
-# AMTL unified configuration
--include vendor/intel/tools/log_capture/amtl/src/com/intel/amtl/config_catalog/amtl.mk
-
-PRODUCT_PACKAGES += \
-    init.common.rc
-
-# Arkham
-PRODUCT_PACKAGES += \
-    init.intel.features.rc \
-    com.intel.config \
-    com.intel.config.xml \
-    com.intel.arkham.services \
-    com.intel.arkham.services.xml \
-    ContainerDeviceAdmin \
-    ContainerLauncher
-PRODUCT_PACKAGES_ENG += \
-    cm
-
-# This library is required for Intel's implementation of Dalvik
-# libpcgdvmjit is a part of Dalvik JIT compiler
-PRODUCT_PACKAGES += libpcgdvmjit
-
-# This library is required for Intel's implementation of Dalvik
-# libcrash is a library which provides recorded state of an applications
-# which crashed while running on Dalvik VM
-PRODUCT_PACKAGES += libcrash
diff --git a/common_old.mk b/common_old.mk
new file mode 100644
index 0000000..809ae94
--- /dev/null
+++ b/common_old.mk
@@ -0,0 +1,177 @@
+PRODUCT_MANUFACTURER := intel
+override PRODUCT_BRAND := intel
+
+COMMON_PATH := device/intel/common
+
+#Add SensorCal App
+PRODUCT_PACKAGES += \
+    SensorCal
+
+#Add update_recovery binary for OTA
+PRODUCT_PACKAGES += \
+    update_recovery
+
+#Add make_ext4fs tool for JB's encryption app feature
+PRODUCT_PACKAGES += \
+    make_ext4fs
+
+#for burst capture
+PRODUCT_PACKAGES += \
+    fast_click.pcm
+
+#Use partlink block devices
+PRODUCT_PACKAGES += \
+    partlink
+
+# SpeechRecorder for eng build variant
+ifneq ($(filter $(TARGET_BUILD_VARIANT),eng),)
+PRODUCT_PACKAGES += \
+    SpeechRecorder
+endif
+
+# copy boot animation resources
+PRODUCT_COPY_FILES += \
+    $(COMMON_PATH)/bootanimation.zip:system/media/bootanimation.zip
+
+# Copy sar manager resources
+PRODUCT_COPY_FILES += \
+    $(COMMON_PATH)/sarconfig.xml:system/etc/sarconfig.xml
+
+# Target image build tools.
+# These are defined in libintelprov/Android.mk
+# Note: some of these have ".py" (python) suffixes. The suffix must
+#       not be specified in PRODUCT_PACKAGES... it gets stripped by the
+#       core/multi_prebuilt.mk auto-prebuilt-boilerplate rule.
+PRODUCT_PACKAGES += \
+    releasetools \
+    ota_from_target_files \
+    check_target_files_signatures \
+    common \
+    edify_generator \
+    lfstk_wrapper \
+    mfld_osimage \
+    product_name_mapping \
+    sign_target_files_apks
+
+#Houdini prebuilt
+HOUDINI_ARM_PREBUILTS_DIR := vendor/intel/houdini/arm
+houdini_prebuilt_stamp := $(HOUDINI_ARM_PREBUILTS_DIR)/stamp-prebuilt-done
+houdini_prebuilt_done := $(wildcard $(houdini_prebuilt_stamp))
+ifneq ($(houdini_prebuilt_done),)
+INTEL_HOUDINI := true
+#Houdini
+PRODUCT_PACKAGES += libhoudini \
+    houdini \
+    enable_houdini \
+    disable_houdini \
+    check.xml \
+    cpuinfo \
+    cpuinfo.neon
+
+#houdini arm libraries
+-include vendor/intel/houdini/houdini.mk
+endif
+
+#GMS package
+-include vendor/google/PRIVATE/gms/products/gms.mk
+
+ifneq ($(strip $(TARGET_BUILD_VARIANT)),user)
+PRODUCT_COPY_FILES += \
+        $(COMMON_PATH)/atproxy_usbreset:system/bin/atproxy_usbreset
+endif
+PRODUCT_COPY_FILES += \
+        $(COMMON_PATH)/init.rc:root/init.rc \
+        $(COMMON_PATH)/props.rc:root/props.rc \
+        $(COMMON_PATH)/ueventd.modules.blacklist:root/ueventd.modules.blacklist \
+        $(COMMON_PATH)/init.partlink.rc:root/init.partlink.rc
+
+PERMISSIONS_PATH := frameworks/native/data/etc
+PRODUCT_COPY_FILES += \
+        $(PERMISSIONS_PATH)/handheld_core_hardware.xml:system/etc/permissions/handheld_core_hardware.xml \
+        $(PERMISSIONS_PATH)/android.software.sip.voip.xml:system/etc/permissions/android.software.sip.voip.xml \
+        $(PERMISSIONS_PATH)/android.hardware.touchscreen.xml:system/etc/permissions/android.hardware.touchscreen.xml \
+        $(PERMISSIONS_PATH)/android.hardware.touchscreen.multitouch.xml:system/etc/permissions/android.hardware.touchscreen.multitouch.xml
+
+# Valgrind for eng build variant
+ifneq ($(filter $(TARGET_BUILD_VARIANT),eng),)
+PRODUCT_PACKAGES += \
+    valgrind_pack
+endif
+
+# Power Debug Tools
+-include vendor/intel/hardware/PRIVATE/platform_test/power-debug/power-debug.mk
+
+ifneq (, $(findstring "$(TARGET_BUILD_VARIANT)", "eng" "userdebug"))
+# memmonitor (not for user builds)
+-include vendor/intel/tools/PRIVATE/log_infra/monitor/memmonitor/memmonitor.mk
+
+# thermal debug tools/scripts (not for user builds)
+-include vendor/intel/tools/PRIVATE/debug_internal_tools/thermal/thermal.mk
+
+# MPM (formely Kratos) (not for user builds)
+-include vendor/intel/apps/PRIVATE/Kratos/products/MPM.mk
+
+# vTunes binaires (not for user builds)
+-include vendor/intel/tools/PRIVATE/debug_internal_tools/sepdk/bin/sepbin.mk
+
+# VISA binaires (not for user builds)
+-include vendor/intel/tools/PRIVATE/debug_internal_tools/visadk/bin/visabin.mk
+endif
+
+# Crashinfo
+-include vendor/intel/tools/PRIVATE/log_infra/crashinfo/crashinfo.mk
+
+#crash report
+PRODUCT_COPY_FILES += \
+vendor/intel/tools/log_capture/crashlog/monitor_crashenv:system/bin/monitor_crashenv \
+vendor/intel/tools/log_capture/crashlog/del_hist.sh:system/bin/del_hist.sh \
+vendor/intel/tools/log_capture/crashlog/del_log.sh:system/bin/del_log.sh \
+vendor/intel/tools/log_capture/crashlog/dumpstate_dropbox.sh:system/bin/dumpstate_dropbox.sh
+
+#Bring in camera media effects
+$(call inherit-product-if-exists, frameworks/base/data/videos/VideoPackage2.mk)
+
+# PSI Recorder (not for user builds)
+ifneq (, $(findstring "$(TARGET_BUILD_VARIANT)", "eng" "userdebug"))
+ PRODUCT_PACKAGES += \
+     PSI_Recorder
+endif
+
+# AudioToolBox (for eng builds)
+ifneq (, $(findstring "$(TARGET_BUILD_VARIANT)", "eng"))
+ PRODUCT_PACKAGES += \
+     AudioToolBox
+endif
+
+# network (wifi, bt) data dump (tcpdump is present only in eng. builds)
+ifneq (, $(findstring "$(TARGET_BUILD_VARIANT)", "eng" "userdebug"))
+ PRODUCT_COPY_FILES += \
+     $(COMMON_PATH)/init.dump.rc:root/init.dump.rc
+endif
+
+# AMTL unified configuration
+-include vendor/intel/tools/log_capture/amtl/src/com/intel/amtl/config_catalog/amtl.mk
+
+PRODUCT_PACKAGES += \
+    init.common.rc
+
+# Arkham
+PRODUCT_PACKAGES += \
+    init.intel.features.rc \
+    com.intel.config \
+    com.intel.config.xml \
+    com.intel.arkham.services \
+    com.intel.arkham.services.xml \
+    ContainerDeviceAdmin \
+    ContainerLauncher
+PRODUCT_PACKAGES_ENG += \
+    cm
+
+# This library is required for Intel's implementation of Dalvik
+# libpcgdvmjit is a part of Dalvik JIT compiler
+PRODUCT_PACKAGES += libpcgdvmjit
+
+# This library is required for Intel's implementation of Dalvik
+# libcrash is a library which provides recorded state of an applications
+# which crashed while running on Dalvik VM
+PRODUCT_PACKAGES += libcrash
diff --git a/init.common.rc b/init.common.rc
deleted file mode 100644
index c82f64e..0000000
--- a/init.common.rc
+++ /dev/null
@@ -1,186 +0,0 @@
-import /init.watchdog.rc
-import /init.partlink.rc
-import /init.intel.features.rc
-
-on early-init
-    # set permission for charger-mode
-    chmod 0750 /charger
-    chown system system /dev/dri/card0
-    chmod 0666 /dev/dri/card0
-    symlink /dev/dri/card0 /dev/card0
-
-on init
-    # set usb serial number
-    write /sys/class/android_usb/android0/iSerial ${ro.serialno}
-
-    mkdir /storage/emulated 0555 root root
-
-    mkdir /mnt/shell/emulated 0700 shell shell
-
-    mkdir /mnt/media_rw/sdcard1 0700 media_rw media_rw
-    mkdir /mnt/media_rw/usbcard1 0700 media_rw media_rw
-
-    export EXTERNAL_STORAGE /storage/emulated/legacy
-    export EMULATED_STORAGE_SOURCE /mnt/shell/emulated
-    export EMULATED_STORAGE_TARGET /storage/emulated
-    # Disable SECONDARY_STORAGE in common
-    # Shall enable it in product
-    #export SECONDARY_STORAGE /storage/sdcard1
-
-    # Support legacy paths
-    symlink /storage/emulated/legacy /sdcard
-    symlink /storage/emulated/legacy /mnt/sdcard
-    symlink /storage/emulated/legacy /storage/sdcard0
-    symlink /mnt/shell/emulated/0 /storage/emulated/legacy
-
-    # Support external SD card
-    mkdir /storage/sdcard1 0700 root root
-
-    # Support USB Disk
-    mkdir /storage/usbcard1 0700 root root
-
-on boot
-    chown system system /dev/pvr_sync
-    chmod 666 /dev/pvr_sync
-
-#   chown system system /dev/dri/card0
-#   chmod 0666 /dev/dri/card0
-#   symlink /dev/dri/card0 /dev/card0
-
-    # IMG Graphics specific setup. See also "service pvrsrvctl"
-    # The permissions below should be tighter.
-    chown system system /dev/card0
-    chown system system /sys/class/backlight/psb-bl/brightness
-    chown system system /sys/class/backlight/psb-bl/max_brightness
-    chown system system /sys/class/backlight/psb-bl/actual_brightness
-    chmod 0666 /dev/card0
-    chmod 0664 /sys/class/backlight/psb-bl/brightness
-    chmod 0664 /sys/class/backlight/psb-bl/max_brightness
-    chmod 0664 /sys/class/backlight/psb-bl/actual_brightness
-
-    #Change mmc queue nr_requests from 128 to 32 to reduce write latencies
-    write /sys/block/mmcblk0/queue/nr_requests 32
-
-
-# Change TCP Net-Core buffers sizes to improve cellular data throughput
-     write /proc/sys/net/core/rmem_default 1048576
-     write /proc/sys/net/core/rmem_max 2097152
-     write /proc/sys/net/core/wmem_max 1048576
-
-    #Set freezing timeout value as 2000ms
-    write /sys/power/pm_freeze_timeout 2000
-
-on fs
-    mkdir /factory 0775 system system
-    mkdir /config 0775 system system
-    mkdir /media 0775 media media
-    mount_all /fstab.${ro.hardware}
-    mkdir /config/wifi
-    chown system wifi /config/wifi
-    chmod 0770 /config/wifi
-
-on post-fs
-# create virtual SD card at /mnt/sdcard, based on the /data/media directory
-# daemon will drop to user/group system/media_rw after initializing
-# underlying files in /data/media will be created with user and group media_rw (1023)
-service sdcard /system/bin/sdcard -u 1023 -g 1023 -l /data/media /mnt/shell/emulated
-    class late_start
-
-service fuse_sdcard1 /system/bin/sdcard -u 1023 -g 1023 -w 1023 -d /mnt/media_rw/sdcard1 /storage/sdcard1
-    class late_start
-    disabled
-
-service fuse_usbcard1 /system/bin/sdcard -u 1023 -g 1023 -w 1023 -d /mnt/media_rw/usbcard1 /storage/usbcard1
-    class late_start
-    disabled
-
-on post-fs-data
-    mkdir /data/system/ 0770 system system
-    write /proc/sys/kernel/ctrl-alt-del 0
-
-    mkdir /mnt/asec/media 0770 media media
-
-    # Set indication (checked by vold) that we have finished this action
-    setprop vold.post_fs_data_done 1
-
-    # Set this property to force the camera shutter sound to play on speaker
-    setprop ro.camera.sound.forced 1
-
-    # Set this property to avoid fm rx to be muted
-    setprop ro.fmrx.sound.forced 1
-
-    # Set this property to enable Thermal service
-    setprop persist.service.thermal 1
-    # Properties for Thermal Service
-    setprop persist.thermal.shutdown.msg 1
-    setprop persist.thermal.shutdown.vibra 1
-    setprop persist.thermal.shutdown.tone 1
-    setprop persist.thermal.display.msg 1
-    setprop persist.thermal.display.vibra 1
-
-on charger
-    chown system system /dev/dri/card0
-    chmod 0666 /dev/dri/card0
-    symlink /dev/dri/card0 /dev/card0
-
-    # IMG Graphics specific setup. See also "service pvrsrvctl"
-    # The permissions below should be tighter.
-    chown system system /dev/card0
-
-    start pvrsrvctl
-    # reduce backlight
-    write /sys/class/backlight/psb-bl/brightness 50
-    #default setting to enable charging in COS
-    setprop sys.usb.config charging
-
-
-service pvrsrvctl /system/vendor/bin/pvrsrvctl --no-module --start
-    class core
-    oneshot
-    user root
-
-service ct_monitor /system/bin/ct_monitor
-    class core
-    user root
-
-service charger_app /charger
-    class charger
-    user root
-
-service drm /system/bin/drmserver
-    class main
-    user drm
-    group drm system inet drmrpc sdcard_r security
-
-#Enable Houdini for execuable
-service enable_houdini /system/bin/enable_houdini
-    class main
-    oneshot
-
-# This property trigger has added to imitiate the previous behavior of "adb root".
-# The adb gadget driver used to reset the USB bus when the adbd daemon exited,
-# and the host side adb relied on this behavior to force it to reconnect with the
-# new adbd instance after init relaunches it. So now we force the USB bus to reset
-# here when adbd sets the service.adb.root property to 1.  We also restart adbd here
-# rather than waiting for init to notice its death and restarting it so the timing
-# of USB resetting and adb restarting more closely matches the previous behavior.
-on property:service.adb.root=1
-    write /sys/class/android_usb/android0/enable 0
-    restart adbd
-    write /sys/class/android_usb/android0/enable 1
-
-on property:sys.property_forcedshutdown=1
-    write /sys/module/intel_mid_osip/parameters/force_shutdown_occured 1
-
-on property:sys.shutdown.requested=0
-    write /sys/devices/virtual/misc/watchdog/shutdown_ongoing 1
-
-on property:sys.shutdown.requested=1
-    write /sys/devices/virtual/misc/watchdog/reboot_ongoing 1
-
-on property:sys.shutdown.requested=1recovery
-    write /sys/devices/virtual/misc/watchdog/reboot_ongoing 1
-
-on property:sys.shutdown.requested=1bootloader
-    write /sys/devices/virtual/misc/watchdog/reboot_ongoing 1
-
diff --git a/init.common_old.rc b/init.common_old.rc
new file mode 100644
index 0000000..c82f64e
--- /dev/null
+++ b/init.common_old.rc
@@ -0,0 +1,186 @@
+import /init.watchdog.rc
+import /init.partlink.rc
+import /init.intel.features.rc
+
+on early-init
+    # set permission for charger-mode
+    chmod 0750 /charger
+    chown system system /dev/dri/card0
+    chmod 0666 /dev/dri/card0
+    symlink /dev/dri/card0 /dev/card0
+
+on init
+    # set usb serial number
+    write /sys/class/android_usb/android0/iSerial ${ro.serialno}
+
+    mkdir /storage/emulated 0555 root root
+
+    mkdir /mnt/shell/emulated 0700 shell shell
+
+    mkdir /mnt/media_rw/sdcard1 0700 media_rw media_rw
+    mkdir /mnt/media_rw/usbcard1 0700 media_rw media_rw
+
+    export EXTERNAL_STORAGE /storage/emulated/legacy
+    export EMULATED_STORAGE_SOURCE /mnt/shell/emulated
+    export EMULATED_STORAGE_TARGET /storage/emulated
+    # Disable SECONDARY_STORAGE in common
+    # Shall enable it in product
+    #export SECONDARY_STORAGE /storage/sdcard1
+
+    # Support legacy paths
+    symlink /storage/emulated/legacy /sdcard
+    symlink /storage/emulated/legacy /mnt/sdcard
+    symlink /storage/emulated/legacy /storage/sdcard0
+    symlink /mnt/shell/emulated/0 /storage/emulated/legacy
+
+    # Support external SD card
+    mkdir /storage/sdcard1 0700 root root
+
+    # Support USB Disk
+    mkdir /storage/usbcard1 0700 root root
+
+on boot
+    chown system system /dev/pvr_sync
+    chmod 666 /dev/pvr_sync
+
+#   chown system system /dev/dri/card0
+#   chmod 0666 /dev/dri/card0
+#   symlink /dev/dri/card0 /dev/card0
+
+    # IMG Graphics specific setup. See also "service pvrsrvctl"
+    # The permissions below should be tighter.
+    chown system system /dev/card0
+    chown system system /sys/class/backlight/psb-bl/brightness
+    chown system system /sys/class/backlight/psb-bl/max_brightness
+    chown system system /sys/class/backlight/psb-bl/actual_brightness
+    chmod 0666 /dev/card0
+    chmod 0664 /sys/class/backlight/psb-bl/brightness
+    chmod 0664 /sys/class/backlight/psb-bl/max_brightness
+    chmod 0664 /sys/class/backlight/psb-bl/actual_brightness
+
+    #Change mmc queue nr_requests from 128 to 32 to reduce write latencies
+    write /sys/block/mmcblk0/queue/nr_requests 32
+
+
+# Change TCP Net-Core buffers sizes to improve cellular data throughput
+     write /proc/sys/net/core/rmem_default 1048576
+     write /proc/sys/net/core/rmem_max 2097152
+     write /proc/sys/net/core/wmem_max 1048576
+
+    #Set freezing timeout value as 2000ms
+    write /sys/power/pm_freeze_timeout 2000
+
+on fs
+    mkdir /factory 0775 system system
+    mkdir /config 0775 system system
+    mkdir /media 0775 media media
+    mount_all /fstab.${ro.hardware}
+    mkdir /config/wifi
+    chown system wifi /config/wifi
+    chmod 0770 /config/wifi
+
+on post-fs
+# create virtual SD card at /mnt/sdcard, based on the /data/media directory
+# daemon will drop to user/group system/media_rw after initializing
+# underlying files in /data/media will be created with user and group media_rw (1023)
+service sdcard /system/bin/sdcard -u 1023 -g 1023 -l /data/media /mnt/shell/emulated
+    class late_start
+
+service fuse_sdcard1 /system/bin/sdcard -u 1023 -g 1023 -w 1023 -d /mnt/media_rw/sdcard1 /storage/sdcard1
+    class late_start
+    disabled
+
+service fuse_usbcard1 /system/bin/sdcard -u 1023 -g 1023 -w 1023 -d /mnt/media_rw/usbcard1 /storage/usbcard1
+    class late_start
+    disabled
+
+on post-fs-data
+    mkdir /data/system/ 0770 system system
+    write /proc/sys/kernel/ctrl-alt-del 0
+
+    mkdir /mnt/asec/media 0770 media media
+
+    # Set indication (checked by vold) that we have finished this action
+    setprop vold.post_fs_data_done 1
+
+    # Set this property to force the camera shutter sound to play on speaker
+    setprop ro.camera.sound.forced 1
+
+    # Set this property to avoid fm rx to be muted
+    setprop ro.fmrx.sound.forced 1
+
+    # Set this property to enable Thermal service
+    setprop persist.service.thermal 1
+    # Properties for Thermal Service
+    setprop persist.thermal.shutdown.msg 1
+    setprop persist.thermal.shutdown.vibra 1
+    setprop persist.thermal.shutdown.tone 1
+    setprop persist.thermal.display.msg 1
+    setprop persist.thermal.display.vibra 1
+
+on charger
+    chown system system /dev/dri/card0
+    chmod 0666 /dev/dri/card0
+    symlink /dev/dri/card0 /dev/card0
+
+    # IMG Graphics specific setup. See also "service pvrsrvctl"
+    # The permissions below should be tighter.
+    chown system system /dev/card0
+
+    start pvrsrvctl
+    # reduce backlight
+    write /sys/class/backlight/psb-bl/brightness 50
+    #default setting to enable charging in COS
+    setprop sys.usb.config charging
+
+
+service pvrsrvctl /system/vendor/bin/pvrsrvctl --no-module --start
+    class core
+    oneshot
+    user root
+
+service ct_monitor /system/bin/ct_monitor
+    class core
+    user root
+
+service charger_app /charger
+    class charger
+    user root
+
+service drm /system/bin/drmserver
+    class main
+    user drm
+    group drm system inet drmrpc sdcard_r security
+
+#Enable Houdini for execuable
+service enable_houdini /system/bin/enable_houdini
+    class main
+    oneshot
+
+# This property trigger has added to imitiate the previous behavior of "adb root".
+# The adb gadget driver used to reset the USB bus when the adbd daemon exited,
+# and the host side adb relied on this behavior to force it to reconnect with the
+# new adbd instance after init relaunches it. So now we force the USB bus to reset
+# here when adbd sets the service.adb.root property to 1.  We also restart adbd here
+# rather than waiting for init to notice its death and restarting it so the timing
+# of USB resetting and adb restarting more closely matches the previous behavior.
+on property:service.adb.root=1
+    write /sys/class/android_usb/android0/enable 0
+    restart adbd
+    write /sys/class/android_usb/android0/enable 1
+
+on property:sys.property_forcedshutdown=1
+    write /sys/module/intel_mid_osip/parameters/force_shutdown_occured 1
+
+on property:sys.shutdown.requested=0
+    write /sys/devices/virtual/misc/watchdog/shutdown_ongoing 1
+
+on property:sys.shutdown.requested=1
+    write /sys/devices/virtual/misc/watchdog/reboot_ongoing 1
+
+on property:sys.shutdown.requested=1recovery
+    write /sys/devices/virtual/misc/watchdog/reboot_ongoing 1
+
+on property:sys.shutdown.requested=1bootloader
+    write /sys/devices/virtual/misc/watchdog/reboot_ongoing 1
+
-- 
1.7.4.1

