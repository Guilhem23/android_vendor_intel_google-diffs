From b6552f9a0349bdc4632c2fe893de99ec75a2affe Mon Sep 17 00:00:00 2001
From: Francois-Nicolas Muller <francois-nicolas.muller@intel.com>
Date: Fri, 11 Oct 2013 12:13:00 +0200
Subject: [PORT FROM MAIN] Recovery log and behaviour improvements

BZ: 134173 113890 55206

+ related Klockwork fixes

Orig-Change-Id: Iac6c349c8cfc13c2d1fe3e3c9a6ef4bf6cba6759
Category: aosp improvement
Domain: PUPDR-Recovery
Origin: internal
Upstream-Candidate: no, need rework
Orig-Change-Id: Ie00efb6727b9ca96395bb5bdef5c6d9d5294d90d
Orig-Change-Id: I74ec94da2bf3eab6beac8915a7819ec6e48d1b14
Orig-Change-Id: I9f36627a1e0679861f3506677ed9d9929c8d2cfb
Orig-Change-Id: Id59e5a40742164aab18dc289818ca4bf709cca45

Change-Id: I81c544432a5f42ddbffbc4e0638f520aa479c22a
Signed-off-by: Francois-Nicolas Muller <francois-nicolas.muller@intel.com>
---
 install.cpp      |    9 ++++++---
 minui/graphics.c |   17 +++++++++++++++++
 recovery.cpp     |   45 +++++++++++++++++++++++++++++++++++++++++----
 ui.cpp           |   15 +++++++++++----
 ui.h             |    8 ++++++++
 verifier.cpp     |   33 +++++++++++++++++++++------------
 6 files changed, 104 insertions(+), 23 deletions(-)

diff --git a/install.cpp b/install.cpp
index 797a525..ce609d8 100644
--- a/install.cpp
+++ b/install.cpp
@@ -63,6 +63,8 @@ try_update_binary(const char *path, ZipArchive *zip, int* wipe_cache) {
         LOGE("Can't make %s\n", binary);
         return INSTALL_ERROR;
     }
+
+    LOGI("Extract and run update-binary\n");
     bool ok = mzExtractZipEntryToFile(zip, binary_entry, fd);
     close(fd);
     mzCloseZipArchive(zip);
@@ -122,7 +124,7 @@ try_update_binary(const char *path, ZipArchive *zip, int* wipe_cache) {
     if (pid == 0) {
         close(pipefd[0]);
         execv(binary, (char* const*)args);
-        fprintf(stdout, "E:Can't run %s (%s)\n", binary, strerror(errno));
+        LOGE("Can't run %s (%s)\n", binary, strerror(errno));
         _exit(-1);
     }
     close(pipefd[1]);
@@ -183,7 +185,7 @@ really_install_package(const char *path, int* wipe_cache)
     // Give verification half the progress bar...
     ui->SetProgressType(RecoveryUI::DETERMINATE);
     ui->ShowProgress(VERIFICATION_PROGRESS_FRACTION, VERIFICATION_PROGRESS_TIME);
-    LOGI("Update location: %s\n", path);
+    LOGI("Update package location: %s\n", path);
 
     if (ensure_path_mounted(path) != 0) {
         LOGE("Can't mount %s\n", path);
@@ -223,6 +225,7 @@ really_install_package(const char *path, int* wipe_cache)
     /* Verify and install the contents of the package.
      */
     ui->Print("Installing update...\n");
+    LOGI("Installing update %s...\n", path);
     return try_update_binary(path, &zip, wipe_cache);
 }
 
@@ -234,7 +237,7 @@ install_package(const char* path, int* wipe_cache, const char* install_file)
         fputs(path, install_log);
         fputc('\n', install_log);
     } else {
-        LOGE("failed to open last_install: %s\n", strerror(errno));
+        LOGE("failed to open last_install log (%s)\n", strerror(errno));
     }
     int result;
     if (setup_install_mounts() != 0) {
diff --git a/minui/graphics.c b/minui/graphics.c
index d757165..14e6113 100644
--- a/minui/graphics.c
+++ b/minui/graphics.c
@@ -170,6 +170,11 @@ static void get_memory_surface(GGLSurface* ms) {
   ms->height = vi.yres;
   ms->stride = fi.line_length/PIXEL_SIZE;
   ms->data = malloc(fi.line_length * vi.yres);
+  if (!ms->data) {
+    printf("malloc failed at %s:%d!\n", __FILE__, __LINE__);
+    return;
+  }
+
   ms->format = PIXEL_FORMAT;
 }
 
@@ -325,6 +330,10 @@ unsigned int gr_get_height(gr_surface surface) {
 static void gr_init_font(void)
 {
     gr_font = calloc(sizeof(*gr_font), 1);
+    if (!gr_font) {
+        printf("calloc failed at %s:%d!\n", __FILE__, __LINE__);
+        return;
+    }
 
     int res = res_create_surface("font", (void**)&(gr_font->texture));
     if (res == 0) {
@@ -338,11 +347,19 @@ static void gr_init_font(void)
 
         // fall back to the compiled-in font.
         gr_font->texture = malloc(sizeof(*gr_font->texture));
+        if (!gr_font->texture) {
+            printf("malloc failed at %s:%d!\n", __FILE__, __LINE__);
+            return;
+        }
         gr_font->texture->width = font.width;
         gr_font->texture->height = font.height;
         gr_font->texture->stride = font.width;
 
         unsigned char* bits = malloc(font.width * font.height);
+        if (!bits) {
+            printf("malloc failed at %s:%d!\n", __FILE__, __LINE__);
+            return;
+        }
         gr_font->texture->data = (void*) bits;
 
         unsigned char data;
diff --git a/recovery.cpp b/recovery.cpp
index d803cad..b834159 100644
--- a/recovery.cpp
+++ b/recovery.cpp
@@ -65,6 +65,7 @@ static const char *CACHE_LOG_DIR = "/cache/recovery";
 static const char *COMMAND_FILE = "/cache/recovery/command";
 static const char *INTENT_FILE = "/cache/recovery/intent";
 static const char *LOG_FILE = "/cache/recovery/log";
+static const char *REC_FAIL_FILE = "/cache/recovery/recoveryfail";
 static const char *LAST_INSTALL_FILE = "/cache/recovery/last_install";
 static const char *LOCALE_FILE = "/cache/recovery/last_locale";
 static const char *CACHE_ROOT = "/cache";
@@ -159,7 +160,8 @@ fopen_path(const char *path, const char *mode) {
 static void
 check_and_fclose(FILE *fp, const char *name) {
     fflush(fp);
-    if (ferror(fp)) LOGE("Error in %s\n(%s)\n", name, strerror(errno));
+    if (ferror(fp))
+        LOGE("Error in %s\n(%s)\n", name, strerror(errno));
     fclose(fp);
 }
 
@@ -298,6 +300,18 @@ copy_logs() {
     sync();
 }
 
+static void create_recoveryfail_file(void)
+{
+    FILE *recfail = fopen_path(REC_FAIL_FILE, "w");
+    if (recfail == NULL) {
+        LOGE("Can't create fail file %s\n", REC_FAIL_FILE);
+    } else {
+        LOGI("Recovery fail file %s created\n", REC_FAIL_FILE);
+        fclose(recfail);
+    }
+
+}
+
 // clear the recovery command and prepare to boot a (hopefully working) system,
 // copy our log file to cache as well (for the system to read), and
 // record any intent we were asked to communicate back to the system.
@@ -475,8 +489,14 @@ copy_sideloaded_package(const char* original_path) {
   }
 
   char copy_path[PATH_MAX];
-  strcpy(copy_path, SIDELOAD_TEMP_DIR);
-  strcat(copy_path, "/package.zip");
+  if (strlcpy(copy_path, SIDELOAD_TEMP_DIR, PATH_MAX) > PATH_MAX) {
+    LOGE("Path too long !\n");
+    return NULL;
+  }
+  if (strlcat(copy_path, "/package.zip", PATH_MAX) > PATH_MAX) {
+    LOGE("Path too long !\n");
+    return NULL;
+  }
 
   char* buffer = (char*)malloc(BUFSIZ);
   if (buffer == NULL) {
@@ -1006,7 +1026,7 @@ main(int argc, char **argv) {
             char* modified_path = (char*)malloc(len);
             strlcpy(modified_path, "/cache/", len);
             strlcat(modified_path, update_package+6, len);
-            printf("(replacing path \"%s\" with \"%s\")\n",
+            LOGI("Replacing path \"%s\" with \"%s\"\n",
                    update_package, modified_path);
             update_package = modified_path;
         }
@@ -1020,13 +1040,17 @@ main(int argc, char **argv) {
     int status = INSTALL_SUCCESS;
 
     if (update_package != NULL) {
+        LOGI("Install package %s\n", update_package);
         status = install_package(update_package, &wipe_cache, TEMPORARY_INSTALL_FILE);
         if (status == INSTALL_SUCCESS && wipe_cache) {
+            LOGI("Package %s installed. Erase cache volume\n", update_package);
             if (erase_volume("/cache")) {
                 LOGE("Cache wipe (requested by package) failed.");
             }
         }
         if (status != INSTALL_SUCCESS) {
+            LOGE("Install of %s failed with status %d\n", update_package, status);
+            create_recoveryfail_file();
             ui->Print("Installation aborted.\n");
 
             // If this is an eng or userdebug build, then automatically
@@ -1038,6 +1062,10 @@ main(int argc, char **argv) {
                 ui->ShowText(true);
             }
         }
+
+        if (unlink(update_package) < 0 && errno != ENOENT) {
+            LOGE("Delete %s failed (%s)\n", update_package, strerror(errno));
+        }
     } else if (wipe_data) {
         if (device->WipeData()) status = INSTALL_ERROR;
         if (erase_volume("/data")) status = INSTALL_ERROR;
@@ -1053,9 +1081,18 @@ main(int argc, char **argv) {
 
     if (status == INSTALL_ERROR || status == INSTALL_CORRUPT) {
         copy_logs();
+        LOGE("Installation failed with status %d\n", status);
         ui->SetBackground(RecoveryUI::ERROR);
     }
     if (status != INSTALL_SUCCESS || ui->IsTextVisible()) {
+        if (status == INSTALL_NONE) {
+            // Set to default timeout
+            LOGI("Set timeout to %d s.\n", UI_WAIT_KEY_TIMEOUT_SEC);
+            ui->SetTimeout(UI_WAIT_KEY_TIMEOUT_SEC);
+        } else {
+            LOGI("Set timeout to %d s.\n", UI_WAIT_ERROR_TIMEOUT_SEC);
+            ui->SetTimeout(UI_WAIT_ERROR_TIMEOUT_SEC);
+        }
         prompt_and_wait(device, status);
     }
 
diff --git a/ui.cpp b/ui.cpp
index cece02d..c1f8a3c 100644
--- a/ui.cpp
+++ b/ui.cpp
@@ -36,7 +36,6 @@
 #include "screen_ui.h"
 #include "ui.h"
 
-#define UI_WAIT_KEY_TIMEOUT_SEC    120
 
 // There's only (at most) one of these objects, and global callbacks
 // (for pthread_create, and the input event system) need to find it,
@@ -50,6 +49,10 @@ RecoveryUI::RecoveryUI() :
     key_down_count(0) {
     pthread_mutex_init(&key_queue_mutex, NULL);
     pthread_cond_init(&key_queue_cond, NULL);
+
+    // UI timeout is set to UI_WAIT_KEY_TIMEOUT_SEC by default
+    ui_timeout = UI_WAIT_KEY_TIMEOUT_SEC;
+
     self = this;
 }
 
@@ -199,15 +202,15 @@ int RecoveryUI::WaitKey()
 {
     pthread_mutex_lock(&key_queue_mutex);
 
-    // Time out after UI_WAIT_KEY_TIMEOUT_SEC, unless a USB cable is
-    // plugged in.
+    // Time out after UI_WAIT_KEY_TIMEOUT_SEC or UI_WAIT_ERROR_TIMEOUT_SEC,
+    // unless a USB cable is plugged in.
     do {
         struct timeval now;
         struct timespec timeout;
         gettimeofday(&now, NULL);
         timeout.tv_sec = now.tv_sec;
         timeout.tv_nsec = now.tv_usec * 1000;
-        timeout.tv_sec += UI_WAIT_KEY_TIMEOUT_SEC;
+        timeout.tv_sec += ui_timeout;
 
         int rc = 0;
         while (key_queue_len == 0 && rc != ETIMEDOUT) {
@@ -262,6 +265,10 @@ RecoveryUI::KeyAction RecoveryUI::CheckKey(int key) {
     return RecoveryUI::ENQUEUE;
 }
 
+void RecoveryUI::SetTimeout(int timeout) {
+    ui_timeout = timeout;
+}
+
 void RecoveryUI::NextCheckKeyIsLong(bool is_long_press) {
 }
 
diff --git a/ui.h b/ui.h
index 6c8987a..b86fa75 100644
--- a/ui.h
+++ b/ui.h
@@ -21,6 +21,10 @@
 #include <pthread.h>
 #include <time.h>
 
+// Define timeout to 10 seconds
+#define UI_WAIT_ERROR_TIMEOUT_SEC   10
+#define UI_WAIT_KEY_TIMEOUT_SEC	120
+
 // Abstract class for controlling the user interface during recovery.
 class RecoveryUI {
   public:
@@ -38,6 +42,9 @@ class RecoveryUI {
     enum Icon { NONE, INSTALLING_UPDATE, ERASING, NO_COMMAND, ERROR };
     virtual void SetBackground(Icon icon) = 0;
 
+    // Set timeout before reboot.
+    virtual void SetTimeout(int timeout);
+
     // --- progress indicator ---
     enum ProgressType { EMPTY, INDETERMINATE, DETERMINATE };
     virtual void SetProgressType(ProgressType determinate) = 0;
@@ -120,6 +127,7 @@ private:
     bool key_long_press;               // under key_queue_mutex
     int key_down_count;                // under key_queue_mutex
     int rel_sum;
+    int ui_timeout;
 
     typedef struct {
         RecoveryUI* ui;
diff --git a/verifier.cpp b/verifier.cpp
index 782a838..edf741d 100644
--- a/verifier.cpp
+++ b/verifier.cpp
@@ -34,6 +34,9 @@ extern RecoveryUI* ui;
 //
 // Return VERIFY_SUCCESS, VERIFY_FAILURE (if any error is encountered
 // or no key matches the signature).
+#define FOOTER_SIZE 6
+#define EOCD_HEADER_SIZE 22
+#define BUFFER_SIZE 4096
 
 int verify_file(const char* path, const Certificate* pKeys, unsigned int numKeys) {
     ui->SetProgress(0.0);
@@ -53,8 +56,6 @@ int verify_file(const char* path, const Certificate* pKeys, unsigned int numKeys
     // us how far back from the end we have to start reading to find
     // the whole comment.
 
-#define FOOTER_SIZE 6
-
     if (fseek(f, -FOOTER_SIZE, SEEK_END) != 0) {
         LOGE("failed to seek in %s (%s)\n", path, strerror(errno));
         fclose(f);
@@ -69,7 +70,7 @@ int verify_file(const char* path, const Certificate* pKeys, unsigned int numKeys
     }
 
     if (footer[2] != 0xff || footer[3] != 0xff) {
-        LOGE("footer is wrong\n");
+        LOGE("end of footer from %s not 0xFFFF (%s)\n", path, strerror(errno));
         fclose(f);
         return VERIFY_FAILURE;
     }
@@ -81,13 +82,11 @@ int verify_file(const char* path, const Certificate* pKeys, unsigned int numKeys
 
     if (signature_start - FOOTER_SIZE < RSANUMBYTES) {
         // "signature" block isn't big enough to contain an RSA block.
-        LOGE("signature is too short\n");
+        LOGE("signature from %s is too short\n", path);
         fclose(f);
         return VERIFY_FAILURE;
     }
 
-#define EOCD_HEADER_SIZE 22
-
     // The end-of-central-directory record is 22 bytes plus any
     // comment length.
     size_t eocd_size = comment_size + EOCD_HEADER_SIZE;
@@ -120,7 +119,7 @@ int verify_file(const char* path, const Certificate* pKeys, unsigned int numKeys
     // magic number $50 $4b $05 $06.
     if (eocd[0] != 0x50 || eocd[1] != 0x4b ||
         eocd[2] != 0x05 || eocd[3] != 0x06) {
-        LOGE("signature length doesn't match EOCD marker\n");
+        LOGE("signature length from %s doesn't match EOCD marker\n", path);
         fclose(f);
         return VERIFY_FAILURE;
     }
@@ -139,8 +138,6 @@ int verify_file(const char* path, const Certificate* pKeys, unsigned int numKeys
         }
     }
 
-#define BUFFER_SIZE 4096
-
     bool need_sha1 = false;
     bool need_sha256 = false;
     for (i = 0; i < numKeys; ++i) {
@@ -154,6 +151,7 @@ int verify_file(const char* path, const Certificate* pKeys, unsigned int numKeys
     SHA256_CTX sha256_ctx;
     SHA_init(&sha1_ctx);
     SHA256_init(&sha256_ctx);
+
     unsigned char* buffer = (unsigned char*)malloc(BUFFER_SIZE);
     if (buffer == NULL) {
         LOGE("failed to alloc memory for sha1 buffer\n");
@@ -163,7 +161,13 @@ int verify_file(const char* path, const Certificate* pKeys, unsigned int numKeys
 
     double frac = -1.0;
     size_t so_far = 0;
-    fseek(f, 0, SEEK_SET);
+
+    if (fseek(f, 0, SEEK_SET) != 0) {
+        LOGE("failed to seek beginning of %s (%s)\n", path, strerror(errno));
+        fclose(f);
+        return VERIFY_FAILURE;
+    }
+
     while (so_far < signed_len) {
         size_t size = BUFFER_SIZE;
         if (signed_len - so_far < size) size = signed_len - so_far;
@@ -199,15 +203,16 @@ int verify_file(const char* path, const Certificate* pKeys, unsigned int numKeys
         // the signing tool appends after the signature itself.
         if (RSA_verify(pKeys[i].public_key, eocd + eocd_size - 6 - RSANUMBYTES,
                        RSANUMBYTES, hash, pKeys[i].hash_len)) {
-            LOGI("whole-file signature verified against key %d\n", i);
+            LOGI("whole-file signature verified against key %d for %s\n", i, path);
             free(eocd);
             return VERIFY_SUCCESS;
         } else {
             LOGI("failed to verify against key %d\n", i);
         }
     }
+
     free(eocd);
-    LOGE("failed to verify whole-file signature\n");
+    LOGE("failed to verify whole-file signature from %s\n", path);
     return VERIFY_FAILURE;
 }
 
@@ -257,6 +262,10 @@ load_keys(const char* filename, int* numKeys) {
         while (!done) {
             ++*numKeys;
             out = (Certificate*)realloc(out, *numKeys * sizeof(Certificate));
+			if (!out) {
+                LOGE("realloc failed at %s:%d\n!", __FILE__, __LINE__);
+                goto exit;
+            }
             Certificate* cert = out + (*numKeys - 1);
             cert->public_key = (RSAPublicKey*)malloc(sizeof(RSAPublicKey));
 
-- 
1.7.4.1

