From dffbd02ea32eabd43e9ca908ae20474e22356072 Mon Sep 17 00:00:00 2001
From: Vincent Becker <vincentx.becker@intel.com>
Date: Mon, 3 Sep 2012 14:29:57 +0800
Subject: When setting a null device for an audio output, force the next routing request.

BZ: 53856
[CLEAN]

When a null device is set for an audio ouput, the outputDesc->mDevice is not updated,
thus the routing update is not done next time the device is selected for that output.
To meet the device change conditions, a boolean member mForceRouting has been
introduced to force the routing next time the output is set with a non-null device.

Category: device enablement
Domain: AudioComms-Common
Origin: internal
Upstream-Candidate: yes
Change-Id: I27efdffcc3b577e26da1c759a2f674a64676618d
Orig-Change-Id: Ibf8ca13193852398a6f6140324113c9d7aaefe84
Signed-off-by: Vincent Becker <vincentx.becker@intel.com>
Signed-off-by: Andrei V. FOMITCHEV <andreix.fomitchev@intel.com>
---
 audio/AudioPolicyManagerBase.cpp                 |   18 +++++++++++++++++-
 include/hardware_legacy/AudioPolicyManagerBase.h |    2 ++
 2 files changed, 19 insertions(+), 1 deletions(-)

diff --git a/audio/AudioPolicyManagerBase.cpp b/audio/AudioPolicyManagerBase.cpp
index fcafc5d..8831fb3 100644
--- a/audio/AudioPolicyManagerBase.cpp
+++ b/audio/AudioPolicyManagerBase.cpp
@@ -2658,7 +2658,22 @@ uint32_t AudioPolicyManagerBase::setOutputDevice(audio_io_handle_t output,
 
     if (device != AUDIO_DEVICE_NONE) {
         outputDesc->mDevice = device;
+
+        // Force routing if previously asked for this output
+        if (outputDesc->mForceRouting) {
+            ALOGV("Force routing to current device as previous device was null for this output");
+            force = true;
+
+            // Request consumed. Reset mForceRouting to false
+            outputDesc->mForceRouting = false;
+        }
     }
+    else {
+        // Device is null and does not reflect the routing. Save the necessity to force
+        // re-routing upon next attempt to select a non-null device for this output
+        outputDesc->mForceRouting = true;
+    }
+
     muteWaitMs = checkDeviceMuteStrategies(outputDesc, prevDevice, delayMs);
 
     // Do not change the routing if:
@@ -3289,7 +3304,8 @@ AudioPolicyManagerBase::AudioOutputDescriptor::AudioOutputDescriptor(
     : mId(0), mSamplingRate(0), mFormat((audio_format_t)0),
       mChannelMask((audio_channel_mask_t)0), mLatency(0),
     mFlags((audio_output_flags_t)0), mDevice(AUDIO_DEVICE_NONE),
-    mOutput1(0), mOutput2(0), mProfile(profile), mDirectOpenCount(0)
+    mOutput1(0), mOutput2(0), mProfile(profile), mDirectOpenCount(0),
+    mForceRouting(false)
 {
     // clear usage count for all stream types
     for (int i = 0; i < AudioSystem::NUM_STREAM_TYPES; i++) {
diff --git a/include/hardware_legacy/AudioPolicyManagerBase.h b/include/hardware_legacy/AudioPolicyManagerBase.h
index 3d45b7c..fe8008e 100644
--- a/include/hardware_legacy/AudioPolicyManagerBase.h
+++ b/include/hardware_legacy/AudioPolicyManagerBase.h
@@ -287,6 +287,8 @@ protected:
             bool mStrategyMutedByDevice[NUM_STRATEGIES]; // strategies muted because of incompatible
                                                 // device selection. See checkDeviceMuteStrategies()
             uint32_t mDirectOpenCount; // number of clients using this output (direct outputs only)
+
+            bool mForceRouting; // Next routing for this output will be forced as current device routed is null
         };
 
         // descriptor for audio inputs. Used to maintain current configuration of each opened audio input
-- 
1.7.4.1

