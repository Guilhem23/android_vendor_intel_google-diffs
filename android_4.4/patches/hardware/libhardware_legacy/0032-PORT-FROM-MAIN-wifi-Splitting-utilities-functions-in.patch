From 64edb0bc9b2e4572b6b0cb7042555c33894043e1 Mon Sep 17 00:00:00 2001
From: Paul Naoumenko <paulx.naoumenko@intel.com>
Date: Fri, 18 Oct 2013 10:53:44 +0200
Subject: [PORT FROM MAIN]wifi: Splitting utilities functions in separate file

BZ: 125764

Change-Id: If9cb98c6f70e372f9cc5451635957ca6077ee02c
Orig-Change-Id: I3c1bab60477dee266649278691a25027b5849d4f
Category: device enablement
Domain: CWS.WIFI-Common
Origin: internal
Upstream-Candidate: yes
Signed-off-by: Quentin Casasnovas <quentinx.casasnovas@intel.com>
---
 wifi/Android.mk |    1 +
 wifi/utils.c    |  123 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 wifi/wifi.c     |  103 ----------------------------------------------
 wifi/wifi.h     |    8 ++++
 4 files changed, 132 insertions(+), 103 deletions(-)
 create mode 100644 wifi/utils.c

diff --git a/wifi/Android.mk b/wifi/Android.mk
index 26c3b1a..2a9b906 100644
--- a/wifi/Android.mk
+++ b/wifi/Android.mk
@@ -47,6 +47,7 @@ else
 	endif
 
 	LOCAL_SRC_FILES += wifi/wifi.c
+	LOCAL_SRC_FILES += wifi/utils.c
 endif
 
 endif
diff --git a/wifi/utils.c b/wifi/utils.c
new file mode 100644
index 0000000..63033b8
--- /dev/null
+++ b/wifi/utils.c
@@ -0,0 +1,123 @@
+/*
+ * Copyright 2008, The Android Open Source Project
+ * Copyright 2012-2013, Intel Corporation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "wifi.h"
+
+int insmod(const char *filename, const char *args)
+{
+    void *module;
+    unsigned int size;
+    int ret;
+
+    module = load_file(filename, &size);
+    if (!module)
+        return -1;
+
+    ret = init_module(module, size, args);
+
+    free(module);
+
+    return ret;
+}
+
+int rmmod(const char *modname)
+{
+    int ret = -1;
+    int maxtry = 10;
+
+    while (maxtry-- > 0) {
+        ret = delete_module(modname, O_NONBLOCK | O_EXCL);
+        if (ret < 0 && errno == EAGAIN)
+            usleep(500000);
+        else
+            break;
+    }
+
+    if (ret != 0)
+        ALOGD("Unable to unload driver module \"%s\": %s\n",
+             modname, strerror(errno));
+    return ret;
+}
+
+int file_exist(char *filename)
+{
+    struct stat buffer;
+    return (stat(filename, &buffer) == 0);
+}
+
+int write_to_file(const char *path, const char *data, size_t len)
+{
+    int ret = 0;
+    int fd = -1;
+
+    assert(path);
+    assert(data);
+
+    fd = TEMP_FAILURE_RETRY(open(path, O_WRONLY));
+    if (fd < 0) {
+	ALOGE("Failed to open %s (%s)",
+	      path, strerror(errno));
+	return -errno;
+    }
+
+    if (TEMP_FAILURE_RETRY(write(fd, data, len)) != (int) len) {
+	ALOGE("Failed to write %s in %s (%s)",
+	      data, path, strerror(errno));
+	ret = -errno;
+    }
+
+    close(fd);
+    return ret;
+}
+
+void log_cmd(const char *cmd)
+{
+    if (strstr (cmd, "SET_NETWORK") && strstr(cmd, "password")) {
+        char *pbuf = malloc(strlen(cmd) + 1);
+        if (pbuf) {
+            strncpy(pbuf, cmd, strlen(cmd) + 1);
+            pbuf[strlen(cmd)]='\0';
+            char *p = strchr(pbuf, '\"');
+            if (p)
+                *p = '\0';
+            LOGI("CMD: %s\n", pbuf);
+        }
+        free(pbuf);
+    }
+    else
+        LOGI("CMD: %s\n", cmd);
+}
+
+void log_reply(char *reply, size_t *reply_len)
+{
+    char replyLocal[*reply_len];
+    char delims[] = "\n";
+    char *result = NULL;
+
+    strncpy(replyLocal, reply, *reply_len);
+
+    if (*reply_len > 0 && replyLocal[*reply_len-1] == '\n')
+        replyLocal[*reply_len-1] = '\0';
+    else
+        replyLocal[*reply_len] = '\0';
+
+    result = strtok(replyLocal , delims );
+    while( result != NULL ) {
+        LOGI("REPLY: %s\n", result);
+        result = strtok( NULL, delims );
+    }
+}
diff --git a/wifi/wifi.c b/wifi/wifi.c
index 6b90820..cb9e9dd 100644
--- a/wifi/wifi.c
+++ b/wifi/wifi.c
@@ -69,41 +69,6 @@ static char supplicant_name[PROPERTY_VALUE_MAX];
 /* Is either SUPP_PROP_NAME or P2P_PROP_NAME */
 static char supplicant_prop_name[PROPERTY_KEY_MAX];
 
-static int insmod(const char *filename, const char *args)
-{
-    void *module;
-    unsigned int size;
-    int ret;
-
-    module = load_file(filename, &size);
-    if (!module)
-        return -1;
-
-    ret = init_module(module, size, args);
-
-    free(module);
-
-    return ret;
-}
-
-static int rmmod(const char *modname)
-{
-    int ret = -1;
-    int maxtry = 10;
-
-    while (maxtry-- > 0) {
-        ret = delete_module(modname, O_NONBLOCK | O_EXCL);
-        if (ret < 0 && errno == EAGAIN)
-            usleep(500000);
-        else
-            break;
-    }
-
-    if (ret != 0)
-        ALOGD("Unable to unload driver module \"%s\": %s\n",
-             modname, strerror(errno));
-    return ret;
-}
 
 int do_dhcp_request(int *ipaddr, int *gateway, int *mask,
                     int *dns1, int *dns2, int *server, int *lease) {
@@ -624,43 +589,7 @@ int wifi_connect_to_supplicant()
     return wifi_connect_on_socket_path(path);
 }
 
-void log_cmd(const char *cmd)
-{
-    if (strstr (cmd, "SET_NETWORK") && strstr(cmd, "password")) {
-        char *pbuf = malloc(strlen(cmd) + 1);
-        if (pbuf) {
-            strncpy(pbuf, cmd, strlen(cmd) + 1);
-            pbuf[strlen(cmd)]='\0';
-            char *p = strchr(pbuf, '\"');
-            if (p)
-                *p = '\0';
-            LOGI("CMD: %s\n", pbuf);
-        }
-        free(pbuf);
-    }
-    else
-        LOGI("CMD: %s\n", cmd);
-}
-
-void log_reply(char *reply, size_t *reply_len)
-{
-    char replyLocal[*reply_len];
-    char delims[] = "\n";
-    char *result = NULL;
-
-    strncpy(replyLocal, reply, *reply_len);
 
-    if (*reply_len > 0 && replyLocal[*reply_len-1] == '\n')
-        replyLocal[*reply_len-1] = '\0';
-    else
-        replyLocal[*reply_len] = '\0';
-
-    result = strtok(replyLocal , delims );
-    while( result != NULL ) {
-        LOGI("REPLY: %s\n", result);
-        result = strtok( NULL, delims );
-    }
-}
 
 int wifi_send_command(const char *cmd, char *reply, size_t *reply_len)
 {
@@ -881,38 +810,6 @@ const char *wifi_get_fw_path(int fw_type)
     return NULL;
 }
 
-static int file_exist(char *filename)
-{
-    struct stat buffer;
-    return (stat(filename, &buffer) == 0);
-}
-
-static int write_to_file(const char *path, const char *data, size_t len)
-{
-    int ret = 0;
-    int fd = -1;
-
-    assert(path);
-    assert(data);
-
-    fd = TEMP_FAILURE_RETRY(open(path, O_WRONLY));
-    if (fd < 0) {
-	ALOGE("Failed to open %s (%s)",
-	      path, strerror(errno));
-	return -errno;
-    }
-
-    if (TEMP_FAILURE_RETRY(write(fd, data, len)) != (int) len) {
-	ALOGE("Failed to write %s in %s (%s)",
-	      data, path, strerror(errno));
-	ret = -errno;
-    }
-
-    close(fd);
-    return ret;
-}
-
-
 int wifi_change_fw_path(const char *fwpath)
 {
     return write_to_file(WIFI_DRIVER_FW_PATH_PARAM,
diff --git a/wifi/wifi.h b/wifi/wifi.h
index 1a6f0bf..ccaa1e3 100644
--- a/wifi/wifi.h
+++ b/wifi/wifi.h
@@ -78,4 +78,12 @@ extern int init_module(void *, unsigned long, const char *);
 extern int delete_module(const char *, unsigned int);
 void wifi_close_sockets();
 
+/* utils.c */
+int insmod(const char *filename, const char *args);
+int rmmod(const char *modname);
+int write_to_file(const char *path, const char *data, size_t len);
+int file_exist(char *filename);
+void log_cmd(const char *cmd);
+void log_reply(char *reply, size_t *reply_len);
+
 #endif /* !WIFI_H_ */
-- 
1.7.4.1

