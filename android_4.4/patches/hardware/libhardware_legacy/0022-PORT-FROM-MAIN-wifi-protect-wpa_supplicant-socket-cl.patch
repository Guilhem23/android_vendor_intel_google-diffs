From 7eea93959b361055c7f3c49c19e321e7d296af55 Mon Sep 17 00:00:00 2001
From: jonathan.de.cesco <jonathan.de.cesco@intel.com>
Date: Thu, 9 Aug 2012 16:31:23 +0200
Subject: [PORT FROM MAIN]wifi: protect wpa_supplicant socket closing operations

BZ: 38716 74777

When switching from the different wifi/widi/p2p/hotspot
use cases during a monkey test, it was possible to get a
race conditions when closing the connection to the supplicant.
Fix this by adding protection mechanism to this function.

Change-Id: Iab771fccca2b41b579fd87d11492a80c8c20ec4e
Orig-Change-Id: I8f3db0daa234b9ae2dbb52dad5f6c7105c790211
Category: device enablement
Domain: CWS.WIFI-Common
Origin: upstream
Upstream-Candidate: yes
---
 wifi/wifi.c |   10 +++++++++-
 1 files changed, 9 insertions(+), 1 deletions(-)

diff --git a/wifi/wifi.c b/wifi/wifi.c
index e771493..8a486db 100644
--- a/wifi/wifi.c
+++ b/wifi/wifi.c
@@ -22,6 +22,7 @@
 #include <sys/socket.h>
 #include <unistd.h>
 #include <poll.h>
+#include <pthread.h>
 
 #include "hardware_legacy/wifi.h"
 #include "libwpa_client/wpa_ctrl.h"
@@ -109,6 +110,7 @@ static unsigned char dummy_key[21] = { 0x02, 0x11, 0xbe, 0x33, 0x43, 0x35,
                                        0x1c, 0xd3, 0xee, 0xff, 0xf1, 0xe2,
                                        0xf3, 0xf4, 0xf5 };
 
+static pthread_mutex_t suppl_mutex = PTHREAD_MUTEX_INITIALIZER;
 /* Is either SUPPLICANT_NAME or P2P_SUPPLICANT_NAME */
 static char supplicant_name[PROPERTY_VALUE_MAX];
 /* Is either SUPP_PROP_NAME or P2P_PROP_NAME */
@@ -819,16 +821,22 @@ void wifi_close_supplicant_connection()
 {
     char supp_status[PROPERTY_VALUE_MAX] = {'\0'};
     int count = 50; /* wait at most 5 seconds to ensure init has stopped stupplicant */
+    LOGD("Close connection to supplicant\n");
+    pthread_mutex_lock(&suppl_mutex);
 
     wifi_close_sockets();
+        pthread_mutex_unlock(&suppl_mutex);
 
     while (count-- > 0) {
         if (property_get(supplicant_prop_name, supp_status, NULL)) {
-            if (strcmp(supp_status, "stopped") == 0)
+            if (strcmp(supp_status, "stopped") == 0) {
+                pthread_mutex_unlock(&suppl_mutex);
                 return;
+	    }
         }
         usleep(100000);
     }
+    pthread_mutex_unlock(&suppl_mutex);
 }
 
 int wifi_command(const char *command, char *reply, size_t *reply_len)
-- 
1.7.4.1

