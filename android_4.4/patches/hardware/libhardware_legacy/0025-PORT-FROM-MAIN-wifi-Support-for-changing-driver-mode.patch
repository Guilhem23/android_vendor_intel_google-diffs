From 13fbef0683b590e8075aaf8a6dba9eb7572beaba Mon Sep 17 00:00:00 2001
From: Quentin Casasnovas <quentinx.casasnovas@intel.com>
Date: Fri, 8 Feb 2013 16:39:23 +0100
Subject: [PORT FROM MAIN]wifi: Support for changing driver mode without FW reloading

BZ: 83709

In order to support SoftAP and P2P mode with the new driver loading policy
(insmod at boot), we need to be able to change the driver mode without rmmoding
the driver.

Change-Id: Id18c9164da897bfb710ee39aedc6027d78defb67
Orig-Change-Id: I75455c09b337d0cba725f565265129325836df29
Category: device enablement
Domain: CWS.WIFI-Bluewoods
Origin: upstream
Upstream-Candidate: no,proprietary
Signed-off-by: Quentin Casasnovas <quentinx.casasnovas@intel.com>
---
 include/hardware_legacy/wifi.h |   14 ++++++++
 wifi/wifi.c                    |   70 +++++++++++++++++++++++++++++++++-------
 2 files changed, 72 insertions(+), 12 deletions(-)

diff --git a/include/hardware_legacy/wifi.h b/include/hardware_legacy/wifi.h
index 7a64d52..c63ada3 100644
--- a/include/hardware_legacy/wifi.h
+++ b/include/hardware_legacy/wifi.h
@@ -149,6 +149,20 @@ int wifi_change_fw_path(const char *fwpath);
 #define WIFI_ENTROPY_FILE	"/data/misc/wifi/entropy.bin"
 int ensure_entropy_file_exists();
 
+#ifndef BIT
+#  define BIT(X)	(1 << X)
+#endif
+
+/**
+ * Different operating mode supported by broadcom driver
+ */
+enum {
+	WIFI_STA_MODE	= BIT(0),
+	WIFI_AP_MODE	= BIT(1),
+	WIFI_P2P_MODE	= BIT(2),
+};
+int wifi_switch_driver_mode(int mode);
+
 #if __cplusplus
 };  // extern "C"
 #endif
diff --git a/wifi/wifi.c b/wifi/wifi.c
index 11357fe..bebdb5e 100644
--- a/wifi/wifi.c
+++ b/wifi/wifi.c
@@ -23,6 +23,7 @@
 #include <unistd.h>
 #include <poll.h>
 #include <pthread.h>
+#include <assert.h>
 
 #include "hardware_legacy/wifi.h"
 #include "libwpa_client/wpa_ctrl.h"
@@ -79,6 +80,10 @@ static char primary_iface[PROPERTY_VALUE_MAX];
 #define WIFI_DRIVER_FW_PATH_PARAM	"/sys/module/wlan/parameters/fwpath"
 #endif
 
+#ifndef WIFI_DRIVER_MODE_PATH_PARAM
+#define WIFI_DRIVER_MODE_PATH_PARAM	"/sys/module/bcmdhd/parameters/op_mode"
+#endif
+
 #define WIFI_DRIVER_LOADER_DELAY	1000000
 
 static const char IFACE_DIR[]           = "/data/system/wpa_supplicant";
@@ -870,24 +875,65 @@ const char *wifi_get_fw_path(int fw_type)
     return NULL;
 }
 
-int wifi_change_fw_path(const char *fwpath)
+static int write_to_file(const char *path, const char *data, size_t len)
 {
-    int len;
-    int fd;
     int ret = 0;
+    int fd = -1
 
-    if (!fwpath)
-        return ret;
-    fd = TEMP_FAILURE_RETRY(open(WIFI_DRIVER_FW_PATH_PARAM, O_WRONLY));
+    assert(path);
+    assert(data);
+
+    fd = TEMP_FAILURE_RETRY(open(path, O_WRONLY));
     if (fd < 0) {
-        ALOGE("Failed to open wlan fw path param (%s)", strerror(errno));
-        return -1;
+	ALOGE("Failed to open %s (%s)",
+	      path, strerror(errno));
+	return -errno;
     }
-    len = strlen(fwpath) + 1;
-    if (TEMP_FAILURE_RETRY(write(fd, fwpath, len)) != len) {
-        ALOGE("Failed to write wlan fw path param (%s)", strerror(errno));
-        ret = -1;
+
+    if (TEMP_FAILURE_RETRY(write(fd, data, len)) != (int) len) {
+	ALOGE("Failed to write %s in %s (%s)",
+	      data, path, strerror(errno));
+	ret = -errno;
     }
+
     close(fd);
     return ret;
 }
+
+
+int wifi_change_fw_path(const char *fwpath)
+{
+    return write_to_file(WIFI_DRIVER_FW_PATH_PARAM,
+			 fwpath, strlen(fwpath) + 1);
+}
+
+int wifi_switch_driver_mode(int mode)
+{
+    char mode_str[8];
+
+    /**
+     * BIT(0), BIT(1),.. come from dhd.h in the driver code, and we need to
+     * stay aligned with their definition.
+     *
+     * TODO:
+     *   - Find a way to include dhd.h and use the values from there directly to
+     *     prevent any problems in future modifications of the ABI.
+     */
+    switch (mode) {
+    case WIFI_STA_MODE:
+	snprintf(mode_str, sizeof(mode_str), "%u\n", BIT(0) | BIT(2) | BIT(4));
+	break;
+    case WIFI_AP_MODE:
+	snprintf(mode_str, sizeof(mode_str), "%u\n", BIT(1));
+	break;
+    case WIFI_P2P_MODE:
+	snprintf(mode_str, sizeof(mode_str), "%u\n", BIT(2));
+	break;
+    default:
+	ALOGE("wifi_switch_driver_mode: invalid mode %ud", mode);
+	return -EINVAL;
+    }
+
+    return write_to_file(WIFI_DRIVER_MODE_PATH_PARAM,
+			 mode_str, strlen(mode_str));
+}
-- 
1.7.4.1

