From 3fc126c3f91393f9beeeda2a567199ca4460acbc Mon Sep 17 00:00:00 2001
From: Siddalingesh Koosalapur <siddalingesh.s.koosalapur@intel.com>
Date: Tue, 22 Oct 2013 21:33:25 +0530
Subject: BCU Audio HAL interface functions to get/set audio throttling

BZ: 125970

Issue Description:
[EM]: Need implementation for Audio HAL interface functionalities between BCU
 and Audio HAL

Solution:
This is the Audio throttling interface functionalities between the Audio HAL
and platform specific BCU HAL. Providing support to get/set the audio
throttling (speaker volume/power control) based on the platform specific BCU
HAL calls from CMS

Category: device enableement
Domain: EM-BCU
Origin: internal
Upstream-Candidate: no, not AOSP

Origin-Change-Id: Ie35d144c922e9e0f428e6fc9006e0fd165c12c65
Signed-off-by: Albin B <albin.bala.krishnan@intel.com>

Change-Id: I8238a01be29fc78462fdc439715d8449ded14c0c
Signed-off-by: Siddalingesh Koosalapur <siddalingesh.s.koosalapur@intel.com>
---
 include/hardware/bcu_audio_interface.h      |   53 +++++++++++++
 modules/Android.mk                          |    2 +-
 modules/bcu/Android.mk                      |   37 +++++----
 modules/bcu/bcu.c                           |    2 +-
 modules/bcu/bcu_mrfld.c                     |   22 ++++-
 modules/bcu_audioif/Android.mk              |   35 +++++++++
 modules/bcu_audioif/bcu_audio_interface.cpp |  109 +++++++++++++++++++++++++++
 7 files changed, 236 insertions(+), 24 deletions(-)
 create mode 100644 include/hardware/bcu_audio_interface.h
 create mode 100644 modules/bcu_audioif/Android.mk
 create mode 100644 modules/bcu_audioif/bcu_audio_interface.cpp

diff --git a/include/hardware/bcu_audio_interface.h b/include/hardware/bcu_audio_interface.h
new file mode 100644
index 0000000..909be22
--- /dev/null
+++ b/include/hardware/bcu_audio_interface.h
@@ -0,0 +1,53 @@
+/*****************************************************************************
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *****************************************************************************/
+#ifndef BCU_AUDIO_INTERFACE_H
+#define BCU_AUDIO_INTERFACE_H
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+/* Macro definition of audio_io_handle_t value for BCU */
+#define AUDIO_IO_HANDLE_BCU       0
+
+/* Macros for the various Audio throttling levels */
+#define AUDIO_THROTTLE_LEVEL_0    0
+#define AUDIO_THROTTLE_LEVEL_1    1
+#define AUDIO_THROTTLE_LEVEL_2    2
+#define AUDIO_THROTTLE_LEVEL_3    3
+
+/**
+ * Interface methods b/w platform specific BCU HAL and Audio HAL interface, to
+ * ge/set the audio throttling parameters values.
+ */
+struct audio_throttle {
+    int (*audioSetThrottle)(uint8_t level);
+    int (*audioGetThrottle)();
+};
+
+/**
+ * This is an interface function between the Audio HAL interface and platform
+ * specific HAL. Platform specific HAL should use this function during the
+ * initialization, to get the audio interface throttling info for get/set audio
+ * throttling.
+ */
+extern void get_bcu_audioif_info(struct audio_throttle **audioif_info);
+
+#if defined(__cplusplus)
+} /* extern "C" */
+#endif
+
+#endif /* BCU_AUDIO_INTERFACE_H */
diff --git a/modules/Android.mk b/modules/Android.mk
index 24eff00..ea6ad89 100644
--- a/modules/Android.mk
+++ b/modules/Android.mk
@@ -1,3 +1,3 @@
 hardware_modules := gralloc hwcomposer audio nfc nfc-nci local_time \
-	power usbaudio audio_remote_submix camera consumerir vibrator bcu
+	power usbaudio audio_remote_submix camera consumerir vibrator bcu_audioif bcu
 include $(call all-named-subdir-makefiles,$(hardware_modules))
diff --git a/modules/bcu/Android.mk b/modules/bcu/Android.mk
index 63dc3a1..2cca275 100644
--- a/modules/bcu/Android.mk
+++ b/modules/bcu/Android.mk
@@ -1,16 +1,16 @@
-# Copyright (C) 2013 The Android Open Source Project 	1
-# 	2
-# Licensed under the Apache License, Version 2.0 (the "License"); 	3
-# you may not use this file except in compliance with the License. 	4
-# You may obtain a copy of the License at 	5
-# 	6
-#      http://www.apache.org/licenses/LICENSE-2.0 	7
-# 	8
-			# Unless required by applicable law or agreed to in writing, software 	9
-# distributed under the License is distributed on an "AS IS" BASIS, 	10
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 	11
-# See the License for the specific language governing permissions and 	12
-# limitations under the License. 	13
+# Copyright (C) 2013 The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
 
 LOCAL_PATH := $(call my-dir)
 
@@ -23,10 +23,13 @@ LOCAL_C_INCLUDES := hardware/libhardware
 ifeq ($(BCUHAL_MRFLD), true)
     LOCAL_SRC_FILES := \
         bcu.c \
-	bcu_mrfld.c
+        bcu_mrfld.c
 endif
 
-LOCAL_SHARED_LIBRARIES := liblog
-LOCAL_MODULE_TAGS := optional
+LOCAL_SHARED_LIBRARIES := liblog \
+                          libutils \
+                          libcutils \
+                          libbcu_audioif
 
-include $(BUILD_SHARED_LIBRARY
+LOCAL_MODULE_TAGS := optional
+include $(BUILD_SHARED_LIBRARY)
diff --git a/modules/bcu/bcu.c b/modules/bcu/bcu.c
index 1e3eb3d..1231454 100644
--- a/modules/bcu/bcu.c
+++ b/modules/bcu/bcu.c
@@ -18,7 +18,7 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
-#include<time.h>
+#include <time.h>
 
 #define LOG_TAG "Intel BCUHAL"
 #include <utils/Log.h>
diff --git a/modules/bcu/bcu_mrfld.c b/modules/bcu/bcu_mrfld.c
index a8ce28d..0023fea 100644
--- a/modules/bcu/bcu_mrfld.c
+++ b/modules/bcu/bcu_mrfld.c
@@ -19,11 +19,12 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
-#include<time.h>
+#include <time.h>
 
 #define LOG_TAG "Intel MRFL BCUHAL"
 #include <utils/Log.h>
 
+#include <hardware/bcu_audio_interface.h>
 #include <hardware/hardware.h>
 #include <hardware/bcu.h>
 
@@ -34,6 +35,8 @@
 #define LEVEL_HIGH        1
 #define MAXSYSFS_DATA_SIZ 8
 
+struct audio_throttle *bcu_audioif;
+
 /**
  * Generic function to write the data into sysfs interface (path which is
  * provided as a input argument in path).
@@ -91,8 +94,8 @@ static int read_sysfs(char const *path, char *data, int num_bytes)
 int mrfl_setaudio_throttle(uint8_t level)
 {
     ALOGD("MRFL BCU_HAL: %s level %d\n", __func__, level);
-    /* TODO: Need to add the respective HAL Function Call */
-    return 0;
+    /* Audio HAL interface function to throttle the speaker power */
+    return bcu_audioif->audioSetThrottle(level);
 }
 
 int mrfl_setcamera_throttle(uint8_t level)
@@ -130,9 +133,10 @@ int mrfl_getaudio_throttle(uint8_t *level)
 {
     int ret = 0;
 
-    /* ret = TODO: Need to add the respective HAL Function Call */
+    /* Audio HAL interface function to get the current audio throttle level */
+    ret = bcu_audioif->audioGetThrottle();
     if (ret < 0) {
-        ALOGE("MRFL BCU_HAL: Error in %s\n", __func__);
+        ALOGE("MRFL BCU_HAL: Error in %s error code: %d\n", __func__,ret);
         return ret;
     }
 
@@ -218,5 +222,13 @@ static struct bcu_throttle mrfl_bcu_throttle = {
 void get_throttle_info(struct bcu_throttle **throttle_info)
 {
     ALOGI("MRFL BCU_HAL: Inside %s\n", __func__);
+   
+   /* getting audio interface throttling info for get/set audio throttling */
+   get_bcu_audioif_info(&bcu_audioif);
+   
+   /**
+   * providing the initialized platform specific throttling info to get/set
+   * the bcu throttling.
+   */
     *throttle_info = &mrfl_bcu_throttle;
 }
diff --git a/modules/bcu_audioif/Android.mk b/modules/bcu_audioif/Android.mk
new file mode 100644
index 0000000..a42439f
--- /dev/null
+++ b/modules/bcu_audioif/Android.mk
@@ -0,0 +1,35 @@
+# Copyright (C) 2013 The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+LOCAL_MODULE := libbcu_audioif
+
+ifeq ($(BCUHAL_MRFLD), true)
+    LOCAL_SRC_FILES := bcu_audio_interface.cpp
+endif
+
+LOCAL_C_INCLUDES += \
+    hardware/libhardware \
+    frameworks/av/include/ \
+    vendor/intel/hardware/audiocomms/utilities/include/
+
+LOCAL_SHARED_LIBRARIES := liblog \
+                          libmedia \
+                          libutils \
+                          libcutils
+
+LOCAL_MODULE_TAGS := optional
+include $(BUILD_SHARED_LIBRARY)
diff --git a/modules/bcu_audioif/bcu_audio_interface.cpp b/modules/bcu_audioif/bcu_audio_interface.cpp
new file mode 100644
index 0000000..3e0a8db
--- /dev/null
+++ b/modules/bcu_audioif/bcu_audio_interface.cpp
@@ -0,0 +1,109 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#define LOG_TAG "Intel HAL"
+#include <cutils/log.h>
+#include <utils/String8.h>
+#include <AudioThrottle.h>
+#include <media/AudioSystem.h>
+#include <hardware/bcu_audio_interface.h>
+
+using namespace android;
+
+/**
+ * AudioSystemSetParameters: Common interface function between Audio HAL and
+ * platform specific BCU HAL to Set the Audio throttling parameter (control the
+ * speaker power/volume).
+ * Returns: zero (0) - setParameter success
+ *          returns error code - setParameters fails
+ */
+static int AudioSystemSetParameters(uint8_t level)
+{
+    String8 param = String8(AUDIO_PARAMETER_THROTTLE_KEY) + String8("=");
+
+    ALOGV("BCU_AUDIOIF: Inside %s Level: %d\n", __func__, level);
+
+    switch (level) {
+        case AUDIO_THROTTLE_LEVEL_0:
+            param = param + AUDIO_PARAMETER_THROTTLE_LEVEL_0;
+            break;
+        case AUDIO_THROTTLE_LEVEL_1:
+            param = param + AUDIO_PARAMETER_THROTTLE_LEVEL_1;
+            break;
+        case AUDIO_THROTTLE_LEVEL_2:
+            param = param + AUDIO_PARAMETER_THROTTLE_LEVEL_2;
+            break;
+        case AUDIO_THROTTLE_LEVEL_3:
+            param = param + AUDIO_PARAMETER_THROTTLE_LEVEL_3;
+            break;
+        default:
+            ALOGW("BCU_AUDIOIF: %s unknown level %d\n", __func__, level);
+            return -EINVAL;
+    }
+    status_t result = AudioSystem::setParameters(
+                                       (audio_io_handle_t)AUDIO_IO_HANDLE_BCU,
+                                       param);
+    ALOGD("BCU_AUDIOIF: Audio Parameter set result = %d\n", result);
+
+    return result;
+}
+
+/**
+ * AudioSystemGetParameters: Common interface function between Audio HAL and
+ * platform specific BCU HAL to get the Audio throttling parameter (current
+ * speaker power consumption level).
+ * Returns: throttling Level value - read success
+ *          returns error code - read fails
+ */
+static int AudioSystemGetParameters()
+{
+    String8 reply;
+    char *audioParam;
+    int throttleLvl;
+
+    ALOGV("BCU_AUDIOIF: Inside %s\n", __func__);
+    reply = AudioSystem::getParameters(
+                             (audio_io_handle_t)AUDIO_IO_HANDLE_BCU,
+                             (String8)AUDIO_PARAMETER_THROTTLE_KEY);
+    audioParam = strpbrk((char *)reply.string(), "=");
+    ++audioParam;
+
+    if (!strcmp(audioParam, AUDIO_PARAMETER_THROTTLE_LEVEL_0)) {
+        throttleLvl = AUDIO_THROTTLE_LEVEL_0;
+    } else if (!strcmp(audioParam, AUDIO_PARAMETER_THROTTLE_LEVEL_1)) {
+        throttleLvl = AUDIO_THROTTLE_LEVEL_1;
+    } else if (!strcmp(audioParam, AUDIO_PARAMETER_THROTTLE_LEVEL_2)) {
+        throttleLvl = AUDIO_THROTTLE_LEVEL_2;
+    } else if (!strcmp(audioParam, AUDIO_PARAMETER_THROTTLE_LEVEL_3)) {
+        throttleLvl = AUDIO_THROTTLE_LEVEL_3;
+    } else {
+        ALOGW("BCU_AUDIOIF: Error in get AudioThrottle value from Audio HAL\n");
+        return -ENODEV;
+    }
+    ALOGD("BCU_AUDIOIF: Read Audio Throttle level: %d\n", throttleLvl);
+
+    return throttleLvl;
+}
+
+static struct audio_throttle bcu_audio_throttle = {
+    .audioSetThrottle = AudioSystemSetParameters,
+    .audioGetThrottle = AudioSystemGetParameters,
+};
+
+void get_bcu_audioif_info(struct audio_throttle **audioif_info)
+{
+    ALOGV("BCU_AUDIOIF: Inside %s\n", __func__);
+    *audioif_info = &bcu_audio_throttle;
+}
-- 
1.7.4.1

