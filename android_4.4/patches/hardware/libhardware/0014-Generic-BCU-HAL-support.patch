From 303f85ae8535d69127a6e3f3b57d67e34bfd8e84 Mon Sep 17 00:00:00 2001
From: Siddalingesh Koosalapur <siddalingesh.s.koosalapur@intel.com>
Date: Tue, 22 Oct 2013 16:07:07 +0530
Subject: Generic BCU HAL support

BZ: 119060

This is Generic layer of BCU HAL, which is the interface layer
between the CMS and the platform specific layer of BCU HAL.
Generic HAL exposes the generic get/set throttling functionalities
for CMS.
This patch included few Bug's as follows:
BUG NO:124910,124832,BUG: 119060.

Category: device enableement
Domain: EM-PMIC
Origin: internal
Upstream-Candidate: no, proprietary

Change-Id: I026e208f8a7c046d907925b1ae01911c238826f6
Signed-off-by: Siddalingesh Koosalapur <siddalingesh.s.koosalapur@intel.com>
---
 include/hardware/bcu.h  |  102 ++++++++++++++++++++++
 modules/Android.mk      |    2 +-
 modules/bcu/Android.mk  |   32 +++++++
 modules/bcu/bcu.c       |  120 +++++++++++++++++++++++++
 modules/bcu/bcu_mrfld.c |  222 +++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 477 insertions(+), 1 deletions(-)
 create mode 100644 include/hardware/bcu.h
 create mode 100644 modules/bcu/Android.mk
 create mode 100644 modules/bcu/bcu.c
 create mode 100644 modules/bcu/bcu_mrfld.c

diff --git a/include/hardware/bcu.h b/include/hardware/bcu.h
new file mode 100644
index 0000000..9d6d588
--- /dev/null
+++ b/include/hardware/bcu.h
@@ -0,0 +1,102 @@
+/*****************************************************************************
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *****************************************************************************/
+
+#ifndef ANDROID_INCLUDE_HARDWARE_BCU_H
+#define ANDROID_INCLUDE_HARDWARE_BCU_H
+
+#include <stdint.h>
+#include <sys/cdefs.h>
+#include <sys/types.h>
+
+#include <hardware/hardware.h>
+
+__BEGIN_DECLS
+
+#define BCU_MODULE_API_VERSION_0_1  HARDWARE_MODULE_API_VERSION(0, 1)
+#define BCU_MODULE_API_VERSION_0_2  HARDWARE_MODULE_API_VERSION(0, 2)
+
+/**
+ * The id of this module
+ */
+#define BCU_HARDWARE_MODULE_ID "bcu"
+
+/**
+ * BCU subsystem identifiers to get/set throttle level
+ */
+enum sub_system {
+    BCU_SUBSYS_AUDIO = 0x01,
+    BCU_SUBSYS_CAMERA = 0x02,
+    BCU_SUBSYS_DISPLAY = 0x03,
+    BCU_SUBSYS_OTG = 0x04,
+    BCU_SUBSYS_VIBRA = 0x05,
+};
+
+/**
+ * Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
+ * and the fields of this data structure must begin with hw_module_t
+ * followed by module specific information.
+ */
+typedef struct bcu_module {
+    struct hw_module_t common;
+
+    /**
+     * (*init)() performs initial required bcu and other subsystem setup
+     * actions which should be called by CMS before get/set throttling
+     */
+    void (*init)(struct bcu_module *module);
+
+    /**
+     * (*setThrottleLevel) performs set throttle for various subsystems,
+     * which is the interface between CMS and BCU generic HAL.
+     */
+    int (*setThrottleLevel)(enum sub_system subsys, uint8_t level);
+
+    /**
+     * (*getThrottleLevel) performs get throttle level of various
+     * subsystems, which is the interface between CMS and BCU generic HAL.
+     */
+    int (*getThrottleLevel)(enum sub_system subsys, uint8_t *level);
+
+} bcu_module_t;
+
+/**
+ * Common interface call structure between the Generic BCU HAL and Platform
+ * specific BCU HAL to set/get the Throttle levels for Audio, Display, Camera
+ * Otg and Vibra.
+ */
+struct bcu_throttle {
+    int (*setAudioThrottle)(uint8_t level);
+    int (*setCameraThrottle)(uint8_t level);
+    int (*setDisplayThrottle)(uint8_t level);
+    int (*setOtgThrottle)(uint8_t level);
+    int (*setVibraThrottle)(uint8_t level);
+    int (*getAudioThrottle)(uint8_t *level);
+    int (*getCameraThrottle)(uint8_t *level);
+    int (*getDisplayThrottle)(uint8_t *level);
+    int (*getOtgThrottle)(uint8_t *level);
+    int (*getVibraThrottle)(uint8_t *level);
+};
+
+/**
+ * This is an interface function between the generic HAL and platform specific
+ * HAL. Generic HAL should use this function during the initialization, to get
+ * the platform specific layer throttling interfaces/info.
+ */
+extern void get_throttle_info(struct bcu_throttle **throttle_info);
+
+__END_DECLS
+
+#endif /* ANDROID_INCLUDE_HARDWARE_BCU_H */
diff --git a/modules/Android.mk b/modules/Android.mk
index de41f6f..24eff00 100644
--- a/modules/Android.mk
+++ b/modules/Android.mk
@@ -1,3 +1,3 @@
 hardware_modules := gralloc hwcomposer audio nfc nfc-nci local_time \
-	power usbaudio audio_remote_submix camera consumerir vibrator
+	power usbaudio audio_remote_submix camera consumerir vibrator bcu
 include $(call all-named-subdir-makefiles,$(hardware_modules))
diff --git a/modules/bcu/Android.mk b/modules/bcu/Android.mk
new file mode 100644
index 0000000..63dc3a1
--- /dev/null
+++ b/modules/bcu/Android.mk
@@ -0,0 +1,32 @@
+# Copyright (C) 2013 The Android Open Source Project 	1
+# 	2
+# Licensed under the Apache License, Version 2.0 (the "License"); 	3
+# you may not use this file except in compliance with the License. 	4
+# You may obtain a copy of the License at 	5
+# 	6
+#      http://www.apache.org/licenses/LICENSE-2.0 	7
+# 	8
+			# Unless required by applicable law or agreed to in writing, software 	9
+# distributed under the License is distributed on an "AS IS" BASIS, 	10
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 	11
+# See the License for the specific language governing permissions and 	12
+# limitations under the License. 	13
+
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := bcu.default
+LOCAL_MODULE_PATH := $(TARGET_OUT_SHARED_LIBRARIES)/hw
+LOCAL_C_INCLUDES := hardware/libhardware
+
+ifeq ($(BCUHAL_MRFLD), true)
+    LOCAL_SRC_FILES := \
+        bcu.c \
+	bcu_mrfld.c
+endif
+
+LOCAL_SHARED_LIBRARIES := liblog
+LOCAL_MODULE_TAGS := optional
+
+include $(BUILD_SHARED_LIBRARY
diff --git a/modules/bcu/bcu.c b/modules/bcu/bcu.c
new file mode 100644
index 0000000..1e3eb3d
--- /dev/null
+++ b/modules/bcu/bcu.c
@@ -0,0 +1,120 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include <errno.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include<time.h>
+
+#define LOG_TAG "Intel BCUHAL"
+#include <utils/Log.h>
+
+#include <hardware/hardware.h>
+#include <hardware/bcu.h>
+
+struct bcu_throttle *throttle;
+
+struct intel_bcu_module {
+    struct bcu_module container;
+};
+
+static void intel_bcu_init(struct bcu_module *module)
+{
+    ALOGW("**Intel BCU HAL initialisation**\n");
+    get_throttle_info(&throttle);
+}
+
+static int intel_setthrottale_level(enum sub_system subsys,
+               uint8_t level) {
+    int ret;
+
+    ALOGD("BCU_HAL: Set Throttale Level %d subsys %d\n", level, subsys);
+
+    switch (subsys) {
+        case BCU_SUBSYS_AUDIO:
+            ret = throttle->setAudioThrottle(level);
+            break;
+        case BCU_SUBSYS_CAMERA:
+            ret = throttle->setCameraThrottle(level);
+            break;
+        case BCU_SUBSYS_DISPLAY:
+            ret = throttle->setDisplayThrottle(level);
+            break;
+        case BCU_SUBSYS_OTG:
+            ret = throttle->setOtgThrottle(level);
+            break;
+        case BCU_SUBSYS_VIBRA:
+            ret = throttle->setVibraThrottle(level);
+            break;
+        default:
+            ALOGE("BCU_HAL: Inside %s default case\n", __func__);
+            ret = -ENODEV;
+    }
+
+    return ret;
+}
+
+static int intel_getthrottale_level(enum sub_system subsys,
+               uint8_t *level) {
+    int ret;
+
+    ALOGD("BCU_HAL: Get Throttale Level for subsys %d\n", subsys);
+
+    switch (subsys) {
+        case BCU_SUBSYS_AUDIO:
+            ret = throttle->getAudioThrottle(level);
+             break;
+        case BCU_SUBSYS_CAMERA:
+             ret = throttle->getCameraThrottle(level);
+             break;
+        case BCU_SUBSYS_DISPLAY:
+             ret = throttle->getDisplayThrottle(level);
+             break;
+        case BCU_SUBSYS_OTG:
+             ret = throttle->getOtgThrottle(level);
+             break;
+        case BCU_SUBSYS_VIBRA:
+             ret = throttle->getVibraThrottle(level);
+             break;
+        default:
+             ALOGE("BCU_HAL: Inside %s default case\n", __func__);
+             ret = -ENODEV;
+    }
+
+    return ret;
+}
+
+static struct hw_module_methods_t bcu_module_methods = {
+    .open = NULL,
+};
+
+struct intel_bcu_module HAL_MODULE_INFO_SYM = {
+    container: {
+        common: {
+            tag: HARDWARE_MODULE_TAG,
+            module_api_version : BCU_MODULE_API_VERSION_0_2,
+            hal_api_version : HARDWARE_HAL_API_VERSION,
+            id : BCU_HARDWARE_MODULE_ID,
+            name : "Intel BCU HAL",
+            author : "Energy Management Team",
+            methods : &bcu_module_methods,
+        },
+        init : intel_bcu_init,
+        setThrottleLevel : intel_setthrottale_level,
+        getThrottleLevel : intel_getthrottale_level,
+    },
+};
diff --git a/modules/bcu/bcu_mrfld.c b/modules/bcu/bcu_mrfld.c
new file mode 100644
index 0000000..a8ce28d
--- /dev/null
+++ b/modules/bcu/bcu_mrfld.c
@@ -0,0 +1,222 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include <errno.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include<time.h>
+
+#define LOG_TAG "Intel MRFL BCUHAL"
+#include <utils/Log.h>
+
+#include <hardware/hardware.h>
+#include <hardware/bcu.h>
+
+#define BCU_CAMFLASH_SYSFS \
+            "/sys/devices/platform/bcove_bcu/camflash_ctrl"
+
+#define LEVEL_LOW         0
+#define LEVEL_HIGH        1
+#define MAXSYSFS_DATA_SIZ 8
+
+/**
+ * Generic function to write the data into sysfs interface (path which is
+ * provided as a input argument in path).
+ * Returns: zero (0) - write success
+ *          returns error code - write fails
+ */
+static int write_sysfs(char const *path, uint8_t data)
+{
+    char buf[80];
+    int fd = open(path, O_WRONLY);
+    if (fd >= 0) {
+        char buffer[6] = {'\0'};
+        int bytes = sprintf(buffer, "%d\n", data);
+        int amt = write(fd, buffer, bytes);
+        if (amt < 0) {
+            strerror_r(errno, buf, sizeof(buf));
+            ALOGE("MRFL BCU_HAL: Error writing to %s: %s\n", path, buf);
+        }
+        close(fd);
+        return amt == -1 ? -errno : 0;
+    } else {
+        strerror_r(errno, buf, sizeof(buf));
+        ALOGE("MRFL BCU_HAL: Error opening %s: %s\n", path, buf);
+        return -errno;
+    }
+}
+
+/**
+ * Generic function to read the sysfs interface (path which is provided as a
+ * input argument in path) and returns with the read value as a string in *s.
+ * Returns: number of bytes read - read success
+ *          returns error code - read fails
+ */
+static int read_sysfs(char const *path, char *data, int num_bytes)
+{
+    char buf[80];
+    int count;
+    int fd = open(path, O_RDONLY);
+    if (fd >= 0) {
+        char buffer[20] = {'\0'};
+        int amt = read(fd, data, num_bytes);
+        if (amt < 0) {
+            strerror_r(errno, buf, sizeof(buf));
+            ALOGE("MRFL BCU_HAL: Error reading from %s: %s\n", path, buf);
+        }
+        close(fd);
+        return amt == -1 ? -errno : amt;
+    } else {
+        strerror_r(errno, buf, sizeof(buf));
+        ALOGE("MRFL BCU_HAL: Error opening %s: %s\n", path, buf);
+        return -errno;
+    }
+}
+
+int mrfl_setaudio_throttle(uint8_t level)
+{
+    ALOGD("MRFL BCU_HAL: %s level %d\n", __func__, level);
+    /* TODO: Need to add the respective HAL Function Call */
+    return 0;
+}
+
+int mrfl_setcamera_throttle(uint8_t level)
+{
+    ALOGD("MRFL BCU_HAL: %s level %d\n", __func__, level);
+
+    if ((level == LEVEL_HIGH) || (level == LEVEL_LOW))
+        return write_sysfs(BCU_CAMFLASH_SYSFS, level);
+    else
+        return -EINVAL;
+}
+
+int mrfl_setdisplay_throttle(uint8_t level)
+{
+    ALOGD("MRFL BCU_HAL: %s level %d\n", __func__, level);
+    /* TODO: Need to add the respective HAL Function Call */
+    return 0;
+}
+
+int mrfl_setotg_throttle(uint8_t level)
+{
+    ALOGD("MRFL BCU_HAL: %s level %d\n", __func__, level);
+    /* TODO: Need to add the respective HAL Function Call */
+    return 0;
+}
+
+int mrfl_setvibra_throttle(uint8_t level)
+{
+    ALOGD("MRFL BCU_HAL: %s level %d\n", __func__, level);
+    /* TODO: Need to add the respective HAL Function Call */
+    return 0;
+}
+
+int mrfl_getaudio_throttle(uint8_t *level)
+{
+    int ret = 0;
+
+    /* ret = TODO: Need to add the respective HAL Function Call */
+    if (ret < 0) {
+        ALOGE("MRFL BCU_HAL: Error in %s\n", __func__);
+        return ret;
+    }
+
+    *level = ret;
+    return 0;
+}
+
+int mrfl_getcamera_throttle(uint8_t *level)
+{
+    int ret;
+    char buf[MAXSYSFS_DATA_SIZ] = {'\0'};
+
+    ret = read_sysfs(BCU_CAMFLASH_SYSFS, buf, MAXSYSFS_DATA_SIZ);
+    if (ret < 0) {
+        ALOGE("MRFL BCU_HAL: Error in %s\n", __func__);
+        return ret;
+    } else {
+        ret = 0;
+        uint8_t data = atoi(buf);
+        if ((data == LEVEL_LOW) || (data == LEVEL_HIGH))
+            *level = data;
+        else
+            ret = -ENODATA;
+    }
+    return ret;
+}
+
+int mrfl_getdisplay_throttle(uint8_t *level)
+{
+    int ret = 0;
+
+    /* ret = TODO: Need to add the respective HAL Function Call */
+    if (ret < 0) {
+        ALOGE("MRFL BCU_HAL: Error in %s\n", __func__);
+        return ret;
+    }
+
+    *level = ret;
+    return 0;
+}
+
+int mrfl_getotg_throttle(uint8_t *level)
+{
+    int ret = 0;
+
+    /* ret = TODO: Need to add the respective HAL Function Call */
+    if (ret < 0) {
+        ALOGE("MRFL BCU_HAL: Error in %s\n", __func__);
+        return ret;
+    }
+
+    *level = ret;
+    return 0;
+}
+
+int mrfl_getvibra_throttle(uint8_t *level)
+{
+    int ret = 0;
+
+    /* ret = TODO: Need to add the respective HAL Function Call */
+    if (ret < 0) {
+        ALOGE("MRFL BCU_HAL: Error in %s\n", __func__);
+        return ret;
+    }
+
+    *level = ret;
+    return 0;
+}
+
+static struct bcu_throttle mrfl_bcu_throttle = {
+    .setAudioThrottle = mrfl_setaudio_throttle,
+    .setCameraThrottle = mrfl_setcamera_throttle,
+    .setDisplayThrottle = mrfl_setdisplay_throttle,
+    .setOtgThrottle = mrfl_setotg_throttle,
+    .setVibraThrottle = mrfl_setvibra_throttle,
+    .getAudioThrottle = mrfl_getaudio_throttle,
+    .getCameraThrottle = mrfl_getcamera_throttle,
+    .getDisplayThrottle = mrfl_getdisplay_throttle,
+    .getOtgThrottle = mrfl_getotg_throttle,
+    .getVibraThrottle = mrfl_getvibra_throttle,
+};
+
+void get_throttle_info(struct bcu_throttle **throttle_info)
+{
+    ALOGI("MRFL BCU_HAL: Inside %s\n", __func__);
+    *throttle_info = &mrfl_bcu_throttle;
+}
-- 
1.7.4.1

