From 8c7cb60b52acd7e1d9a72d764e3cddb2efd6586d Mon Sep 17 00:00:00 2001
From: Jerome Anand <jerome.anand@intel.com>
Date: Wed, 26 Sep 2012 13:49:47 +0530
Subject: Ringtone preview playes intermittently, while USB Audio Accessory connected

BZ: 54073

period count was not considered for the buffer size used leading to
gaps in playback of ringtone.

Category: Feature Differentiation
Domain: AUDIO_MEDIA-USB-Audio
Origin: Internal
Upstream-Candidate: no, proprietary

Change-Id: I70bf0d469c1c7b9b66c4f1ad13e08ff8ee2f02e4
Orig-Change-Id: Ib18cc9a43f2b81b45b1bf3fdf55acfa6b7fe635e
---
 modules/usbaudio/audio_hw.c |   34 ++++++++++++++++++++++++++++++++--
 1 files changed, 32 insertions(+), 2 deletions(-)

diff --git a/modules/usbaudio/audio_hw.c b/modules/usbaudio/audio_hw.c
index f33c343..8a8f4f7 100644
--- a/modules/usbaudio/audio_hw.c
+++ b/modules/usbaudio/audio_hw.c
@@ -15,7 +15,7 @@
  */
 
 #define LOG_TAG "usb_audio_hw"
-/*#define LOG_NDEBUG 0*/
+//#define LOG_NDEBUG 0
 
 #include <errno.h>
 #include <pthread.h>
@@ -73,6 +73,7 @@ static int start_output_stream(struct stream_out *out)
     struct audio_device *adev = out->dev;
     int i;
 
+    ALOGV("%s enter",__func__);
     if ((adev->card < 0) || (adev->device < 0))
         return -EINVAL;
 
@@ -84,6 +85,7 @@ static int start_output_stream(struct stream_out *out)
         return -ENOMEM;
     }
 
+    ALOGV("%s exit",__func__);
     return 0;
 }
 
@@ -102,6 +104,7 @@ static int out_set_sample_rate(struct audio_stream *stream, uint32_t rate)
 static size_t out_get_buffer_size(const struct audio_stream *stream)
 {
     return pcm_config.period_size *
+           pcm_config.period_count *
            audio_stream_frame_size((struct audio_stream *)stream);
 }
 
@@ -124,6 +127,7 @@ static int out_standby(struct audio_stream *stream)
 {
     struct stream_out *out = (struct stream_out *)stream;
 
+    ALOGV("%s enter standby = %d",__func__,out->standby);
     pthread_mutex_lock(&out->dev->lock);
     pthread_mutex_lock(&out->lock);
 
@@ -131,11 +135,13 @@ static int out_standby(struct audio_stream *stream)
         pcm_close(out->pcm);
         out->pcm = NULL;
         out->standby = true;
+        ALOGV("%s PCM device closed",__func__);
     }
 
     pthread_mutex_unlock(&out->lock);
     pthread_mutex_unlock(&out->dev->lock);
 
+    ALOGV("%s exit",__func__);
     return 0;
 }
 
@@ -153,6 +159,8 @@ static int out_set_parameters(struct audio_stream *stream, const char *kvpairs)
     int ret;
     int routing = 0;
 
+    ALOGV("%s enter",__func__);
+
     parms = str_parms_create_str(kvpairs);
     pthread_mutex_lock(&adev->lock);
 
@@ -167,6 +175,7 @@ static int out_set_parameters(struct audio_stream *stream, const char *kvpairs)
     pthread_mutex_unlock(&adev->lock);
     str_parms_destroy(parms);
 
+    ALOGV("%s exit",__func__);
     return 0;
 }
 
@@ -193,6 +202,8 @@ static ssize_t out_write(struct audio_stream_out *stream, const void* buffer,
     int ret;
     struct stream_out *out = (struct stream_out *)stream;
 
+    ALOGV("%s enter",__func__);
+
     pthread_mutex_lock(&out->dev->lock);
     pthread_mutex_lock(&out->lock);
     if (out->standby) {
@@ -203,16 +214,26 @@ static ssize_t out_write(struct audio_stream_out *stream, const void* buffer,
         out->standby = false;
     }
 
-    pcm_write(out->pcm, (void *)buffer, bytes);
+    if(!out->pcm){
+       ALOGD("%s: null handle to write - device already closed",__func__);
+       goto err;
+    }
+    ret = pcm_write(out->pcm, (void *)buffer, bytes);
+
+    ALOGV("%s: pcm_write returned = %d",__func__,ret);
 
     pthread_mutex_unlock(&out->lock);
     pthread_mutex_unlock(&out->dev->lock);
 
+    ALOGV("%s exit",__func__);
+
     return bytes;
 
 err:
     pthread_mutex_unlock(&out->lock);
+    pthread_mutex_unlock(&out->dev->lock);
 
+    ALOGV("%s Silence write",__func__);
     if (ret != 0) {
         usleep(bytes * 1000000 / audio_stream_frame_size(&stream->common) /
                out_get_sample_rate(&stream->common));
@@ -253,6 +274,7 @@ static int adev_open_output_stream(struct audio_hw_device *dev,
     struct audio_device *adev = (struct audio_device *)dev;
     struct stream_out *out;
     int ret;
+    ALOGV("%s enter",__func__);
 
     out = (struct stream_out *)calloc(1, sizeof(struct stream_out));
     if (!out)
@@ -288,9 +310,11 @@ static int adev_open_output_stream(struct audio_hw_device *dev,
     adev->device = -1;
 
     *stream_out = &out->stream;
+    ALOGV("%s exit",__func__);
     return 0;
 
 err_open:
+    ALOGE("%s exit with error",__func__);
     free(out);
     *stream_out = NULL;
     return ret;
@@ -301,8 +325,10 @@ static void adev_close_output_stream(struct audio_hw_device *dev,
 {
     struct stream_out *out = (struct stream_out *)stream;
 
+    ALOGV("%s enter",__func__);
     out_standby(&stream->common);
     free(stream);
+    ALOGV("%s exit",__func__);
 }
 
 static int adev_set_parameters(struct audio_hw_device *dev, const char *kvpairs)
@@ -385,6 +411,8 @@ static int adev_open(const hw_module_t* module, const char* name,
     struct audio_device *adev;
     int ret;
 
+    ALOGV("%s enter",__func__);
+
     if (strcmp(name, AUDIO_HARDWARE_INTERFACE) != 0)
         return -EINVAL;
 
@@ -414,6 +442,8 @@ static int adev_open(const hw_module_t* module, const char* name,
 
     *device = &adev->hw_device.common;
 
+    ALOGV("%s exit",__func__);
+
     return 0;
 }
 
-- 
1.7.4.1

