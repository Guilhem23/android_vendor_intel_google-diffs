From bb4de76c69b072455fe359a452320596afb87992 Mon Sep 17 00:00:00 2001
From: shuwangx <shux.wang@intel.com>
Date: Fri, 31 May 2013 15:24:16 +0800
Subject: [PORT FROM MAIN]vold: Try to lazy unmount after doUnmount failed

BZ: 102767

Perform a MNT_DETACH lazy unmount after doUnmount failed,
in case that files are been deleting, and the user process
cannot be found and killed by killProcessesWithOpenFiles.

It may not unmount the device right away,
but it will make it unaccessable, and unmount it as soon as it's not
busy.

Change-Id: I4b1f5bd5766f57662c5bf20eded94efd5f3ced1b
Orig-Change-Id: I1575c70f6866919dc3005a89fe54d3393f4a6f79
Category: aosp improvement
Domain: Storage Removable_Storage
Origin: internal
Upstream-Candidate: no, proprietary
Signed-off-by: shuwangx <shux.wang@intel.com>
---
 Volume.cpp |   10 ++++++++++
 1 files changed, 10 insertions(+), 0 deletions(-)

diff --git a/Volume.cpp b/Volume.cpp
index 1ab3017..83143cb 100644
--- a/Volume.cpp
+++ b/Volume.cpp
@@ -570,6 +570,16 @@ int Volume::doUnmount(const char *path, bool force) {
         Process::killProcessesWithOpenFiles(path, action);
         usleep(1000*1000);
     }
+
+    sync();
+    /* perform a MNT_DETACH lazy unmount,
+     * in case that files are been deleting,
+     * and the user process cannot be found and killed by killProcessesWithOpenFiles. */
+    if (!umount2(path, MNT_DETACH) || errno == EINVAL || errno == ENOENT) {
+        SLOGI("%s sucessfully unmounted with MNT_DETACH flag", path);
+        return 0;
+    }
+
     errno = EBUSY;
     SLOGE("Giving up on unmount %s (%s)", path, strerror(errno));
     return -1;
-- 
1.7.4.1

