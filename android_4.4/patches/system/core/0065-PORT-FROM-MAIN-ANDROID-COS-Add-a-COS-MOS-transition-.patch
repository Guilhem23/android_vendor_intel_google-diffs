From d5bfda271bf9019fd5e9a781cfabdacff8d74f75 Mon Sep 17 00:00:00 2001
From: Pavan Kumar S <pavan.kumar.s@intel.com>
Date: Tue, 22 Oct 2013 11:38:35 +0530
Subject: [PORT FROM MAIN] ANDROID-COS: Add a COS-MOS transition threshold with indication

BZ: 49173

As the minimum thresholds for booting to COS & MOS are different, transition from
COS to MOS before a certain minimum battery capacity should not be allowed.
To improve the user experience, also need an indication in the
COS-display that it is still not ready to transition from COS to MOS.

This patch adds an additional check in COS that allows boot to MOS only with
atleast a minimum capacity. A yellow-bang is added along with the animation as
long as the battery capacity hasn't reached the minimum required threshold.
That way the user does not have to keep trying.

Orig-Change-Id: Ib68a7c01d839ae42211ed182ec7807cea307f2d1
Category: device enablement
Domain: EM.BatteryManagement-Common
Origin: internal
Upstream-Candidate: no, proprietary
Orig-Change-Id: I95e8d6d8fb909e1d249102f1cf28b7ad4171e008

Change-Id: Icb4f008df720215b0c7beae9e24fa3bcf8282592
Signed-off-by: Pavan Kumar S <pavan.kumar.s@intel.com>
---
 charger/charger.c               |   30 ++++++++++++++++++++++++++++--
 charger/images/battery_crit.png |  Bin 0 -> 1310 bytes
 2 files changed, 28 insertions(+), 2 deletions(-)
 create mode 100644 charger/images/battery_crit.png

diff --git a/charger/charger.c b/charger/charger.c
index 8156e0c..d8c0930 100644
--- a/charger/charger.c
+++ b/charger/charger.c
@@ -40,6 +40,7 @@
 #include <cutils/list.h>
 #include <cutils/misc.h>
 #include <cutils/uevent.h>
+#include <cutils/properties.h>
 
 #ifdef CHARGER_ENABLE_SUSPEND
 #include <suspend/autosuspend.h>
@@ -65,6 +66,7 @@
 #define UNPLUGGED_SHUTDOWN_TIME (10 * MSEC_PER_SEC)
 
 #define BATTERY_FULL_THRESH     95
+#define BOOT_BATT_MIN_CAP_THRS  3
 
 #define LAST_KMSG_PATH          "/proc/last_kmsg"
 #define LAST_KMSG_MAX_SZ        (32 * 1024)
@@ -129,6 +131,8 @@ struct charger {
     gr_surface surf_unknown;
 
     struct power_supply *battery;
+
+    int boot_min_cap;
 };
 
 struct uevent {
@@ -142,6 +146,11 @@ struct uevent {
 
 static struct frame batt_anim_frames[] = {
     {
+        .name = "charger/battery_crit",
+        .disp_time = 750,
+        .min_capacity = 0,
+    },
+    {
         .name = "charger/battery_0",
         .disp_time = 750,
         .min_capacity = 0,
@@ -671,6 +680,12 @@ static void draw_battery(struct charger *charger)
         LOGV("drawing frame #%d name=%s min_cap=%d time=%d\n",
              batt_anim->cur_frame, frame->name, frame->min_capacity,
              frame->disp_time);
+
+        if (get_battery_capacity(charger) < charger->boot_min_cap) {
+            struct frame *crit_frame = &batt_anim->frames[0];
+            draw_surface_centered(charger, crit_frame->surface);
+            LOGV("drawing battery_crit frame\n");
+        }
     }
 }
 
@@ -871,8 +886,13 @@ static void process_key(struct charger *charger, int code, int64_t now)
         if (key->down) {
             int64_t reboot_timeout = key->timestamp + POWER_ON_KEY_TIME;
             if (now >= reboot_timeout) {
-                LOGI("[%lld] rebooting\n", now);
-                android_reboot(ANDROID_RB_RESTART, 0, 0);
+                if (get_battery_capacity(charger) >= charger->boot_min_cap) {
+                    LOGI("[%lld] rebooting\n", now);
+                    android_reboot(ANDROID_RB_RESTART, 0, 0);
+                } else {
+                    LOGI("[%lld] ignore power-button press, battery level "
+                            "less than minimum\n", now);
+                }
             } else {
                 /* if the key is pressed but timeout hasn't expired,
                  * make sure we wake up at the right-ish time to check
@@ -991,6 +1011,7 @@ int main(int argc, char **argv)
     int64_t now = curr_time_ms() - 1;
     int fd;
     int i;
+    char value[PROPERTY_VALUE_MAX], default_value[PROPERTY_VALUE_MAX];
 
     list_init(&charger->supplies);
 
@@ -1035,6 +1056,11 @@ int main(int argc, char **argv)
 
     ev_sync_key_state(set_key_callback, charger);
 
+    sprintf(default_value, "%d", BOOT_BATT_MIN_CAP_THRS);
+    property_get("ro.boot.min.cap", value, default_value);
+    sscanf(value, "%d", &charger->boot_min_cap);
+    LOGI("Minimum capacity for MOS-boot:%d\n", charger->boot_min_cap);
+
 #ifndef CHARGER_DISABLE_INIT_BLANK
     gr_fb_blank(true);
 #endif
diff --git a/charger/images/battery_crit.png b/charger/images/battery_crit.png
new file mode 100644
index 0000000000000000000000000000000000000000..677909a3b10c4c54d81d5027428b2cde1f0e5fbe
GIT binary patch
literal 1310
zcmeAS@N?(olHy`uVBq!ia0y~yVAKNQ7!Ed|NWJ6d&p?W?ILO_JVcj{Imp~3%lDE4H
z!+#K5uy^@npa^GyM`SSr1Gg{;GcwGYBLNg-FY)wsWxvD0!78O>pOwSMz`!!k)5S5Q
z;?~={7Yi>t2s9+Fbzx(2=FDtmt60F6wVaFX_-SKdi9;Sv)z$Z}GklBuzWMoyZ<`nx
z4(J;dZ{@n+ecV?zE=*w6D>Hp<j;Wno0$K~1cC`a3hJ{Q5S`I7LJv&<>u<Fx0pc<|7
zoEuj9hBS0?ZCI&44I}_n!_dMdu<GDX4qlGX%Df*e3qQ?an0?FT=oX{P(c)@a8nP?D
zpWak+)@T0`lY`xV&uJMvDE)0{yuV{gfaBHdZ-&P9-5}QMug#ubD;E4x`Rci(g)8Gg
z{0WAIyBdB6IIK8Td{~`h>T{MGSJbo)xUk;168>4+L?ML1iB%z_A%KzNYWxmc#+Fq!
z^<SAA68~L4mt)vd(a%*?4R+s~!i7!mqW%<mt^hjLC&Y<$#tNWwEiRuG0){3<z+m>7
z9=`L*UxS>oX9qA|wdD|102=@1i%y6`skt}A=nIZ%ZqxgN7;KfdMzT6Ad61I#Bd6w0
z^t7jWstu<mGNIVd_h@r9P@vEALd<dfbHZAnm}ubwdYI$t)jtauIYbev4VL`bwj}fc
zkDd7O%)&19>*7vF8HA@qD2DJ9o)Ok=>AEygNW1UBZD9-BAcYVPnZCM$lpGmG!$3x-
zqkWkvAMQ)ryn6ABqaz^HF4>)Dx8qUPg-QEf2K^9N6?A;>!|UN80;`@)?BcM$tJ=U3
zdedX?OM#V}la<0au9i;h>evy<Y0)?P{f?Sjg~A$YS~4dEv~E~Saw_-L&5`T1XFXLO
zmbhrqACa&69}PnlL*@u|FJ7*&(Fqv(N$WCStyy_Gq%}a1k3*D0-RY=Fpnx_o>1g=`
zFVlk1a_Ua4XZf94Hz<YN_#$Txis5CN{qhSBsj)9~DiGAl$rI2Lh->M(H#=%g3zx$R
zgVKsR4$)MzjWdA$+$6vyYW99!y}OHmmY4g-dN(hD-`w5_v#j1ERYg5|RexVJVG+}0
zUNx<jLm{o5UP~NSIBWnK>DR*bZN;a56AH}tY}0AXeAVL+S{pNCg@J1)i<(xJukQNJ
ziyZxe!lJ$XH3}gLFF2;2P2Ve^_28FBdY;qKE0+&?+;=zq7_zlW$Y=jetr~gJzu$M*
z-{ra*lD0cm(fGdGk@BssOV%t-bXg&wIVaxnN3?zH!d0bW-|M9Jl!&kLV*ki-T)ASW
zejUfveViG^l8mX&Q)gzo*hJUq%`~c6%(T8^N;ivuCNS=0?gNP*XA94to$2t>!#0X_
zLD7;!v!6Ts42Wb!Bn>#rA|P#D7-QAT9V=_KHGvtk&XB$36euypy-dZX9<Gs!jE2a+
YEEDtBl<Wy!dlF=<r>mdKI;Vst0Lt07C;$Ke

literal 0
HcmV?d00001

-- 
1.7.4.1

