From a1e756a3d85a255dc5f35a72674085196f4b7608 Mon Sep 17 00:00:00 2001
From: Andrew Boie <andrew.p.boie@intel.com>
Date: Thu, 12 Jul 2012 15:39:25 -0700
Subject: adb: reserve a wakelock when clients are connected over socket

USB OTG connections already have a wakelock reserved, but if a network
socket connection is made, the device can unexpectedly suspend
in the middle of a session. The lock is released when the client
disconnects.

We have found in testing that most of the USB Ethernet adaptors
we are using do not properly support wake-on-LAN.

Issue: ADEV-21
Change-Id: Ibe7ca1202d45863464d29633381281aa2919c82d
Category: AOSP Improvement
Domain: AOSP-adb
Upstream-candidate: Yes
Signed-off-by: Andrew Boie <andrew.p.boie@intel.com>
---
 adb/transport_local.c |   47 ++++++++++++++++++++++++++++++++++++++++++++++-
 1 files changed, 46 insertions(+), 1 deletions(-)

diff --git a/adb/transport_local.c b/adb/transport_local.c
index 1cfa24d..53d562b 100644
--- a/adb/transport_local.c
+++ b/adb/transport_local.c
@@ -53,7 +53,46 @@ static inline void fix_endians(apacket *p)
 ADB_MUTEX_DEFINE( local_transports_lock );
 
 static atransport*  local_transports[ ADB_LOCAL_TRANSPORT_MAX ];
-#endif /* ADB_HOST */
+#else /* !ADB_HOST */
+
+#define WAKE_LOCK_NAME      "adb-socket-connection"
+#define WAKE_LOCK_ACQUIRE   "/sys/power/wake_lock"
+#define WAKE_LOCK_RELEASE   "/sys/power/wake_unlock"
+
+static int sysfs_write(const char *node, const char *message)
+{
+    int fd;
+    ssize_t to_write;
+    int ret = 0;
+
+    fd = adb_open(node, O_RDWR);
+    if (!fd) {
+        D("open '%s' failed: %s\n", node, strerror(errno));
+        return -1;
+    }
+
+    to_write = strlen(message);
+    if (adb_write(fd, message, to_write) != to_write) {
+        D("write '%s' failed: %s\n", node, strerror(errno));
+        ret = -1;
+    }
+    adb_close(fd);
+    return ret;
+}
+
+static void get_wakelock(void)
+{
+    if (sysfs_write(WAKE_LOCK_ACQUIRE, WAKE_LOCK_NAME))
+        D("couldn't reserve wakelock for socket connection\n");
+}
+
+static void release_wakelock(void)
+{
+    if (sysfs_write(WAKE_LOCK_RELEASE, WAKE_LOCK_NAME))
+        D("couldn't release wakelock for socket connection\n");
+}
+
+#endif /* !ADB_HOST */
 
 static int remote_read(apacket *p, atransport *t)
 {
@@ -179,6 +218,9 @@ static void *server_socket_thread(void * arg)
         fd = adb_socket_accept(serverfd, &addr, &alen);
         if(fd >= 0) {
             D("server: new connection on fd %d\n", fd);
+#if !ADB_HOST
+            get_wakelock();
+#endif
             close_on_exec(fd);
             disable_tcp_nagle(fd);
             register_socket_transport(fd, "host", port, 1);
@@ -356,6 +398,9 @@ static void remote_kick(atransport *t)
 
 static void remote_close(atransport *t)
 {
+#if !ADB_HOST
+    release_wakelock();
+#endif
     adb_close(t->fd);
 }
 
-- 
1.7.4.1

