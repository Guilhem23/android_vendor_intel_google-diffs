From cdc8ed11590f5aa485c34bdb2f5b18557a84528c Mon Sep 17 00:00:00 2001
From: Daniel Leung <daniel.leung@intel.com>
Date: Wed, 11 Sep 2013 16:37:31 -0700
Subject: init/ueventd: enable rule matching against USB device class

Enable ueventd to match rules defined in ueventd.rc based
on USB device class, with prefix "usbclass:". This matches
against the "TYPE=" field of uevents.

Format of the rule is, similar to one for device nodes:
  usbclass:<A/B/C> <permission> <uid> <gid>

where A, B, C are all in decimal without leading zero:
  A: device class
  B: device subclass
  C: device protocol

Change-Id: I59114c6281974cf171d5e0469881cf799dde9d37
Signed-off-by: Daniel Leung <daniel.leung@intel.com>
---
 init/devices.c |   62 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 init/devices.h |    5 ++++
 init/ueventd.c |   16 +++++++++++++-
 3 files changed, 82 insertions(+), 1 deletions(-)

diff --git a/init/devices.c b/init/devices.c
index 5e272b3..0f267b1 100644
--- a/init/devices.c
+++ b/init/devices.c
@@ -81,10 +81,19 @@ struct platform_node {
     struct listnode list;
 };
 
+struct usb_device_class_node {
+    char *devclass;
+    mode_t perm;
+    unsigned int uid;
+    unsigned int gid;
+    struct listnode list;
+};
+
 static list_declare(sys_perms);
 static list_declare(dev_perms);
 static list_declare(platform_names);
 static list_declare(deferred_module_loading_list);
+static list_declare(usb_device_classes);
 
 static char *get_module_blacklist(void)
 {
@@ -130,6 +139,27 @@ int add_dev_perms(const char *name, const char *attr,
     return 0;
 }
 
+int add_usb_device_class_matching(
+                         const char *devclass,
+                         mode_t perm, unsigned int uid,
+                         unsigned int gid) {
+    struct usb_device_class_node *node = calloc(1, sizeof(*node));
+    if (!node)
+        return -ENOMEM;
+
+    node->devclass = strdup(devclass);
+    if (!node->devclass)
+        return -ENOMEM;
+
+    node->perm = perm;
+    node->uid = uid;
+    node->gid = gid;
+
+    list_add_tail(&usb_device_classes, &node->list);
+
+    return 0;
+}
+
 void fixup_sys_perms(const char *upath)
 {
     char buf[512];
@@ -333,6 +363,7 @@ static void parse_event(const char *msg, struct uevent *uevent)
     uevent->partition_num = -1;
     uevent->device_name = NULL;
     uevent->modalias = NULL;
+    uevent->type = NULL;
 
         /* currently ignoring SEQNUM */
     while(*msg) {
@@ -363,6 +394,9 @@ static void parse_event(const char *msg, struct uevent *uevent)
         } else if(!strncmp(msg, "DEVNAME=", 8)) {
             msg += 8;
             uevent->device_name = msg;
+        } else if(!strncmp(msg, "TYPE=", 5)) {
+            msg += 5;
+            uevent->type = msg;
         } else if(!strncmp(msg, "MODALIAS=", 9)) {
             msg += 9;
             uevent->modalias = msg;
@@ -507,6 +541,28 @@ static char **parse_platform_block_device(struct uevent *uevent)
     return links;
 }
 
+static void handle_usb_device_class_rule(struct uevent *uevent, const char *devpath)
+{
+    struct listnode *node;
+    struct usb_device_class_node *usbdc;
+
+    /* nothing to process */
+    if (!uevent || !uevent->type || !devpath) {
+        return;
+    }
+
+    list_for_each(node, &usb_device_classes) {
+        usbdc = node_to_item(node, struct usb_device_class_node, list);
+
+        if (fnmatch(usbdc->devclass, uevent->type, 0) != 0)
+            continue;
+
+        /* change device node owner/permission */
+        chown(devpath, usbdc->uid, usbdc->gid);
+        chmod(devpath, usbdc->perm);
+    }
+}
+
 static void handle_device(const char *action, const char *devpath,
         const char *path, int block, int major, int minor, char **links)
 {
@@ -593,6 +649,7 @@ static void handle_generic_device_event(struct uevent *uevent)
     const char *name;
     char devpath[96] = {0};
     char **links = NULL;
+    unsigned short is_usb_dev = 0;
 
     name = parse_device_name(uevent, 64);
     if (!name)
@@ -633,6 +690,8 @@ static void handle_generic_device_event(struct uevent *uevent)
                  make_dir(devpath, 0755);
                  snprintf(devpath, sizeof(devpath), "/dev/bus/usb/%03d/%03d", bus_id, device_id);
              }
+
+             is_usb_dev = 1;
          } else {
              /* ignore other USB events */
              return;
@@ -675,6 +734,9 @@ static void handle_generic_device_event(struct uevent *uevent)
 
      handle_device(uevent->action, devpath, uevent->path, 0,
              uevent->major, uevent->minor, links);
+
+     if (is_usb_dev)
+         handle_usb_device_class_rule(uevent, devpath);
 }
 
 static void handle_deferred_module_loading()
diff --git a/init/devices.h b/init/devices.h
index 1718109..009ae8e 100644
--- a/init/devices.h
+++ b/init/devices.h
@@ -27,6 +27,7 @@ struct uevent {
     const char *partition_name;
     const char *device_name;
     const char *modalias;
+    const char *type;
     const char *product;
     int partition_num;
     int major;
@@ -42,6 +43,10 @@ extern int module_probe(const char *alias);
 extern int add_dev_perms(const char *name, const char *attr,
                          mode_t perm, unsigned int uid,
                          unsigned int gid, unsigned short wildcard);
+extern int add_usb_device_class_matching(
+                         const char *devclass,
+                         mode_t perm, unsigned int uid,
+                         unsigned int gid);
 int get_device_fd();
 void coldboot(const char *path);
 #endif	/* _INIT_DEVICES_H */
diff --git a/init/ueventd.c b/init/ueventd.c
index 9da1e8e..5b6095e 100644
--- a/init/ueventd.c
+++ b/init/ueventd.c
@@ -171,6 +171,7 @@ void set_device_permission(int nargs, char **args)
     char *endptr;
     int ret;
     char *tmp = 0;
+    int usb_device_class_rule = 0;
 
     if (nargs == 0)
         return;
@@ -180,6 +181,15 @@ void set_device_permission(int nargs, char **args)
 
     name = args[0];
 
+    if (!strncmp(name, "usbclass:", 9)) {
+        /* skip the prefix "usbclass:" */
+        attr = args[0] + 9;
+
+        INFO("usbclass rule '%s'\n", attr);
+
+        usb_device_class_rule = 1;
+    }
+
     if (!strncmp(name,"/sys/", 5) && (nargs == 5)) {
         INFO("/sys/ rule %s %s\n",args[0],args[1]);
         attr = args[1];
@@ -227,6 +237,10 @@ void set_device_permission(int nargs, char **args)
     }
     gid = ret;
 
-    add_dev_perms(name, attr, perm, uid, gid, wildcard);
+    if (usb_device_class_rule) {
+        add_usb_device_class_matching(attr, perm, uid, gid);
+    } else {
+        add_dev_perms(name, attr, perm, uid, gid, wildcard);
+    }
     free(tmp);
 }
-- 
1.7.4.1

