From 0a46b25fb8d947c978bb7f842855ac809028f97f Mon Sep 17 00:00:00 2001
From: Andrew Boie <andrew.p.boie@intel.com>
Date: Fri, 13 Sep 2013 17:41:20 -0700
Subject: ueventd: support by-name symlinks for PCI block devices

To ensure that well-crafted removable media can't spoof the
internal partitions, for platform devices the controller id
is inside the generated path.

We now do the same for PCI devices. The generated path has
two levels; the PCI domain/bus, and then the peripheral ID.
This lets us get by-name symlinks for PCI media, such as the
SATA controllers on PC-like hardware.

Upstream URL:
https://android-review.googlesource.com/#/c/63914/

Issue: ADEV-21
Domain: AOSP-ueventd
Source: Internal
Category: AOSP improvement
Upstream-candidate: Yes
Change-Id: I60bf20c9580926daaf803d810652374b81416271
Signed-off-by: Andrew Boie <andrew.p.boie@intel.com>
---
 init/devices.c |   23 +++++++++++++++++++++--
 1 files changed, 21 insertions(+), 2 deletions(-)

diff --git a/init/devices.c b/init/devices.c
index 6d2a68d..1ab8153 100644
--- a/init/devices.c
+++ b/init/devices.c
@@ -435,9 +435,28 @@ static char **parse_platform_block_device(struct uevent *uevent)
     struct stat info;
 
     pdev = find_platform_device(uevent->path);
-    if (!pdev)
+    if (pdev)
+        device = pdev->name;
+    else if (!strncmp(uevent->path, "/devices/pci", 12)) {
+        char *e;
+        char *n = uevent->path + 9;
+
+        /* We want two levels; the PCI domain and bus number,
+         * and the peripheral ID. So something like:
+         * pci0000:00/0000:00:1f.2 */
+        e = strchr(n, '/');
+        if (!e)
+            return NULL;
+        e = strchr(e + 1, '/');
+        if (!e)
+            return NULL;
+        if (e - n + 1 > sizeof(buf))
+            return NULL;
+        strncpy(buf, n, e - n);
+        buf[e - n] = '\0';
+        device = buf;
+    } else
         return NULL;
-    device = pdev->name;
 
     char **links = malloc(sizeof(char *) * 4);
     if (!links)
-- 
1.7.4.1

