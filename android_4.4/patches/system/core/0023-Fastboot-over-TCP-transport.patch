From 9ea100e22f38b79220bc923062d74468c06927c7 Mon Sep 17 00:00:00 2001
From: Matt Gumbel <matthew.k.gumbel@intel.com>
Date: Tue, 8 May 2012 11:03:01 -0700
Subject: Fastboot over TCP transport

For devices which do not have USB, we can run fastboot over the
network. This requires corresponding TCP support in the device's
Fastboot server.

Change-Id: If66681c7806db01a2f6cd9e1d4909afe8be00719
Signed-off-by: Matt Gumbel <matthew.k.gumbel@intel.com>
Signed-off-by: Russell Webb <russell.webb@intel.com>
Signed-off-by: Andrew Boie <andrew.p.boie@intel.com>
---
 fastboot/Android.mk  |    2 +-
 fastboot/engine.c    |   30 +++++-----
 fastboot/fastboot.c  |   71 +++++++++++++++++---------
 fastboot/fastboot.h  |   16 +++---
 fastboot/protocol.c  |  118 +++++++++++++++++++++---------------------
 fastboot/tcp.c       |  139 ++++++++++++++++++++++++++++++++++++++++++++++++++
 fastboot/tcp.h       |   41 +++++++++++++++
 fastboot/transport.h |   39 ++++++++++++++
 fastboot/usb.h       |    6 +-
 fastboot/usb_linux.c |    9 ++-
 10 files changed, 359 insertions(+), 112 deletions(-)
 create mode 100644 fastboot/tcp.c
 create mode 100644 fastboot/tcp.h
 create mode 100644 fastboot/transport.h

diff --git a/fastboot/Android.mk b/fastboot/Android.mk
index 1189e1f..140efab 100644
--- a/fastboot/Android.mk
+++ b/fastboot/Android.mk
@@ -18,7 +18,7 @@ include $(CLEAR_VARS)
 
 LOCAL_C_INCLUDES := $(LOCAL_PATH)/../mkbootimg \
   $(LOCAL_PATH)/../../extras/ext4_utils
-LOCAL_SRC_FILES := protocol.c engine.c bootimg.c fastboot.c
+LOCAL_SRC_FILES := protocol.c engine.c bootimg.c fastboot.c tcp.c
 LOCAL_MODULE := fastboot
 LOCAL_MODULE_TAGS := debug
 
diff --git a/fastboot/engine.c b/fastboot/engine.c
index b07e742..19ffe25 100644
--- a/fastboot/engine.c
+++ b/fastboot/engine.c
@@ -110,7 +110,7 @@ struct image_data {
 void generate_ext4_image(struct image_data *image);
 void cleanup_image(struct image_data *image);
 
-int fb_getvar(struct usb_handle *usb, char *response, const char *fmt, ...)
+int fb_getvar(transport_t *trans, char *response, const char *fmt, ...)
 {
     char cmd[CMD_SIZE] = "getvar:";
     int getvar_len = strlen(cmd);
@@ -121,7 +121,7 @@ int fb_getvar(struct usb_handle *usb, char *response, const char *fmt, ...)
     vsnprintf(cmd + getvar_len, sizeof(cmd) - getvar_len, fmt, args);
     va_end(args);
     cmd[CMD_SIZE - 1] = '\0';
-    return fb_command_response(usb, cmd, response);
+    return fb_command_response(trans, cmd, response);
 }
 
 struct generator {
@@ -150,14 +150,14 @@ struct generator {
  * Not all devices report the filesystem type, so don't report any errors,
  * just return false.
  */
-int fb_format_supported(usb_handle *usb, const char *partition)
+int fb_format_supported(transport_t *trans, const char *partition)
 {
     char response[FB_RESPONSE_SZ+1];
     struct generator *generator = NULL;
     int status;
     unsigned int i;
 
-    status = fb_getvar(usb, response, "partition-type:%s", partition);
+    status = fb_getvar(trans, response, "partition-type:%s", partition);
     if (status) {
         return 0;
     }
@@ -296,7 +296,7 @@ void generate_ext4_image(struct image_data *image)
     close(fd);
 }
 
-int fb_format(Action *a, usb_handle *usb, int skip_if_not_supported)
+int fb_format(Action *a, transport_t *transport, int skip_if_not_supported)
 {
     const char *partition = a->cmd;
     char response[FB_RESPONSE_SZ+1];
@@ -307,7 +307,7 @@ int fb_format(Action *a, usb_handle *usb, int skip_if_not_supported)
     unsigned i;
     char cmd[CMD_SIZE];
 
-    status = fb_getvar(usb, response, "partition-type:%s", partition);
+    status = fb_getvar(transport, response, "partition-type:%s", partition);
     if (status) {
         if (skip_if_not_supported) {
             fprintf(stderr,
@@ -339,7 +339,7 @@ int fb_format(Action *a, usb_handle *usb, int skip_if_not_supported)
         return -1;
     }
 
-    status = fb_getvar(usb, response, "partition-size:%s", partition);
+    status = fb_getvar(transport, response, "partition-size:%s", partition);
     if (status) {
         if (skip_if_not_supported) {
             fprintf(stderr,
@@ -361,12 +361,12 @@ int fb_format(Action *a, usb_handle *usb, int skip_if_not_supported)
     // Following piece of code is similar to fb_queue_flash() but executes
     // actions directly without queuing
     fprintf(stderr, "sending '%s' (%lli KB)...\n", partition, image.image_size/1024);
-    status = fb_download_data(usb, image.buffer, image.image_size);
+    status = fb_download_data(transport, image.buffer, image.image_size);
     if (status) goto cleanup;
 
     fprintf(stderr, "writing '%s'...\n", partition);
     snprintf(cmd, sizeof(cmd), "flash:%s", partition);
-    status = fb_command(usb, cmd);
+    status = fb_command(transport, cmd);
     if (status) goto cleanup;
 
 cleanup:
@@ -573,7 +573,7 @@ void fb_queue_notice(const char *notice)
     a->data = (void*) notice;
 }
 
-int fb_execute_queue(usb_handle *usb)
+int fb_execute_queue(transport_t *transport)
 {
     Action *a;
     char resp[FB_RESPONSE_SZ+1];
@@ -593,25 +593,25 @@ int fb_execute_queue(usb_handle *usb)
             fprintf(stderr,"%s...\n",a->msg);
         }
         if (a->op == OP_DOWNLOAD) {
-            status = fb_download_data(usb, a->data, a->size);
+            status = fb_download_data(transport, a->data, a->size);
             status = a->func(a, status, status ? fb_get_error() : "");
             if (status) break;
         } else if (a->op == OP_COMMAND) {
-            status = fb_command(usb, a->cmd);
+            status = fb_command(transport, a->cmd);
             status = a->func(a, status, status ? fb_get_error() : "");
             if (status) break;
         } else if (a->op == OP_QUERY) {
-            status = fb_command_response(usb, a->cmd, resp);
+            status = fb_command_response(transport, a->cmd, resp);
             status = a->func(a, status, status ? fb_get_error() : resp);
             if (status) break;
         } else if (a->op == OP_NOTICE) {
             fprintf(stderr,"%s\n",(char*)a->data);
         } else if (a->op == OP_FORMAT) {
-            status = fb_format(a, usb, (int)a->data);
+            status = fb_format(a, transport, (int)a->data);
             status = a->func(a, status, status ? fb_get_error() : "");
             if (status) break;
         } else if (a->op == OP_DOWNLOAD_SPARSE) {
-            status = fb_download_data_sparse(usb, a->data);
+            status = fb_download_data_sparse(transport, a->data);
             status = a->func(a, status, status ? fb_get_error() : "");
             if (status) break;
         } else {
diff --git a/fastboot/fastboot.c b/fastboot/fastboot.c
index f186c93..356d478 100644
--- a/fastboot/fastboot.c
+++ b/fastboot/fastboot.c
@@ -67,10 +67,11 @@ boot_img_hdr *mkbootimg(void *kernel, unsigned kernel_size, unsigned kernel_offs
                         unsigned page_size, unsigned base, unsigned tags_offset,
                         unsigned *bootimg_size);
 
-static usb_handle *usb = 0;
+static transport_t transport;
 static const char *serial = 0;
 static const char *product = 0;
 static const char *cmdline = 0;
+static const char *host = 0;
 static int wipe_data = 0;
 static unsigned short vendor_id = 0;
 static int long_listing = 0;
@@ -281,6 +282,14 @@ usb_handle *open_device(void)
     }
 }
 
+tcp_handle *open_device_tcp(void)
+{
+    static tcp_handle *tcp = 0;
+    if(tcp) return tcp;
+    tcp = tcp_open(host);
+    return tcp;
+}
+
 void list_devices(void) {
     // We don't actually open a USB device here,
     // just getting our callback called so we can
@@ -324,6 +333,7 @@ void usage(void)
             "  -n <page size>                           specify the nand page size. default: 2048\n"
             "  -S <size>[K|M|G]                         automatically sparse files greater than\n"
             "                                           size.  0 to disable\n"
+            "  -t <host>                                connect to remote fastboot on host\n"
         );
 }
 
@@ -566,11 +576,11 @@ static struct sparse_file **load_sparse_files(int fd, int max_size)
     return out_s;
 }
 
-static int64_t get_target_sparse_limit(struct usb_handle *usb)
+static int64_t get_target_sparse_limit(transport_t *trans)
 {
     int64_t limit = 0;
     char response[FB_RESPONSE_SZ + 1];
-    int status = fb_getvar(usb, response, "max-download-size");
+    int status = fb_getvar(trans, response, "max-download-size");
 
     if (!status) {
         limit = strtoul(response, NULL, 0);
@@ -583,7 +593,7 @@ static int64_t get_target_sparse_limit(struct usb_handle *usb)
     return limit;
 }
 
-static int64_t get_sparse_limit(struct usb_handle *usb, int64_t size)
+static int64_t get_sparse_limit(transport_t *trans, int64_t size)
 {
     int64_t limit;
 
@@ -593,7 +603,7 @@ static int64_t get_sparse_limit(struct usb_handle *usb, int64_t size)
         limit = sparse_limit;
     } else {
         if (target_sparse_limit == -1) {
-            target_sparse_limit = get_target_sparse_limit(usb);
+            target_sparse_limit = get_target_sparse_limit(trans);
         }
         if (target_sparse_limit > 0) {
             limit = target_sparse_limit;
@@ -618,10 +628,10 @@ static int needs_erase(const char *part)
     /* The function fb_format_supported() currently returns the value
      * we want, so just call it.
      */
-     return fb_format_supported(usb, part);
+     return fb_format_supported(&transport, part);
 }
 
-static int load_buf_fd(usb_handle *usb, int fd,
+static int load_buf_fd(transport_t *trans, int fd,
         struct fastboot_buffer *buf)
 {
     int64_t sz64;
@@ -632,7 +642,7 @@ static int load_buf_fd(usb_handle *usb, int fd,
     if (sz64 < 0) {
         return -1;
     }
-    limit = get_sparse_limit(usb, sz64);
+    limit = get_sparse_limit(trans, sz64);
     if (limit) {
         struct sparse_file **s = load_sparse_files(fd, limit);
         if (s == NULL) {
@@ -652,7 +662,7 @@ static int load_buf_fd(usb_handle *usb, int fd,
     return 0;
 }
 
-static int load_buf(usb_handle *usb, const char *fname,
+static int load_buf(transport_t *trans, const char *fname,
         struct fastboot_buffer *buf)
 {
     int fd;
@@ -662,7 +672,7 @@ static int load_buf(usb_handle *usb, const char *fname,
         die("cannot open '%s'\n", fname);
     }
 
-    return load_buf_fd(usb, fd, buf);
+    return load_buf_fd(trans, fd, buf);
 }
 
 static void flash_buf(const char *pname, struct fastboot_buffer *buf)
@@ -685,11 +695,11 @@ static void flash_buf(const char *pname, struct fastboot_buffer *buf)
     }
 }
 
-void do_flash(usb_handle *usb, const char *pname, const char *fname)
+void do_flash(transport_t *trans, const char *pname, const char *fname)
 {
     struct fastboot_buffer buf;
 
-    if (load_buf(usb, fname, &buf)) {
+    if (load_buf(trans, fname, &buf)) {
         die("cannot load '%s'", fname);
     }
     flash_buf(pname, &buf);
@@ -705,7 +715,7 @@ void do_update_signature(zipfile_t zip, char *fn)
     fb_queue_command("signature", "installing signature");
 }
 
-void do_update(usb_handle *usb, char *fn, int erase_first)
+void do_update(transport_t *trans, char *fn, int erase_first)
 {
     void *zdata;
     unsigned zsize;
@@ -751,7 +761,7 @@ void do_update(usb_handle *usb, char *fn, int erase_first)
                 continue;
             die("update package missing %s", images[i].img_name);
         }
-        rc = load_buf_fd(usb, fd, &buf);
+        rc = load_buf_fd(trans, fd, &buf);
         if (rc) die("cannot load %s from flash", images[i].img_name);
         do_update_signature(zip, images[i].sig_name);
         if (erase_first && needs_erase(images[i].part_name)) {
@@ -783,7 +793,7 @@ void do_send_signature(char *fn)
     fb_queue_command("signature", "installing signature");
 }
 
-void do_flashall(usb_handle *usb, int erase_first)
+void do_flashall(transport_t *trans, int erase_first)
 {
     char *fname;
     void *data;
@@ -803,7 +813,7 @@ void do_flashall(usb_handle *usb, int erase_first)
 
     for (i = 0; i < ARRAY_SIZE(images); i++) {
         fname = find_item(images[i].part_name, product);
-        if (load_buf(usb, fname, &buf)) {
+        if (load_buf(trans, fname, &buf)) {
             if (images[i].is_optional)
                 continue;
             die("could not load %s\n", images[i].img_name);
@@ -903,7 +913,7 @@ int main(int argc, char **argv)
 
     while (1) {
         int option_index = 0;
-        c = getopt_long(argc, argv, "wub:k:n:r:s:S:lp:c:i:m:h", longopts, NULL);
+        c = getopt_long(argc, argv, "wub:k:n:r:s:S:lp:c:i:m:ht:", longopts, NULL);
         if (c < 0) {
             break;
         }
@@ -959,6 +969,9 @@ int main(int argc, char **argv)
         case 'w':
             wants_wipe = 1;
             break;
+        case 't':
+            host = optarg;
+            break;
         case '?':
             return 1;
         default:
@@ -985,7 +998,17 @@ int main(int argc, char **argv)
         return 0;
     }
 
-    usb = open_device();
+    if(host) {
+        transport.userdata = open_device_tcp();
+        transport.close = tcp_close;
+        transport.read = tcp_read;
+        transport.write = tcp_write;
+    } else {
+        transport.userdata = open_device();
+        transport.close = usb_close;
+        transport.read = usb_read;
+        transport.write = usb_write;
+    }
 
     while (argc > 0) {
         if(!strcmp(*argv, "getvar")) {
@@ -995,7 +1018,7 @@ int main(int argc, char **argv)
         } else if(!strcmp(*argv, "erase")) {
             require(2);
 
-            if (fb_format_supported(usb, argv[1])) {
+            if (fb_format_supported(&transport, argv[1])) {
                 fprintf(stderr, "******** Did you mean to fastboot format this partition?\n");
             }
 
@@ -1056,7 +1079,7 @@ int main(int argc, char **argv)
             if (erase_first && needs_erase(pname)) {
                 fb_queue_erase(pname);
             }
-            do_flash(usb, pname, fname);
+            do_flash(&transport, pname, fname);
         } else if(!strcmp(*argv, "flash:raw")) {
             char *pname = argv[1];
             char *kname = argv[2];
@@ -1073,14 +1096,14 @@ int main(int argc, char **argv)
             fb_queue_flash(pname, data, sz);
         } else if(!strcmp(*argv, "flashall")) {
             skip(1);
-            do_flashall(usb, erase_first);
+            do_flashall(&transport, erase_first);
             wants_reboot = 1;
         } else if(!strcmp(*argv, "update")) {
             if (argc > 1) {
-                do_update(usb, argv[1], erase_first);
+                do_update(&transport, argv[1], erase_first);
                 skip(2);
             } else {
-                do_update(usb, "update.zip", erase_first);
+                do_update(&transport, "update.zip", erase_first);
                 skip(1);
             }
             wants_reboot = 1;
@@ -1107,6 +1130,6 @@ int main(int argc, char **argv)
     if (fb_queue_is_empty())
         return 0;
 
-    status = fb_execute_queue(usb);
+    status = fb_execute_queue(&transport);
     return (status) ? 1 : 0;
 }
diff --git a/fastboot/fastboot.h b/fastboot/fastboot.h
index c1b2964..9b78235 100644
--- a/fastboot/fastboot.h
+++ b/fastboot/fastboot.h
@@ -29,23 +29,25 @@
 #ifndef _FASTBOOT_H_
 #define _FASTBOOT_H_
 
+#include "transport.h"
 #include "usb.h"
+#include "tcp.h"
 
 struct sparse_file;
 
 /* protocol.c - fastboot protocol */
-int fb_command(usb_handle *usb, const char *cmd);
-int fb_command_response(usb_handle *usb, const char *cmd, char *response);
-int fb_download_data(usb_handle *usb, const void *data, unsigned size);
-int fb_download_data_sparse(usb_handle *usb, struct sparse_file *s);
+int fb_command(transport_t *trans, const char *cmd);
+int fb_command_response(transport_t *trans, const char *cmd, char *response);
+int fb_download_data(transport_t *trans, const void *data, unsigned size);
+int fb_download_data_sparse(transport_t *trans, struct sparse_file *s);
 char *fb_get_error(void);
 
 #define FB_COMMAND_SZ 64
 #define FB_RESPONSE_SZ 64
 
 /* engine.c - high level command queue engine */
-int fb_getvar(struct usb_handle *usb, char *response, const char *fmt, ...);
-int fb_format_supported(usb_handle *usb, const char *partition);
+int fb_getvar(transport_t *trans, char *response, const char *fmt, ...);
+int fb_format_supported(transport_t *trans, const char *partition);
 void fb_queue_flash(const char *ptn, void *data, unsigned sz);
 void fb_queue_flash_sparse(const char *ptn, struct sparse_file *s, unsigned sz);
 void fb_queue_erase(const char *ptn);
@@ -58,7 +60,7 @@ void fb_queue_reboot(void);
 void fb_queue_command(const char *cmd, const char *msg);
 void fb_queue_download(const char *name, void *data, unsigned size);
 void fb_queue_notice(const char *notice);
-int fb_execute_queue(usb_handle *usb);
+int fb_execute_queue(transport_t *trans);
 int fb_queue_is_empty(void);
 
 /* util stuff */
diff --git a/fastboot/protocol.c b/fastboot/protocol.c
index a0e0fd4..0b9918b 100644
--- a/fastboot/protocol.c
+++ b/fastboot/protocol.c
@@ -47,23 +47,23 @@ char *fb_get_error(void)
     return ERROR;
 }
 
-static int check_response(usb_handle *usb, unsigned int size, char *response)
+static int check_response(transport_t *trans, unsigned int size, char *response)
 {
     unsigned char status[65];
     int r;
 
     for(;;) {
-        r = usb_read(usb, status, 64);
+        r = trans->read(trans->userdata, status, 64);
         if(r < 0) {
             sprintf(ERROR, "status read failed (%s)", strerror(errno));
-            usb_close(usb);
+            trans->close(trans->userdata);
             return -1;
         }
         status[r] = 0;
 
         if(r < 4) {
             sprintf(ERROR, "status malformed (%d bytes)", r);
-            usb_close(usb);
+            trans->close(trans->userdata);
             return -1;
         }
 
@@ -92,21 +92,21 @@ static int check_response(usb_handle *usb, unsigned int size, char *response)
             unsigned dsize = strtoul((char*) status + 4, 0, 16);
             if(dsize > size) {
                 strcpy(ERROR, "data size too large");
-                usb_close(usb);
+                trans->close(trans->userdata);
                 return -1;
             }
             return dsize;
         }
 
         strcpy(ERROR,"unknown status code");
-        usb_close(usb);
+        trans->close(trans->userdata);
         break;
     }
 
     return -1;
 }
 
-static int _command_start(usb_handle *usb, const char *cmd, unsigned size,
+static int _command_start(transport_t *trans, const char *cmd, unsigned size,
                           char *response)
 {
     int cmdsize = strlen(cmd);
@@ -121,45 +121,45 @@ static int _command_start(usb_handle *usb, const char *cmd, unsigned size,
         return -1;
     }
 
-    if(usb_write(usb, cmd, cmdsize) != cmdsize) {
+    if(trans->write(trans->userdata, cmd, cmdsize) != cmdsize) {
         sprintf(ERROR,"command write failed (%s)", strerror(errno));
-        usb_close(usb);
+        trans->close(trans->userdata);
         return -1;
     }
 
-    return check_response(usb, size, response);
+    return check_response(trans, size, response);
 }
 
-static int _command_data(usb_handle *usb, const void *data, unsigned size)
+static int _command_data(transport_t *trans, const void *data, unsigned size)
 {
     int r;
 
-    r = usb_write(usb, data, size);
+    r = trans->write(trans->userdata, data, size);
     if(r < 0) {
         sprintf(ERROR, "data transfer failure (%s)", strerror(errno));
-        usb_close(usb);
+        trans->close(trans->userdata);
         return -1;
     }
     if(r != ((int) size)) {
         sprintf(ERROR, "data transfer failure (short transfer)");
-        usb_close(usb);
+        trans->close(trans->userdata);
         return -1;
     }
 
     return r;
 }
 
-static int _command_end(usb_handle *usb)
+static int _command_end(transport_t *trans)
 {
     int r;
-    r = check_response(usb, 0, 0);
+    r = check_response(trans, 0, 0);
     if(r < 0) {
         return -1;
     }
     return 0;
 }
 
-static int _command_send(usb_handle *usb, const char *cmd,
+static int _command_send(transport_t *trans, const char *cmd,
                          const void *data, unsigned size,
                          char *response)
 {
@@ -168,17 +168,17 @@ static int _command_send(usb_handle *usb, const char *cmd,
         return -1;
     }
 
-    r = _command_start(usb, cmd, size, response);
+    r = _command_start(trans, cmd, size, response);
     if (r < 0) {
         return -1;
     }
 
-    r = _command_data(usb, data, size);
+    r = _command_data(trans, data, size);
     if (r < 0) {
         return -1;
     }
 
-    r = _command_end(usb);
+    r = _command_end(trans);
     if(r < 0) {
         return -1;
     }
@@ -186,32 +186,32 @@ static int _command_send(usb_handle *usb, const char *cmd,
     return size;
 }
 
-static int _command_send_no_data(usb_handle *usb, const char *cmd,
+static int _command_send_no_data(transport_t *trans, const char *cmd,
                                  char *response)
 {
     int r;
 
-    return _command_start(usb, cmd, 0, response);
+    return _command_start(trans, cmd, 0, response);
 }
 
-int fb_command(usb_handle *usb, const char *cmd)
+int fb_command(transport_t *trans, const char *cmd)
 {
-    return _command_send_no_data(usb, cmd, 0);
+    return _command_send_no_data(trans, cmd, 0);
 }
 
-int fb_command_response(usb_handle *usb, const char *cmd, char *response)
+int fb_command_response(transport_t *trans, const char *cmd, char *response)
 {
-    return _command_send_no_data(usb, cmd, response);
+    return _command_send_no_data(trans, cmd, response);
 }
 
-int fb_download_data(usb_handle *usb, const void *data, unsigned size)
+int fb_download_data(transport_t *trans, const void *data, unsigned size)
 {
     char cmd[64];
     int r;
 
     sprintf(cmd, "download:%08x", size);
-    r = _command_send(usb, cmd, data, size, 0);
 
+    r = _command_send(trans, cmd, data, size, 0);
     if(r < 0) {
         return -1;
     } else {
@@ -219,41 +219,41 @@ int fb_download_data(usb_handle *usb, const void *data, unsigned size)
     }
 }
 
-#define USB_BUF_SIZE 512
-static char usb_buf[USB_BUF_SIZE];
-static int usb_buf_len;
+#define TRANS_BUF_SIZE 512
+static char trans_buf[TRANS_BUF_SIZE];
+static int trans_buf_len;
 
 static int fb_download_data_sparse_write(void *priv, const void *data, int len)
 {
     int r;
-    usb_handle *usb = priv;
+    transport_t *trans = priv;
     int to_write;
     const char *ptr = data;
 
-    if (usb_buf_len) {
-        to_write = min(USB_BUF_SIZE - usb_buf_len, len);
+    if (trans_buf_len) {
+        to_write = min(TRANS_BUF_SIZE - trans_buf_len, len);
 
-        memcpy(usb_buf + usb_buf_len, ptr, to_write);
-        usb_buf_len += to_write;
+        memcpy(trans_buf + trans_buf_len, ptr, to_write);
+        trans_buf_len += to_write;
         ptr += to_write;
         len -= to_write;
     }
 
-    if (usb_buf_len == USB_BUF_SIZE) {
-        r = _command_data(usb, usb_buf, USB_BUF_SIZE);
-        if (r != USB_BUF_SIZE) {
+    if (trans_buf_len == TRANS_BUF_SIZE) {
+        r = _command_data(trans, trans_buf, TRANS_BUF_SIZE);
+        if (r != TRANS_BUF_SIZE) {
             return -1;
         }
-        usb_buf_len = 0;
+        trans_buf_len = 0;
     }
 
-    if (len > USB_BUF_SIZE) {
-        if (usb_buf_len > 0) {
-            sprintf(ERROR, "internal error: usb_buf not empty\n");
+    if (len > TRANS_BUF_SIZE) {
+        if (trans_buf_len > 0) {
+            sprintf(ERROR, "internal error: trans_buf not empty\n");
             return -1;
         }
-        to_write = round_down(len, USB_BUF_SIZE);
-        r = _command_data(usb, ptr, to_write);
+        to_write = round_down(len, TRANS_BUF_SIZE);
+        r = _command_data(trans, ptr, to_write);
         if (r != to_write) {
             return -1;
         }
@@ -262,33 +262,33 @@ static int fb_download_data_sparse_write(void *priv, const void *data, int len)
     }
 
     if (len > 0) {
-        if (len > USB_BUF_SIZE) {
-            sprintf(ERROR, "internal error: too much left for usb_buf\n");
+        if (len > TRANS_BUF_SIZE) {
+            sprintf(ERROR, "internal error: too much left for trans_buf\n");
             return -1;
         }
-        memcpy(usb_buf, ptr, len);
-        usb_buf_len = len;
+        memcpy(trans_buf, ptr, len);
+        trans_buf_len = len;
     }
 
     return 0;
 }
 
-static int fb_download_data_sparse_flush(usb_handle *usb)
+static int fb_download_data_sparse_flush(transport_t *trans)
 {
     int r;
 
-    if (usb_buf_len > 0) {
-        r = _command_data(usb, usb_buf, usb_buf_len);
-        if (r != usb_buf_len) {
+    if (trans_buf_len > 0) {
+        r = _command_data(trans, trans_buf, trans_buf_len);
+        if (r != trans_buf_len) {
             return -1;
         }
-        usb_buf_len = 0;
+        trans_buf_len = 0;
     }
 
     return 0;
 }
 
-int fb_download_data_sparse(usb_handle *usb, struct sparse_file *s)
+int fb_download_data_sparse(transport_t *trans, struct sparse_file *s)
 {
     char cmd[64];
     int r;
@@ -298,17 +298,17 @@ int fb_download_data_sparse(usb_handle *usb, struct sparse_file *s)
     }
 
     sprintf(cmd, "download:%08x", size);
-    r = _command_start(usb, cmd, size, 0);
+    r = _command_start(trans, cmd, size, 0);
     if (r < 0) {
         return -1;
     }
 
-    r = sparse_file_callback(s, true, false, fb_download_data_sparse_write, usb);
+    r = sparse_file_callback(s, true, false, fb_download_data_sparse_write, trans);
     if (r < 0) {
         return -1;
     }
 
-    fb_download_data_sparse_flush(usb);
+    fb_download_data_sparse_flush(trans);
 
-    return _command_end(usb);
+    return _command_end(trans);
 }
diff --git a/fastboot/tcp.c b/fastboot/tcp.c
new file mode 100644
index 0000000..9e1ad33
--- /dev/null
+++ b/fastboot/tcp.c
@@ -0,0 +1,139 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the 
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <errno.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netdb.h>
+#include <netinet/in.h>
+#include "tcp.h"
+
+extern int h_errno;
+
+int tcp_write(void *userdata, const void *_data, int len)
+{
+    int len_tmp = len;
+    int n;
+    const char *_data_tmp = _data;
+    tcp_handle *h = userdata;
+    while (len_tmp > 0) {
+        n = write(h->sockfd, _data_tmp, len_tmp);
+        if (n <= 0) {
+            switch(errno) {
+            case EAGAIN: case EINTR: continue;
+            default:
+                fprintf(stderr, "ERROR: Failed to send to network: %s\n",
+                        strerror(errno));
+                exit(1);
+            }
+        }
+        len_tmp -= n;
+        _data_tmp += n;
+    }
+    return len;
+}
+
+int tcp_read(void *userdata, void *_data, int len)
+{
+    int n, count = 0;
+    unsigned char *data = _data;
+    tcp_handle *h = userdata;
+    while (len > 0) {
+        // This xfer chunking is to mirror usb_read() implementation:
+        int xfer = (len > 16*1024) ? 16*1024 : len;
+        n = read(h->sockfd, data, xfer);
+        if (n == 0) {
+            fprintf(stderr, "ERROR: Failed to read network: "
+                    "Unexpected end of file.");
+            exit(1);
+        } else if (n < 0) {
+            switch(errno) {
+            case EAGAIN: case EINTR: continue;
+            default:
+                fprintf(stderr, "ERROR: Failed to read network: %s",
+                        strerror(errno));
+                exit(1);
+            }
+        }
+        count += n;
+        len -= len;
+        data += n;
+
+        // Replicate a bug from usb_read():
+        if (n < xfer)
+            break;
+    }
+    return count;
+}
+
+int tcp_close(void *userdata)
+{
+    tcp_handle *h = userdata;
+    return close(h->sockfd);
+}
+
+tcp_handle *tcp_open(const char *host)
+{
+    int sockfd;
+    struct sockaddr_in serv_addr;
+    struct hostent *server;
+    tcp_handle *tcp = 0;
+
+    sockfd = socket(AF_INET, SOCK_STREAM, 0);
+    if (sockfd < 0) {
+        fprintf(stderr, "ERROR: Can't open socket: %s\n", strerror(errno));
+        exit(1);
+    }
+
+    server = gethostbyname(host);
+    if (server == NULL) {
+        fprintf(stderr, "ERROR: Can't find '%s': %s\n", host, hstrerror(h_errno));
+        exit(1);
+    }
+
+    memset(&serv_addr, sizeof(serv_addr), 0);
+    serv_addr.sin_family = AF_INET;
+    memcpy(&serv_addr.sin_addr.s_addr,
+           server->h_addr,
+           server->h_length);
+    serv_addr.sin_port = htons(1234);
+    if (connect(sockfd,(struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0) {
+        fprintf(stderr, "ERROR: Unable to connect to %s: %s\n",
+                host, strerror(errno));
+        exit(1);
+    }
+
+    tcp = calloc(1, sizeof(tcp_handle));
+    tcp->sockfd = sockfd;
+    return tcp;
+}
+
diff --git a/fastboot/tcp.h b/fastboot/tcp.h
new file mode 100644
index 0000000..ec0152a
--- /dev/null
+++ b/fastboot/tcp.h
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the 
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _TCP_H_
+#define _TCP_H_
+
+typedef struct {
+    int sockfd;
+} tcp_handle;
+
+tcp_handle *tcp_open(const char *host);
+int tcp_close(void *userdata);
+int tcp_read(void *userdata, void *_data, int len);
+int tcp_write(void *userdata, const void *_data, int len);
+
+#endif
diff --git a/fastboot/transport.h b/fastboot/transport.h
new file mode 100644
index 0000000..41467d6
--- /dev/null
+++ b/fastboot/transport.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the 
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _TRANSPORT_H_
+#define _TRANSPORT_H_
+
+typedef struct {
+    void *userdata;
+    int (*close)(void *self);
+    int (*read)(void *self, void *_data, int len);
+    int (*write)(void *self, const void *_data, int len);
+} transport_t;
+
+#endif /* _TRANSPORT_H_ */
diff --git a/fastboot/usb.h b/fastboot/usb.h
index d504ee2..f1a42df 100644
--- a/fastboot/usb.h
+++ b/fastboot/usb.h
@@ -59,9 +59,9 @@ struct usb_ifc_info
 typedef int (*ifc_match_func)(usb_ifc_info *ifc);
 
 usb_handle *usb_open(ifc_match_func callback);
-int usb_close(usb_handle *h);
-int usb_read(usb_handle *h, void *_data, int len);
-int usb_write(usb_handle *h, const void *_data, int len);
+int usb_close(void *userdata);
+int usb_read(void *userdata, void *_data, int len);
+int usb_write(void *userdata, const void *_data, int len);
 
 
 #endif
diff --git a/fastboot/usb_linux.c b/fastboot/usb_linux.c
index b7a9ca3..1f3144f 100644
--- a/fastboot/usb_linux.c
+++ b/fastboot/usb_linux.c
@@ -308,8 +308,9 @@ static usb_handle *find_usb_device(const char *base, ifc_match_func callback)
     return usb;
 }
 
-int usb_write(usb_handle *h, const void *_data, int len)
+int usb_write(void *userdata, const void *_data, int len)
 {
+    struct usb_handle *h = userdata;
     unsigned char *data = (unsigned char*) _data;
     unsigned count = 0;
     struct usbdevfs_bulktransfer bulk;
@@ -358,8 +359,9 @@ int usb_write(usb_handle *h, const void *_data, int len)
     return count;
 }
 
-int usb_read(usb_handle *h, void *_data, int len)
+int usb_read(void *userdata, void *_data, int len)
 {
+    struct usb_handle *h = userdata;
     unsigned char *data = (unsigned char*) _data;
     unsigned count = 0;
     struct usbdevfs_bulktransfer bulk;
@@ -415,8 +417,9 @@ void usb_kick(usb_handle *h)
     }
 }
 
-int usb_close(usb_handle *h)
+int usb_close(void *userdata)
 {
+    struct usb_handle *h = userdata;
     int fd;
 
     fd = h->desc;
-- 
1.7.4.1

