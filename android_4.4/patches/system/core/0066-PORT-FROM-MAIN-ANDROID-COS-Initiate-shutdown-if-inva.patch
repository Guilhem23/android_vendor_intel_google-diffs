From 4adee15d467f625d67674a16e854593736ca9358 Mon Sep 17 00:00:00 2001
From: Pavan Kumar S <pavan.kumar.s@intel.com>
Date: Tue, 22 Oct 2013 14:19:09 +0530
Subject: [PORT FROM MAIN] ANDROID-COS: Initiate shutdown if invalid battery

BZ: 85893

COS mode should not continue in case of an invalid battery.

If invalid-battery is detected (based on model_name), show the
battery fail/invalid icon and initiate shutdown.

Orig-Change-Id: If780ad2b652bcef550b56d7e72aa5f9046718220
Category: device enablement
Domain: EM.BatteryManagement-Common
Origin: internal
Upstream-Candidate: no, proprietary

Change-Id: I65a566dd675a846593f71cbbb586fc03f9a14068
Signed-off-by: Pavan Kumar S <pavan.kumar.s@intel.com>
---
 charger/charger.c |   32 +++++++++++++++++++++++++++++---
 1 files changed, 29 insertions(+), 3 deletions(-)

diff --git a/charger/charger.c b/charger/charger.c
index d8c0930..ebf4449 100644
--- a/charger/charger.c
+++ b/charger/charger.c
@@ -75,6 +75,8 @@
 #define LOGI(x...) do { KLOG_INFO("charger", x); } while (0)
 #define LOGV(x...) do { KLOG_DEBUG("charger", x); } while (0)
 
+#define INVALID_BATT_MODEL "UNKNOWN"
+
 struct key_state {
     bool pending;
     bool down;
@@ -88,6 +90,7 @@ struct power_supply {
     bool online;
     bool valid;
     char cap_path[PATH_MAX];
+    char model_path[PATH_MAX];
 };
 
 struct frame {
@@ -332,6 +335,24 @@ static int get_battery_capacity(struct charger *charger)
     return batt_cap;
 }
 
+static int is_battery_valid(struct charger *charger)
+{
+    int ret;
+    char model_name[32];
+
+    if (!charger->battery)
+        return -1;
+
+    ret = read_file(charger->battery->model_path, model_name, sizeof(model_name));
+    if (ret < 0)
+        return -1;
+
+    if (!strncmp(model_name, INVALID_BATT_MODEL, strlen(INVALID_BATT_MODEL)))
+        return 0;
+    else
+        return 1;
+}
+
 static struct power_supply *find_supply(struct charger *charger,
                                         const char *name)
 {
@@ -360,6 +381,8 @@ static struct power_supply *add_supply(struct charger *charger,
     strlcpy(supply->type, type, sizeof(supply->type));
     snprintf(supply->cap_path, sizeof(supply->cap_path),
              "/sys/%s/capacity", path);
+    snprintf(supply->model_path, sizeof(supply->model_path),
+             "/sys/%s/model_name", path);
     supply->online = online;
     list_add_tail(&charger->supplies, &supply->list);
     charger->num_supplies++;
@@ -696,7 +719,8 @@ static void redraw_screen(struct charger *charger)
     clear_screen();
 
     /* try to display *something* */
-    if (batt_anim->capacity < 0 || batt_anim->num_frames == 0)
+    if (batt_anim->capacity < 0 || batt_anim->num_frames == 0
+        || !is_battery_valid(charger))
         draw_unknown(charger);
     else
         draw_battery(charger);
@@ -921,14 +945,16 @@ static void handle_input_state(struct charger *charger, int64_t now)
 
 static void handle_power_supply_state(struct charger *charger, int64_t now)
 {
-    if (charger->num_supplies_online == 0) {
+    if (charger->num_supplies_online == 0 || !is_battery_valid(charger)) {
         request_suspend(false);
         if (charger->next_pwr_check == -1) {
             charger->next_pwr_check = now + UNPLUGGED_SHUTDOWN_TIME;
-            LOGI("[%lld] device unplugged: shutting down in %lld (@ %lld)\n",
+            LOGI("[%lld] device unplugged or invalid battery: shutting down in %lld (@ %lld)\n",
                  now, UNPLUGGED_SHUTDOWN_TIME, charger->next_pwr_check);
         } else if (now >= charger->next_pwr_check) {
             LOGI("[%lld] shutting down\n", now);
+            if (!is_battery_valid(charger))
+                system("echo 1 > /sys/module/intel_mid_osip/parameters/force_shutdown_occured");
             android_reboot(ANDROID_RB_POWEROFF, 0, 0);
         } else {
             /* otherwise we already have a shutdown timer scheduled */
-- 
1.7.4.1

