From d254c036e579a7218663ad83e88c6194580c7135 Mon Sep 17 00:00:00 2001
From: Andrew Boie <andrew.p.boie@intel.com>
Date: Thu, 11 Jul 2013 11:03:29 -0700
Subject: build: add mixins infrastructure

We have found that when maintaining a large number of product definitions
that use various combinations of features that a great deal of boilerplate
board configuration directives get copypasted everywhere, or inheritance
hierarchies are set up that do not scale well.

Here we introduce a kind of multiple inheritance for product defintion
features based on a mixin model. Mixins are placed in groups, with
each group providing a radio-button like selection among feature options.
A product must choose at least one option for each group.

Collections of mixins are declared with the add-mixin-basedir macro at
the beginning of the product Makefile. It analyzes the specified
directory structure and adds all the mixin groups/options that it finds,
calling declare-mixin to add to the global mixin namespace.
Multiple mixin basedirs may be used, and subsequent
invocations may augment existing mixin groups with additional options.

Once the namespace of available mixins has been established, selections
are made for each group using inherit-mixin. Inheriting a mixin can do
any or all of the following:

() Include additional product Makefile snippets which can extend
PRODUCT_PACKAGES, PRODUCT_COPY_FILES, etc.
() Include additional BoardConfig.mk fragments after the main product
BoardConfig.mk is read. If a particular mixin requires parameters, they
should be defined in the product BoardConfig.mk
() Add init.rc fragments to the build-time generated init.composite.rc
file, which should be imported from the main init.$product.rc.
() Add ueventd.rc fragments to a similar ueventd.composite.rc.
() Include additional AndroidBoard.mk fragments read immediately after
the main AndroidBoard.mk (if it exists).

Checks are performed to ensure that exactly one option for all
mixins is picked, with support for default. . Additional debugging
information will be printed if the virtual Make goal 'mixindebug' is used.

Messages from other patches squashed into this one:

---------------------------------
The way Android includes product Makefiles is kind of weird; the
inheritance hierarchy is processed through functions in node_fns.mk
and assembled into a complete set of PRODUCT_* definitions later;
variables like PRODUCT_PACKAGES don't exist in the namespace,
instead they are stored like PRODUCTS.xxxx.PRODUCT_PACKAGES.
So the product.mk fragments can't simply be read with Make include
calls.

By placing the call to check the mixin selections inside _import_node
when the include stack has one item (i.e. we are reading the product
Makefile as specified in AndroidProducts.mk and not any of its
inherited products) the PRODUCT_* variables are set up correctly.
---------------------------------
We now scan and include any buildtask.mk right after looking
for {device|vendor}/*/build/tasks/*.mk.
---------------------------------

Change-Id: I716ed0db64f608d60a15949144ae8a58cf1b41ba
---
 core/Makefile           |   11 +++
 core/config.mk          |    4 +
 core/mixins.mk          |  219 +++++++++++++++++++++++++++++++++++++++++++++++
 core/node_fns.mk        |    1 +
 core/product_config.mk  |    3 +
 target/board/Android.mk |    1 +
 6 files changed, 239 insertions(+), 0 deletions(-)
 create mode 100644 core/mixins.mk

diff --git a/core/Makefile b/core/Makefile
index f118cea..864cbb7 100644
--- a/core/Makefile
+++ b/core/Makefile
@@ -314,6 +314,16 @@ endif
 DEFAULT_KEY_CERT_PAIR := $(DEFAULT_SYSTEM_DEV_CERTIFICATE)
 
 
+# -----------------------------------------------------------------
+
+# Create some composite files which are assembled from fragments
+# defined by the mix-ins
+$(call assemble-composite-file,init.rc,init.composite.rc)
+$(call assemble-composite-file,ueventd.rc,ueventd.composite.rc)
+$(call assemble-composite-file,init.recovery.rc,init.recovery.composite.rc)
+
+# -----------------------------------------------------------------
+
 # Rules that need to be present for the all targets, even
 # if they don't do anything.
 .PHONY: systemimage
@@ -1646,6 +1656,7 @@ ifneq ($(dont_bother),true)
 include $(sort $(wildcard $(BUILD_SYSTEM)/tasks/*.mk))
 -include $(sort $(wildcard vendor/*/build/tasks/*.mk))
 -include $(sort $(wildcard device/*/build/tasks/*.mk))
+$(call import-mixin-file,buildtask.mk)
 endif
 
 # -----------------------------------------------------------------
diff --git a/core/config.mk b/core/config.mk
index 96993c0..c2b8938 100644
--- a/core/config.mk
+++ b/core/config.mk
@@ -152,7 +152,11 @@ endif
 ifneq ($(words $(board_config_mk)),1)
   $(error Multiple board config files for TARGET_DEVICE $(TARGET_DEVICE): $(board_config_mk))
 endif
+
 include $(board_config_mk)
+# Include all the mixin BoardConfig.mk fragments
+$(call import-mixin-file,BoardConfig.mk)
+
 ifeq ($(TARGET_ARCH),)
   $(error TARGET_ARCH not defined by board config: $(board_config_mk))
 endif
diff --git a/core/mixins.mk b/core/mixins.mk
new file mode 100644
index 0000000..49cd4e2
--- /dev/null
+++ b/core/mixins.mk
@@ -0,0 +1,219 @@
+#
+# Copyright (C) 2013 Intel Corporation
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+
+MIXIN_GROUPS :=
+MIXIN_GROUPS_SELECTED :=
+
+# 'mixindebug' is a modifier Make goal which prints out additional debugging
+# information about what this mechanism is actually doing. It doesn't actually
+# change the build output.
+.PHONY: mixindebug
+mixindebug:
+	@echo >/dev/null
+
+MIXIN_DEBUG := $(filter mixindebug,$(MAKECMDGOALS))
+
+
+# Debug/informational macros. Don't use commas in the messages. $(call ...)
+# will use them even if quoted or escaped.
+define mixin-debug
+$(if $(MIXIN_DEBUG),$(warning Mixin: $(strip $(1))))
+endef
+
+
+define mixin-warning
+$(if $(CALLED_FROM_SETUP),,$(warning Mixin: $(strip $(1))))
+endef
+
+
+define mixin-error
+$(error Mixin: $(strip $(1))))
+endef
+
+
+# Add a base directory for mixin definitions. The structure must conform to:
+# basedir/group1/
+# basedir/groyp1/option1/
+# basedir/group1/option1/product.mk, init.rc, BoardConfig.mk, etc
+# basedir/group1/option2/
+# (optional) basedir/group1/default symlink to a default option, used if the
+#                                   product doesn't make specification
+# basedir/group2/
+# basedir/group2/option1/
+# ....
+#
+# Appropriate calls to declare-mixin are made based on the structure found.
+# This should be called at the top of a product Makefile before any specific
+# mix-ins are inherited.
+define add-mixin-basedir
+$(if,,\
+    $(eval _groups := $(shell ls -d -- $(strip $(1))/*)) \
+    $(foreach group_path,$(_groups), \
+        $(eval _group := $(notdir $(group_path))) \
+        $(eval _opts_paths := $(shell ls -d -- $(group_path)/*)) \
+        $(call mixin-debug, Found group $(_group) at $(group_path)) \
+        $(eval _opts :=) \
+        $(foreach opt_path,$(_opts_paths), \
+            $(eval _opts += $(notdir $(opt_path))) \
+        ) \
+        $(call declare-mixin, $(_group),$(_opts),$(group_path)) \
+        $(eval _opts :=) \
+        $(eval _group :=) \
+        $(eval _opts_paths :=) \
+    ) \
+)
+endef
+
+
+# Declare a mixin group with a set of options rooted at a particular directory,
+# For every option, assumes that the supporting files for it are in
+# <group base directory>/<option name>.
+#
+# Multiple invocations can be used to create a group whose options are a superset
+# of all the individual invocations; a warning is printed if the same option is
+# declared more than once, with the last definition taking precedence.
+#
+# Parameters
+# 1 Name of the mixin group
+# 2 Valid options for this mixin group
+# 3 Base path for options specified
+# Can be called multiple times
+define declare-mixin
+$(if,,\
+    $(eval _name := $(strip $(1))) \
+    $(eval _opts := $(strip $(2))) \
+    $(eval _path := $(strip $(3))) \
+    $(eval MIXIN_GROUPS := $(filter-out $(_name),$(MIXIN_GROUPS)) $(_name)) \
+    $(foreach opt,$(_opts), \
+        $(if $(filter $(opt),$(MIXIN_GROUP.$(_name).options)), \
+            $(call mixin-warning, Overriding existing option $(opt) for $(_name) mixin) \
+        , \
+            $(eval MIXIN_GROUP.$(_name).options += $(opt)) \
+        ) \
+        $(eval _optpath := $(_path)/$(opt)) \
+        $(call mixin-debug, Declared mixin $(_name).$(opt) at $(_optpath)) \
+        $(eval MIXIN_GROUP.$(_name).option.$(opt) := $(_optpath)) \
+        $(eval _optpath :=) \
+    ) \
+    $(eval _name :=) \
+    $(eval _opts :=) \
+    $(eval _path :=) \
+)
+endef
+
+
+# Call this from a product Makefile to select options for each mixin.
+# Every mixin in the namespace must have one option selected; this is enforced
+# by check-mixin-selections. An option 'default' (typically a symlink to another
+# option) is a special case; used if no explicit call to inherit-mixin is made.
+#
+# Parameters:
+# $(1) Group name
+# $(2) Selected option for that group
+# Can be called multiple times, but multiple invocations for the same
+# group are ignored.
+define inherit-mixin
+$(if,,\
+    $(eval _group := $(strip $(1))) \
+    $(eval _opt := $(strip $(2))) \
+    $(if $(filter $(_group),$(MIXIN_GROUPS_SELECTED)),, \
+        $(call mixin-debug, Selected mixin $(_opt) from group $(_group)) \
+        $(if $(filter $(_group),$(MIXIN_GROUPS)), \
+            $(if $(filter $(_opt),$(MIXIN_GROUP.$(_group).options)), \
+                $(eval MIXIN_GROUPS_SELECTED += $(_group)) \
+                $(eval MIXIN_GROUP.$(_group).selection := $(_opt)) \
+                $(eval MIXIN_GROUP.$(_group).dir := $(MIXIN_GROUP.$(_group).option.$(_opt))) \
+                $(eval _product_mk := $(MIXIN_GROUP.$(_group).dir)/product.mk) \
+                $(if $(wildcard $(_product_mk)), \
+                    $(call mixin-debug, Reading $(_product_mk)) \
+                    $(eval include $(_product_mk)) \
+                , \
+                    $(call mixin-debug, skipping nonexistent $(_product_mk) for group $(_group)) \
+                ) \
+                $(eval _product_mk :=) \
+            , \
+                $(call mixin-error, group $(_group) does not have option $(_opt))) \
+        , \
+            $(call mixin-warning, skipping unknown mixin group '$(_group)') \
+        ) \
+    ) \
+    $(eval _group :=) \
+    $(eval _opt :=) \
+)
+endef
+
+
+define get-mixin-basedir
+$(MIXIN_GROUP.$(strip $(1)).dir)
+endef
+
+
+# Ensure that for all mixins that one of them has been explicitly selected.
+# If no selection was made and a 'default' option exists, inherit that.
+define check-mixin-selections
+$(foreach group,$(MIXIN_GROUPS), \
+    $(if $(filter $(group),$(MIXIN_GROUPS_SELECTED)),, \
+        $(eval _opts := $(MIXIN_GROUP.$(group).options)) \
+        $(if $(filter default,$(_opts)), \
+            $(call mixin-warning, using default option $(shell readlink $(MIXIN_GROUP.$(group).option.default)) for mixin group $(group)) \
+            $(call inherit-mixin,$(group),default) \
+        , \
+            $(call mixin-error, selection for mixin group $(group) not specified! Available options: [$(_opts)]) \
+        ) \
+        $(eval _opts :=) \
+    ) \
+)
+endef
+
+# For all the selected mix-ins, include all the files with the specified
+# name if it exists in the mixin directories
+# $(1) Filename to scan for and include
+define import-mixin-file
+$(foreach group,$(MIXIN_GROUPS_SELECTED), \
+    $(eval _path := $(MIXIN_GROUP.$(group).dir)/$(1)) \
+    $(if $(wildcard $(_path)), \
+        $(call mixin-debug, reading $(_path)) \
+        $(eval include $(_path)) \
+    , \
+        $(call mixin-debug, skipping nonexistent $(_path) for mixin group $(group)) \
+    ) \
+    $(eval _path :=) \
+)
+endef
+
+
+define composite-template
+$(1): $(2)
+	$(hide) mkdir -p $$(dir $$@)
+	$(hide) awk 'FNR==1{print "# " FILENAME}1' $$^ > $$@
+endef
+
+# $(1) Filename of fragment to search for in the selected mixin directories
+# $(2) Filename of generated output file to be placed in the ramdisk root
+define assemble-composite-file
+$(if,, \
+    $(eval _frags := $(foreach group,$(MIXIN_GROUPS_SELECTED),$(wildcard $(call get-mixin-basedir, $(group))/$(1)))) \
+    $(eval _filename := $(TARGET_ROOT_OUT)/$(2)) \
+    $(if $(_frags), \
+        $(eval $(call composite-template,$(_filename),$(_frags))) \
+        $(eval ALL_DEFAULT_INSTALLED_MODULES += $(_filename)) \
+    ) \
+    $(eval _frags := ) \
+    $(eval _filename := ) \
+)
+endef
+
diff --git a/core/node_fns.mk b/core/node_fns.mk
index ccfcc25..0dfe542 100644
--- a/core/node_fns.mk
+++ b/core/node_fns.mk
@@ -188,6 +188,7 @@ define _import-node
   $(eval LOCAL_PATH := $(patsubst %/,%,$(dir $(2))))
   $(eval MAKEFILE_LIST :=)
   $(eval include $(2))
+  $(if $(filter 1,$(words $(_include_stack))),$(check-mixin-selections))
   $(eval _included := $(filter-out $(2),$(MAKEFILE_LIST)))
   $(eval MAKEFILE_LIST :=)
   $(eval LOCAL_PATH :=)
diff --git a/core/product_config.mk b/core/product_config.mk
index e4b68cf..9b2633f 100644
--- a/core/product_config.mk
+++ b/core/product_config.mk
@@ -213,6 +213,9 @@ _cpm_word2 :=
 current_product_makefile := $(strip $(current_product_makefile))
 all_product_makefiles := $(strip $(all_product_makefiles))
 
+# Include base mixin definitions so they can be used ih the product Makefile(s).
+include $(BUILD_SYSTEM)/mixins.mk
+
 ifneq (,$(filter product-graph dump-products, $(MAKECMDGOALS)))
 # Import all product makefiles.
 $(call import-products, $(all_product_makefiles))
diff --git a/target/board/Android.mk b/target/board/Android.mk
index f8ecc4e..3f34de3 100644
--- a/target/board/Android.mk
+++ b/target/board/Android.mk
@@ -3,6 +3,7 @@
 #
 
 -include $(TARGET_DEVICE_DIR)/AndroidBoard.mk
+$(call import-mixin-file,AndroidBoard.mk)
 
 # Generate a file that contains various information about the
 # device we're building for.  This file is typically packaged up
-- 
1.7.4.1

