From d34e72b8a8b1c9f9fa6f9a6de833e90ea2895d8d Mon Sep 17 00:00:00 2001
From: Negreanu Marius Adrian <adrian.m.negreanu@intel.com>
Date: Wed, 28 Sep 2011 17:47:50 +0300
Subject: Extend x86 to have different arch variants

Author: Negreanu Marius Adrian <adrian.m.negreanu@intel.com>
Author: Andrew Boie <andrew.p.boie@intel.com>
Author: Daniel Leung <daniel.leung@intel.com>

Currently, x86 target only has generic i686 and x86-atom
as arch variants. This patch adds the ability to have
more than two arch variants. Defining a new arch variant
is similiar to ARM targets, by adding a new file in
core/combo/arch/x86. These files also define what
capabilities the targeting CPU has (e.g. having SSE2,
SSE3, etc.).

We define arch variants for Sandy Bridge, Ivy Bridge,
Haswell, and Silvermont. The Silvermont config is currently
just a copy of the x86-atom config and should be updated
later with the correct gcc options.

Bug: ADEV-129
Category: Device Enablement
Domain: AOSP-build
Severity: High
Origin: Internal
Upstream-candidate: Yes

Change-Id: Iafbce10d205e860738db4a216ff603f9a84d7311
Signed-off-by: Daniel Leung <daniel.leung@intel.com>
Signed-off-by: Andrew Boie <andrew.p.boie@intel.com>
---
 core/combo/TARGET_linux-x86.mk     |   40 ++++++++++++++++++++++++-----------
 core/combo/arch/x86/haswell.mk     |   20 ++++++++++++++++++
 core/combo/arch/x86/ivybridge.mk   |   20 ++++++++++++++++++
 core/combo/arch/x86/sandybridge.mk |   18 ++++++++++++++++
 core/combo/arch/x86/silvermont.mk  |   22 +++++++++++++++++++
 core/combo/arch/x86/x86-atom.mk    |   10 +++++---
 core/combo/arch/x86/x86.mk         |    4 ++-
 7 files changed, 116 insertions(+), 18 deletions(-)
 create mode 100644 core/combo/arch/x86/haswell.mk
 create mode 100644 core/combo/arch/x86/ivybridge.mk
 create mode 100644 core/combo/arch/x86/sandybridge.mk
 create mode 100644 core/combo/arch/x86/silvermont.mk

diff --git a/core/combo/TARGET_linux-x86.mk b/core/combo/TARGET_linux-x86.mk
index d5772b1..a1dc366 100644
--- a/core/combo/TARGET_linux-x86.mk
+++ b/core/combo/TARGET_linux-x86.mk
@@ -111,23 +111,37 @@ TARGET_GLOBAL_CFLAGS += \
 TARGET_GLOBAL_CPPFLAGS += \
 			-fno-use-cxa-atexit
 
-# XXX: Our toolchain is normally configured to always set these flags by default
-# however, there have been reports that this is sometimes not the case. So make
-# them explicit here unless we have the time to carefully check it
-#
-TARGET_GLOBAL_CFLAGS += -mstackrealign -msse3 -mfpmath=sse -m32
+TARGET_GLOBAL_CFLAGS += $(arch_variant_cflags)
 
-# XXX: These flags should not be defined here anymore. Instead, the Android.mk
-# of the modules that depend on these features should instead check the
-# corresponding macros (e.g. ARCH_X86_HAVE_SSE2 and ARCH_X86_HAVE_SSSE3)
-# Keep them here until this is all cleared up.
-#
+ifeq ($(ARCH_X86_HAVE_MMX),true)
+    TARGET_GLOBAL_CFLAGS += -DUSE_MMX -mmmx
+endif
+ifeq ($(ARCH_X86_HAVE_SSE),true)
+    TARGET_GLOBAL_CFLAGS += -DUSE_SSE -msse
+endif
 ifeq ($(ARCH_X86_HAVE_SSE2),true)
-TARGET_GLOBAL_CFLAGS += -DUSE_SSE2
+    TARGET_GLOBAL_CFLAGS += -DUSE_SSE2 -msse2
+endif
+ifeq ($(ARCH_X86_HAVE_SSE3),true)
+    TARGET_GLOBAL_CFLAGS += -DUSE_SSE3 -msse3
 endif
-
 ifeq ($(ARCH_X86_HAVE_SSSE3),true)   # yes, really SSSE3, not SSE3!
-TARGET_GLOBAL_CFLAGS += -DUSE_SSSE3
+    TARGET_GLOBAL_CFLAGS += -DUSE_SSSE3 -mssse3
+endif
+ifeq ($(ARCH_X86_HAVE_SSE4),true)
+    TARGET_GLOBAL_CFLAGS += -msse4
+endif
+ifeq ($(ARCH_X86_HAVE_SSE4_1),true)
+    TARGET_GLOBAL_CFLAGS += -msse4.1
+endif
+ifeq ($(ARCH_X86_HAVE_SSE4_2),true)
+    TARGET_GLOBAL_CFLAGS += -msse4.2
+endif
+ifeq ($(ARCH_X86_HAVE_AVX),true)
+    TARGET_GLOBAL_CFLAGS += -mavx
+endif
+ifeq ($(ARCH_X86_HAVE_AES_NI),true)
+    TARGET_GLOBAL_CFLAGS += -maes
 endif
 
 # XXX: This flag is probably redundant. I believe our toolchain always sets
diff --git a/core/combo/arch/x86/haswell.mk b/core/combo/arch/x86/haswell.mk
new file mode 100644
index 0000000..3f98047
--- /dev/null
+++ b/core/combo/arch/x86/haswell.mk
@@ -0,0 +1,20 @@
+# Configuration for Linux on x86.
+# Generating binaries for Haswell processors.
+
+ARCH_X86_HAVE_MMX    := true
+ARCH_X86_HAVE_SSE    := true
+ARCH_X86_HAVE_SSE2   := true
+ARCH_X86_HAVE_SSE3   := true
+ARCH_X86_HAVE_SSSE3  := true
+ARCH_X86_HAVE_SSE4   := true
+ARCH_X86_HAVE_SSE4_1 := true
+ARCH_X86_HAVE_SSE4_2 := true
+ARCH_X86_HAVE_AES_NI := true
+ARCH_X86_HAVE_AVX    := true
+
+# CFLAGS for this arch
+arch_variant_cflags := \
+	-march=core-avx2 \
+	-mstackrealign \
+	-mfpmath=sse \
+
diff --git a/core/combo/arch/x86/ivybridge.mk b/core/combo/arch/x86/ivybridge.mk
new file mode 100644
index 0000000..c0f8d89
--- /dev/null
+++ b/core/combo/arch/x86/ivybridge.mk
@@ -0,0 +1,20 @@
+# Configuration for Linux on x86.
+# Generating binaries for Ivy Bridge processors.
+#
+ARCH_X86_HAVE_MMX    := true
+ARCH_X86_HAVE_SSE    := true
+ARCH_X86_HAVE_SSE2   := true
+ARCH_X86_HAVE_SSE3   := true
+ARCH_X86_HAVE_SSSE3  := true
+ARCH_X86_HAVE_SSE4   := true
+ARCH_X86_HAVE_SSE4_1 := true
+ARCH_X86_HAVE_SSE4_2 := true
+ARCH_X86_HAVE_AES_NI := true
+ARCH_X86_HAVE_AVX    := true
+
+# CFLAGS for this arch
+arch_variant_cflags := \
+	-march=core-avx-i \
+	-mstackrealign \
+	-mfpmath=sse \
+
diff --git a/core/combo/arch/x86/sandybridge.mk b/core/combo/arch/x86/sandybridge.mk
new file mode 100644
index 0000000..48b82ad
--- /dev/null
+++ b/core/combo/arch/x86/sandybridge.mk
@@ -0,0 +1,18 @@
+# Configuration for Linux on x86.
+# Generating binaries for SandyBridge processors.
+#
+ARCH_X86_HAVE_MMX    := true
+ARCH_X86_HAVE_SSE    := true
+ARCH_X86_HAVE_SSE2   := true
+ARCH_X86_HAVE_SSE3   := true
+ARCH_X86_HAVE_SSSE3  := true
+ARCH_X86_HAVE_SSE4_1 := true
+ARCH_X86_HAVE_SSE4_2 := true
+ARCH_X86_HAVE_AVX    := true
+
+# CFLAGS for this arch
+arch_variant_cflags := \
+	-march=corei7 \
+	-mstackrealign \
+	-mfpmath=sse \
+
diff --git a/core/combo/arch/x86/silvermont.mk b/core/combo/arch/x86/silvermont.mk
new file mode 100644
index 0000000..95f9fae
--- /dev/null
+++ b/core/combo/arch/x86/silvermont.mk
@@ -0,0 +1,22 @@
+# This file contains feature macro definitions specific to the
+# silvermont arch variant.
+#
+# See build/core/combo/arch/x86/x86-atom.mk for differences.
+#
+# NOTE: This is currently a copy of the x86-atom.mk and has not
+# yet been populated with silvermont-specific compiler directives.
+
+ARCH_X86_HAVE_MMX   := true
+ARCH_X86_HAVE_SSE   := true
+ARCH_X86_HAVE_SSE2  := true
+ARCH_X86_HAVE_SSE3  := true
+ARCH_X86_HAVE_SSSE3 := true
+ARCH_X86_HAVE_MOVBE := true
+ARCH_X86_HAVE_POPCNT := false   # popcnt is not supported by current Atom CPUs
+
+# CFLAGS for this arch
+arch_variant_cflags := \
+	-march=atom \
+	-mstackrealign \
+	-mfpmath=sse \
+
diff --git a/core/combo/arch/x86/x86-atom.mk b/core/combo/arch/x86/x86-atom.mk
index 85998e7..1ea4eea 100644
--- a/core/combo/arch/x86/x86-atom.mk
+++ b/core/combo/arch/x86/x86-atom.mk
@@ -8,11 +8,13 @@ ARCH_X86_HAVE_MMX   := true
 ARCH_X86_HAVE_SSE   := true
 ARCH_X86_HAVE_SSE2  := true
 ARCH_X86_HAVE_SSE3  := true
-
 ARCH_X86_HAVE_SSSE3 := true
 ARCH_X86_HAVE_MOVBE := true
 ARCH_X86_HAVE_POPCNT := false   # popcnt is not supported by current Atom CPUs
 
-# This flag is used to enabled Atom-specific optimizations with our toolchain
-#
-TARGET_GLOBAL_CFLAGS += -march=atom
+# CFLAGS for this arch
+arch_variant_cflags := \
+	-march=atom \
+	-mstackrealign \
+	-mfpmath=sse \
+
diff --git a/core/combo/arch/x86/x86.mk b/core/combo/arch/x86/x86.mk
index 476da45..a62d86c 100644
--- a/core/combo/arch/x86/x86.mk
+++ b/core/combo/arch/x86/x86.mk
@@ -32,4 +32,6 @@ ARCH_X86_HAVE_POPCNT := false
 # not always work as intended, so keep it unless we have the time to check
 # everything properly.
 
-TARGET_GLOBAL_CFLAGS += -march=i686
+arch_variant_cflags := \
+    -march=i686 \
+
-- 
1.7.4.1

