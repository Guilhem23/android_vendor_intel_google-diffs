From b701ab2734d394b079682cecdd6ba26c401103e1 Mon Sep 17 00:00:00 2001
From: Hans Odeberg <hans.odeberg@intel.com>
Date: Thu, 12 Dec 2013 10:16:15 +0100
Subject: Enable build of kernel compat modules

Kernel compat modules are Linux kernel drivers that are taken from
a kernel tree and backported to an old kernel. The driver
is not integrated into the old kernel tree, but version controlled
and build apart. A customized set of makefiles are bundled with
the driver which enables the driver to be built, using the old
kernel's makefiles and Kconfig files.
This patch introduces an Android-like build interface that needs
to be used from the Android.mk file of each compat module.
The make variables set by the caller are:
  LOCAL_MODULE - name of the module
    Used for defining unique make rules and useful printouts
  LOCAL_PATH
    Path to module, relative to root build dir
  LOCAL_KERNEL_COMPAT_DEFCONFIG
    Name of the module-local defconfig file used to configure
    the compat build. The full name passed to the kernel makefile
    is defconfig-$(LOCAL_KERNEL_COMPAT_DEFCONFIG)
  COMPAT_PRIVATE_$(LOCAL_MODULE)_PREINSTALL:
  COMPAT_PRIVATE_$(LOCAL_MODULE)_POSTINSTALL:
    Defines a set of commands that will be run before/after the
    module is installed.
    This macro should be defined using define/endef, to ensure
    that it uses deferred evaluation. And yes, the macro may
    contain multiple lines.
    Two parameters may be used inside the commands:
    $(1): Path to where module is installed
    $(2): Path to where the module is built from

Rationale for not upstreaming: these are fairly Intel-specific
build modifications.

Change-Id: I2e58e4622b8927b22fcea44ea797c5976b350123
Depends-Change-Id: Ifd17ae3eca46f64f52d0e684b6bb320e335b7cfd
Category: Device Enablement
Domain: Build system
Upstream-Candidate: No
For: APDEV-648
Signed-off-by: Hans Odeberg <hans.odeberg@intel.com>
[apboie: removed legacy method]
Signed-off-by: Andrew Boie <andrew.p.boie@intel.com>
---
 core/build_compat_module.mk |  101 +++++++++++++++++++++++++++++++++++++++++++
 core/build_lkm.mk           |   18 +++++++-
 core/clear_vars.mk          |    2 +-
 core/config.mk              |    1 +
 core/definitions.mk         |    2 +-
 core/kernel.mk              |   30 +++++++++++--
 6 files changed, 146 insertions(+), 8 deletions(-)
 create mode 100644 core/build_compat_module.mk

diff --git a/core/build_compat_module.mk b/core/build_compat_module.mk
new file mode 100644
index 0000000..7b5c4d1
--- /dev/null
+++ b/core/build_compat_module.mk
@@ -0,0 +1,101 @@
+#
+# Copyright (C) 2013 Intel Corporation
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+# Defines how to build a Linux compat kernel module
+#
+# The procedure for building compat (=backported) modules is
+# something of a mix between building the kernel and building
+# external modules. The source exists outside the kernel tree,
+# like an external module, but the module is built by invoking
+# the entire kernel build, weaving the Kconfig files of
+# the module into the kernel Kconfig tree.
+#
+# The config stage requires the kernel .config file to be
+# present, in the kernel's output tree.
+#
+# The build stage only depends on its config stage
+# The install stage depends on the kernel and external modules
+# being installed. It has the same parallellism issue as
+# the external modules; if more than one module is
+# run in parallell, they will try to write the same
+# modules.dep file.
+#
+# Compat modules also need to rename some of the installed
+# .ko files, with subsequent need to massage the modules.dep
+# and modules.alias files.
+#
+# The make variables set by the caller are:
+#  LOCAL_MODULE - name of the module
+#    Used for defining unique make rules and useful printouts
+#  LOCAL_PATH
+#    Path to module, relative to root build dir
+#  LOCAL_KERNEL_COMPAT_DEFCONFIG
+#    Name of the module-local defconfig file used to configure
+#    the compat build. The full name passed to the kernel makefile
+#    is defconfig-$(LOCAL_KERNEL_COMPAT_DEFCONFIG)
+#  COMPAT_PRIVATE_$(LOCAL_MODULE)_PREINSTALL:
+#  COMPAT_PRIVATE_$(LOCAL_MODULE)_POSTINSTALL:
+#    Defines a set of commands that will be run before/after the 
+#    module is installed.
+#    This macro should be defined using define/endef, to ensure
+#    that it uses deferred evaluation. And yes, the macro may
+#    contain multiple lines.
+#    Two parameters may be used inside the commands
+#    $(1): Path to where module is installed
+#    $(2): Path to where the module is built from 
+
+
+compat_mod_dir := $(PRODUCT_KERNEL_OUTPUT)/compatmods/$(LOCAL_PATH)
+compat_mod_file := $(compat_mod_dir)/.sentinel
+compat_cfg_file := $(compat_mod_dir)/.config
+
+# The compat module .config is based on the kernel config.
+# Note that if you change to use a different defconfig file,
+# the build system will not realize the .config file needs
+# to be rebuilt.
+$(compat_cfg_file): PRIVATE_KERNEL_DEFCONFIG := $(LOCAL_KERNEL_COMPAT_DEFCONFIG)
+$(compat_cfg_file): PRIVATE_MODULE := $(LOCAL_MODULE)
+$(compat_cfg_file): private_src_dir:=$(LOCAL_PATH)
+$(compat_cfg_file): $(PRODUCT_KERNEL_OUTPUT)/.config FORCE
+	@echo Configuring kernel compat module $(PRIVATE_MODULE) with defconfig-$(PRIVATE_KERNEL_DEFCONFIG)
+	$(hide) mkdir -p $(@D)
+	$(hide) cp -ru $(private_src_dir)/. $(@D)/
+	$(mk_kernel_base) -C $(@D) KLIB_BUILD=$(PRODUCT_KERNEL_OUTPUT) defconfig-$(PRIVATE_KERNEL_DEFCONFIG)
+
+
+# Define build of this module here, separately,
+# to ensure it gets the appropriate config file.
+$(compat_mod_file): PRIVATE_MODULE := $(LOCAL_MODULE)
+$(compat_mod_file): $(compat_cfg_file) FORCE
+	@echo Building kernel compat module $(PRIVATE_MODULE) in $(@D)
+	$(mk_kernel_base) -C $(@D) KLIB_BUILD=$(PRODUCT_KERNEL_OUTPUT)
+	$(hide) touch $@
+
+
+# Define a couple of utility make targets for debugging
+.PHONY: config_$(LOCAL_MODULE) build_$(LOCAL_MODULE)
+config_$(LOCAL_MODULE): $(compat_cfg_file)
+build_$(LOCAL_MODULE): $(compat_mod_file)
+
+# Add module to list of modules to install. This must
+# be done in one place in a for loop, as the
+# install modifies common files.
+EXTERNAL_KERNEL_COMPAT_MODULES_TO_INSTALL += $(LOCAL_MODULE)
+
+# As all modules are installed in one for loop, we cannot use 
+# target-specific make variables, and instead must create
+# a globally unique name.
+COMPAT_PRIVATE_$(LOCAL_MODULE)_SRC_PATH := $(compat_mod_dir)
diff --git a/core/build_lkm.mk b/core/build_lkm.mk
index 8153505..3387c02 100644
--- a/core/build_lkm.mk
+++ b/core/build_lkm.mk
@@ -1,5 +1,21 @@
-# Defines how to build a Linux external kernel module
+#
+# Copyright (C) 2013 Intel Corporation
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
 
+# Defines how to build a Linux external kernel module
 
 # The source tree currently has at least one kernel tree which contains
 # symlinks to external drivers. This leads to the Android.mk
diff --git a/core/clear_vars.mk b/core/clear_vars.mk
index 8607a20..9d62a12 100644
--- a/core/clear_vars.mk
+++ b/core/clear_vars.mk
@@ -144,7 +144,7 @@ LOCAL_POST_INSTALL_CMD:=
 LOCAL_DIST_BUNDLED_BINARIES:=
 LOCAL_HAL_STATIC_LIBRARIES:=
 LOCAL_KCONFIG_OVERRIDE_FILES :=
-
+LOCAL_KERNEL_COMPAT_DEFCONFIG :=
 
 # Trim MAKEFILE_LIST so that $(call my-dir) doesn't need to
 # iterate over thousands of entries every time.
diff --git a/core/config.mk b/core/config.mk
index ffe7402..d08ab86 100644
--- a/core/config.mk
+++ b/core/config.mk
@@ -82,6 +82,7 @@ BUILD_NOTICE_FILE := $(BUILD_SYSTEM)/notice_files.mk
 BUILD_PREBUILT_BUNDLE_CREATE := $(BUILD_SYSTEM)/prebuilt_bundle_create.mk
 BUILD_PREBUILT_BUNDLE := $(BUILD_SYSTEM)/prebuilt_bundle.mk
 BUILD_EXTERNAL_KERNEL_MODULE := $(BUILD_SYSTEM)/build_lkm.mk
+BUILD_COMPAT_MODULE := $(BUILD_SYSTEM)/build_compat_module.mk
 
 -include cts/build/config.mk
 
diff --git a/core/definitions.mk b/core/definitions.mk
index f5204ac..3f7a1a4 100644
--- a/core/definitions.mk
+++ b/core/definitions.mk
@@ -96,7 +96,7 @@ PRODUCT_KERNEL_OUTPUT := $(CURDIR)/$(TARGET_OUT_INTERMEDIATES)/kernel
 
 # List of external kernel modules
 EXTERNAL_KERNEL_MODULES_TO_INSTALL :=
-
+EXTERNAL_KERNEL_COMPAT_MODULES_TO_INSTALL :=
 
 
 ###########################################################
diff --git a/core/kernel.mk b/core/kernel.mk
index 8aaa638..689b2c4 100644
--- a/core/kernel.mk
+++ b/core/kernel.mk
@@ -85,10 +85,13 @@ kernel_script_deps := $(foreach s,$(TARGET_KERNEL_SCRIPTS),$(TARGET_KERNEL_SOURC
 script_output := $(CURDIR)/$(TARGET_OUT_INTERMEDIATES)/kscripts
 modbuild_output := $(CURDIR)/$(TARGET_OUT_INTERMEDIATES)/kernelmods
 
+
+
+
 # Leading "+" gives child Make access to the jobserver.
 # Be sure to have CONFIG_KERNEL_MINIGZIP enabled or your
 # incremental OTA binary diffs will be very large.
-mk_kernel := + $(hide) $(MAKE) -C $(TARGET_KERNEL_SOURCE)  O=$(PRODUCT_KERNEL_OUTPUT) ARCH=$(TARGET_KERNEL_ARCH) $(if $(SHOW_COMMANDS),V=1) KCFLAGS="$(TARGET_KERNEL_EXTRA_CFLAGS)"
+mk_kernel_base := + $(hide) $(MAKE) ARCH=$(TARGET_KERNEL_ARCH) $(if $(SHOW_COMMANDS),V=1) KCFLAGS="$(TARGET_KERNEL_EXTRA_CFLAGS)"
 ifneq ($(TARGET_KERNEL_CROSS_COMPILE),false)
   ifneq ($(TARGET_KERNEL_TOOLS_PREFIX),)
     ifneq ($(USE_CCACHE),)
@@ -99,6 +102,8 @@ ifneq ($(TARGET_KERNEL_CROSS_COMPILE),false)
   endif
 endif
 
+mk_kernel = $(mk_kernel_base) -C $(TARGET_KERNEL_SOURCE)  O=$(PRODUCT_KERNEL_OUTPUT)
+
 # If there's a file in the arch-specific configs directory that matches
 # what's in $(TARGET_KERNEL_CONFIG), use that. Otherwise, use $(TARGET_KERNEL_CONFIG)
 # verbatim
@@ -135,6 +140,8 @@ kernel_dotconfig_file := $(PRODUCT_KERNEL_OUTPUT)/.config
 $(kernel_dotconfig_file): $(kernel_config_file) $(TARGET_KERNEL_CONFIG_OVERRIDES) | $(ACP)
 	$(hide) mkdir -p $(dir $@)
 	build/tools/build-defconfig.py $^ > $@
+	$(mk_kernel) oldnoconfig
+	$(hide) rm -f $@.old
 
 built_kernel_target := $(PRODUCT_KERNEL_OUTPUT)/arch/$(TARGET_ARCH)/boot/$(KERNEL_TARGET)
 
@@ -143,8 +150,6 @@ built_kernel_target := $(PRODUCT_KERNEL_OUTPUT)/arch/$(TARGET_ARCH)/boot/$(KERNE
 .PHONY : $(INSTALLED_KERNEL_TARGET)
 
 $(INSTALLED_KERNEL_TARGET): $(kernel_dotconfig_file) $(kernel_key_deps) $(MINIGZIP) | $(ACP)
-	$(hide) rm -f $(PRODUCT_KERNEL_OUTPUT)/.config.old
-	$(mk_kernel) oldnoconfig
 	$(mk_kernel) $(KERNEL_TARGET) $(if $(kernel_mod_enabled),modules)
 	$(hide) $(ACP) -fp $(built_kernel_target) $@
 
@@ -161,16 +166,31 @@ define make-ext-module
 
 endef
 
+# $1: module name
+# $2: module install directory; common to all modules
+define install-compat-module
+	@echo Installing kernel compat module $(1) in $(2)/
+	$(hide) $(call COMPAT_PRIVATE_$(1)_PREINSTALL,$(2),$(COMPAT_PRIVATE_$(1)_SRC_PATH))
+	$(mk_kernel) M=$(COMPAT_PRIVATE_$(1)_SRC_PATH) INSTALL_MOD_PATH=$(2) INSTALL_MOD_DIR=updates modules_install
+	$(hide) $(call COMPAT_PRIVATE_$(1)_POSTINSTALL,$(2),$(COMPAT_PRIVATE_$(1)_SRC_PATH))
+
+endef
+
 define make-modules
 	$(mk_kernel) INSTALL_MOD_PATH=$(1) modules_install
 	$(foreach item,$(dir $(EXTERNAL_KERNEL_MODULES_TO_INSTALL)),$(call make-ext-module,$(item),$(1)))
-	+ $(if $(EXTRA_KERNEL_MODULES), $(hide) $(MAKE) $(EXTRA_KERNEL_MODULES))
+	$(foreach item,$(EXTERNAL_KERNEL_COMPAT_MODULES_TO_INSTALL),$(call install-compat-module,$(item),$(1)))
 	$(hide) rm -f $(1)/lib/modules/*/{build,source}
 	$(hide) cd $(1)/lib/modules && find -type f -print0 | xargs -t -0 -I{} mv {} .
 endef
 
+# Testing a few parallel builds indicate that the kernel needs to be built before building
+# compat modules.
+$(foreach m,$(EXTERNAL_KERNEL_COMPAT_MODULES_TO_INSTALL),$(COMPAT_PRIVATE_$(m)_SRC_PATH)/.sentinel): $(INSTALLED_KERNEL_TARGET)
+
 ifneq ($(kernel_mod_enabled),)
-$(INSTALLED_MODULES_TARGET): $(EXTERNAL_KERNEL_MODULES_TO_INSTALL)
+$(INSTALLED_MODULES_TARGET): $(EXTERNAL_KERNEL_MODULES_TO_INSTALL) 
+$(INSTALLED_MODULES_TARGET): $(foreach m,$(EXTERNAL_KERNEL_COMPAT_MODULES_TO_INSTALL),$(COMPAT_PRIVATE_$(m)_SRC_PATH)/.sentinel)
 endif
 
 $(INSTALLED_MODULES_TARGET): $(INSTALLED_KERNEL_TARGET) $(MINIGZIP) | $(ACP)
-- 
1.7.4.1

