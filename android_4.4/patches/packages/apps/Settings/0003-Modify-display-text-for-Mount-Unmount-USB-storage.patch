From b5beee7f4e6529f10b92046dc7c9cab0b31d4c31 Mon Sep 17 00:00:00 2001
From: juntingwang <Junting.Wang@windriver.com>
Date: Mon, 18 Mar 2013 18:41:20 +0800
Subject: Modify display text for Mount/Unmount USB storage

The text shown in the Mount/Unmount USB storage is the same as the one
shown in the Mount/ Unmount SD card. Add USB storage string in xml file
for USB storage, and distinguish it from the SD card.

Issue: AXIA-1030
Category: aosp improvement
Domain: AOSP-Storage
Origin: internal
Upstream-Candidate: yes

Change-Id: Ic67e3620cc73b45b0042d48e2fa5163c5c17f1c5
Signed-off-by: juntingwang <Junting.Wang@windriver.com>
---
 res/values/strings.xml                             |   10 +++
 src/com/android/settings/deviceinfo/Memory.java    |   66 +++++++++++++++++---
 .../StorageVolumePreferenceCategory.java           |   47 ++++++++++++--
 3 files changed, 108 insertions(+), 15 deletions(-)

diff --git a/res/values/strings.xml b/res/values/strings.xml
index ffdc91b..297066c 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -2148,26 +2148,31 @@
     <string name="sd_eject" product="nosdcard">Unmount shared storage</string>
     <!-- SD card & phone storage settings item title that will result in the phone unmounting the SD card.  This will be done before the user phyiscally removes the SD card from the phone.  Kind of like the "Safely remove" on some operating systems.   -->
     <string name="sd_eject" product="default">Unmount SD card</string>
+    <string name="usb_eject" product="default">Unmount USB storage</string>
     <!-- SD card & phone storage settings item title that will result in the phone unmounting the SD card.  This will be done before the user phyiscally removes the SD card from the phone.  Kind of like the "Safely remove" on some operating systems.   [CHAR LIMIT=30] -->
     <string name="sd_eject_summary" product="nosdcard">Unmount the internal USB storage</string>
     <!-- SD card & phone storage settings item title that will result in the phone unmounting the SD card.  This will be done before the user phyiscally removes the SD card from the phone.  Kind of like the "Safely remove" on some operating systems.   -->
     <string name="sd_eject_summary" product="default">Unmount the SD card so you can safely remove it</string>
+    <string name="usb_eject_summary" product="default">Unmount the USB storage</string>
     <!-- SD card & phone storage settings item title for toggling PTP mode on and off.  When PTP mode is on the device will appear on the USB bus as a PTP camera device instead of an MTP music player.   -->
 
     <!-- SD card & phone storage settings item summary that is displayed when no SD card is inserted.  This version of the string can probably never come up on current hardware. [CHAR LIMIT=25] -->
     <string name="sd_insert_summary" product="nosdcard">Insert USB storage for mounting</string>
     <!-- SD card & phone storage settings item summary that is displayed when no SD card is inserted -->
     <string name="sd_insert_summary" product="default">Insert an SD card for mounting</string>
+    <string name="usb_insert_summary" product="default">Insert USB storage for mounting</string>
 
     <!-- Storage setting item that will mount USB storage if it unmounted. A user should never see this. [CHAR LIMIT=25] -->
     <string name="sd_mount" product="nosdcard">Mount USB storage</string>
     <!-- SD card & phone storage settings item title that will result in the phone mounting the SD card. -->
     <string name="sd_mount" product="default">Mount SD card</string>
+    <string name="usb_mount" product="default">Mount USB storage</string>
 
     <!-- Subtext for Mount USB storage in Storage settings. User should never see this since we use automount. -->
     <string name="sd_mount_summary" product="nosdcard"></string>
     <!-- Subtext for Mount SD Card in Storage settings. User should never see this since we use automount. -->
     <string name="sd_mount_summary" product="default"></string>
+    <string name="usb_mount_summary" product="default"></string>
     <!-- SD card & phone storage settings item title that will result in the phone formatting the USB storage.   [CHAR LIMIT=25] -->
     <string name="sd_format" product="nosdcard">Erase USB storage</string>
     <!-- SD card & phone storage settings item title that will result in the phone formatting the SD card.   [CHAR LIMIT=25] -->
@@ -2190,22 +2195,27 @@
     <string name="dlg_confirm_unmount_title" product="nosdcard">Unmount USB storage?</string>
     <!-- SD card eject confirmation dialog title   -->
     <string name="dlg_confirm_unmount_title" product="default">Unmount SD card?</string>
+    <string name="usb_dlg_confirm_unmount_title" product="default">Unmount USB storage?</string>
     <!-- SD card eject confirmation dialog  [CHAR LIMIT=NONE] -->
     <string name="dlg_confirm_unmount_text" product="nosdcard">If you unmount the USB storage, some apps you are using will stop and may be unavailable until you remount the USB storage.</string>
     <!-- SD card eject confirmation dialog  -->
     <string name="dlg_confirm_unmount_text" product="default">If you unmount the SD card, some apps you are using will stop and may be unavailable until you remount the SD card.</string>
+    <string name="usb_dlg_confirm_unmount_text" product="default">If you unmount the USB storage, some apps you are using will stop and may be unavailable until you remount the USB storage.</string>
     <!-- SD card eject error dialog title   [CHAR LIMIT=30] -->
     <string name="dlg_error_unmount_title" product="nosdcard"></string>
     <!-- SD card eject error dialog title   -->
     <string name="dlg_error_unmount_title" product="default"></string>
+    <string name="usb_dlg_error_unmount_title" product="default"></string>
     <!-- SD card eject error dialog text   [CHAR LIMIT=NONE] -->
     <string name="dlg_error_unmount_text" product="nosdcard">Couldn\'t unmount USB storage. Try again later.</string>
     <!-- SD card eject error dialog text   -->
     <string name="dlg_error_unmount_text" product="default">Couldn\'t unmount SD card. Try again later.</string>
+    <string name="usb_dlg_error_unmount_text" product="default">Couldn\'t unmount USB storage. Try again later.</string>
     <!-- SD card unmount informative text   [CHAR LIMIT=NONE] -->
     <string name="unmount_inform_text" product="nosdcard">USB storage will be unmounted.</string>
     <!-- SD card unmount informative text   [CHAR LIMIT=NONE] -->
     <string name="unmount_inform_text" product="default">SD card will be unmounted.</string>
+    <string name="usb_unmount_inform_text" product="default">USB storage will be unmounted.</string>
     <!-- SD card eject progress title   -->
     <string name="sd_ejecting_title">Unmounting</string>
     <!-- SD card eject progress text   -->
diff --git a/src/com/android/settings/deviceinfo/Memory.java b/src/com/android/settings/deviceinfo/Memory.java
index 999611d..cc05675 100644
--- a/src/com/android/settings/deviceinfo/Memory.java
+++ b/src/com/android/settings/deviceinfo/Memory.java
@@ -67,6 +67,8 @@ public class Memory extends SettingsPreferenceFragment {
 
     private static final int DLG_CONFIRM_UNMOUNT = 1;
     private static final int DLG_ERROR_UNMOUNT = 2;
+    private static final int DLG_CONFIRM_UNMOUNT_USB = 3;
+    private static final int DLG_ERROR_UNMOUNT_USB = 4;
 
     // The mountToggle Preference that has last been clicked.
     // Assumes no two successive unmount event on 2 different volumes are performed before the first
@@ -240,7 +242,7 @@ public class Memory extends SettingsPreferenceFragment {
                 String state = mStorageManager.getVolumeState(volume.getPath());
                 if (Environment.MEDIA_MOUNTED.equals(state) ||
                         Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
-                    unmount();
+                    unmount(volume);
                 } else {
                     mount();
                 }
@@ -272,12 +274,22 @@ public class Memory extends SettingsPreferenceFragment {
     @Override
     public Dialog onCreateDialog(int id) {
         switch (id) {
+        case DLG_CONFIRM_UNMOUNT_USB:
+                return new AlertDialog.Builder(getActivity())
+                    .setTitle(R.string.usb_dlg_confirm_unmount_title)
+                    .setPositiveButton(R.string.dlg_ok, new DialogInterface.OnClickListener() {
+                        public void onClick(DialogInterface dialog, int which) {
+                            doUnmount(DLG_CONFIRM_UNMOUNT_USB);
+                        }})
+                    .setNegativeButton(R.string.cancel, null)
+                    .setMessage(R.string.usb_dlg_confirm_unmount_text)
+                    .create();
         case DLG_CONFIRM_UNMOUNT:
                 return new AlertDialog.Builder(getActivity())
                     .setTitle(R.string.dlg_confirm_unmount_title)
                     .setPositiveButton(R.string.dlg_ok, new DialogInterface.OnClickListener() {
                         public void onClick(DialogInterface dialog, int which) {
-                            doUnmount();
+                            doUnmount(DLG_CONFIRM_UNMOUNT);
                         }})
                     .setNegativeButton(R.string.cancel, null)
                     .setMessage(R.string.dlg_confirm_unmount_text)
@@ -288,13 +300,27 @@ public class Memory extends SettingsPreferenceFragment {
             .setNeutralButton(R.string.dlg_ok, null)
             .setMessage(R.string.dlg_error_unmount_text)
             .create();
+        case DLG_ERROR_UNMOUNT_USB:
+                return new AlertDialog.Builder(getActivity())
+            .setTitle(R.string.usb_dlg_error_unmount_title)
+            .setNeutralButton(R.string.dlg_ok, null)
+            .setMessage(R.string.usb_dlg_error_unmount_text)
+            .create();
         }
         return null;
     }
 
-    private void doUnmount() {
+    private void doUnmount(int id) {
         // Present a toast here
-        Toast.makeText(getActivity(), R.string.unmount_inform_text, Toast.LENGTH_SHORT).show();
+        switch (id) {
+        case DLG_CONFIRM_UNMOUNT_USB:
+            Toast.makeText(getActivity(), R.string.usb_unmount_inform_text,
+                    Toast.LENGTH_SHORT).show();
+            break;
+        case DLG_CONFIRM_UNMOUNT:
+            Toast.makeText(getActivity(), R.string.unmount_inform_text, Toast.LENGTH_SHORT).show();
+            break;
+        }
         IMountService mountService = getMountService();
         try {
             sLastClickedMountToggle.setEnabled(false);
@@ -303,7 +329,11 @@ public class Memory extends SettingsPreferenceFragment {
             mountService.unmountVolume(sClickedMountPoint, true, false);
         } catch (RemoteException e) {
             // Informative dialog to user that unmount failed.
-            showDialogInner(DLG_ERROR_UNMOUNT);
+            if (id == DLG_CONFIRM_UNMOUNT_USB){
+                showDialogInner(DLG_ERROR_UNMOUNT_USB);
+            } else {
+                showDialogInner(DLG_ERROR_UNMOUNT);
+            }
         }
     }
 
@@ -332,19 +362,37 @@ public class Memory extends SettingsPreferenceFragment {
         return true;
     }
 
-    private void unmount() {
+    private void unmount(StorageVolume volume) {
         // Check if external media is in use.
+        boolean isUSB = false;
+        if (volume != null) {
+            String des = volume.getDescription(getActivity());
+            isUSB = des.contains("USB");
+        }
+
         try {
            if (hasAppsAccessingStorage()) {
                // Present dialog to user
-               showDialogInner(DLG_CONFIRM_UNMOUNT);
+               if (isUSB) {
+                   showDialogInner(DLG_CONFIRM_UNMOUNT_USB);
+               } else {
+                   showDialogInner(DLG_CONFIRM_UNMOUNT);
+               }
            } else {
-               doUnmount();
+               if (isUSB) {
+                   doUnmount(DLG_CONFIRM_UNMOUNT_USB);
+               } else {
+                   doUnmount(DLG_CONFIRM_UNMOUNT);
+               }
            }
         } catch (RemoteException e) {
             // Very unlikely. But present an error dialog anyway
             Log.e(TAG, "Is MountService running?");
-            showDialogInner(DLG_ERROR_UNMOUNT);
+            if (isUSB){
+                showDialogInner(DLG_ERROR_UNMOUNT_USB);
+            } else {
+                showDialogInner(DLG_ERROR_UNMOUNT);
+            }
         }
     }
 
diff --git a/src/com/android/settings/deviceinfo/StorageVolumePreferenceCategory.java b/src/com/android/settings/deviceinfo/StorageVolumePreferenceCategory.java
index 1a1db51..87430a3 100644
--- a/src/com/android/settings/deviceinfo/StorageVolumePreferenceCategory.java
+++ b/src/com/android/settings/deviceinfo/StorageVolumePreferenceCategory.java
@@ -77,6 +77,7 @@ public class StorageVolumePreferenceCategory extends PreferenceCategory {
 
     private boolean mUsbConnected;
     private String mUsbFunction;
+    private String mVolumeDescription;
 
     private long mTotalSize;
 
@@ -129,6 +130,10 @@ public class StorageVolumePreferenceCategory extends PreferenceCategory {
 
         setTitle(volume != null ? volume.getDescription(context)
                 : context.getText(R.string.internal_storage));
+        if (volume != null)
+        {
+            mVolumeDescription = volume.getDescription(context);
+        }
     }
 
     private StorageItemPreference buildItem(int titleRes, int colorRes) {
@@ -253,18 +258,48 @@ public class StorageVolumePreferenceCategory extends PreferenceCategory {
         if (Environment.MEDIA_MOUNTED.equals(state)
                 || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
             mMountTogglePreference.setEnabled(true);
-            mMountTogglePreference.setTitle(mResources.getString(R.string.sd_eject));
-            mMountTogglePreference.setSummary(mResources.getString(R.string.sd_eject_summary));
+            if (mVolumeDescription.contains("USB"))
+            {
+                mMountTogglePreference.setTitle(mResources.getString(R.string.usb_eject));
+                mMountTogglePreference.setSummary(mResources.getString(R.string.usb_eject_summary));
+            }
+            else
+            {
+                mMountTogglePreference.setTitle(mResources.getString(R.string.sd_eject));
+                mMountTogglePreference.setSummary(mResources.getString(R.string.sd_eject_summary));
+            }
         } else {
             if (Environment.MEDIA_UNMOUNTED.equals(state) || Environment.MEDIA_NOFS.equals(state)
                     || Environment.MEDIA_UNMOUNTABLE.equals(state)) {
                 mMountTogglePreference.setEnabled(true);
-                mMountTogglePreference.setTitle(mResources.getString(R.string.sd_mount));
-                mMountTogglePreference.setSummary(mResources.getString(R.string.sd_mount_summary));
+                if (mVolumeDescription.contains("USB"))
+                {
+                    mMountTogglePreference.setTitle(mResources.getString(R.string.usb_mount));
+                    mMountTogglePreference.setSummary(mResources
+                            .getString(R.string.usb_mount_summary));
+                }
+                else
+                {
+                    mMountTogglePreference.setTitle(mResources.getString(R.string.sd_mount));
+                    mMountTogglePreference.setSummary(mResources
+                            .getString(R.string.sd_mount_summary));
+                }
             } else {
                 mMountTogglePreference.setEnabled(false);
-                mMountTogglePreference.setTitle(mResources.getString(R.string.sd_mount));
-                mMountTogglePreference.setSummary(mResources.getString(R.string.sd_insert_summary));
+                if (mVolumeDescription.contains("USB"))
+                {
+                    mMountTogglePreference.setTitle(mResources
+                            .getString(R.string.usb_mount));
+                    mMountTogglePreference.setSummary(mResources
+                            .getString(R.string.usb_insert_summary));
+                }
+                else
+                {
+                    mMountTogglePreference.setTitle(mResources
+                            .getString(R.string.sd_mount));
+                    mMountTogglePreference
+                            .setSummary(mResources.getString(R.string.sd_insert_summary));
+                }
             }
 
             removePreference(mUsageBarPreference);
-- 
1.7.4.1

