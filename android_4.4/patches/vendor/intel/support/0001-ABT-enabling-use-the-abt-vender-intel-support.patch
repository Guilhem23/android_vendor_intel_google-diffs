From 1de76e8864e2666193570ec81ef19c05dfb5c248 Mon Sep 17 00:00:00 2001
From: Yong Yao <yong.yao@intel.com>
Date: Sun, 22 Dec 2013 11:33:14 +0800
Subject: [ABT-enabling] use the abt vender/intel/support

	we also need remove "gzip"

Change-Id: Ib0a1c0fbba63b5e324646ba4a176f4d6b605ac38
Signed-off-by: Yong Yao <yong.yao@intel.com>
---
 flash-pc                        |  240 +++++++++++++++++++++++++++++++++++++++
 flash-update                    |   29 +++++
 getsignature.sh                 |   13 ++
 gzip                            |   11 --
 mkbootimg-osip                  |  123 ++++++++++++++++++++
 ota-sums.py                     |   45 +++++++
 product-to-inline-test-map.yaml |    4 +
 product-to-make-target-map.yaml |    5 +
 show-owners.py                  |  105 +++++++++++++++++
 sync_img                        |  101 ++++++++++++++++
 10 files changed, 665 insertions(+), 11 deletions(-)
 create mode 100755 flash-pc
 create mode 100755 flash-update
 create mode 100755 getsignature.sh
 delete mode 100755 gzip
 create mode 100755 mkbootimg-osip
 create mode 100755 ota-sums.py
 create mode 100644 product-to-inline-test-map.yaml
 create mode 100644 product-to-make-target-map.yaml
 create mode 100755 show-owners.py
 create mode 100755 sync_img

diff --git a/flash-pc b/flash-pc
new file mode 100755
index 0000000..fb58176
--- /dev/null
+++ b/flash-pc
@@ -0,0 +1,240 @@
+#!/bin/bash
+
+set -e
+
+USE_USERDATA_IMG=
+FLASH_USERDATA=
+NO_REBOOT=
+REBOOT_BOOTLOADER=
+FLASH_KERNEL=
+FLASH_FASTBOOT=
+FLASH_RECOVERY=
+FLASH_SYSTEM=
+FLASH_BOOTLOADER=
+FLASH_CACHE=
+FASTBOOT_EXTRA_ARGS=
+CUSTOM_PRODUCT_OUT=
+FLASHING_IMAGE=
+FORCE=
+
+BOOTLOADER_FILE=
+BOOTLOADER_DEFAULT_FILE=ufb_esp_update.bin
+
+while [ $# -gt 0 ]; do
+    case $1 in
+        -t | --tcp-host )
+            FASTBOOT_EXTRA_ARGS="$FASTBOOT_EXTRA_ARGS -t $2"
+            shift
+            ;;
+        -o | --android-out )
+            CUSTOM_PRODUCT_OUT="$2"
+            shift
+            ;;
+        -U | --userdata-image )
+            USE_USERDATA_IMG=1
+            FLASH_USERDATA=1
+            FLASHING_IMAGE=1
+            ;;
+        -u | --userdata )
+            FLASH_USERDATA=1
+            ;;
+        -r | --no-reboot )
+            NO_REBOOT=1
+            ;;
+        -k | --kernel )
+            FLASH_KERNEL=1
+            FLASHING_IMAGE=1
+            ;;
+        -d | --fastboot )
+            FLASH_FASTBOOT=1
+            FLASHING_IMAGE=1
+            ;;
+        -D | --fastboot-reboot )
+            FLASH_FASTBOOT=1
+            REBOOT_BOOTLOADER=1
+            FLASHING_IMAGE=1
+            ;;
+        -y | --recovery )
+            FLASH_RECOVERY=1
+            FLASHING_IMAGE=1
+            ;;
+        -s | --system )
+            FLASH_SYSTEM=1
+            FLASHING_IMAGE=1
+            ;;
+        -b | --bootloader )
+            FLASH_BOOTLOADER=1
+            FLASHING_IMAGE=1
+            ;;
+        -i | --bootloader-file )
+            BOOTLOADER_FILE=$2
+            shift
+            ;;
+        -c | --cache )
+            FLASH_CACHE=1
+            ;;
+        -l | --clear )
+            FLASH_USERDATA=1
+            FLASH_CACHE=1
+            ;;
+        -a | --all )
+            FLASH_KERNEL=1
+            FLASH_SYSTEM=1
+            FLASH_RECOVERY=1
+            FLASHING_IMAGE=1
+            ;;
+        -A | --all-with-clear )
+            FLASH_KERNEL=1
+            FLASH_SYSTEM=1
+            FLASH_CACHE=1
+            FLASH_USERDATA=1
+            FLASH_RECOVERY=1
+            FLASHING_IMAGE=1
+            ;;
+        -f | --force )
+            FORCE=1
+            ;;
+        -h | --help )
+            echo "Usage: $0 <flags>"
+            echo "Flashes images to Android device using fastboot"
+            echo "Available flags"
+            echo "  -t --tcp-host         Sets -t argument for fastboot remote host"
+            echo "  -o --android-out      Set path to 'out' directory"
+            echo "  -r --no-reboot        Don't reboot when finished"
+            echo "  -f --force            Skip sanity checks before flashing"
+            echo "  -k --kernel           Flash Android kernel image"
+            echo "  -d --fastboot         Flash Fastboot image"
+            echo "  -D --fastboot-reboot  Flash Fastboot image and reboot into new Fastboot"
+            echo "  -y --recovery         Flash recovery image"
+            echo "  -s --system           Flash system image"
+            echo "  -b --bootloader       Flash bootloader"
+            echo "  -i --bootloader-file  Specify bootloader image file name"
+            echo "  -c --cache            Erase /cache partition"
+            echo "  -u --userdata         Erase /data partition"
+            echo "  -U --userdata-image   Flash userdata.img instead of erasing data (implies -u)"
+            echo "  -l --clear            Erase /cache and /data"
+            echo "  -a --all              Equivalent to -k -y -s (Fastboot & bootloader intentionally omitted)"
+            echo "  -A --all-with-clear   Equivalent to -a -l"
+            echo
+            echo "Typical users will want -a or -A"
+            exit 0
+    esac
+    shift
+done
+
+FASTBOOT="fastboot $FASTBOOT_EXTRA_ARGS"
+
+# Checks for where to find images
+if [ -n "$CUSTOM_PRODUCT_OUT" ]; then
+    export ANDROID_PRODUCT_OUT=$CUSTOM_PRODUCT_OUT
+    unset TARGET_PRODUCT
+fi
+
+if [ -z "$ANDROID_PRODUCT_OUT" ]; then
+    export ANDROID_PRODUCT_OUT=.
+fi
+
+if [ ! -e "$ANDROID_PRODUCT_OUT" ]; then
+    echo "error: no such file or directory: $ANDROID_PRODUCT_OUT"
+    exit 1
+fi
+
+if [ ! -r "$ANDROID_PRODUCT_OUT" ]; then
+    echo "error: permission denied: $ANDROID_PRODUCT_OUT"
+    exit 1
+fi
+
+if [ ! -d "$ANDROID_PRODUCT_OUT" ]; then
+    echo "error: not a directory: $ANDROID_PRODUCT_OUT"
+    exit 1
+fi
+
+echo "Using images from $ANDROID_PRODUCT_OUT"
+
+# Pre-flash sanity checks
+if [ -z "$FORCE" ] ; then
+    if [ -n "$FLASHING_IMAGE" -a -n "$TARGET_PRODUCT" ]; then
+        echo "Checking device product type..."
+        DEVICE_PRODUCT=`$FASTBOOT getvar product 2>&1 | sed q | cut -f2  -d' '`
+        if [ "$DEVICE_PRODUCT" != "$TARGET_PRODUCT" ]; then
+            echo "Refusing to flash $TARGET_PRODUCT images onto a $DEVICE_PRODUCT"
+            echo "If you really want to do this, use -f"
+            exit 1
+        fi
+    fi
+fi
+
+fflash() {
+    # Simple function that sends the flash subcommand via fasboot.
+    # Second argument, the file, is relative to the $ANDROID_PRODUCT_OUT
+    # location.
+    # Arguments: <partition> <file> [<optional message>]
+    echo "Flashing ${3:-${1}} partition..."
+    $FASTBOOT flash ${1} $ANDROID_PRODUCT_OUT/${2}
+}
+
+fflash_cond() {
+    # Conditionally calls the flashing function.
+    # Arguments: <condition> <partition> <file> [<optional message>]
+    if [ "${1}" ]; then
+        shift
+        fflash "${@}"
+    fi
+}
+
+ferase() {
+    # Similar to fflash, sends the erase command for a partition.
+    # Arguments: <partition> [<optional message>]
+    echo "Flashing ${2:-${1}} partition..."
+    $FASTBOOT erase ${1}
+}
+
+ferase_cond() {
+    # Conditionally calls the erasing function
+    # Arguments: <condition> <partition> [<optional message>]
+    if [ "${1}" ]; then
+        shift
+        ferase "${@}"
+    fi
+}
+
+fflasherase_cond() {
+    # Conditionally erases a partition before flashing it. The entire block is
+    # also called only if the first condition parameter is true.
+    # Arguments: <condition> <erase condition> <partition> <file> [<message>]
+    if [ "${1}" ]; then
+        shift
+        if [ "${1}" ]; then
+            shift
+            fflash "${@}"
+        else
+            shift
+            ferase "${1}"
+        fi
+    fi
+    shift
+}
+
+# Ok, lets go!
+ferase_cond "${FLASH_CACHE}" cache
+fflasherase_cond "${FLASH_USERDATA}" "${USE_USERDATA_IMG}" data userdata.img
+fflash_cond "${FLASH_BOOTLOADER}" bootloader ${BOOTLOADER_FILE:-${BOOTLOADER_DEFAULT_FILE}} "EFI System"
+fflash_cond "${FLASH_KERNEL}" boot boot.img "Android kernel"
+fflash_cond "${FLASH_RECOVERY}" recovery recovery.img "recovery kernel"
+fflash_cond "${FLASH_SYSTEM}" system system.img
+fflash_cond "${FLASH_FASTBOOT}" fastboot fastboot.img "Fastboot kernel"
+
+if [ -n "$REBOOT_BOOTLOADER" ]; then
+    echo "Rebooting back into Fastboot..."
+    $FASTBOOT reboot-bootloader
+else
+    if [ -z "$NO_REBOOT" ]; then
+        echo "Rebooting device..."
+        $FASTBOOT reboot &
+        sleep 3
+        kill %1
+    fi
+fi
+
+echo "All done."
+
diff --git a/flash-update b/flash-update
new file mode 100755
index 0000000..b487a14
--- /dev/null
+++ b/flash-update
@@ -0,0 +1,29 @@
+#!/bin/bash
+
+set -e
+
+if [ -z "$1" ]; then
+    PACKAGE="$OUT/ota-dev.zip"
+else
+    PACKAGE="$1"
+fi
+
+function wait_for_adb {
+    while [ -z "$(adb devices | awk 'NR==2{print}')" ]; do
+        sleep 1
+    done
+}
+
+echo "Waiting for device..."
+wait_for_adb
+echo "Setting root permissions..."
+adb root
+sleep 1
+wait_for_adb
+
+echo "Copying OTA image $(basename $PACKAGE) to device..."
+adb push $PACKAGE /cache/update.zip
+echo "Setting parameters and rebooting into recovery console..."
+adb shell "mkdir -p /cache/recovery"
+adb shell "echo \"--update_package=/cache/update.zip\" > /cache/recovery/command"
+timeout 4 adb reboot recovery || true
diff --git a/getsignature.sh b/getsignature.sh
new file mode 100755
index 0000000..79b6a12
--- /dev/null
+++ b/getsignature.sh
@@ -0,0 +1,13 @@
+#!/bin/bash
+
+KF=$(mktemp)
+
+function alldone {
+    rm -f $KF
+    exit $1
+}
+
+openssl pkcs8 -inform DER -nocrypt -in $1 -out $KF || alldone 1
+openssl dgst -sha256 -sign $KF || alldone 2
+alldone 0
+
diff --git a/gzip b/gzip
deleted file mode 100755
index 0510e3e..0000000
--- a/gzip
+++ /dev/null
@@ -1,11 +0,0 @@
-#!/bin/sh
-
-# gzip "wrapper" for minigzip only for use with Kbuild.
-# gzip hack necessary to get the kernel to compress the
-# bzImage with minigzip instead of host gzip, so that the
-# newer verion of deflate algorithn inside zlib is used.
-# This is needed by OTA applypatch, which makes much larger
-# binary diffs of compressed data if the deflate versions
-# are out of alignment.
-
-minigzip -c -9
diff --git a/mkbootimg-osip b/mkbootimg-osip
new file mode 100755
index 0000000..c393873
--- /dev/null
+++ b/mkbootimg-osip
@@ -0,0 +1,123 @@
+#!/bin/bash
+# build nand boot recovery image for android
+PLTTYPE=MFDC0
+SPIFLAG=0
+
+TEMP=`getopt \
+         -o c:r:k:o:p:t:s:b:f:y: \
+         --long cmdline:,ramdisk:,kernel:,output:,product:,type:,sign-with:,bootstub:,spi-flag:,plt-type: \
+         -n '$0' \
+         --  "$@"`
+
+eval set -- "$TEMP"
+while true ; do
+    echo "+++++ case $1 +++++"
+    case "$1" in
+        --cmdline) CMDLINE="$2"; shift 2;;
+        --ramdisk) INITRD=$2; shift 2;;
+        --kernel) BZIMAGE=$2; shift 2;;
+        --output) OUT=$2; shift 2;;
+        --product) BOARD=$2; shift 2;;
+        --bootstub) BOOTSTUB=$2; shift 2;;
+        --sign-with) SIGN_WITH=${2,,}; shift 2;;
+        --type) TYPE=$2; shift 2;;
+        --spi-flag) SPIFLAG=$2; shift 2;;
+        --plt-type) PLTTYPE=$2; shift 2;;
+        --) shift ; break ;;
+    esac
+done
+
+TARG=`dirname $OUT`
+case "$TYPE" in
+    mos) IMGNAME="boot";;
+    recovery) IMGNAME="recovery";;
+    combined) IMGNAME="recovery";;
+    fastboot) IMGNAME="fastboot";;
+    droidboot) IMGNAME="droidboot";;
+esac
+if [ -z "$IMGNAME" ]; then
+    echo "Error: image type shall be one of: mos,recovery,combined,fastboot,droidboot"
+    exit 1
+fi
+if [ -z "$SIGN_WITH" ]; then
+    SIGN_WITH="none"
+fi
+
+UNSIGNED_OUT=${TARG}/${IMGNAME}.unsigned
+CMDLINE_FILE=${TARG}/${IMGNAME}_cmdline
+echo $CMDLINE > $CMDLINE_FILE
+
+if [ ! -e ${BZIMAGE} ]; then
+    echo "error: bzImage file ${BZIMAGE} does not exist"
+    exit 1
+fi
+
+if [ ! -e "${INITRD}" ]; then
+    echo "error: ramdisk.img file ${INTRD} does not exist"
+    exit 1
+fi
+
+if [ ! -e "${CMDLINE_FILE}" ]; then
+    echo "error: cmdline file ${CMDLINE} does not exist"
+    exit 1
+fi
+
+if [ -z "${BOOTSTUB}" ]; then
+    echo "error: bootstub file not provided"
+    exit 1
+fi
+
+if [ ! -e ${BOOTSTUB} ]; then
+    echo "error: bootstub file ${BOOTSTUB} does not exist"
+    exit 1
+fi
+
+if [ -e "${OUT}" ]; then
+    echo "${OUT} exists, remove the old one"
+    rm -f ${OUT}
+fi
+
+echo "Creating image \`${OUT}'for FSTK stitching..."
+
+rm -f ${UNSIGNED_OUT}
+# 0:auto-detect based on SoC, 1:SPI1 (Penwell, Cloverview), 2:SPI2 (Tangier, Anniedale)
+SILICON=0
+./vendor/intel/support/stitch.sh ${CMDLINE_FILE} ${BOOTSTUB} ${BZIMAGE} ${INITRD} ${SPIFLAG} ${SILICON} ${UNSIGNED_OUT}
+
+if [ "0" -ne "$?" ]; then
+    echo "error running stitch.sh for generating ${UNSIGNED_OUT}"
+    exit 1
+fi
+TOP=`pwd`
+# stitch binary
+
+UPPER_TYPE=${TYPE^^}
+TMPFILE=`mktemp /tmp/gen-os.tmp.XXX`
+
+GEN_OS=vendor/intel/support/gen_os
+GEN_OS_CMD="./$GEN_OS --input ${TOP}/${UNSIGNED_OUT} --output ${TOP}/${OUT} --xml ${UPPER_TYPE}_OTA.XML --platform-type $PLTTYPE --sign-with $SIGN_WITH"
+$GEN_OS_CMD 2>${TMPFILE}
+if [ $? -ne 0 ]; then
+	echo -e "$GEN_OS_CMD: error\n$(cat ${TMPFILE})" >&2
+	rm -f ${TMPFILE}
+	exit 1
+fi
+rm -f ${TMPFILE}
+
+case "$TYPE" in
+    combined|fastboot|droidboot)
+        # Only generate POS version for these image types.
+        GEN_OS_CMD="./$GEN_OS --input ${TOP}/${UNSIGNED_OUT} --output ${TOP}/${OUT}.POS.bin --xml ${UPPER_TYPE}.XML --platform-type $PLTTYPE --sign-with $SIGN_WITH"
+        $GEN_OS_CMD 2>$TMPFILE
+			if [ $? -ne 0 ]; then
+				echo -e  "$GEN_OS_CMD: error\n$(cat $TMPFILE)" >&2
+				rm -f ${TMPFILE}
+				exit 1
+			fi
+			rm -f ${TMPFILE}
+            ;;
+esac
+
+# clean up
+cd  $TOP
+echo "Done."
diff --git a/ota-sums.py b/ota-sums.py
new file mode 100755
index 0000000..68ffdb9
--- /dev/null
+++ b/ota-sums.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python
+
+import sys
+import hashlib
+import os
+import subprocess
+
+print "#!/bin/bash"
+print "adb shell mount -o remount,rw /"
+print "adb shell mkdir /mnt/bootloader"
+print "adb shell mount -t vfat /dev/block/by-name/android_bootloader /mnt/bootloader"
+
+print "set -e"
+
+def get_hash_and_size(filename):
+    h = hashlib.sha1(open(filename).read()).hexdigest()
+    s = os.stat(filename).st_size
+    return (h, s)
+
+def from_outdir(filename):
+    out = os.environ['OUT']
+    return os.path.join(out, filename)
+
+def get_build_date():
+    bd = subprocess.check_output("cat $OUT/system/build.prop | grep ro.build.date.utc | cut -d= -f2", shell=True)
+    return bd
+
+for f in ["efi/gummiboot.efi", "efi/shim.efi"]:
+    h, s = get_hash_and_size(from_outdir(f))
+    print "adb shell applypatch -c /mnt/bootloader/%s %s" % (os.path.basename(f), h)
+
+for f in ["recovery.img", "boot.img", "fastboot.img"]:
+    h, s = get_hash_and_size(from_outdir(f))
+    pname = f.split(".")[0]
+    print "adb shell applypatch -c EMMC:/dev/block/by-name/android_%s:%s:%s" % (pname,s,h)
+
+print "BD_ACTUAL=`adb shell getprop ro.build.date.utc | awk 'END{print}' | tr -d [:space:]`"
+print "BD_ACTUAL=`echo -n $BD_ACTUAL`"
+print "BD_EXPECTED=%s" % (get_build_date(),)
+print 'if [ "$BD_ACTUAL" != "$BD_EXPECTED" ]; then'
+print '    echo Incorrect build stamp, expected $BD_ACTUAL found $BD_EXPECTED'
+print '    exit 1'
+print 'fi'
+print "echo All tests completed SUCCESS!"
+
diff --git a/product-to-inline-test-map.yaml b/product-to-inline-test-map.yaml
new file mode 100644
index 0000000..ae19617
--- /dev/null
+++ b/product-to-inline-test-map.yaml
@@ -0,0 +1,4 @@
+default: 'null'
+sdk: emu_atf
+sdk_x86: emu_atf
+redhookbay: 'null'
diff --git a/product-to-make-target-map.yaml b/product-to-make-target-map.yaml
new file mode 100644
index 0000000..6cd4a02
--- /dev/null
+++ b/product-to-make-target-map.yaml
@@ -0,0 +1,5 @@
+default: [droid, dist]
+sdk: [sdk, dist]
+sdk_x86: [sdk, dist]
+redhookbay: [flashfiles]
+mini_x86: [droid]
diff --git a/show-owners.py b/show-owners.py
new file mode 100755
index 0000000..3c917b8
--- /dev/null
+++ b/show-owners.py
@@ -0,0 +1,105 @@
+#!/usr/bin/env python
+
+import argparse
+import xml.etree.ElementTree as ET
+import os
+
+parser = argparse.ArgumentParser(description='Show reviewers based on All-Projects manifest')
+parser.add_argument("-a", "--allprojects", help="location of All-Projects XML")
+parser.add_argument("-m", "--mediawiki", action="store_true", help="output data in Mediawiki format")
+
+
+args = parser.parse_args()
+
+if not args.allprojects:
+    if "ANDROID_BUILD_TOP" not in os.environ:
+        raise Exception("--all-projects not specified and ANDROID_BUILD_TOP not set!")
+    args.allprojects = os.path.join(os.environ["ANDROID_BUILD_TOP"], ".repo/manifests/All-Projects")
+
+allprojects = ET.parse(args.allprojects).getroot()
+
+projects_dict = {}
+owner_dict = {}
+default_owner_id = []
+
+if args.mediawiki:
+    output = "mediawiki"
+else:
+    output = "text"
+
+for default_owner in allprojects.findall('owner'):
+    owner_id = default_owner.get("group")
+    if not owner_id:
+        owner_id = "%s <%s>" % (owner.get("name"), owner.get("email"))
+    owner_id = owner_id + " (default)"
+    default_owner_id.append(owner_id)
+    owner_dict[owner_id] = []
+
+for project in allprojects.findall('project'):
+    name = project.get("name")
+    projects_dict[name] = []
+    owners = project.findall('owner')
+    if owners:
+        for owner in project.findall('owner'):
+            owner_id = owner.get("group")
+            if not owner_id:
+                owner_id = "%s <%s>" % (owner.get("name"), owner.get("email"))
+            projects_dict[name].append(owner_id)
+            if owner_id not in owner_dict:
+                owner_dict[owner_id] = []
+            owner_dict[owner_id].append(name)
+    else:
+        projects_dict[name].extend(default_owner_id)
+        for owner in default_owner_id:
+            owner_dict[owner].append(name)
+
+if output == "text":
+    col_width = max(len(item) for item in projects_dict.keys()) + 2
+
+    for project, owners in iter(sorted(projects_dict.iteritems())):
+        print project.ljust(col_width), owners
+
+    for owner, projects in iter(sorted(owner_dict.iteritems())):
+        print
+        print "-------", owner,"-------"
+        for project in sorted(projects):
+            print project
+
+if output == "mediawiki":
+    print """
+== Overview ==
+The following is a list of approvers for the various projects in the Android
+Baseline Tree. These approvers are subject matter experts in their designated
+projects and no patches will be merged to ABT Master or Platform-Dev branches
+without their +2 review.
+
+DO NOT EDIT THIS PAGE. It is automatically generated from the All-Projects XML
+file in the ABT manifest project. Perform any edits there and submit the change
+in Gerrit for approval.
+
+Some projects have no owner designated, and fall back to the default owner as
+specified in All-Projects. Such projects have (default) appended to the owner
+name.
+
+== Group Members ==
+Most of the approvers on this page are specified by Gerrit review groups.
+To see the current set of members for any group, please visit the
+[https://aia-review.intel.com/#/admin/groups/ List of Gerrit Review Groups].
+
+== Approvers By Project ==
+{|
+! align="left"| Project
+! Owner
+"""
+    for project, owners in iter(sorted(projects_dict.iteritems())):
+        print "|-"
+        print "| %s" % (project,)
+        print "| %s" % (", ".join(owners),)
+    print "|}"
+    print "== Approvers By Owner =="
+    for owner, projects in iter(sorted(owner_dict.iteritems())):
+        print
+        print ";%s" % (owner,)
+        for project in sorted(projects):
+            print ":%s" % (project,)
+
diff --git a/sync_img b/sync_img
new file mode 100755
index 0000000..8c2ca96
--- /dev/null
+++ b/sync_img
@@ -0,0 +1,101 @@
+#!/bin/bash
+
+set -e
+
+FLASH_KERNEL=
+FLASH_FASTBOOT=
+FLASH_RECOVERY=
+FLASH_SYSTEM=
+NO_REBOOT=
+
+function usage {
+    echo "Usage: `basename $0` <options>"
+    echo " -a Equivalent to -bdksy"
+    echo " -d Flash fastboot"
+    echo " -k Flash Android kernel"
+    echo " -s Update system"
+    echo " -m Update kernel modules"
+    echo " -y Flash recovery kernel"
+    echo
+    echo " -r Don't reboot when finished"
+    echo " -h This message"
+}
+
+if [ $# -eq 0 ]; then
+    usage;
+    exit 1;
+fi
+
+while getopts abdksyrhm name; do
+    case $name in
+        a)  FLASH_FASTBOOT=1
+            FLASH_KERNEL=1
+            FLASH_SYSTEM=1
+            FLASH_RECOVERY=1
+            ;;
+        d)  FLASH_FASTBOOT=1;;
+        k)  FLASH_KERNEL=1;;
+        s)  FLASH_SYSTEM=1;;
+        m)  FLASH_MODULES=1;;
+        y)  FLASH_RECOVERY=1;;
+        r)  NO_REBOOT=0;;
+        h)  usage; exit 0;;
+        ?)  usage; exit 1;;
+    esac
+done
+
+echo "Waiting for device..."
+adb wait-for-device
+echo "Setting root permissions..."
+adb root
+sleep 1
+adb wait-for-device
+
+# $1 path to the image
+# $2 target partition
+# (Should this script figure partition from disk_layout.conf?)
+function flashimage {
+    if [ ! -e $1 ]; then
+        echo "$1 file missing"
+        return 1
+    fi
+    adb push $1 /data
+    BN=`basename $1`
+    adb shell "cat /data/$BN > $2"
+    adb shell "rm /data/$BN"
+    return 0
+}
+
+if [ -n "$FLASH_SYSTEM" ]; then
+    echo "Update system..."
+    adb remount
+    adb sync || exit 1
+fi
+
+if [ -n "$FLASH_MODULES" ]; then
+    echo "Update kernel modules..."
+    adb remount
+    adb push $ANDROID_PRODUCT_OUT/system/lib/modules /system/lib/modules
+fi
+
+if [ -n "$FLASH_KERNEL" ]; then
+    echo "Flashing Android kernel image..."
+    flashimage $ANDROID_PRODUCT_OUT/boot.img /dev/block/by-name/android_boot
+fi
+
+if [ -n "$FLASH_RECOVERY" ]; then
+    echo "Flashing recovery kernel image..."
+    flashimage $ANDROID_PRODUCT_OUT/recovery.img /dev/block/by-name/android_recovery
+fi
+
+if [ -n "$FLASH_FASTBOOT" ]; then
+    echo "Flashing Fastboot kernel image..."
+    flashimage $ANDROID_PRODUCT_OUT/fastboot.img /dev/block/by-name/android_fastboot
+fi
+
+if [ -z "$NO_REBOOT" ]; then
+    echo "Rebooting device..."
+    timeout 4 adb reboot || true
+fi
+
+exit 0
-- 
1.7.4.1

