From 94f2fa923416ff9ec3edcd0606ce68c4ee458eb2 Mon Sep 17 00:00:00 2001
From: Daniel Leung <daniel.leung@intel.com>
Date: Wed, 18 Sep 2013 14:41:18 -0700
Subject: Add mmap64()

This adds mmap64() to bionic so that it is possible to have
large offset passed to kernel. However, the syscall mechanism
only passes 32-bit number to kernel. So effectively, the
largest offset that can be passed is about 43 bits (since
offset is signed, and the number passed to kernel is number
of pages (page size == 4K => 12 bits)).

Upstream change:
https://android-review.googlesource.com/#/c/65726/

Category: Device Enablement
Domain: AOSP-bionic
Source: Internal
Upstream-candidate: Yes
Change-Id: Ib54f4e9b54acb6ef8b0324f3b89c9bc810b07281
Signed-off-by: Andrew Boie <andrew.p.boie@intel.com>
Depends-Change-Id: I63692629d3a62b7aee21202b67241904b1cc9789
Depends-Change-Id: Idb0c3d3bb98f22ea7d78043b786e931613377b02
---
 libc/bionic/mmap.cpp    |   18 ++++++++++++++++++
 libc/include/sys/mman.h |    1 +
 2 files changed, 19 insertions(+), 0 deletions(-)

diff --git a/libc/bionic/mmap.cpp b/libc/bionic/mmap.cpp
index febc459..e0caea9 100644
--- a/libc/bionic/mmap.cpp
+++ b/libc/bionic/mmap.cpp
@@ -53,3 +53,21 @@ void* mmap(void* addr, size_t size, int prot, int flags, int fd, off_t offset) {
 
   return result;
 }
+
+void* mmap64(void* addr, size_t size, int prot, int flags, int fd, off64_t offset) {
+  if (offset & ((1UL << MMAP2_SHIFT)-1)) {
+    errno = EINVAL;
+    return MAP_FAILED;
+  }
+
+  uint64_t unsigned_offset = static_cast<uint64_t>(offset); // To avoid sign extension.
+  void* result = __mmap2(addr, size, prot, flags, fd, unsigned_offset >> MMAP2_SHIFT);
+
+  if (result != MAP_FAILED && (flags & (MAP_PRIVATE | MAP_ANONYMOUS)) != 0) {
+    ErrnoRestorer errno_restorer;
+    madvise(result, size, MADV_MERGEABLE);
+  }
+
+  return result;
+}
+
diff --git a/libc/include/sys/mman.h b/libc/include/sys/mman.h
index 7a32974..7c5f8d7 100644
--- a/libc/include/sys/mman.h
+++ b/libc/include/sys/mman.h
@@ -45,6 +45,7 @@ __BEGIN_DECLS
 #define MREMAP_FIXED    2
 
 extern void*  mmap(void *, size_t, int, int, int, off_t);
+extern void*  mmap64(void *, size_t, int, int, int, off64_t);
 extern int    munmap(void *, size_t);
 extern int    msync(const void *, size_t, int);
 extern int    mprotect(const void *, size_t, int);
-- 
1.7.4.1

