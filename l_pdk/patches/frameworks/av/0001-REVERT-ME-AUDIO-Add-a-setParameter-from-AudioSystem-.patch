From 20b819c08b37a76f7ebd8584e47f13936cdb1619 Mon Sep 17 00:00:00 2001
From: Francois Gaffie <francois.gaffie@intel.com>
Date: Mon, 8 Apr 2013 16:30:34 +0200
Subject: [PATCH] [PATCH 1/2] [REVERT ME][AUDIO] Add a setParameter from
 AudioSystem to the Policy

BZ: 217971

Orig-Bug: 163953

Some services uses setParameter of AudioSystem to inform
of platform changes. This platform changes cannot be sent to the
policy. FM requires for example the policy to be aware of the
requested output device and must inform the policy.

This patch add a setParameter link from AudioSystem to the policy
to handle generic setParameter call in the policy if needed.

Change-Id: Id60d9d30df40e6fde8d9adea6e0e357c884011bc
Category: device enablement
Domain: AudioComms-Common
Origin: internal
Upstream-Candidate: yes
Signed-off-by: Francois Gaffie <francois.gaffie@intel.com>
---
 include/media/IAudioPolicyService.h         |  2 ++
 media/libmedia/AudioSystem.cpp              |  7 +++++++
 media/libmedia/IAudioPolicyService.cpp      | 22 +++++++++++++++++++++-
 services/audiopolicy/AudioPolicyService.cpp |  8 ++++++++
 services/audiopolicy/AudioPolicyService.h   |  1 +
 5 files changed, 39 insertions(+), 1 deletion(-)

diff --git a/include/media/IAudioPolicyService.h b/include/media/IAudioPolicyService.h
index c251439..4602cac 100644
--- a/include/media/IAudioPolicyService.h
+++ b/include/media/IAudioPolicyService.h
@@ -142,6 +142,8 @@ public:
                                            audio_devices_t *device) = 0;
 
     virtual status_t releaseSoundTriggerSession(audio_session_t session) = 0;
+
+    virtual status_t setParameters(const String8& keyValuePairs) = 0;
 };
 
 
diff --git a/media/libmedia/AudioSystem.cpp b/media/libmedia/AudioSystem.cpp
index 3486d21..1c467ee 100644
--- a/media/libmedia/AudioSystem.cpp
+++ b/media/libmedia/AudioSystem.cpp
@@ -180,6 +180,13 @@ status_t AudioSystem::setMode(audio_mode_t mode)
 
 status_t AudioSystem::setParameters(audio_io_handle_t ioHandle, const String8& keyValuePairs)
 {
+    if (ioHandle == 0) {
+        const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
+        if(aps == 0) {
+            return PERMISSION_DENIED;
+        }
+        aps->setParameters(keyValuePairs);
+    }
     const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
     if (af == 0) return PERMISSION_DENIED;
     return af->setParameters(ioHandle, keyValuePairs);
diff --git a/media/libmedia/IAudioPolicyService.cpp b/media/libmedia/IAudioPolicyService.cpp
index b57f747..60999a6 100644
--- a/media/libmedia/IAudioPolicyService.cpp
+++ b/media/libmedia/IAudioPolicyService.cpp
@@ -27,6 +27,8 @@
 
 #include <system/audio.h>
 
+#include <utils/String8.h>
+
 namespace android {
 
 enum {
@@ -67,7 +69,8 @@ enum {
     REGISTER_CLIENT,
     GET_OUTPUT_FOR_ATTR,
     ACQUIRE_SOUNDTRIGGER_SESSION,
-    RELEASE_SOUNDTRIGGER_SESSION
+    RELEASE_SOUNDTRIGGER_SESSION,
+    SET_PARAMETERS
 };
 
 class BpAudioPolicyService : public BpInterface<IAudioPolicyService>
@@ -574,6 +577,7 @@ public:
         remote()->transact(REGISTER_CLIENT, data, &reply);
     }
 
+
     virtual status_t acquireSoundTriggerSession(audio_session_t *session,
                                             audio_io_handle_t *ioHandle,
                                             audio_devices_t *device)
@@ -607,6 +611,15 @@ public:
         }
         return (status_t)reply.readInt32();
     }
+
+    virtual status_t setParameters(const String8& keyValuePairs)
+    {
+        Parcel data, reply;
+        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
+        data.writeString8(keyValuePairs);
+        remote()->transact(SET_PARAMETERS, data, &reply);
+        return static_cast <status_t> (reply.readInt32());
+    }
 };
 
 IMPLEMENT_META_INTERFACE(AudioPolicyService, "android.media.IAudioPolicyService");
@@ -932,6 +945,13 @@ status_t BnAudioPolicyService::onTransact(
             return NO_ERROR;
         }
 
+        case SET_PARAMETERS: {
+            CHECK_INTERFACE(IAudioPolicyService, data, reply);
+            String8 keyValuePairs(data.readString8());
+            reply->writeInt32(static_cast <uint32_t>(setParameters(keyValuePairs)));
+            return NO_ERROR;
+        }
+
         case LIST_AUDIO_PORTS: {
             CHECK_INTERFACE(IAudioPolicyService, data, reply);
             audio_port_role_t role = (audio_port_role_t)data.readInt32();
diff --git a/services/audiopolicy/AudioPolicyService.cpp b/services/audiopolicy/AudioPolicyService.cpp
index 7f14960..da016d1 100644
--- a/services/audiopolicy/AudioPolicyService.cpp
+++ b/services/audiopolicy/AudioPolicyService.cpp
@@ -913,6 +913,14 @@ int AudioPolicyService::setVoiceVolume(float volume, int delayMs)
     return (int)mAudioCommandThread->voiceVolumeCommand(volume, delayMs);
 }
 
+status_t AudioPolicyService::setParameters(const String8& keyValuePairs)
+{
+    if (mpAudioPolicy == NULL) {
+        return NO_INIT;
+    }
+    return mpAudioPolicy->set_parameters(mpAudioPolicy, keyValuePairs);
+}
+
 extern "C" {
 audio_module_handle_t aps_load_hw_module(void *service __unused,
                                              const char *name);
diff --git a/services/audiopolicy/AudioPolicyService.h b/services/audiopolicy/AudioPolicyService.h
index 0044e7a..7aba0be 100644
--- a/services/audiopolicy/AudioPolicyService.h
+++ b/services/audiopolicy/AudioPolicyService.h
@@ -151,6 +151,7 @@ public:
     virtual status_t stopTone();
     virtual status_t setVoiceVolume(float volume, int delayMs = 0);
     virtual bool isOffloadSupported(const audio_offload_info_t &config);
+    virtual status_t setParameters(const String8 &keyValuePairs);
 
     virtual status_t listAudioPorts(audio_port_role_t role,
                                     audio_port_type_t type,
-- 
2.0.0

