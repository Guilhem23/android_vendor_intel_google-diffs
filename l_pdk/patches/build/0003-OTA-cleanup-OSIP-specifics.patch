From dd0a220723c3fbc48d8b75c24c2b70736da9518e Mon Sep 17 00:00:00 2001
From: Guillaume Betous <guillaumex.betous@intel.com>
Date: Thu, 25 Sep 2014 13:17:48 +0200
Subject: [PATCH] [PATCH] OTA cleanup : OSIP specifics

- Declare OSIP as a new partition type
- Standard boot.img update is not possible for OSIP partitions
We are simply removing it on AOSP handling, and let the board handle
it in its own releasetool.py

Change-Id: I7bb93d39cb2a18c7b2bd645cfeaa0859bb078b84
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-6149
Signed-off-by: Guillaume Betous <guillaumex.betous@intel.com>
Category: feature differentiation
Domain: PUPDR-Recovery
Origin: internal
Upstream-Candidate: no, proprietary
---
 tools/releasetools/common.py             |    2 +-
 tools/releasetools/edify_generator.py    |    4 +++
 tools/releasetools/ota_from_target_files |   43 ++++++++++++++++++------------
 3 files changed, 31 insertions(+), 18 deletions(-)

diff --git a/tools/releasetools/common.py b/tools/releasetools/common.py
index 815c76c..02dce2b 100644
--- a/tools/releasetools/common.py
+++ b/tools/releasetools/common.py
@@ -1096,7 +1096,7 @@ DataImage = blockimgdiff.DataImage
 # map recovery.fstab's fs_types to mount/format "partition types"
 PARTITION_TYPES = { "yaffs2": "MTD", "mtd": "MTD",
                     "ext4": "EMMC", "emmc": "EMMC",
-                    "f2fs": "EMMC" }
+                    "f2fs": "EMMC", "osip" : "OSIP" }
 
 def GetTypeAndDevice(mount_point, info):
   fstab = info["fstab"]
diff --git a/tools/releasetools/edify_generator.py b/tools/releasetools/edify_generator.py
index e4b9252..ae78c7d 100644
--- a/tools/releasetools/edify_generator.py
+++ b/tools/releasetools/edify_generator.py
@@ -269,6 +269,10 @@ class EdifyGenerator(object):
         self.script.append(
             'write_raw_image(package_extract_file("%(fn)s"), "%(device)s");'
             % args)
+      elif partition_type == "OSIP":
+        self.script.append(
+            'write_osip_image(package_extract_file("%(fn)s"), "%(device)s");'
+            % args)
       elif partition_type == "EMMC":
         if mapfn:
           args["map"] = mapfn
diff --git a/tools/releasetools/ota_from_target_files b/tools/releasetools/ota_from_target_files
index 5cf9873..4055160 100755
--- a/tools/releasetools/ota_from_target_files
+++ b/tools/releasetools/ota_from_target_files
@@ -1158,20 +1158,22 @@ else if get_stage("%(bcb_dev)s") != "3/3" then
     so_far += vendor_diff.EmitVerification(script)
 
   if updating_boot:
-    d = common.Difference(target_boot, source_boot)
-    _, _, d = d.ComputePatch()
-    print "boot      target: %d  source: %d  diff: %d" % (
-        target_boot.size, source_boot.size, len(d))
-
-    common.ZipWriteStr(output_zip, "patch/boot.img.p", d)
-
+    # Update is not performed this way on OSIP based boards
+    # It is provided by board dedicated IncrementalOTA_InstallEnd() function
     boot_type, boot_device = common.GetTypeAndDevice("/boot", OPTIONS.info_dict)
+    if boot_type != "OSIP":
+      d = common.Difference(target_boot, source_boot)
+      _, _, d = d.ComputePatch()
+      print "boot      target: %d  source: %d  diff: %d" % (
+          target_boot.size, source_boot.size, len(d))
+
+      common.ZipWriteStr(output_zip, "patch/boot.img.p", d)
 
-    script.PatchCheck("%s:%s:%d:%s:%d:%s" %
-                      (boot_type, boot_device,
-                       source_boot.size, source_boot.sha1,
-                       target_boot.size, target_boot.sha1))
-    so_far += source_boot.size
+      script.PatchCheck("%s:%s:%d:%s:%d:%s" %
+                        (boot_type, boot_device,
+                         source_boot.size, source_boot.sha1,
+                         target_boot.size, target_boot.sha1))
+      so_far += source_boot.size
 
   size = []
   if system_diff.patch_list: size.append(system_diff.largest_source_size)
@@ -1222,17 +1224,24 @@ else
       # Produce the boot image by applying a patch to the current
       # contents of the boot partition, and write it back to the
       # partition.
-      script.Print("Patching boot image...")
-      script.ApplyPatch("%s:%s:%d:%s:%d:%s"
+
+      # Update is not performed this way on OSIP based boards
+      # It is provided by board dedicated IncrementalOTA_InstallEnd() function
+      if boot_type != "OSIP":
+
+        script.Print("Patching boot image...")
+        script.ApplyPatch("%s:%s:%d:%s:%d:%s"
                         % (boot_type, boot_device,
                            source_boot.size, source_boot.sha1,
                            target_boot.size, target_boot.sha1),
                         "-",
                         target_boot.size, target_boot.sha1,
                         source_boot.sha1, "patch/boot.img.p")
-      so_far += target_boot.size
-      script.SetProgress(so_far / total_patch_size)
-      print "boot image changed; including."
+        so_far += target_boot.size
+        script.SetProgress(so_far / total_patch_size)
+        print "boot image changed; including."
+      else:
+        print "OSIP boot image detected. Not including it."
     else:
       print "boot image unchanged; skipping."
 
-- 
1.7.9.5

