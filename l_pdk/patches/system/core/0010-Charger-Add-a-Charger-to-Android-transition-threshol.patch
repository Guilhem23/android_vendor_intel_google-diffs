From d45589a43eb2d97c235a537def12ee851f78bfd4 Mon Sep 17 00:00:00 2001
From: rkannapp <r.kannappan@intel.com>
Date: Tue, 19 Aug 2014 11:36:01 +0530
Subject: Charger: Add a Charger to Android transition threshold

BZ: 217870

Existing code allows charger-mode to exit to Android even with 0% battery.
This might lead to more battery discharge while booting to Android,
especially if only USB-charger is connected, and thus certain
features/components not functioning as expected in Android.

This patch adds a configurable parameter to improve the user experience
by preventing the charger exit till battery capacity is good enough to
boot Android

Change-Id: If0ca8767d4399f0dceb31087bc00fcb5d7853e92
Category: aosp improvement
Domain: AOSP-Framework-CoreService
Origin: internal
Upstream-Candidate: yes
Signed-off-by: Pavan Kumar S <pavan.kumar.s@intel.com>
Signed-off-by: Jenny TC <jenny.tc@intel.com>
Signed-off-by: rkannapp <r.kannappan@intel.com>
---
 healthd/healthd_mode_charger.cpp |   20 ++++++++++++++++++--
 1 file changed, 18 insertions(+), 2 deletions(-)

diff --git a/healthd/healthd_mode_charger.cpp b/healthd/healthd_mode_charger.cpp
index d7fda7a..26b2308 100644
--- a/healthd/healthd_mode_charger.cpp
+++ b/healthd/healthd_mode_charger.cpp
@@ -70,6 +70,8 @@ char *locale;
 #define BATTERY_FULL_THRESH     95
 #define SCREEN_ON_BATTERY_THRESH 1
 
+#define BOOT_BATT_MIN_CAP_THRS   0
+
 #define LAST_KMSG_PATH          "/proc/last_kmsg"
 #define LAST_KMSG_PSTORE_PATH   "/sys/fs/pstore/console-ramoops"
 #define LAST_KMSG_MAX_SZ        (32 * 1024)
@@ -118,6 +120,7 @@ struct charger {
 
     struct animation *batt_anim;
     gr_surface surf_unknown;
+    int boot_min_cap;
 };
 
 static struct frame batt_anim_frames[] = {
@@ -530,8 +533,14 @@ static void process_key(struct charger *charger, int code, int64_t now)
                     LOGI("[%" PRId64 "] booting from charger mode\n", now);
                     property_set("sys.boot_from_charger_mode", "1");
                 } else {
-                    LOGI("[%" PRId64 "] rebooting\n", now);
-                    android_reboot(ANDROID_RB_RESTART, 0, 0);
+                    if (get_battery_capacity() >= charger->boot_min_cap) {
+                        LOGI("[%" PRId64 "] rebooting\n", now);
+                        android_reboot(ANDROID_RB_RESTART, 0, 0);
+                    } else {
+                        LOGI("[%" PRId64 "] ignore power-button press, "
+                             "battery level less than minimum boot "
+                             "capacity (%d)\n", now, charger->boot_min_cap);
+                    }
                 }
             } else {
                 /* if the key is pressed but timeout hasn't expired,
@@ -675,6 +684,7 @@ void healthd_mode_charger_init(struct healthd_config* /*config*/)
     struct charger *charger = &charger_state;
     int i;
     int epollfd;
+    char value[PROPERTY_VALUE_MAX], default_value[PROPERTY_VALUE_MAX];
 
     dump_last_kmsg();
 
@@ -714,6 +724,12 @@ void healthd_mode_charger_init(struct healthd_config* /*config*/)
 
     ev_sync_key_state(set_key_callback, charger);
 
+    snprintf(default_value, PROPERTY_VALUE_MAX, "%d", BOOT_BATT_MIN_CAP_THRS);
+    property_get("ro.boot.min.cap", value, default_value);
+    sscanf(value, "%d", &charger->boot_min_cap);
+
+    LOGI("Minimum capacity for Android-boot %d\n", charger->boot_min_cap);
+
     charger->next_screen_transition = -1;
     charger->next_key_check = -1;
     charger->next_pwr_check = -1;
-- 
1.7.9.5

