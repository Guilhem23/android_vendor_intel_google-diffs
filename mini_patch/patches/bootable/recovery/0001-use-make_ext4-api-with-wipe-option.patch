From 020c6276f2643c89be318c81b0e35c1700699e7c Mon Sep 17 00:00:00 2001
From: Marie-Cecile Afantenos <marie.cecile.afantenos@intel.com>
Date: Tue, 6 Aug 2013 18:59:47 +0200
Subject: use make_ext4 api with wipe option

BZ: 82879

Category: aosp improvement
Domain: PUPDR-Recovery
Origin: internal
Upstream-Candidate: no, need rework

Change-Id: I5d68df05dee78aa421e7669abb4784886e5670ed
Signed-off-by: Marie-Cecile Afantenos <marie.cecile.afantenos@intel.com>
Reviewed-on: http://android.intel.com:8080/123955
Reviewed-by: Auger, Florent <florent.auger@intel.com>
Reviewed-by: Dong, Chuanxiao <chuanxiao.dong@intel.com>
Reviewed-by: Tinelli, Vincent <vincent.tinelli@intel.com>
Tested-by: Lumbierres, PhilippeX <philippex.lumbierres@intel.com>
Reviewed-by: cactus <cactus@intel.com>
Tested-by: cactus <cactus@intel.com>
---
 roots.cpp         |   20 ++++++++++++++++++--
 updater/install.c |   13 +++++++++++--
 2 files changed, 29 insertions(+), 4 deletions(-)

diff --git a/roots.cpp b/roots.cpp
index 113dba1..494d826 100644
--- a/roots.cpp
+++ b/roots.cpp
@@ -28,11 +28,19 @@
 #include "roots.h"
 #include "common.h"
 #include "make_ext4fs.h"
-
+#include "cutils/properties.h"
 static struct fstab *fstab = NULL;
 
 extern struct selabel_handle *sehandle;
 
+/* Flag to set which wipe feature will be use while erasing
+ * To be used carefully especially for production & care
+ * Should only be used during power-on or engineering
+ * Has to be used on mechanical hard-drives until we query disk's capabilities
+ * */
+int g_wipe_flag = WIPE_FALLBACK;
+
+
 void load_volume_table()
 {
     int i;
@@ -148,6 +156,8 @@ int ensure_path_unmounted(const char* path) {
 
 int format_volume(const char* volume) {
     Volume* v = volume_for_path(volume);
+    char value[PROPERTY_VALUE_MAX+1];
+
     if (v == NULL) {
         LOGE("unknown volume \"%s\"\n", volume);
         return -1;
@@ -191,7 +201,13 @@ int format_volume(const char* volume) {
     }
 
     if (strcmp(v->fs_type, "ext4") == 0) {
-        int result = make_ext4fs(v->blk_device, v->length, volume, sehandle);
+        /* get the wipe flag for unsecure, secure, or no wipe */
+        int len = property_get("ro.g_wipe_flag", value, NULL);
+        if (len == 1) {
+            g_wipe_flag = atoi(value);
+        }
+
+        int result = make_ext4fs(v->blk_device, v->length, volume, sehandle, g_wipe_flag);
         if (result != 0) {
             LOGE("format_volume: make_extf4fs failed on %s\n", v->blk_device);
             return -1;
diff --git a/updater/install.c b/updater/install.c
index 9fb1b63..ea7b8b9 100644
--- a/updater/install.c
+++ b/updater/install.c
@@ -46,6 +46,7 @@
 
 #ifdef USE_EXT4
 #include "make_ext4fs.h"
+int g_wipe_flag = WIPE_FALLBACK;
 #endif
 
 // mount(fs_type, partition_type, location, mount_point)
@@ -211,7 +212,9 @@ Value* FormatFn(const char* name, State* state, int argc, Expr* argv[]) {
     char* location;
     char* fs_size;
     char* mount_point;
-
+#ifdef USE_EXT4
+    char value[PROPERTY_VALUE_MAX];
+#endif
     if (ReadArgs(state, argv, 5, &fs_type, &partition_type, &location, &fs_size, &mount_point) < 0) {
         return NULL;
     }
@@ -264,7 +267,13 @@ Value* FormatFn(const char* name, State* state, int argc, Expr* argv[]) {
         result = location;
 #ifdef USE_EXT4
     } else if (strcmp(fs_type, "ext4") == 0) {
-        int status = make_ext4fs(location, atoll(fs_size), mount_point, sehandle);
+        /* get the wipe flag for unsecure, secure, or no wipe */
+        int len = property_get("ro.g_wipe_flag", value, NULL);
+        if (len == 1) {
+            g_wipe_flag = atoi(value);
+        }
+
+        int status = make_ext4fs(location, atoll(fs_size), mount_point, sehandle, g_wipe_flag);
         if (status != 0) {
             printf("%s: make_ext4fs failed (%d) on %s",
                     name, status, location);
-- 
1.7.4.1

