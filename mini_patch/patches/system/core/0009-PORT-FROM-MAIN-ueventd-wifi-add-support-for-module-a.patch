From e72c3e6ddd6a5f2e721e01d27e8aa76cea921fc8 Mon Sep 17 00:00:00 2001
From: Quentin Casasnovas <quentinx.casasnovas@intel.com>
Date: Mon, 11 Mar 2013 15:40:53 +0100
Subject: [PORT FROM MAIN]ueventd/wifi: add support for module args

BZ: 97273

ueventd modprobes a module when it receives the uevent from the kernel, but
unfortunately there is no way to add specific module arguments at this time.

This adds support for kernel module arguments by specifying it in uevent.*.rc
files. The syntax is:

  mod:%mod_name %mod_args

where %mod_name is to be replaced by the name of the module, and %mod_args
by the arguments.

Category: device enablement
Domain: CWS.WIFI-Common
Origin: internal
Upstream-Candidate: yes

Change-Id: I51b7044a31ee730edab837329408f33f93e88d69
Orig-Change-Id: Icebf9f22b2c0f772d106f5e5c9d2bbf49e310e9d
Signed-off-by: Quentin Casasnovas <quentinx.casasnovas@intel.com>
Signed-off-by: Jeremie GARCIA <jeremie.garcia@intel.com>
---
 init/devices.c        |   75 ++++++++++++++++++++++++++++++++++++++++++++++--
 init/devices.h        |    1 +
 init/ueventd.c        |   15 ++++++++++
 init/ueventd_parser.c |    5 ++-
 init/ueventd_parser.h |    1 +
 5 files changed, 92 insertions(+), 5 deletions(-)

diff --git a/init/devices.c b/init/devices.c
index 29995a0..3cfeade 100644
--- a/init/devices.c
+++ b/init/devices.c
@@ -73,6 +73,11 @@ struct uevent {
     int minor;
 };
 
+struct mod_args_ {
+    char *name;
+    char *args;
+};
+
 struct perms_ {
     char *name;
     char *attr;
@@ -82,6 +87,11 @@ struct perms_ {
     unsigned short wildcard;
 };
 
+struct mod_arg_node {
+    struct mod_args_ mod_args;
+    struct listnode plist;
+};
+
 struct perm_node {
     struct perms_ dp;
     struct listnode plist;
@@ -94,6 +104,8 @@ struct platform_node {
     struct listnode list;
 };
 
+static list_declare(lmodalias);
+static list_declare(lmod_args);
 static list_declare(sys_perms);
 static list_declare(dev_perms);
 static list_declare(platform_names);
@@ -129,6 +141,35 @@ int add_dev_perms(const char *name, const char *attr,
     return 0;
 }
 
+int add_mod_args(int nargs, const char *mod_name, char *args[])
+{
+    struct mod_arg_node *node = calloc(1, sizeof(*node));
+    char tmp_mod_args[1024];
+    int i = 0;
+
+    if (!node)
+        return -ENOMEM;
+
+    node->mod_args.name = strdup(mod_name);
+    if (!node->mod_args.name)
+        return -ENOMEM;
+
+    tmp_mod_args[0] = 0;
+    for ( i = 1; i < nargs; ++i) {
+        strlcat(tmp_mod_args, args[i], sizeof(tmp_mod_args));
+        strlcat(tmp_mod_args, " ", sizeof(tmp_mod_args));
+    }
+
+    node->mod_args.args = strdup(tmp_mod_args);
+
+    if (!node->mod_args.args)
+            return -ENOMEM;
+
+    list_add_tail(&lmod_args, &node->plist);
+
+    return 0;
+}
+
 void fixup_sys_perms(const char *upath)
 {
     char buf[512];
@@ -198,6 +239,33 @@ static mode_t get_device_perm(const char *path, unsigned *uid, unsigned *gid)
     return 0600;
 }
 
+const char *get_mod_args(const char *mod_name)
+{
+    struct listnode *node = NULL;
+    struct mod_arg_node *mod_arg_node = NULL;
+    struct mod_args_ *mod_args = NULL;
+    char * real_mod_name = NULL;
+
+    if (list_empty(&lmodalias)) {
+        parse_alias_to_list("/lib/modules/modules.alias", &lmodalias);
+    }
+
+    if (!get_module_name_from_alias(mod_name, &real_mod_name, &lmodalias))
+        mod_name = real_mod_name;
+
+    list_for_each(node, &lmod_args) {
+        mod_arg_node = node_to_item(node, struct mod_arg_node, plist);
+        mod_args = &mod_arg_node->mod_args;
+
+
+        if (!strcmp(mod_name, mod_args->name)) {
+            return mod_args->args;
+        }
+    }
+
+    return "";
+}
+
 static void make_device(const char *path,
                         const char *upath,
                         int block, int major, int minor)
@@ -669,7 +737,7 @@ static void handle_deferred_module_loading()
 
         if (alias && alias->pattern) {
             INFO("deferred loading of module for %s\n", alias->pattern);
-            ret = insmod_by_dep(alias->pattern, "", NULL, 1, NULL,
+            ret = insmod_by_dep(alias->pattern, get_mod_args(alias->pattern), NULL, 1, NULL,
                     MODULES_BLKLST);
             /* if it looks like file system where these files are is not
              * ready, keep the module in defer list for retry. */
@@ -684,7 +752,7 @@ static void handle_deferred_module_loading()
 
 int module_probe(const char *modalias)
 {
-    return insmod_by_dep(modalias, "", NULL, 1, NULL, NULL);    /* not to reuse ueventd's black list. */
+    return insmod_by_dep(modalias, get_mod_args(modalias), NULL, 1, NULL, NULL);    /* not to reuse ueventd's black list. */
 }
 
 static void handle_module_loading(const char *modalias)
@@ -693,12 +761,11 @@ static void handle_module_loading(const char *modalias)
     struct module_alias_node *node;
     int ret;
 
-
     handle_deferred_module_loading();
 
     if (!modalias) return;
 
-    ret = insmod_by_dep(modalias, "", NULL, 1, NULL, MODULES_BLKLST);
+    ret = insmod_by_dep(modalias, get_mod_args(modalias), NULL, 1, NULL, MODULES_BLKLST);
 
     if (ret & (MOD_BAD_DEP | MOD_INVALID_CALLER_BLACK | MOD_BAD_ALIAS)) {
         node = calloc(1, sizeof(*node));
diff --git a/init/devices.h b/init/devices.h
index 96b2ef4..0860dcf 100644
--- a/init/devices.h
+++ b/init/devices.h
@@ -25,6 +25,7 @@ extern int module_probe(const char *alias);
 extern int add_dev_perms(const char *name, const char *attr,
                          mode_t perm, unsigned int uid,
                          unsigned int gid, unsigned short wildcard);
+extern int add_mod_args(int nargs, const char *mod_name, char *args[]);
 int get_device_fd();
 void coldboot(const char *path);
 #endif	/* _INIT_DEVICES_H */
diff --git a/init/ueventd.c b/init/ueventd.c
index 61fa324..f4a0004 100644
--- a/init/ueventd.c
+++ b/init/ueventd.c
@@ -203,3 +203,18 @@ void set_device_permission(int nargs, char **args)
     add_dev_perms(name, attr, perm, uid, gid, wildcard);
     free(tmp);
 }
+
+void set_module_args(int nargs, char **args)
+{
+    char *mod_name;
+
+    if (nargs == 0)
+        return;
+
+    if (args[0][0] == '#')
+        return;
+
+    mod_name = args[0] + 4;
+
+    add_mod_args(nargs, mod_name, args);
+}
diff --git a/init/ueventd_parser.c b/init/ueventd_parser.c
index 3e60df5..fe0b922 100644
--- a/init/ueventd_parser.c
+++ b/init/ueventd_parser.c
@@ -71,5 +71,8 @@ int ueventd_parse_config_file(const char *fn)
 
 static void parse_line_device(struct parse_state* state, int nargs, char **args)
 {
-    set_device_permission(nargs, args);
+    if (args && args[0] && !strncmp("mod:", args[0], 4))
+        set_module_args(nargs, args);
+    else
+        set_device_permission(nargs, args);
 }
diff --git a/init/ueventd_parser.h b/init/ueventd_parser.h
index 3684285..4335a61 100644
--- a/init/ueventd_parser.h
+++ b/init/ueventd_parser.h
@@ -21,5 +21,6 @@
 
 int ueventd_parse_config_file(const char *fn);
 void set_device_permission(int nargs, char **args);
+void set_module_args(int nargs, char **args);
 
 #endif
-- 
1.7.4.1

